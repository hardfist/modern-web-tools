var Module = (function () {
  var _scriptDir =
    typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return function (Module) {
    Module = Module || {};

    // The Module object: Our interface to the outside world. We import
    // and export values on it. There are various ways Module can be used:
    // 1. Not defined. We create it here
    // 2. A function parameter, function(Module) { ..generated code.. }
    // 3. pre-run appended it, var Module = {}; ..generated code..
    // 4. External script tag defines var Module.
    // We need to check if Module already exists (e.g. case 3 above).
    // Substitution will be replaced with actual code on later stage of the build,
    // this way Closure Compiler will not mangle it (e.g. case 4. above).
    // Note that if you want to run closure, and also to use Module
    // after the generated code, you will need to define   var Module = {};
    // before the code. Then that object will be used in the code, and you
    // can continue to use Module afterwards as well.
    var Module = typeof Module !== 'undefined' ? Module : {};

    // Set up the promise that indicates the Module is initialized
    var readyPromiseResolve, readyPromiseReject;
    Module['ready'] = new Promise(function (resolve, reject) {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_end')) {
      Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_free')) {
      Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_init')) {
      Object.defineProperty(Module['ready'], '_emscripten_stack_init', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_emscripten_stack_init', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
      Object.defineProperty(Module['ready'], '_stackSave', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_stackSave', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
      Object.defineProperty(Module['ready'], '_stackRestore', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_stackRestore', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
      Object.defineProperty(Module['ready'], '_stackAlloc', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_stackAlloc', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
      Object.defineProperty(Module['ready'], '___wasm_call_ctors', {
        configurable: true,
        get: function () {
          abort(
            'You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '___wasm_call_ctors', {
        configurable: true,
        set: function () {
          abort(
            'You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fflush')) {
      Object.defineProperty(Module['ready'], '_fflush', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_fflush', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
      Object.defineProperty(Module['ready'], '___errno_location', {
        configurable: true,
        get: function () {
          abort(
            'You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '___errno_location', {
        configurable: true,
        set: function () {
          abort(
            'You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
      Object.defineProperty(Module['ready'], '_malloc', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_malloc', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
      Object.defineProperty(Module['ready'], '_free', {
        configurable: true,
        get: function () {
          abort(
            'You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], '_free', {
        configurable: true,
        set: function () {
          abort(
            'You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
      Object.defineProperty(Module['ready'], 'onRuntimeInitialized', {
        configurable: true,
        get: function () {
          abort(
            'You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
      Object.defineProperty(Module['ready'], 'onRuntimeInitialized', {
        configurable: true,
        set: function () {
          abort(
            'You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'
          );
        }
      });
    }

    // --pre-jses are emitted after the Module integration code, so that they can
    // refer to Module (if they choose; they can also define Module)
    // {{PRE_JSES}}

    // Sometimes an existing Module object exists with properties
    // meant to overwrite the default module functionality. Here
    // we collect those properties and reapply _after_ we configure
    // the current environment's defaults to avoid having to be so
    // defensive during initialization.
    var moduleOverrides = {};
    var key;
    for (key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }

    var arguments_ = [];
    var thisProgram = './this.program';
    var quit_ = function (status, toThrow) {
      throw toThrow;
    };

    // Determine the runtime environment we are in. You can customize this by
    // setting the ENVIRONMENT setting at compile time (see settings.js).

    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    ENVIRONMENT_IS_WEB = typeof window === 'object';
    ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
    // N.b. Electron.js environment is simultaneously a NODE-environment, but
    // also a web environment.
    ENVIRONMENT_IS_NODE =
      typeof process === 'object' &&
      typeof process.versions === 'object' &&
      typeof process.versions.node === 'string';
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

    if (Module['ENVIRONMENT']) {
      throw new Error(
        'Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)'
      );
    }

    // `/` should be present at the end if `scriptDirectory` is not empty
    var scriptDirectory = '';
    function locateFile(path) {
      if (Module['locateFile']) {
        return Module['locateFile'](path, scriptDirectory);
      }
      return scriptDirectory + path;
    }

    // Hooks that are implemented differently in different runtime environments.
    var read_, readAsync, readBinary, setWindowTitle;

    var nodeFS;
    var nodePath;

    if (ENVIRONMENT_IS_NODE) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = require('path').dirname(scriptDirectory) + '/';
      } else {
        scriptDirectory = __dirname + '/';
      }

      // include: node_shell_read.js

      read_ = function shell_read(filename, binary) {
        var ret = tryParseAsDataURI(filename);
        if (ret) {
          return binary ? ret : ret.toString();
        }
        if (!nodeFS) nodeFS = require('fs');
        if (!nodePath) nodePath = require('path');
        filename = nodePath['normalize'](filename);
        return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
      };

      readBinary = function readBinary(filename) {
        var ret = read_(filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
      };

      // end include: node_shell_read.js
      if (process['argv'].length > 1) {
        thisProgram = process['argv'][1].replace(/\\/g, '/');
      }

      arguments_ = process['argv'].slice(2);

      // MODULARIZE will export the module in the proper place outside, we don't need to export here

      process['on']('uncaughtException', function (ex) {
        // suppress ExitStatus exceptions from showing an error
        if (!(ex instanceof ExitStatus)) {
          throw ex;
        }
      });

      process['on']('unhandledRejection', abort);

      quit_ = function (status) {
        process['exit'](status);
      };

      Module['inspect'] = function () {
        return '[Emscripten Module object]';
      };
    } else if (ENVIRONMENT_IS_SHELL) {
      if (typeof read != 'undefined') {
        read_ = function shell_read(f) {
          var data = tryParseAsDataURI(f);
          if (data) {
            return intArrayToString(data);
          }
          return read(f);
        };
      }

      readBinary = function readBinary(f) {
        var data;
        data = tryParseAsDataURI(f);
        if (data) {
          return data;
        }
        if (typeof readbuffer === 'function') {
          return new Uint8Array(readbuffer(f));
        }
        data = read(f, 'binary');
        assert(typeof data === 'object');
        return data;
      };

      if (typeof scriptArgs != 'undefined') {
        arguments_ = scriptArgs;
      } else if (typeof arguments != 'undefined') {
        arguments_ = arguments;
      }

      if (typeof quit === 'function') {
        quit_ = function (status) {
          quit(status);
        };
      }

      if (typeof print !== 'undefined') {
        // Prefer to use print/printErr where they exist, as they usually work better.
        if (typeof console === 'undefined') console = /** @type{!Console} */ ({});
        console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
        console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !==
        'undefined'
          ? printErr
          : print);
      }
    }

    // Note that this includes Node.js workers when relevant (pthreads is enabled).
    // Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
    // ENVIRONMENT_IS_NODE.
    else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        // Check worker, not web, since window could be polyfilled
        scriptDirectory = self.location.href;
      } else if (typeof document !== 'undefined' && document.currentScript) {
        // web
        scriptDirectory = document.currentScript.src;
      }
      // When MODULARIZE, this JS may be executed later, after document.currentScript
      // is gone, so we saved it, and we use it here instead of any other info.
      if (_scriptDir) {
        scriptDirectory = _scriptDir;
      }
      // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
      // otherwise, slice off the final part of the url to find the script directory.
      // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
      // and scriptDirectory will correctly be replaced with an empty string.
      if (scriptDirectory.indexOf('blob:') !== 0) {
        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/') + 1);
      } else {
        scriptDirectory = '';
      }

      // Differentiate the Web Worker from the Node Worker case, as reading must
      // be done differently.
      {
        // include: web_or_worker_shell_read.js

        read_ = function (url) {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            xhr.send(null);
            return xhr.responseText;
          } catch (err) {
            var data = tryParseAsDataURI(url);
            if (data) {
              return intArrayToString(data);
            }
            throw err;
          }
        };

        if (ENVIRONMENT_IS_WORKER) {
          readBinary = function (url) {
            try {
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              xhr.responseType = 'arraybuffer';
              xhr.send(null);
              return new Uint8Array(/** @type{!ArrayBuffer} */ (xhr.response));
            } catch (err) {
              var data = tryParseAsDataURI(url);
              if (data) {
                return data;
              }
              throw err;
            }
          };
        }

        readAsync = function (url, onload, onerror) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, true);
          xhr.responseType = 'arraybuffer';
          xhr.onload = function () {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
              // file URLs can return 0
              onload(xhr.response);
              return;
            }
            var data = tryParseAsDataURI(url);
            if (data) {
              onload(data.buffer);
              return;
            }
            onerror();
          };
          xhr.onerror = onerror;
          xhr.send(null);
        };

        // end include: web_or_worker_shell_read.js
      }

      setWindowTitle = function (title) {
        document.title = title;
      };
    } else {
      throw new Error('environment detection error');
    }

    // Set up the out() and err() hooks, which are how we can print to stdout or
    // stderr, respectively.
    var out = Module['print'] || console.log.bind(console);
    var err = Module['printErr'] || console.warn.bind(console);

    // Merge back in the overrides
    for (key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    // Free the object hierarchy contained in the overrides, this lets the GC
    // reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
    moduleOverrides = null;

    // Emit code to handle expected values on the Module object. This applies Module.x
    // to the proper local x. This has two benefits: first, we only emit it if it is
    // expected to arrive, and second, by using a local everywhere else that can be
    // minified.

    if (Module['arguments']) arguments_ = Module['arguments'];
    if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
      Object.defineProperty(Module, 'arguments', {
        configurable: true,
        get: function () {
          abort(
            'Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    if (Module['thisProgram']) thisProgram = Module['thisProgram'];
    if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
      Object.defineProperty(Module, 'thisProgram', {
        configurable: true,
        get: function () {
          abort(
            'Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    if (Module['quit']) quit_ = Module['quit'];
    if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
      Object.defineProperty(Module, 'quit', {
        configurable: true,
        get: function () {
          abort(
            'Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    // perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
    // Assertions on removed incoming Module JS APIs.
    assert(
      typeof Module['memoryInitializerPrefixURL'] === 'undefined',
      'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead'
    );
    assert(
      typeof Module['pthreadMainPrefixURL'] === 'undefined',
      'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead'
    );
    assert(
      typeof Module['cdInitializerPrefixURL'] === 'undefined',
      'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead'
    );
    assert(
      typeof Module['filePackagePrefixURL'] === 'undefined',
      'Module.filePackagePrefixURL option was removed, use Module.locateFile instead'
    );
    assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
    assert(
      typeof Module['readAsync'] === 'undefined',
      'Module.readAsync option was removed (modify readAsync in JS)'
    );
    assert(
      typeof Module['readBinary'] === 'undefined',
      'Module.readBinary option was removed (modify readBinary in JS)'
    );
    assert(
      typeof Module['setWindowTitle'] === 'undefined',
      'Module.setWindowTitle option was removed (modify setWindowTitle in JS)'
    );
    assert(
      typeof Module['TOTAL_MEMORY'] === 'undefined',
      'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY'
    );

    if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
      Object.defineProperty(Module, 'read', {
        configurable: true,
        get: function () {
          abort(
            'Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
      Object.defineProperty(Module, 'readAsync', {
        configurable: true,
        get: function () {
          abort(
            'Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
      Object.defineProperty(Module, 'readBinary', {
        configurable: true,
        get: function () {
          abort(
            'Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
      Object.defineProperty(Module, 'setWindowTitle', {
        configurable: true,
        get: function () {
          abort(
            'Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }
    var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
    var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
    var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
    var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

    var STACK_ALIGN = 16;

    function alignMemory(size, factor) {
      if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
      return Math.ceil(size / factor) * factor;
    }

    function getNativeTypeSize(type) {
      switch (type) {
        case 'i1':
        case 'i8':
          return 1;
        case 'i16':
          return 2;
        case 'i32':
          return 4;
        case 'i64':
          return 8;
        case 'float':
          return 4;
        case 'double':
          return 8;
        default: {
          if (type[type.length - 1] === '*') {
            return 4; // A pointer
          } else if (type[0] === 'i') {
            var bits = Number(type.substr(1));
            assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
            return bits / 8;
          } else {
            return 0;
          }
        }
      }
    }

    function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    }

    // include: runtime_functions.js

    // Wraps a JS function as a wasm function with a given signature.
    function convertJsFunctionToWasm(func, sig) {
      return func;
    }

    var freeTableIndexes = [];

    // Weak map of functions in the table to their indexes, created on first use.
    var functionsInTableMap;

    function getEmptyTableSlot() {
      // Reuse a free index if there is one, otherwise grow.
      if (freeTableIndexes.length) {
        return freeTableIndexes.pop();
      }
      // Grow the table
      try {
        wasmTable.grow(1);
      } catch (err) {
        if (!(err instanceof RangeError)) {
          throw err;
        }
        throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
      }
      return wasmTable.length - 1;
    }

    // Add a wasm function to the table.
    function addFunctionWasm(func, sig) {
      // Check if the function is already in the table, to ensure each function
      // gets a unique index. First, create the map if this is the first use.
      if (!functionsInTableMap) {
        functionsInTableMap = new WeakMap();
        for (var i = 0; i < wasmTable.length; i++) {
          var item = wasmTable.get(i);
          // Ignore null values.
          if (item) {
            functionsInTableMap.set(item, i);
          }
        }
      }
      if (functionsInTableMap.has(func)) {
        return functionsInTableMap.get(func);
      }

      // It's not in the table, add it now.

      var ret = getEmptyTableSlot();

      // Set the new value.
      try {
        // Attempting to call this with JS function will cause of table.set() to fail
        wasmTable.set(ret, func);
      } catch (err) {
        if (!(err instanceof TypeError)) {
          throw err;
        }
        assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
        var wrapped = convertJsFunctionToWasm(func, sig);
        wasmTable.set(ret, wrapped);
      }

      functionsInTableMap.set(func, ret);

      return ret;
    }

    function removeFunction(index) {
      functionsInTableMap.delete(wasmTable.get(index));
      freeTableIndexes.push(index);
    }

    // 'sig' parameter is required for the llvm backend but only when func is not
    // already a WebAssembly function.
    function addFunction(func, sig) {
      assert(typeof func !== 'undefined');

      return addFunctionWasm(func, sig);
    }

    // end include: runtime_functions.js
    // include: runtime_debug.js

    // end include: runtime_debug.js
    function makeBigInt(low, high, unsigned) {
      return unsigned
        ? +(low >>> 0) + +(high >>> 0) * 4294967296.0
        : +(low >>> 0) + +(high | 0) * 4294967296.0;
    }

    var tempRet0 = 0;

    var setTempRet0 = function (value) {
      tempRet0 = value;
    };

    var getTempRet0 = function () {
      return tempRet0;
    };

    function getCompilerSetting(name) {
      throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
    }

    // === Preamble library stuff ===

    // Documentation for the public APIs defined in this file must be updated in:
    //    site/source/docs/api_reference/preamble.js.rst
    // A prebuilt local version of the documentation is available at:
    //    site/build/text/docs/api_reference/preamble.js.txt
    // You can also build docs locally as HTML or other formats in site/
    // An online HTML version (which may be of a different version of Emscripten)
    //    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

    var wasmBinary;
    if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
    if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
      Object.defineProperty(Module, 'wasmBinary', {
        configurable: true,
        get: function () {
          abort(
            'Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }
    var noExitRuntime = Module['noExitRuntime'] || true;
    if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
      Object.defineProperty(Module, 'noExitRuntime', {
        configurable: true,
        get: function () {
          abort(
            'Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    // include: wasm2js.js

    // wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
    // wasm2js code that way.

    // Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
    // mode, we can't use a "var" since it would prevent normal wasm from working.
    /** @suppress{duplicate, const} */
    var WebAssembly = {
      // Note that we do not use closure quoting (this['buffer'], etc.) on these
      // functions, as they are just meant for internal use. In other words, this is
      // not a fully general polyfill.
      Memory: function (opts) {
        this.buffer = new ArrayBuffer(opts['initial'] * 65536);
      },

      Module: function (binary) {
        // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
        // the main JS
      },

      Instance: function (module, info) {
        // TODO: use the module and info somehow - right now the wasm2js output is embedded in
        // the main JS
        // This will be replaced by the actual wasm2js code.
        this.exports = (function instantiate(asmLibraryArg) {
          function Table(ret) {
            ret.grow = function (by) {
              var old = this.length;
              this.length = this.length + by;
              return old;
            };
            ret.set = function (i, func) {
              this[i] = func;
            };
            ret.get = function (i) {
              return this[i];
            };
            return ret;
          }

          var bufferView;
          var base64ReverseLookup = new Uint8Array(123 /*'z'+1*/);
          for (var i = 25; i >= 0; --i) {
            base64ReverseLookup[48 + i] = 52 + i; // '0-9'
            base64ReverseLookup[65 + i] = i; // 'A-Z'
            base64ReverseLookup[97 + i] = 26 + i; // 'a-z'
          }
          base64ReverseLookup[43] = 62; // '+'
          base64ReverseLookup[47] = 63; // '/'
          /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
          function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
            var b1,
              b2,
              i = 0,
              j = offset,
              bLength = b64.length,
              end = offset + ((bLength * 3) >> 2) - (b64[bLength - 2] == '=') - (b64[bLength - 1] == '=');
            for (; i < bLength; i += 4) {
              b1 = base64ReverseLookup[b64.charCodeAt(i + 1)];
              b2 = base64ReverseLookup[b64.charCodeAt(i + 2)];
              uint8Array[j++] = (base64ReverseLookup[b64.charCodeAt(i)] << 2) | (b1 >> 4);
              if (j < end) uint8Array[j++] = (b1 << 4) | (b2 >> 2);
              if (j < end) uint8Array[j++] = (b2 << 6) | base64ReverseLookup[b64.charCodeAt(i + 3)];
            }
          }
          function initActiveSegments(imports) {
            base64DecodeToExistingUint8Array(
              bufferView,
              1024,
              ''
            );
            base64DecodeToExistingUint8Array(
              bufferView,
              16784,
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAEQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUBAABGAQAAqEwAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAEQBAAAAAAAAAAAAAAAAAAAAAAAARwEAAAAAAABGAQAAuEwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAEgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUBAABJAQAAyFAAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJhDAADQWlAA'
            );
            base64DecodeToExistingUint8Array(
              bufferView,
              17456,

            );
          }

          var scratchBuffer = new ArrayBuffer(16);
          var i32ScratchView = new Int32Array(scratchBuffer);
          var f32ScratchView = new Float32Array(scratchBuffer);
          var f64ScratchView = new Float64Array(scratchBuffer);

          function wasm2js_scratch_load_i32(index) {
            return i32ScratchView[index];
          }

          function wasm2js_scratch_store_i32(index, value) {
            i32ScratchView[index] = value;
          }

          function wasm2js_scratch_load_f64() {
            return f64ScratchView[0];
          }

          function wasm2js_scratch_store_f64(value) {
            f64ScratchView[0] = value;
          }

          function wasm2js_scratch_store_f32(value) {
            f32ScratchView[2] = value;
          }

          function wasm2js_scratch_load_f32() {
            return f32ScratchView[2];
          }

          function asmFunc(env) {
            var memory = env.memory;
            var buffer = memory.buffer;
            var HEAP8 = new Int8Array(buffer);
            var HEAP16 = new Int16Array(buffer);
            var HEAP32 = new Int32Array(buffer);
            var HEAPU8 = new Uint8Array(buffer);
            var HEAPU16 = new Uint16Array(buffer);
            var HEAPU32 = new Uint32Array(buffer);
            var HEAPF32 = new Float32Array(buffer);
            var HEAPF64 = new Float64Array(buffer);
            var Math_imul = Math.imul;
            var Math_fround = Math.fround;
            var Math_abs = Math.abs;
            var Math_clz32 = Math.clz32;
            var Math_min = Math.min;
            var Math_max = Math.max;
            var Math_floor = Math.floor;
            var Math_ceil = Math.ceil;
            var Math_trunc = Math.trunc;
            var Math_sqrt = Math.sqrt;
            var abort = env.abort;
            var nan = NaN;
            var infinity = Infinity;
            var fimport$0 = env._emval_call;
            var fimport$1 = env._emval_decref;
            var fimport$2 = env._embind_register_function;
            var fimport$3 = env._embind_register_class;
            var fimport$4 = env._embind_register_value_object;
            var fimport$5 = env._embind_register_value_object_field;
            var fimport$6 = env._embind_finalize_value_object;
            var fimport$7 = env._emval_get_module_property;
            var fimport$8 = env._emval_as;
            var fimport$9 = env._emval_incref;
            var fimport$10 = env._emval_run_destructors;
            var fimport$11 = env._embind_register_class_constructor;
            var fimport$12 = env._embind_register_class_function;
            var fimport$13 = env._embind_register_void;
            var fimport$14 = env._embind_register_bool;
            var fimport$15 = env._embind_register_std_string;
            var fimport$16 = env._embind_register_std_wstring;
            var fimport$17 = env._embind_register_emval;
            var fimport$18 = env._embind_register_integer;
            var fimport$19 = env._embind_register_float;
            var fimport$20 = env._embind_register_memory_view;
            var fimport$21 = env.environ_sizes_get;
            var fimport$22 = env.environ_get;
            var fimport$23 = env.strftime_l;
            var fimport$24 = env.abort;
            var fimport$25 = env.__cxa_atexit;
            var fimport$26 = env.fd_close;
            var fimport$27 = env.fd_write;
            var fimport$28 = env.fd_read;
            var fimport$29 = env.emscripten_resize_heap;
            var fimport$30 = env.emscripten_memcpy_big;
            var fimport$31 = env.setTempRet0;
            var fimport$32 = env.fd_seek;
            var global$0 = 5266128;
            var global$1 = 0;
            var global$2 = 0;
            var __wasm_intrinsics_temp_i64 = 0;
            var __wasm_intrinsics_temp_i64$hi = 0;
            var i64toi32_i32$HIGH_BITS = 0;
            // EMSCRIPTEN_START_FUNCS
            function $0() {
              $371();
              $340();
              $1645();
              $157();
              $290();
              $1646();
            }

            function $1($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 28) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] =
                ((HEAP32[(($5_1 + 28) | 0) >> 2] | 0) + (HEAP32[(($5_1 + 24) | 0) >> 2] | 0)) | 0;
              $2(($5_1 + 16) | 0 | 0, $2_1 | 0, ($5_1 + 12) | 0 | 0);
              $3(($5_1 + 16) | 0 | 0) | 0;
              global$0 = ($5_1 + 32) | 0;
              return;
            }

            function $2($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 4) | 0) >> 2] = $2_1;
              $5(
                $0_1 | 0,
                HEAP32[(($5_1 + 8) | 0) >> 2] | 0 | 0,
                1 | 0,
                $4(HEAP32[(($5_1 + 4) | 0) >> 2] | 0 | 0) | 0 | 0
              );
              global$0 = ($5_1 + 16) | 0;
              return;
            }

            function $3($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              fimport$1(HEAP32[$4_1 >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $4($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $5($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $6_1 = 0,
                $7_1 = 0,
                $11_1 = 0;
              $6_1 = (global$0 - 32) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 28) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 20) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 16) | 0) >> 2] = $3_1;
              $7_1 = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
              $114($6_1 | 0, $4(HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
              $11_1 = HEAP32[(($6_1 + 20) | 0) >> 2] | 0;
              $58(
                $0_1 | 0,
                FUNCTION_TABLE[$11_1 | 0](
                  HEAP32[$7_1 >> 2] | 0,
                  $115(($6_1 + 8) | 0 | 0) | 0,
                  $61(($6_1 + 8) | 0 | 0) | 0,
                  $116($6_1 | 0) | 0
                ) |
                  0 |
                  0
              ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return;
            }

            function $6() {
              FUNCTION_TABLE[2 | 0](17456) | 0;
              return;
            }

            function $7($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $8(1024 | 0, 3 | 0);
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $8($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $6_1 = 0,
                $10_1 = 0,
                $14_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $1_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 4;
              $6_1 = HEAP32[(($4_1 + 24) | 0) >> 2] | 0;
              $10_1 = $10(($4_1 + 16) | 0 | 0) | 0;
              $14_1 = $11(($4_1 + 16) | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              fimport$2(
                $6_1 | 0,
                $10_1 | 0,
                $14_1 | 0,
                $12() | 0 | 0,
                HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0,
                HEAP32[(($4_1 + 20) | 0) >> 2] | 0 | 0
              );
              global$0 = ($4_1 + 32) | 0;
              return;
            }

            function $9($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $6_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $11_1 = 0;
              $6_1 = (global$0 - 32) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 28) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 20) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 16) | 0) >> 2] = $3_1;
              $7_1 = HEAP32[(($6_1 + 28) | 0) >> 2] | 0;
              $9_1 = $77(HEAP32[(($6_1 + 24) | 0) >> 2] | 0 | 0) | 0;
              $11_1 = $77(HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0) | 0;
              $119(($6_1 + 8) | 0 | 0, HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0);
              FUNCTION_TABLE[$7_1 | 0]($9_1, $11_1, ($6_1 + 8) | 0);
              $3(($6_1 + 8) | 0 | 0) | 0;
              global$0 = ($6_1 + 32) | 0;
              return;
            }

            function $10($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 4 | 0;
            }

            function $11($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $120() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $12() {
              return 1152 | 0;
            }

            function $13() {
              FUNCTION_TABLE[5 | 0](17457) | 0;
              return;
            }

            function $14($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $35_1 = 0,
                $4_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $14_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $18_1 = 0,
                $20_1 = 0,
                $21_1 = 0,
                $23_1 = 0,
                $24_1 = 0,
                $25_1 = 0,
                $33_1 = 0,
                $196_1 = 0,
                $37_1 = 0,
                $38_1 = 0,
                $40_1 = 0,
                $41_1 = 0,
                $42_1 = 0,
                $224_1 = 0,
                $237_1 = 0,
                $47_1 = 0,
                $48_1 = 0,
                $50_1 = 0,
                $51_1 = 0,
                $52_1 = 0,
                $265_1 = 0,
                $278_1 = 0,
                $57_1 = 0,
                $58_1 = 0,
                $60_1 = 0,
                $61_1 = 0,
                $62_1 = 0,
                $306_1 = 0,
                $319_1 = 0,
                $67_1 = 0,
                $68_1 = 0,
                $70_1 = 0,
                $71_1 = 0,
                $345_1 = 0;
              $3_1 = (global$0 - 272) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 88) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 88) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 112) | 0) >> 2] = ($3_1 + 80) | 0;
              HEAP32[(($3_1 + 108) | 0) >> 2] = 1028;
              $15();
              HEAP32[(($3_1 + 104) | 0) >> 2] = 6;
              HEAP32[(($3_1 + 100) | 0) >> 2] = $17() | 0;
              HEAP32[(($3_1 + 96) | 0) >> 2] = $18() | 0;
              HEAP32[(($3_1 + 92) | 0) >> 2] = 7;
              $12_1 = $20() | 0;
              $13_1 = $21() | 0;
              $14_1 = $22() | 0;
              $15_1 = $23() | 0;
              HEAP32[(($3_1 + 116) | 0) >> 2] = HEAP32[(($3_1 + 104) | 0) >> 2] | 0;
              $17_1 = $24() | 0;
              $18_1 = HEAP32[(($3_1 + 104) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 120) | 0) >> 2] = HEAP32[(($3_1 + 100) | 0) >> 2] | 0;
              $20_1 = $25() | 0;
              $21_1 = HEAP32[(($3_1 + 100) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 124) | 0) >> 2] = HEAP32[(($3_1 + 96) | 0) >> 2] | 0;
              $23_1 = $25() | 0;
              $24_1 = HEAP32[(($3_1 + 96) | 0) >> 2] | 0;
              $25_1 = HEAP32[(($3_1 + 108) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 128) | 0) >> 2] = HEAP32[(($3_1 + 92) | 0) >> 2] | 0;
              fimport$3(
                $12_1 | 0,
                $13_1 | 0,
                $14_1 | 0,
                $15_1 | 0,
                $17_1 | 0,
                $18_1 | 0,
                $20_1 | 0,
                $21_1 | 0,
                $23_1 | 0,
                $24_1 | 0,
                $25_1 | 0,
                $26() | 0 | 0,
                HEAP32[(($3_1 + 92) | 0) >> 2] | 0 | 0
              );
              HEAP32[(($3_1 + 132) | 0) >> 2] = ($3_1 + 80) | 0;
              HEAP32[(($3_1 + 140) | 0) >> 2] = HEAP32[(($3_1 + 132) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 136) | 0) >> 2] = 8;
              $33_1 = HEAP32[(($3_1 + 140) | 0) >> 2] | 0;
              $28(HEAP32[(($3_1 + 136) | 0) >> 2] | 0 | 0);
              $35_1 = 0;
              HEAP32[(($3_1 + 76) | 0) >> 2] = $35_1;
              HEAP32[(($3_1 + 72) | 0) >> 2] = 9;
              i64toi32_i32$0 = HEAP32[(($3_1 + 72) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 76) | 0) >> 2] | 0;
              $196_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $3_1;
              HEAP32[(($3_1 + 144) | 0) >> 2] = $196_1;
              HEAP32[(($3_1 + 148) | 0) >> 2] = i64toi32_i32$1;
              $37_1 = HEAP32[(($3_1 + 144) | 0) >> 2] | 0;
              $38_1 = HEAP32[(($3_1 + 148) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 172) | 0) >> 2] = $33_1;
              HEAP32[(($3_1 + 168) | 0) >> 2] = 1033;
              HEAP32[(($3_1 + 164) | 0) >> 2] = $38_1;
              HEAP32[(($3_1 + 160) | 0) >> 2] = $37_1;
              $40_1 = HEAP32[(($3_1 + 172) | 0) >> 2] | 0;
              $41_1 = HEAP32[(($3_1 + 168) | 0) >> 2] | 0;
              $42_1 = HEAP32[(($3_1 + 160) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 156) | 0) >> 2] = HEAP32[(($3_1 + 164) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 152) | 0) >> 2] = $42_1;
              i64toi32_i32$1 = HEAP32[(($3_1 + 152) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($3_1 + 156) | 0) >> 2] | 0;
              $224_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $3_1;
              HEAP32[(($3_1 + 24) | 0) >> 2] = $224_1;
              HEAP32[(($3_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              $30($41_1 | 0, ($3_1 + 24) | 0 | 0);
              HEAP32[(($3_1 + 68) | 0) >> 2] = $35_1;
              HEAP32[(($3_1 + 64) | 0) >> 2] = 10;
              i64toi32_i32$0 = HEAP32[(($3_1 + 64) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 68) | 0) >> 2] | 0;
              $237_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $3_1;
              HEAP32[(($3_1 + 176) | 0) >> 2] = $237_1;
              HEAP32[(($3_1 + 180) | 0) >> 2] = i64toi32_i32$1;
              $47_1 = HEAP32[(($3_1 + 176) | 0) >> 2] | 0;
              $48_1 = HEAP32[(($3_1 + 180) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 204) | 0) >> 2] = $40_1;
              HEAP32[(($3_1 + 200) | 0) >> 2] = 1039;
              HEAP32[(($3_1 + 196) | 0) >> 2] = $48_1;
              HEAP32[(($3_1 + 192) | 0) >> 2] = $47_1;
              $50_1 = HEAP32[(($3_1 + 204) | 0) >> 2] | 0;
              $51_1 = HEAP32[(($3_1 + 200) | 0) >> 2] | 0;
              $52_1 = HEAP32[(($3_1 + 192) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 188) | 0) >> 2] = HEAP32[(($3_1 + 196) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 184) | 0) >> 2] = $52_1;
              i64toi32_i32$1 = HEAP32[(($3_1 + 184) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($3_1 + 188) | 0) >> 2] | 0;
              $265_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $3_1;
              HEAP32[(($3_1 + 16) | 0) >> 2] = $265_1;
              HEAP32[(($3_1 + 20) | 0) >> 2] = i64toi32_i32$0;
              $32($51_1 | 0, ($3_1 + 16) | 0 | 0);
              HEAP32[(($3_1 + 60) | 0) >> 2] = $35_1;
              HEAP32[(($3_1 + 56) | 0) >> 2] = 11;
              i64toi32_i32$0 = HEAP32[(($3_1 + 56) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 60) | 0) >> 2] | 0;
              $278_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $3_1;
              HEAP32[(($3_1 + 208) | 0) >> 2] = $278_1;
              HEAP32[(($3_1 + 212) | 0) >> 2] = i64toi32_i32$1;
              $57_1 = HEAP32[(($3_1 + 208) | 0) >> 2] | 0;
              $58_1 = HEAP32[(($3_1 + 212) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 236) | 0) >> 2] = $50_1;
              HEAP32[(($3_1 + 232) | 0) >> 2] = 1045;
              HEAP32[(($3_1 + 228) | 0) >> 2] = $58_1;
              HEAP32[(($3_1 + 224) | 0) >> 2] = $57_1;
              $60_1 = HEAP32[(($3_1 + 236) | 0) >> 2] | 0;
              $61_1 = HEAP32[(($3_1 + 232) | 0) >> 2] | 0;
              $62_1 = HEAP32[(($3_1 + 224) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 220) | 0) >> 2] = HEAP32[(($3_1 + 228) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 216) | 0) >> 2] = $62_1;
              i64toi32_i32$1 = HEAP32[(($3_1 + 216) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($3_1 + 220) | 0) >> 2] | 0;
              $306_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $3_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $306_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = i64toi32_i32$0;
              $34($61_1 | 0, ($3_1 + 8) | 0 | 0);
              HEAP32[(($3_1 + 52) | 0) >> 2] = $35_1;
              HEAP32[(($3_1 + 48) | 0) >> 2] = 12;
              i64toi32_i32$0 = HEAP32[(($3_1 + 48) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 52) | 0) >> 2] | 0;
              $319_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $3_1;
              HEAP32[(($3_1 + 240) | 0) >> 2] = $319_1;
              HEAP32[(($3_1 + 244) | 0) >> 2] = i64toi32_i32$1;
              $67_1 = HEAP32[(($3_1 + 240) | 0) >> 2] | 0;
              $68_1 = HEAP32[(($3_1 + 244) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 268) | 0) >> 2] = $60_1;
              HEAP32[(($3_1 + 264) | 0) >> 2] = 1055;
              HEAP32[(($3_1 + 260) | 0) >> 2] = $68_1;
              HEAP32[(($3_1 + 256) | 0) >> 2] = $67_1;
              $70_1 = HEAP32[(($3_1 + 264) | 0) >> 2] | 0;
              $71_1 = HEAP32[(($3_1 + 256) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 252) | 0) >> 2] = HEAP32[(($3_1 + 260) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 248) | 0) >> 2] = $71_1;
              i64toi32_i32$1 = HEAP32[(($3_1 + 248) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($3_1 + 252) | 0) >> 2] | 0;
              $345_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $3_1;
              HEAP32[(($3_1 + 32) | 0) >> 2] = $345_1;
              HEAP32[(($3_1 + 36) | 0) >> 2] = i64toi32_i32$0;
              $36($70_1 | 0, ($3_1 + 32) | 0 | 0);
              $37(($3_1 + 40) | 0 | 0, 1062 | 0) | 0;
              $38($38(($3_1 + 40) | 0 | 0, 1075 | 0, 0 | 0) | 0 | 0, 1077 | 0, 4 | 0) | 0;
              $39(($3_1 + 40) | 0 | 0) | 0;
              global$0 = ($3_1 + 272) | 0;
              return $4_1 | 0;
            }

            function $15() {
              return;
            }

            function $16($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $122(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $17() {
              return 0 | 0;
            }

            function $18() {
              return 0 | 0;
            }

            function $19($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              label$1: {
                if (((($4_1 | 0) == (0 | 0)) & 1) | 0) {
                  break label$1;
                }
                $1572($4_1 | 0);
              }
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $20() {
              return $123() | 0 | 0;
            }

            function $21() {
              return $124() | 0 | 0;
            }

            function $22() {
              return $125() | 0 | 0;
            }

            function $23() {
              return 0 | 0;
            }

            function $24() {
              return 1220 | 0;
            }

            function $25() {
              return 1223 | 0;
            }

            function $26() {
              return 1225 | 0;
            }

            function $27() {
              var $1_1 = 0;
              $1_1 = $1571(4 | 0) | 0;
              $126($1_1 | 0) | 0;
              return $1_1 | 0;
            }

            function $28($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $9_1 = 0,
                $13_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = 13;
              $5_1 = $20() | 0;
              $9_1 = $128(($3_1 + 16) | 0 | 0) | 0;
              $13_1 = $129(($3_1 + 16) | 0 | 0) | 0;
              HEAP32[(($3_1 + 28) | 0) >> 2] = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              fimport$11(
                $5_1 | 0,
                $9_1 | 0,
                $13_1 | 0,
                $24() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                HEAP32[(($3_1 + 24) | 0) >> 2] | 0 | 0
              );
              global$0 = ($3_1 + 32) | 0;
              return;
            }

            function $29($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 28) | 0) >> 2] = $0_1;
              $5_1 = HEAP32[(($4_1 + 28) | 0) >> 2] | 0;
              $40(($4_1 + 24) | 0 | 0, 1079 | 0);
              $41(($4_1 + 16) | 0 | 0, ($4_1 + 24) | 0 | 0, $1_1 | 0);
              HEAP32[(($4_1 + 12) | 0) >> 2] = $42(($4_1 + 16) | 0 | 0) | 0;
              HEAP32[$5_1 >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $3(($4_1 + 16) | 0 | 0) | 0;
              $3(($4_1 + 24) | 0 | 0) | 0;
              global$0 = ($4_1 + 32) | 0;
              return;
            }

            function $30($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $17_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              $5_1 = HEAP32[$1_1 >> 2] | 0;
              $6_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $6_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $5_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 14;
              $8_1 = $20() | 0;
              $9_1 = HEAP32[(($4_1 + 24) | 0) >> 2] | 0;
              $13_1 = $133(($4_1 + 8) | 0 | 0) | 0;
              $17_1 = $134(($4_1 + 8) | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              fimport$12(
                $8_1 | 0,
                $9_1 | 0,
                $13_1 | 0,
                $17_1 | 0,
                $56() | 0 | 0,
                HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0,
                $135(($4_1 + 16) | 0 | 0) | 0 | 0,
                0 | 0
              );
              global$0 = ($4_1 + 32) | 0;
              return;
            }

            function $31($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 0 | 0;
            }

            function $32($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $17_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              $5_1 = HEAP32[$1_1 >> 2] | 0;
              $6_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $6_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $5_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 15;
              $8_1 = $20() | 0;
              $9_1 = HEAP32[(($4_1 + 24) | 0) >> 2] | 0;
              $13_1 = $139(($4_1 + 8) | 0 | 0) | 0;
              $17_1 = $140(($4_1 + 8) | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              fimport$12(
                $8_1 | 0,
                $9_1 | 0,
                $13_1 | 0,
                $17_1 | 0,
                $54() | 0 | 0,
                HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0,
                $141(($4_1 + 16) | 0 | 0) | 0 | 0,
                0 | 0
              );
              global$0 = ($4_1 + 32) | 0;
              return;
            }

            function $33($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $40($0_1 | 0, 1079 | 0);
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $34($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $17_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              $5_1 = HEAP32[$1_1 >> 2] | 0;
              $6_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $6_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $5_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 16;
              $8_1 = $20() | 0;
              $9_1 = HEAP32[(($4_1 + 24) | 0) >> 2] | 0;
              $13_1 = $144(($4_1 + 8) | 0 | 0) | 0;
              $17_1 = $145(($4_1 + 8) | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              fimport$12(
                $8_1 | 0,
                $9_1 | 0,
                $13_1 | 0,
                $17_1 | 0,
                $54() | 0 | 0,
                HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0,
                $146(($4_1 + 16) | 0 | 0) | 0 | 0,
                0 | 0
              );
              global$0 = ($4_1 + 32) | 0;
              return;
            }

            function $35($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $1_1;
              FUNCTION_TABLE[HEAP32[(HEAP32[(($4_1 + 12) | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1);
              $45(
                $1514(
                  $1514($43(21880 | 0, 1128 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0,
                  HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 0
                ) |
                  0 |
                  0,
                17 | 0
              ) | 0;
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $36($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $17_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              $5_1 = HEAP32[$1_1 >> 2] | 0;
              $6_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $6_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $5_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 18;
              $8_1 = $20() | 0;
              $9_1 = HEAP32[(($4_1 + 24) | 0) >> 2] | 0;
              $13_1 = $149(($4_1 + 8) | 0 | 0) | 0;
              $17_1 = $150(($4_1 + 8) | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              fimport$12(
                $8_1 | 0,
                $9_1 | 0,
                $13_1 | 0,
                $17_1 | 0,
                $54() | 0 | 0,
                HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0,
                $151(($4_1 + 16) | 0 | 0) | 0 | 0,
                0 | 0
              );
              global$0 = ($4_1 + 32) | 0;
              return;
            }

            function $37($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $11_1 = 0,
                $12_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 20) | 0) >> 2] | 0;
              $46($5_1 | 0) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 19;
              HEAP32[(($4_1 + 8) | 0) >> 2] = 20;
              $8_1 = $49() | 0;
              $9_1 = HEAP32[(($4_1 + 16) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $11_1 = $50() | 0;
              $12_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              fimport$4(
                $8_1 | 0,
                $9_1 | 0,
                $11_1 | 0,
                $12_1 | 0,
                $26() | 0 | 0,
                HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0
              );
              global$0 = ($4_1 + 32) | 0;
              return $5_1 | 0;
            }

            function $38($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $11_1 = 0,
                $13_1 = 0,
                $14_1 = 0,
                $18_1 = 0,
                $19_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 20) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 16) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $2_1;
              $6_1 = HEAP32[(($5_1 + 20) | 0) >> 2] | 0;
              HEAP32[(($5_1 + 8) | 0) >> 2] = 21;
              HEAP32[(($5_1 + 4) | 0) >> 2] = 22;
              $9_1 = $49() | 0;
              $10_1 = HEAP32[(($5_1 + 16) | 0) >> 2] | 0;
              $11_1 = $53() | 0;
              HEAP32[(($5_1 + 24) | 0) >> 2] = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
              $13_1 = $54() | 0;
              $14_1 = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
              $18_1 = $55(($5_1 + 12) | 0 | 0) | 0;
              $19_1 = $53() | 0;
              HEAP32[(($5_1 + 28) | 0) >> 2] = HEAP32[(($5_1 + 4) | 0) >> 2] | 0;
              fimport$5(
                $9_1 | 0,
                $10_1 | 0,
                $11_1 | 0,
                $13_1 | 0,
                $14_1 | 0,
                $18_1 | 0,
                $19_1 | 0,
                $56() | 0 | 0,
                HEAP32[(($5_1 + 4) | 0) >> 2] | 0 | 0,
                $55(($5_1 + 12) | 0 | 0) | 0 | 0
              );
              global$0 = ($5_1 + 32) | 0;
              return $6_1 | 0;
            }

            function $39($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              fimport$6($49() | 0 | 0);
              $57($4_1 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $40($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $58($0_1 | 0, fimport$7(HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $41($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 4) | 0) >> 2] = $2_1;
              $60(
                $0_1 | 0,
                HEAP32[(($5_1 + 8) | 0) >> 2] | 0 | 0,
                1 | 0,
                $59(HEAP32[(($5_1 + 4) | 0) >> 2] | 0 | 0) | 0 | 0
              );
              global$0 = ($5_1 + 16) | 0;
              return;
            }

            function $42($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $16_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 28) | 0) >> 2] = $0_1;
              HEAPF64[(($3_1 + 8) | 0) >> 3] = +fimport$8(
                HEAP32[(HEAP32[(($3_1 + 28) | 0) >> 2] | 0) >> 2] | 0 | 0,
                HEAP32[($61(($3_1 + 24) | 0 | 0) | 0) >> 2] | 0 | 0,
                ($3_1 + 20) | 0 | 0
              );
              $62($3_1 | 0, HEAP32[(($3_1 + 20) | 0) >> 2] | 0 | 0) | 0;
              $16_1 = $63(+(+HEAPF64[(($3_1 + 8) | 0) >> 3])) | 0;
              $64($3_1 | 0) | 0;
              global$0 = ($3_1 + 32) | 0;
              return $16_1 | 0;
            }

            function $43($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $9_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $9_1 =
                $79(
                  HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0,
                  HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0,
                  $78(HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0 | 0
                ) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $9_1 | 0;
            }

            function $44($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $12_1 = 0,
                $16_1 = 0,
                $20_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $12_1 = 24;
              $16_1 = 24;
              $1515(
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                (((($80(
                  ($5_1 + (HEAP32[(((HEAP32[$5_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0,
                  (((10 << $12_1) | 0) >> $12_1) | 0 | 0
                ) |
                  0) <<
                  $16_1) |
                  0) >>
                  $16_1) |
                  0 |
                  0
              ) | 0;
              $1486(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              $20_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $20_1 | 0;
            }

            function $45($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $7_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $7_1 =
                FUNCTION_TABLE[HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0](HEAP32[(($4_1 + 12) | 0) >> 2] | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $7_1 | 0;
            }

            function $46($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $47() {
              var $1_1 = 0,
                i64toi32_i32$0 = 0;
              $1_1 = $1571(8 | 0) | 0;
              i64toi32_i32$0 = 0;
              HEAP32[$1_1 >> 2] = 0;
              HEAP32[(($1_1 + 4) | 0) >> 2] = i64toi32_i32$0;
              return $1_1 | 0;
            }

            function $48($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              label$1: {
                if (((($4_1 | 0) == (0 | 0)) & 1) | 0) {
                  break label$1;
                }
                $1572($4_1 | 0);
              }
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $49() {
              return $155() | 0 | 0;
            }

            function $50() {
              return 1296 | 0;
            }

            function $51($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $9_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $9_1 =
                $117(
                  ((HEAP32[(($4_1 + 8) | 0) >> 2] | 0) +
                    (HEAP32[(HEAP32[(($4_1 + 12) | 0) >> 2] | 0) >> 2] | 0)) |
                    0 |
                    0
                ) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $9_1 | 0;
            }

            function $52($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $7_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 4) | 0) >> 2] = $2_1;
              $7_1 = $77(HEAP32[(($5_1 + 4) | 0) >> 2] | 0 | 0) | 0;
              HEAP32[
                (((HEAP32[(($5_1 + 8) | 0) >> 2] | 0) +
                  (HEAP32[(HEAP32[(($5_1 + 12) | 0) >> 2] | 0) >> 2] | 0)) |
                  0) >>
                  2
              ] = $7_1;
              global$0 = ($5_1 + 16) | 0;
              return;
            }

            function $53() {
              return $156() | 0 | 0;
            }

            function $54() {
              return 1260 | 0;
            }

            function $55($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $8_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1571(4 | 0) | 0;
              HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[(($3_1 + 12) | 0) >> 2] | 0) >> 2] | 0;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $5_1;
              $8_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $8_1 | 0;
            }

            function $56() {
              return 1244 | 0;
            }

            function $57($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $58($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              return $5_1 | 0;
            }

            function $59($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $60($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $6_1 = 0,
                $7_1 = 0,
                $11_1 = 0;
              $6_1 = (global$0 - 32) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 28) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 20) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 16) | 0) >> 2] = $3_1;
              $7_1 = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
              $65($6_1 | 0, $59(HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
              $11_1 = HEAP32[(($6_1 + 20) | 0) >> 2] | 0;
              $58(
                $0_1 | 0,
                FUNCTION_TABLE[$11_1 | 0](
                  HEAP32[$7_1 >> 2] | 0,
                  $66(($6_1 + 8) | 0 | 0) | 0,
                  $67(($6_1 + 8) | 0 | 0) | 0,
                  $68($6_1 | 0) | 0
                ) |
                  0 |
                  0
              ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return;
            }

            function $61($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $75() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $62($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              return $5_1 | 0;
            }

            function $63($0_1) {
              $0_1 = +$0_1;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAPF64[(($3_1 + 8) | 0) >> 3] = $0_1;
              HEAP32[(($3_1 + 4) | 0) >> 2] = $76(+(+HEAPF64[(($3_1 + 8) | 0) >> 3])) | 0;
              $6_1 = $77(HEAP32[(($3_1 + 4) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $64($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              fimport$10(HEAP32[$4_1 >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $65($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $8_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 20) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $69($5_1 | 0) | 0;
              $8_1 = $59(HEAP32[(($4_1 + 16) | 0) >> 2] | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = ($4_1 + 12) | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $8_1;
              $71(
                HEAP32[(($4_1 + 28) | 0) >> 2] | 0 | 0,
                $70($59(HEAP32[(($4_1 + 24) | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0
              );
              $72(HEAP32[(($4_1 + 28) | 0) >> 2] | 0 | 0);
              global$0 = ($4_1 + 32) | 0;
              return $5_1 | 0;
            }

            function $66($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 1 | 0;
            }

            function $67($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $73() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $68($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $74(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $69($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $70($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $7_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$9(HEAP32[(HEAP32[(($3_1 + 12) | 0) >> 2] | 0) >> 2] | 0 | 0);
              $7_1 = HEAP32[(HEAP32[(($3_1 + 12) | 0) >> 2] | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $7_1 | 0;
            }

            function $71($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $8_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(HEAP32[(HEAP32[(($4_1 + 12) | 0) >> 2] | 0) >> 2] | 0) >> 2] =
                HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              $8_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              HEAP32[$8_1 >> 2] = ((HEAP32[$8_1 >> 2] | 0) + 8) | 0;
              return;
            }

            function $72($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return;
            }

            function $73() {
              return 1092 | 0;
            }

            function $74($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $75() {
              return 1124 | 0;
            }

            function $76($0_1) {
              $0_1 = +$0_1;
              var $3_1 = 0,
                $10_1 = 0.0,
                $7_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAPF64[(($3_1 + 8) | 0) >> 3] = $0_1;
              $10_1 = +HEAPF64[(($3_1 + 8) | 0) >> 3];
              label$1: {
                label$2: {
                  if (!(Math_abs($10_1) < 2147483648.0)) {
                    break label$2;
                  }
                  $7_1 = ~~$10_1;
                  break label$1;
                }
                $7_1 = -2147483648;
              }
              return $7_1 | 0;
            }

            function $77($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $78($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1715(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $79($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $21_1 = 0,
                $39_1 = 0,
                $45_1 = 0,
                $51_1 = 0,
                $59_1 = 0,
                $69_1 = 0,
                $20_1 = 0,
                $44_1 = 0,
                $50_1 = 0,
                $57_1 = 0,
                $79_1 = 0;
              $5_1 = (global$0 - 48) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 44) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 40) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 36) | 0) >> 2] = $2_1;
              $1489(($5_1 + 24) | 0 | 0, HEAP32[(($5_1 + 44) | 0) >> 2] | 0 | 0) | 0;
              label$1: {
                if (!((($81(($5_1 + 24) | 0 | 0) | 0) & 1) | 0)) {
                  break label$1;
                }
                $82(($5_1 + 8) | 0 | 0, HEAP32[(($5_1 + 44) | 0) >> 2] | 0 | 0) | 0;
                $20_1 = HEAP32[(($5_1 + 40) | 0) >> 2] | 0;
                $21_1 = HEAP32[(($5_1 + 44) | 0) >> 2] | 0;
                label$2: {
                  label$3: {
                    if (
                      !(
                        ((((($83(
                          ($21_1 + (HEAP32[(((HEAP32[$21_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0
                        ) |
                          0) &
                          176) |
                          0 |
                          0) ==
                          (32 | 0)) &
                          1) |
                        0
                      )
                    ) {
                      break label$3;
                    }
                    $39_1 = ((HEAP32[(($5_1 + 40) | 0) >> 2] | 0) + (HEAP32[(($5_1 + 36) | 0) >> 2] | 0)) | 0;
                    break label$2;
                  }
                  $39_1 = HEAP32[(($5_1 + 40) | 0) >> 2] | 0;
                }
                $44_1 = ((HEAP32[(($5_1 + 40) | 0) >> 2] | 0) + (HEAP32[(($5_1 + 36) | 0) >> 2] | 0)) | 0;
                $45_1 = HEAP32[(($5_1 + 44) | 0) >> 2] | 0;
                $50_1 = ($45_1 + (HEAP32[(((HEAP32[$45_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0;
                $51_1 = HEAP32[(($5_1 + 44) | 0) >> 2] | 0;
                $57_1 = $84(($51_1 + (HEAP32[(((HEAP32[$51_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0;
                $59_1 = 24;
                HEAP32[(($5_1 + 16) | 0) >> 2] =
                  $85(
                    HEAP32[(($5_1 + 8) | 0) >> 2] | 0 | 0,
                    $20_1 | 0,
                    $39_1 | 0,
                    $44_1 | 0,
                    $50_1 | 0,
                    ((($57_1 << $59_1) | 0) >> $59_1) | 0 | 0
                  ) | 0;
                label$4: {
                  if (!((($86(($5_1 + 16) | 0 | 0) | 0) & 1) | 0)) {
                    break label$4;
                  }
                  $69_1 = HEAP32[(($5_1 + 44) | 0) >> 2] | 0;
                  $87(($69_1 + (HEAP32[(((HEAP32[$69_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 5 | 0);
                }
              }
              $1491(($5_1 + 24) | 0 | 0) | 0;
              $79_1 = HEAP32[(($5_1 + 44) | 0) >> 2] | 0;
              global$0 = ($5_1 + 48) | 0;
              return $79_1 | 0;
            }

            function $80($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $10_1 = 0,
                $15_1 = 0,
                $13_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP8[(($4_1 + 11) | 0) >> 0] = $1_1;
              $1487($4_1 | 0, HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0);
              $10_1 = 24;
              $13_1 =
                $113(
                  $112($4_1 | 0) | 0 | 0,
                  ((((HEAPU8[(($4_1 + 11) | 0) >> 0] | 0) << $10_1) | 0) >> $10_1) | 0 | 0
                ) | 0;
              $430($4_1 | 0) | 0;
              $15_1 = 24;
              global$0 = ($4_1 + 16) | 0;
              return ((($13_1 << $15_1) | 0) >> $15_1) | 0 | 0;
            }

            function $81($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return ((HEAPU8[(HEAP32[(($3_1 + 12) | 0) >> 2] | 0) >> 0] | 0) & 1) | 0 | 0;
            }

            function $82($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $6_1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] =
                $93(($6_1 + (HEAP32[(((HEAP32[$6_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $83($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(((HEAP32[(($3_1 + 12) | 0) >> 2] | 0) + 4) | 0) >> 2] | 0 | 0;
            }

            function $84($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $11_1 = 0,
                $15_1 = 0,
                $19_1 = 0,
                $21_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              label$1: {
                if (!((($95($94() | 0 | 0, HEAP32[(($4_1 + 76) | 0) >> 2] | 0 | 0) | 0) & 1) | 0)) {
                  break label$1;
                }
                $11_1 = 24;
                $15_1 = 24;
                HEAP32[(($4_1 + 76) | 0) >> 2] =
                  (((($80($4_1 | 0, (((32 << $11_1) | 0) >> $11_1) | 0 | 0) | 0) << $15_1) | 0) >> $15_1) | 0;
              }
              $19_1 = 24;
              $21_1 = ((((HEAP32[(($4_1 + 76) | 0) >> 2] | 0) << $19_1) | 0) >> $19_1) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $21_1 | 0;
            }

            function $85($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $8_1 = 0,
                $79_1 = 0,
                $145_1 = 0;
              $8_1 = (global$0 - 80) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 64) | 0) >> 2] = $0_1;
              HEAP32[(($8_1 + 60) | 0) >> 2] = $1_1;
              HEAP32[(($8_1 + 56) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 52) | 0) >> 2] = $3_1;
              HEAP32[(($8_1 + 48) | 0) >> 2] = $4_1;
              HEAP8[(($8_1 + 47) | 0) >> 0] = $5_1;
              label$1: {
                label$2: {
                  if (!((((HEAP32[(($8_1 + 64) | 0) >> 2] | 0 | 0) == (0 | 0)) & 1) | 0)) {
                    break label$2;
                  }
                  HEAP32[(($8_1 + 72) | 0) >> 2] = HEAP32[(($8_1 + 64) | 0) >> 2] | 0;
                  break label$1;
                }
                HEAP32[(($8_1 + 40) | 0) >> 2] =
                  ((HEAP32[(($8_1 + 52) | 0) >> 2] | 0) - (HEAP32[(($8_1 + 60) | 0) >> 2] | 0)) | 0;
                HEAP32[(($8_1 + 36) | 0) >> 2] = $88(HEAP32[(($8_1 + 48) | 0) >> 2] | 0 | 0) | 0;
                label$3: {
                  label$4: {
                    if (
                      !(
                        (((HEAP32[(($8_1 + 36) | 0) >> 2] | 0 | 0) >
                          (HEAP32[(($8_1 + 40) | 0) >> 2] | 0 | 0)) &
                          1) |
                        0
                      )
                    ) {
                      break label$4;
                    }
                    HEAP32[(($8_1 + 36) | 0) >> 2] =
                      ((HEAP32[(($8_1 + 36) | 0) >> 2] | 0) - (HEAP32[(($8_1 + 40) | 0) >> 2] | 0)) | 0;
                    break label$3;
                  }
                  HEAP32[(($8_1 + 36) | 0) >> 2] = 0;
                }
                HEAP32[(($8_1 + 32) | 0) >> 2] =
                  ((HEAP32[(($8_1 + 56) | 0) >> 2] | 0) - (HEAP32[(($8_1 + 60) | 0) >> 2] | 0)) | 0;
                label$5: {
                  if (!((((HEAP32[(($8_1 + 32) | 0) >> 2] | 0 | 0) > (0 | 0)) & 1) | 0)) {
                    break label$5;
                  }
                  label$6: {
                    if (
                      !(
                        ((($89(
                          HEAP32[(($8_1 + 64) | 0) >> 2] | 0 | 0,
                          HEAP32[(($8_1 + 60) | 0) >> 2] | 0 | 0,
                          HEAP32[(($8_1 + 32) | 0) >> 2] | 0 | 0
                        ) |
                          0 |
                          0) !=
                          (HEAP32[(($8_1 + 32) | 0) >> 2] | 0 | 0)) &
                          1) |
                        0
                      )
                    ) {
                      break label$6;
                    }
                    HEAP32[(($8_1 + 64) | 0) >> 2] = 0;
                    HEAP32[(($8_1 + 72) | 0) >> 2] = HEAP32[(($8_1 + 64) | 0) >> 2] | 0;
                    break label$1;
                  }
                }
                label$7: {
                  if (!((((HEAP32[(($8_1 + 36) | 0) >> 2] | 0 | 0) > (0 | 0)) & 1) | 0)) {
                    break label$7;
                  }
                  $79_1 = 24;
                  $90(
                    ($8_1 + 16) | 0 | 0,
                    HEAP32[(($8_1 + 36) | 0) >> 2] | 0 | 0,
                    ((((HEAPU8[(($8_1 + 47) | 0) >> 0] | 0) << $79_1) | 0) >> $79_1) | 0 | 0
                  ) | 0;
                  label$8: {
                    label$9: {
                      if (
                        !(
                          ((($89(
                            HEAP32[(($8_1 + 64) | 0) >> 2] | 0 | 0,
                            $91(($8_1 + 16) | 0 | 0) | 0 | 0,
                            HEAP32[(($8_1 + 36) | 0) >> 2] | 0 | 0
                          ) |
                            0 |
                            0) !=
                            (HEAP32[(($8_1 + 36) | 0) >> 2] | 0 | 0)) &
                            1) |
                          0
                        )
                      ) {
                        break label$9;
                      }
                      HEAP32[(($8_1 + 64) | 0) >> 2] = 0;
                      HEAP32[(($8_1 + 72) | 0) >> 2] = HEAP32[(($8_1 + 64) | 0) >> 2] | 0;
                      HEAP32[(($8_1 + 12) | 0) >> 2] = 1;
                      break label$8;
                    }
                    HEAP32[(($8_1 + 12) | 0) >> 2] = 0;
                  }
                  $1540(($8_1 + 16) | 0 | 0) | 0;
                  label$10: {
                    switch (HEAP32[(($8_1 + 12) | 0) >> 2] | 0 | 0) {
                      case 1:
                        break label$1;
                      default:
                        break label$10;
                    }
                  }
                }
                HEAP32[(($8_1 + 32) | 0) >> 2] =
                  ((HEAP32[(($8_1 + 52) | 0) >> 2] | 0) - (HEAP32[(($8_1 + 56) | 0) >> 2] | 0)) | 0;
                label$11: {
                  if (!((((HEAP32[(($8_1 + 32) | 0) >> 2] | 0 | 0) > (0 | 0)) & 1) | 0)) {
                    break label$11;
                  }
                  label$12: {
                    if (
                      !(
                        ((($89(
                          HEAP32[(($8_1 + 64) | 0) >> 2] | 0 | 0,
                          HEAP32[(($8_1 + 56) | 0) >> 2] | 0 | 0,
                          HEAP32[(($8_1 + 32) | 0) >> 2] | 0 | 0
                        ) |
                          0 |
                          0) !=
                          (HEAP32[(($8_1 + 32) | 0) >> 2] | 0 | 0)) &
                          1) |
                        0
                      )
                    ) {
                      break label$12;
                    }
                    HEAP32[(($8_1 + 64) | 0) >> 2] = 0;
                    HEAP32[(($8_1 + 72) | 0) >> 2] = HEAP32[(($8_1 + 64) | 0) >> 2] | 0;
                    break label$1;
                  }
                }
                $92(HEAP32[(($8_1 + 48) | 0) >> 2] | 0 | 0, 0 | 0) | 0;
                HEAP32[(($8_1 + 72) | 0) >> 2] = HEAP32[(($8_1 + 64) | 0) >> 2] | 0;
              }
              $145_1 = HEAP32[(($8_1 + 72) | 0) >> 2] | 0;
              global$0 = ($8_1 + 80) | 0;
              return $145_1 | 0;
            }

            function $86($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return (((HEAP32[(HEAP32[(($3_1 + 12) | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0)) & 1) | 0 | 0;
            }

            function $87($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $96(HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0, HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0);
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $88($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(((HEAP32[(($3_1 + 12) | 0) >> 2] | 0) + 12) | 0) >> 2] | 0 | 0;
            }

            function $89($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $11_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 4) | 0) >> 2] = $2_1;
              $6_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
              $11_1 =
                FUNCTION_TABLE[HEAP32[(((HEAP32[$6_1 >> 2] | 0) + 48) | 0) >> 2] | 0 | 0](
                  $6_1,
                  HEAP32[(($5_1 + 8) | 0) >> 2] | 0,
                  HEAP32[(($5_1 + 4) | 0) >> 2] | 0
                ) | 0;
              global$0 = ($5_1 + 16) | 0;
              return $11_1 | 0;
            }

            function $90($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $15_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 28) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 24) | 0) >> 2] = $1_1;
              HEAP8[(($5_1 + 23) | 0) >> 0] = $2_1;
              $6_1 = HEAP32[(($5_1 + 28) | 0) >> 2] | 0;
              $97($6_1 | 0, ($5_1 + 16) | 0 | 0, ($5_1 + 8) | 0 | 0) | 0;
              $15_1 = 24;
              $1552(
                $6_1 | 0,
                HEAP32[(($5_1 + 24) | 0) >> 2] | 0 | 0,
                ((((HEAPU8[(($5_1 + 23) | 0) >> 0] | 0) << $15_1) | 0) >> $15_1) | 0 | 0
              );
              global$0 = ($5_1 + 32) | 0;
              return $6_1 | 0;
            }

            function $91($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $6_1 = $99($98(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $92($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 4) | 0) >> 2] = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
              HEAP32[(($5_1 + 12) | 0) >> 2] = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              return HEAP32[(($4_1 + 4) | 0) >> 2] | 0 | 0;
            }

            function $93($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $111(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $94() {
              return -1 | 0;
            }

            function $95($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              return (
                (((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == (HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0)) & 1) |
                0 |
                0
              );
            }

            function $96($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $1492(
                $5_1 | 0,
                HEAP32[(($5_1 + 16) | 0) >> 2] | 0 | (HEAP32[(($4_1 + 8) | 0) >> 2] | 0) | 0 | 0
              );
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $97($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $6_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 28) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 20) | 0) >> 2] = $2_1;
              $6_1 = HEAP32[(($5_1 + 28) | 0) >> 2] | 0;
              $100(HEAP32[(($5_1 + 24) | 0) >> 2] | 0 | 0) | 0;
              $101($6_1 | 0) | 0;
              $100(HEAP32[(($5_1 + 20) | 0) >> 2] | 0 | 0) | 0;
              $102($6_1 | 0) | 0;
              global$0 = ($5_1 + 32) | 0;
              return $6_1 | 0;
            }

            function $98($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $9_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              label$1: {
                label$2: {
                  if (!((($104($4_1 | 0) | 0) & 1) | 0)) {
                    break label$2;
                  }
                  $9_1 = $105($4_1 | 0) | 0;
                  break label$1;
                }
                $9_1 = $106($4_1 | 0) | 0;
              }
              global$0 = ($3_1 + 16) | 0;
              return $9_1 | 0;
            }

            function $99($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $100($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $101($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 4) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 4) | 0) >> 2] | 0 | 0;
            }

            function $102($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 4) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
              $103($4_1 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $103($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $104($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $16_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $16_1 =
                (((((((HEAPU8[((($107(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0) + 11) | 0) >> 0] | 0) &
                  255) |
                  0) &
                  128) |
                  0 |
                  0) !=
                  (0 | 0)) &
                  1) |
                0;
              global$0 = ($3_1 + 16) | 0;
              return $16_1 | 0;
            }

            function $105($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $6_1 = HEAP32[($107(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $106($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $6_1 = $108($107(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $107($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $109(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $108($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $110(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $109($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $110($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $111($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(((HEAP32[(($3_1 + 12) | 0) >> 2] | 0) + 24) | 0) >> 2] | 0 | 0;
            }

            function $112($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $6_1 = $435(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0, 17844 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $113($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $15_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP8[(($4_1 + 11) | 0) >> 0] = $1_1;
              $5_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $9_1 = 24;
              $13_1 = 24;
              $15_1 =
                ((((FUNCTION_TABLE[HEAP32[(((HEAP32[$5_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0](
                  $5_1,
                  ((((HEAPU8[(($4_1 + 11) | 0) >> 0] | 0) << $9_1) | 0) >> $9_1) | 0
                ) |
                  0) <<
                  $13_1) |
                  0) >>
                  $13_1) |
                0;
              global$0 = ($4_1 + 16) | 0;
              return $15_1 | 0;
            }

            function $114($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $8_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $1_1;
              $5_1 = HEAP32[(($4_1 + 20) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $69($5_1 | 0) | 0;
              $8_1 = $4(HEAP32[(($4_1 + 16) | 0) >> 2] | 0 | 0) | 0;
              HEAP32[(($4_1 + 28) | 0) >> 2] = ($4_1 + 12) | 0;
              HEAP32[(($4_1 + 24) | 0) >> 2] = $8_1;
              $118(
                HEAP32[(($4_1 + 28) | 0) >> 2] | 0 | 0,
                $117($4(HEAP32[(($4_1 + 24) | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0
              );
              $72(HEAP32[(($4_1 + 28) | 0) >> 2] | 0 | 0);
              global$0 = ($4_1 + 32) | 0;
              return $5_1 | 0;
            }

            function $115($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 1 | 0;
            }

            function $116($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $74(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $117($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(HEAP32[(($3_1 + 12) | 0) >> 2] | 0) >> 2] | 0 | 0;
            }

            function $118($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $8_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(HEAP32[(HEAP32[(($4_1 + 12) | 0) >> 2] | 0) >> 2] | 0) >> 2] =
                HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              $8_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              HEAP32[$8_1 >> 2] = ((HEAP32[$8_1 >> 2] | 0) + 8) | 0;
              return;
            }

            function $119($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $121($0_1 | 0, HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0);
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $120() {
              return 1136 | 0;
            }

            function $121($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $58($0_1 | 0, HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return;
            }

            function $122($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 1164 | 0;
            }

            function $123() {
              return 1164 | 0;
            }

            function $124() {
              return 1180 | 0;
            }

            function $125() {
              return 1204 | 0;
            }

            function $126($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              HEAP32[$4_1 >> 2] = 0;
              return $4_1 | 0;
            }

            function $127($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $6_1 = $130(FUNCTION_TABLE[HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $128($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 1 | 0;
            }

            function $129($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $131() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $130($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $131() {
              return 1228 | 0;
            }

            function $132($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $13_1 = 0,
                $19_1 = 0,
                $7_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(($5_1 + 4) | 0) >> 2] = $2_1;
              $7_1 = $136(HEAP32[(($5_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $8_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
              $9_1 = HEAP32[(($8_1 + 4) | 0) >> 2] | 0;
              $10_1 = HEAP32[$8_1 >> 2] | 0;
              $13_1 = ($7_1 + (($9_1 >> 1) | 0)) | 0;
              label$1: {
                label$2: {
                  if (!(($9_1 & 1) | 0)) {
                    break label$2;
                  }
                  $19_1 = HEAP32[(((HEAP32[$13_1 >> 2] | 0) + $10_1) | 0) >> 2] | 0;
                  break label$1;
                }
                $19_1 = $10_1;
              }
              $119($5_1 | 0, HEAP32[(($5_1 + 4) | 0) >> 2] | 0 | 0);
              FUNCTION_TABLE[$19_1 | 0]($13_1, $5_1);
              $3($5_1 | 0) | 0;
              global$0 = ($5_1 + 16) | 0;
              return;
            }

            function $133($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 3 | 0;
            }

            function $134($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $137() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $135($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $10_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1571(8 | 0) | 0;
              $7_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[$7_1 >> 2] | 0;
              HEAP32[(($5_1 + 4) | 0) >> 2] = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = $8_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $5_1;
              $10_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $10_1 | 0;
            }

            function $136($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $137() {
              return 1232 | 0;
            }

            function $138($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $12_1 = 0,
                $18_1 = 0,
                $6_1 = 0,
                $24_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $6_1 = $136(HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $7_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              $9_1 = HEAP32[$7_1 >> 2] | 0;
              $12_1 = ($6_1 + (($8_1 >> 1) | 0)) | 0;
              label$1: {
                label$2: {
                  if (!(($8_1 & 1) | 0)) {
                    break label$2;
                  }
                  $18_1 = HEAP32[(((HEAP32[$12_1 >> 2] | 0) + $9_1) | 0) >> 2] | 0;
                  break label$1;
                }
                $18_1 = $9_1;
              }
              HEAP32[(($4_1 + 4) | 0) >> 2] = FUNCTION_TABLE[$18_1 | 0]($12_1) | 0;
              $24_1 = $117(($4_1 + 4) | 0 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $24_1 | 0;
            }

            function $139($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 2 | 0;
            }

            function $140($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $142() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $141($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $10_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1571(8 | 0) | 0;
              $7_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[$7_1 >> 2] | 0;
              HEAP32[(($5_1 + 4) | 0) >> 2] = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = $8_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $5_1;
              $10_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $10_1 | 0;
            }

            function $142() {
              return 1252 | 0;
            }

            function $143($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $12_1 = 0,
                $18_1 = 0,
                $6_1 = 0,
                $22_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $6_1 = $136(HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $7_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              $9_1 = HEAP32[$7_1 >> 2] | 0;
              $12_1 = ($6_1 + (($8_1 >> 1) | 0)) | 0;
              label$1: {
                label$2: {
                  if (!(($8_1 & 1) | 0)) {
                    break label$2;
                  }
                  $18_1 = HEAP32[(((HEAP32[$12_1 >> 2] | 0) + $9_1) | 0) >> 2] | 0;
                  break label$1;
                }
                $18_1 = $9_1;
              }
              FUNCTION_TABLE[$18_1 | 0]($4_1, $12_1);
              $22_1 = $70($4_1 | 0) | 0;
              $3($4_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $22_1 | 0;
            }

            function $144($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 2 | 0;
            }

            function $145($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $147() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $146($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $10_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1571(8 | 0) | 0;
              $7_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[$7_1 >> 2] | 0;
              HEAP32[(($5_1 + 4) | 0) >> 2] = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = $8_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $5_1;
              $10_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $10_1 | 0;
            }

            function $147() {
              return 1264 | 0;
            }

            function $148($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $12_1 = 0,
                $18_1 = 0,
                $6_1 = 0,
                $22_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
              $6_1 = $136(HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $7_1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              $9_1 = HEAP32[$7_1 >> 2] | 0;
              $12_1 = ($6_1 + (($8_1 >> 1) | 0)) | 0;
              label$1: {
                label$2: {
                  if (!(($8_1 & 1) | 0)) {
                    break label$2;
                  }
                  $18_1 = HEAP32[(((HEAP32[$12_1 >> 2] | 0) + $9_1) | 0) >> 2] | 0;
                  break label$1;
                }
                $18_1 = $9_1;
              }
              FUNCTION_TABLE[$18_1 | 0]($4_1, $12_1);
              $22_1 = $152($4_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $22_1 | 0;
            }

            function $149($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[((((global$0 - 16) | 0) + 12) | 0) >> 2] = $0_1;
              return 2 | 0;
            }

            function $150($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = $153() | 0;
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $151($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $10_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1571(8 | 0) | 0;
              $7_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $8_1 = HEAP32[$7_1 >> 2] | 0;
              HEAP32[(($5_1 + 4) | 0) >> 2] = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
              HEAP32[$5_1 >> 2] = $8_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $5_1;
              $10_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $10_1 | 0;
            }

            function $152($0_1) {
              $0_1 = $0_1 | 0;
              var i64toi32_i32$0 = 0,
                $3_1 = 0,
                i64toi32_i32$2 = 0,
                $5_1 = 0,
                i64toi32_i32$1 = 0,
                $27_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $5_1 = $1571(8 | 0) | 0;
              i64toi32_i32$2 = $154(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
              $27_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $27_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              global$0 = ($3_1 + 16) | 0;
              return i64toi32_i32$0 | 0;
            }

            function $153() {
              return 1272 | 0;
            }

            function $154($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $155() {
              return 1288 | 0;
            }

            function $156() {
              return 16464 | 0;
            }

            function $157() {
              $6();
              $13();
              return;
            }

            function $158($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $6_1 = $291($159(HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $159($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $0_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] =
                HEAP32[(((HEAP32[(($3_1 + 8) | 0) >> 2] | 0) + 4) | 0) >> 2] | 0;
              return HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $160() {
              fimport$13($161() | 0 | 0, 1298 | 0);
              fimport$14($162() | 0 | 0, 1303 | 0, 1 | 0, (1 & 1) | 0 | 0, (0 & 1) | 0 | 0);
              $163(1308 | 0);
              $164(1313 | 0);
              $165(1325 | 0);
              $166(1339 | 0);
              $167(1345 | 0);
              $168(1360 | 0);
              $169(1364 | 0);
              $170(1377 | 0);
              $171(1382 | 0);
              $172(1396 | 0);
              $173(1402 | 0);
              fimport$15($174() | 0 | 0, 1409 | 0);
              fimport$15($175() | 0 | 0, 1421 | 0);
              fimport$16($176() | 0 | 0, 4 | 0, 1454 | 0);
              fimport$16($177() | 0 | 0, 2 | 0, 1467 | 0);
              fimport$16($178() | 0 | 0, 4 | 0, 1482 | 0);
              fimport$17($179() | 0 | 0, 1497 | 0);
              $180(1513 | 0);
              $181(1543 | 0);
              $182(1580 | 0);
              $183(1619 | 0);
              $184(1650 | 0);
              $185(1690 | 0);
              $186(1719 | 0);
              $187(1757 | 0);
              $188(1787 | 0);
              $181(1826 | 0);
              $182(1858 | 0);
              $183(1891 | 0);
              $184(1924 | 0);
              $185(1958 | 0);
              $186(1991 | 0);
              $189(2025 | 0);
              $190(2056 | 0);
              return;
            }

            function $161() {
              return $191() | 0 | 0;
            }

            function $162() {
              return $192() | 0 | 0;
            }

            function $163($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $7_1 = 0,
                $11_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $7_1 = 24;
              $11_1 = 24;
              fimport$18(
                $193() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                1 | 0,
                (((($194() | 0) << $7_1) | 0) >> $7_1) | 0 | 0,
                (((($195() | 0) << $11_1) | 0) >> $11_1) | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $164($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $7_1 = 0,
                $11_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $7_1 = 24;
              $11_1 = 24;
              fimport$18(
                $196() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                1 | 0,
                (((($197() | 0) << $7_1) | 0) >> $7_1) | 0 | 0,
                (((($198() | 0) << $11_1) | 0) >> $11_1) | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $165($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$18(
                $199() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                1 | 0,
                (($200() | 0) & 255) | 0 | 0,
                (($201() | 0) & 255) | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $166($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $7_1 = 0,
                $11_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $7_1 = 16;
              $11_1 = 16;
              fimport$18(
                $202() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                2 | 0,
                (((($203() | 0) << $7_1) | 0) >> $7_1) | 0 | 0,
                (((($204() | 0) << $11_1) | 0) >> $11_1) | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $167($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$18(
                $205() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                2 | 0,
                (($206() | 0) & 65535) | 0 | 0,
                (($207() | 0) & 65535) | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $168($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$18(
                $53() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                4 | 0,
                $208() | 0 | 0,
                $209() | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $169($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$18(
                $210() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                4 | 0,
                $211() | 0 | 0,
                $212() | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $170($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$18(
                $213() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                4 | 0,
                $214() | 0 | 0,
                $215() | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $171($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$18(
                $216() | 0 | 0,
                HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0,
                4 | 0,
                $217() | 0 | 0,
                $218() | 0 | 0
              );
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $172($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$19($219() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0, 4 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $173($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$19($220() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0, 8 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $174() {
              return $221() | 0 | 0;
            }

            function $175() {
              return $222() | 0 | 0;
            }

            function $176() {
              return $223() | 0 | 0;
            }

            function $177() {
              return $224() | 0 | 0;
            }

            function $178() {
              return $225() | 0 | 0;
            }

            function $179() {
              return $226() | 0 | 0;
            }

            function $180($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($227() | 0 | 0, $228() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $181($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($229() | 0 | 0, $230() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $182($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($231() | 0 | 0, $232() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $183($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($233() | 0 | 0, $234() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $184($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($235() | 0 | 0, $236() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $185($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($237() | 0 | 0, $238() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $186($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($239() | 0 | 0, $240() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $187($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($241() | 0 | 0, $242() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $188($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($243() | 0 | 0, $244() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $189($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($245() | 0 | 0, $246() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $190($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              fimport$20($247() | 0 | 0, $248() | 0 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0);
              global$0 = ($3_1 + 16) | 0;
              return;
            }

            function $191() {
              return 16368 | 0;
            }

            function $192() {
              return 16392 | 0;
            }

            function $193() {
              return $251() | 0 | 0;
            }

            function $194() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((($252() | 0) << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $195() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((($253() | 0) << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $196() {
              return $254() | 0 | 0;
            }

            function $197() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((($255() | 0) << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $198() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((($256() | 0) << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $199() {
              return $257() | 0 | 0;
            }

            function $200() {
              return (($258() | 0) & 255) | 0 | 0;
            }

            function $201() {
              return (($259() | 0) & 255) | 0 | 0;
            }

            function $202() {
              return $260() | 0 | 0;
            }

            function $203() {
              var $1_1 = 0;
              $1_1 = 16;
              return (((($261() | 0) << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $204() {
              var $1_1 = 0;
              $1_1 = 16;
              return (((($262() | 0) << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $205() {
              return $263() | 0 | 0;
            }

            function $206() {
              return (($264() | 0) & 65535) | 0 | 0;
            }

            function $207() {
              return (($265() | 0) & 65535) | 0 | 0;
            }

            function $208() {
              return $266() | 0 | 0;
            }

            function $209() {
              return $267() | 0 | 0;
            }

            function $210() {
              return $268() | 0 | 0;
            }

            function $211() {
              return $269() | 0 | 0;
            }

            function $212() {
              return $270() | 0 | 0;
            }

            function $213() {
              return $271() | 0 | 0;
            }

            function $214() {
              return $272() | 0 | 0;
            }

            function $215() {
              return $273() | 0 | 0;
            }

            function $216() {
              return $274() | 0 | 0;
            }

            function $217() {
              return $275() | 0 | 0;
            }

            function $218() {
              return $276() | 0 | 0;
            }

            function $219() {
              return $277() | 0 | 0;
            }

            function $220() {
              return $278() | 0 | 0;
            }

            function $221() {
              return 2200 | 0;
            }

            function $222() {
              return 2288 | 0;
            }

            function $223() {
              return 2376 | 0;
            }

            function $224() {
              return 2468 | 0;
            }

            function $225() {
              return 2560 | 0;
            }

            function $226() {
              return 1116 | 0;
            }

            function $227() {
              return $279() | 0 | 0;
            }

            function $228() {
              return 0 | 0;
            }

            function $229() {
              return $280() | 0 | 0;
            }

            function $230() {
              return 0 | 0;
            }

            function $231() {
              return $281() | 0 | 0;
            }

            function $232() {
              return 1 | 0;
            }

            function $233() {
              return $282() | 0 | 0;
            }

            function $234() {
              return 2 | 0;
            }

            function $235() {
              return $283() | 0 | 0;
            }

            function $236() {
              return 3 | 0;
            }

            function $237() {
              return $284() | 0 | 0;
            }

            function $238() {
              return 4 | 0;
            }

            function $239() {
              return $285() | 0 | 0;
            }

            function $240() {
              return 5 | 0;
            }

            function $241() {
              return $286() | 0 | 0;
            }

            function $242() {
              return 4 | 0;
            }

            function $243() {
              return $287() | 0 | 0;
            }

            function $244() {
              return 5 | 0;
            }

            function $245() {
              return $288() | 0 | 0;
            }

            function $246() {
              return 6 | 0;
            }

            function $247() {
              return $289() | 0 | 0;
            }

            function $248() {
              return 7 | 0;
            }

            function $249() {
              FUNCTION_TABLE[23 | 0](17458) | 0;
              return;
            }

            function $250($0_1) {
              $0_1 = $0_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
              $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $160();
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $251() {
              return 16404 | 0;
            }

            function $252() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((128 << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $253() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((127 << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $254() {
              return 16428 | 0;
            }

            function $255() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((128 << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $256() {
              var $1_1 = 0;
              $1_1 = 24;
              return (((127 << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $257() {
              return 16416 | 0;
            }

            function $258() {
              return (0 & 255) | 0 | 0;
            }

            function $259() {
              return (255 & 255) | 0 | 0;
            }

            function $260() {
              return 16440 | 0;
            }

            function $261() {
              var $1_1 = 0;
              $1_1 = 16;
              return (((32768 << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $262() {
              var $1_1 = 0;
              $1_1 = 16;
              return (((32767 << $1_1) | 0) >> $1_1) | 0 | 0;
            }

            function $263() {
              return 16452 | 0;
            }

            function $264() {
              return (0 & 65535) | 0 | 0;
            }

            function $265() {
              return (65535 & 65535) | 0 | 0;
            }

            function $266() {
              return -2147483648 | 0;
            }

            function $267() {
              return 2147483647 | 0;
            }

            function $268() {
              return 16476 | 0;
            }

            function $269() {
              return 0 | 0;
            }

            function $270() {
              return -1 | 0;
            }

            function $271() {
              return 16488 | 0;
            }

            function $272() {
              return -2147483648 | 0;
            }

            function $273() {
              return 2147483647 | 0;
            }

            function $274() {
              return 16500 | 0;
            }

            function $275() {
              return 0 | 0;
            }

            function $276() {
              return -1 | 0;
            }

            function $277() {
              return 16512 | 0;
            }

            function $278() {
              return 16524 | 0;
            }

            function $279() {
              return 2616 | 0;
            }

            function $280() {
              return 2656 | 0;
            }

            function $281() {
              return 2696 | 0;
            }

            function $282() {
              return 2736 | 0;
            }

            function $283() {
              return 2776 | 0;
            }

            function $284() {
              return 2816 | 0;
            }

            function $285() {
              return 2856 | 0;
            }

            function $286() {
              return 2896 | 0;
            }

            function $287() {
              return 2936 | 0;
            }

            function $288() {
              return 2976 | 0;
            }

            function $289() {
              return 3016 | 0;
            }

            function $290() {
              $249();
              return;
            }

            function $291($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              label$1: {
                $1_1 = (($1715($0_1 | 0) | 0) + 1) | 0;
                $2_1 = $1698($1_1 | 0) | 0;
                if ($2_1) {
                  break label$1;
                }
                return 0 | 0;
              }
              return $1707($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $292($0_1) {
              $0_1 = $0_1 | 0;
              return (($0_1 | 0) == (32 | 0)) | ((($0_1 + -9) | 0) >>> 0 < 5 >>> 0) | 0 | 0;
            }

            function $293($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $294($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $295() {
              $293(17460 | 0);
              return 17468 | 0;
            }

            function $296() {
              $294(17460 | 0);
            }

            function $297($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = HEAPU8[(($0_1 + 74) | 0) >> 0] | 0;
              HEAP8[(($0_1 + 74) | 0) >> 0] = ($1_1 + -1) | 0 | $1_1 | 0;
              label$1: {
                if (
                  (HEAP32[(($0_1 + 20) | 0) >> 2] | 0) >>> 0 <=
                  (HEAP32[(($0_1 + 28) | 0) >> 2] | 0) >>> 0
                ) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
              }
              HEAP32[(($0_1 + 28) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 16) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 20) | 0) >> 2] = 0;
              label$2: {
                $1_1 = HEAP32[$0_1 >> 2] | 0;
                if (!(($1_1 & 4) | 0)) {
                  break label$2;
                }
                HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
                return -1 | 0;
              }
              $2_1 = ((HEAP32[(($0_1 + 44) | 0) >> 2] | 0) + (HEAP32[(($0_1 + 48) | 0) >> 2] | 0)) | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = $2_1;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $2_1;
              return ((($1_1 << 27) | 0) >> 31) | 0 | 0;
            }

            function $298($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $2_1 = -1;
              label$1: {
                if ($297($0_1 | 0) | 0) {
                  break label$1;
                }
                if (
                  (FUNCTION_TABLE[HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0]($0_1, ($1_1 + 15) | 0, 1) |
                    0 |
                    0) !=
                  (1 | 0)
                ) {
                  break label$1;
                }
                $2_1 = HEAPU8[(($1_1 + 15) | 0) >> 0] | 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $2_1 | 0;
            }

            function $299($0_1, $1_1, $1$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                $2_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $4$hi = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                $14_1 = 0,
                $15_1 = 0,
                $16_1 = 0,
                $17_1 = 0,
                $21_1 = 0,
                $22_1 = 0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[((i64toi32_i32$1 + 112) | 0) >> 2] = $1_1;
              HEAP32[((i64toi32_i32$1 + 116) | 0) >> 2] = $1$hi;
              $2_1 = HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] | 0;
              $3_1 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
              i64toi32_i32$1 = ($2_1 - $3_1) | 0;
              i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
              $4_1 = i64toi32_i32$1;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $0_1;
              HEAP32[((i64toi32_i32$1 + 120) | 0) >> 2] = $4_1;
              HEAP32[((i64toi32_i32$1 + 124) | 0) >> 2] = i64toi32_i32$0;
              $17_1 = i64toi32_i32$1;
              i64toi32_i32$0 = $1$hi;
              $21_1 = ($3_1 + $1_1) | 0;
              $22_1 = $2_1;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$3 = $1_1;
              if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                $14_1 = 1;
              } else {
                if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                  if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                    $15_1 = 0;
                  } else {
                    $15_1 = 1;
                  }
                  $16_1 = $15_1;
                } else {
                  $16_1 = 0;
                }
                $14_1 = $16_1;
              }
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 0;
              HEAP32[(($17_1 + 104) | 0) >> 2] =
                (($1_1 | 0) != (i64toi32_i32$1 | 0)) | (($1$hi | 0) != (i64toi32_i32$0 | 0)) | 0
                  ? $14_1
                    ? $21_1
                    : $22_1
                  : $2_1;
            }

            function $300($0_1) {
              $0_1 = $0_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$3 = 0,
                $1$hi = 0,
                i64toi32_i32$4 = 0,
                $4_1 = 0,
                $1_1 = 0,
                $3_1 = 0,
                $2_1 = 0,
                $23_1 = 0,
                $24_1 = 0,
                $25_1 = 0,
                $5_1 = 0,
                $26_1 = 0,
                $27_1 = 0,
                $28_1 = 0,
                $11$hi = 0,
                $30_1 = 0,
                $30$hi = 0,
                $38_1 = 0,
                $38$hi = 0,
                $50_1 = 0,
                $52_1 = 0,
                $52$hi = 0,
                $57_1 = 0,
                $57$hi = 0;
              label$1: {
                label$2: {
                  label$3: {
                    i64toi32_i32$2 = $0_1;
                    i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 112) | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 116) | 0) >> 2] | 0;
                    $1_1 = i64toi32_i32$0;
                    $1$hi = i64toi32_i32$1;
                    if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                      break label$3;
                    }
                    i64toi32_i32$2 = $0_1;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 120) | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 124) | 0) >> 2] | 0;
                    $11$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$0 = $11$hi;
                    i64toi32_i32$2 = i64toi32_i32$1;
                    i64toi32_i32$1 = $1$hi;
                    i64toi32_i32$3 = $1_1;
                    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $23_1 = 1;
                    } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                          $24_1 = 0;
                        } else {
                          $24_1 = 1;
                        }
                        $25_1 = $24_1;
                      } else {
                        $25_1 = 0;
                      }
                      $23_1 = $25_1;
                    }
                    if ($23_1) {
                      break label$2;
                    }
                  }
                  $2_1 = $298($0_1 | 0) | 0;
                  if (($2_1 | 0) > (-1 | 0)) {
                    break label$1;
                  }
                }
                HEAP32[(($0_1 + 104) | 0) >> 2] = 0;
                return -1 | 0;
              }
              $3_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
              $4_1 = $3_1;
              label$4: {
                i64toi32_i32$3 = $0_1;
                i64toi32_i32$2 = HEAP32[(($0_1 + 112) | 0) >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(($0_1 + 116) | 0) >> 2] | 0;
                $1_1 = i64toi32_i32$2;
                $1$hi = i64toi32_i32$0;
                if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
                  break label$4;
                }
                $4_1 = $3_1;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$3 = $0_1;
                i64toi32_i32$0 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$0 = -1;
                i64toi32_i32$1 = -1;
                i64toi32_i32$0 = (i64toi32_i32$2 ^ i64toi32_i32$0) | 0;
                $30_1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                $30$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$2 = $1_1;
                i64toi32_i32$3 = $30$hi;
                i64toi32_i32$1 = $30_1;
                i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                }
                $1_1 = i64toi32_i32$4;
                $1$hi = i64toi32_i32$5;
                $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                i64toi32_i32$2 = ($3_1 - $5_1) | 0;
                i64toi32_i32$5 = (i64toi32_i32$2 >> 31) | 0;
                $38_1 = i64toi32_i32$2;
                $38$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $1$hi;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$2 = $38$hi;
                i64toi32_i32$1 = $38_1;
                if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
                  $26_1 = 1;
                } else {
                  if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                      $27_1 = 0;
                    } else {
                      $27_1 = 1;
                    }
                    $28_1 = $27_1;
                  } else {
                    $28_1 = 0;
                  }
                  $26_1 = $28_1;
                }
                if ($26_1) {
                  break label$4;
                }
                i64toi32_i32$0 = $1$hi;
                $4_1 = ($5_1 + $1_1) | 0;
              }
              HEAP32[(($0_1 + 104) | 0) >> 2] = $4_1;
              $4_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              label$5: {
                if (!$3_1) {
                  break label$5;
                }
                $50_1 = $0_1;
                i64toi32_i32$1 = $0_1;
                i64toi32_i32$0 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                $52_1 = i64toi32_i32$0;
                $52$hi = i64toi32_i32$5;
                i64toi32_i32$0 = ((($3_1 - $4_1) | 0) + 1) | 0;
                i64toi32_i32$5 = (i64toi32_i32$0 >> 31) | 0;
                $57_1 = i64toi32_i32$0;
                $57$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $52$hi;
                i64toi32_i32$1 = $52_1;
                i64toi32_i32$0 = $57$hi;
                i64toi32_i32$2 = $57_1;
                i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                }
                i64toi32_i32$1 = $50_1;
                HEAP32[((i64toi32_i32$1 + 120) | 0) >> 2] = i64toi32_i32$3;
                HEAP32[((i64toi32_i32$1 + 124) | 0) >> 2] = i64toi32_i32$4;
              }
              label$6: {
                $0_1 = ($4_1 + -1) | 0;
                if (($2_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
                  break label$6;
                }
                HEAP8[$0_1 >> 0] = $2_1;
              }
              return $2_1 | 0;
            }

            function $301($0_1) {
              $0_1 = $0_1 | 0;
              return ((($0_1 + -48) | 0) >>> 0 < 10 >>> 0) | 0;
            }

            function $302($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $301($0_1 | 0) | 0 | 0;
            }

            function $303($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$3 = 0,
                $4$hi = 0,
                $18_1 = 0,
                $20_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $11$hi = 0,
                $18$hi = 0,
                $19_1 = 0,
                $19$hi = 0,
                $4_1 = 0,
                $24$hi = 0;
              label$1: {
                label$2: {
                  if (!(($3_1 & 64) | 0)) {
                    break label$2;
                  }
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = 0;
                  $11$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$2 = $1_1;
                  i64toi32_i32$1 = $11$hi;
                  i64toi32_i32$3 = ($3_1 + -64) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                    $18_1 = 0;
                  } else {
                    i64toi32_i32$1 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                      0;
                    $18_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                  }
                  $2_1 = $18_1;
                  $2$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $1_1 = 0;
                  $1$hi = i64toi32_i32$1;
                  break label$1;
                }
                if (!$3_1) {
                  break label$1;
                }
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = 0;
                $18$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$2 = $18$hi;
                i64toi32_i32$3 = (64 - $3_1) | 0;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = 0;
                  $20_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                } else {
                  i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                  $20_1 =
                    (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                      ((32 - i64toi32_i32$4) | 0)) |
                    0 |
                    ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                    0;
                }
                $19_1 = $20_1;
                $19$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = 0;
                $4_1 = $3_1;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                  $21_1 = 0;
                } else {
                  i64toi32_i32$0 =
                    (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                      ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                    0;
                  $21_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                }
                $24$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $19$hi;
                i64toi32_i32$2 = $19_1;
                i64toi32_i32$1 = $24$hi;
                i64toi32_i32$3 = $21_1;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $2$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  $22_1 = 0;
                } else {
                  i64toi32_i32$2 =
                    (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                      ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                    0;
                  $22_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                }
                $1_1 = $22_1;
                $1$hi = i64toi32_i32$2;
              }
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$0 = $0_1;
              HEAP32[i64toi32_i32$0 >> 2] = $1_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$2;
              i64toi32_i32$2 = $2$hi;
              HEAP32[((i64toi32_i32$0 + 8) | 0) >> 2] = $2_1;
              HEAP32[((i64toi32_i32$0 + 12) | 0) >> 2] = i64toi32_i32$2;
            }

            function $304($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = Math_fround($1_1);
              var i64toi32_i32$1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                $4_1 = 0,
                i64toi32_i32$4 = 0,
                $2_1 = 0,
                $5_1 = 0,
                $5$hi = 0,
                $6_1 = 0,
                $6$hi = 0,
                $3_1 = 0,
                $24_1 = 0,
                $25_1 = 0,
                $26_1 = 0,
                $27_1 = 0,
                $30_1 = 0,
                $38_1 = 0,
                $38$hi = 0,
                $42$hi = 0,
                $48_1 = 0,
                $49_1 = 0,
                $49$hi = 0,
                $53$hi = 0,
                $54_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
                  $4_1 = ($3_1 & 2147483647) | 0;
                  if ((($4_1 + -8388608) | 0) >>> 0 > 2130706431 >>> 0) {
                    break label$2;
                  }
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 25;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                    $24_1 = 0;
                  } else {
                    i64toi32_i32$1 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                      0;
                    $24_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                  }
                  i64toi32_i32$0 = $24_1;
                  i64toi32_i32$2 = 1065353216;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  $5_1 = i64toi32_i32$4;
                  $5$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = 0;
                  $6_1 = 0;
                  $6$hi = i64toi32_i32$5;
                  break label$1;
                }
                label$3: {
                  if ($4_1 >>> 0 < 2139095040 >>> 0) {
                    break label$3;
                  }
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$3 = 25;
                  i64toi32_i32$2 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$2) | 0;
                    $25_1 = 0;
                  } else {
                    i64toi32_i32$0 =
                      (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                        ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$2) | 0) |
                      0;
                    $25_1 = (i64toi32_i32$1 << i64toi32_i32$2) | 0;
                  }
                  i64toi32_i32$5 = $25_1;
                  i64toi32_i32$1 = 2147418112;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                  $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                  $5$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $6_1 = 0;
                  $6$hi = i64toi32_i32$1;
                  break label$1;
                }
                label$4: {
                  if ($4_1) {
                    break label$4;
                  }
                  i64toi32_i32$1 = 0;
                  $6_1 = 0;
                  $6$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $5_1 = 0;
                  $5$hi = i64toi32_i32$1;
                  break label$1;
                }
                i64toi32_i32$1 = 0;
                $30_1 = $4_1;
                $4_1 = Math_clz32($4_1);
                i64toi32_i32$5 = 0;
                $303($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, ($4_1 + 81) | 0 | 0);
                i64toi32_i32$0 = ($2_1 + 8) | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$5 = 65536;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = (i64toi32_i32$1 ^ i64toi32_i32$5) | 0;
                $38_1 = (i64toi32_i32$0 ^ i64toi32_i32$3) | 0;
                $38$hi = i64toi32_i32$5;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = (16265 - $4_1) | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = 48;
                i64toi32_i32$2 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$2) | 0;
                  $26_1 = 0;
                } else {
                  i64toi32_i32$0 =
                    (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                      ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$5 << i64toi32_i32$2) | 0) |
                    0;
                  $26_1 = (i64toi32_i32$1 << i64toi32_i32$2) | 0;
                }
                $42$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $38$hi;
                i64toi32_i32$5 = $38_1;
                i64toi32_i32$1 = $42$hi;
                i64toi32_i32$3 = $26_1;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                $5$hi = i64toi32_i32$1;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                $6_1 = i64toi32_i32$1;
                $6$hi = i64toi32_i32$5;
              }
              i64toi32_i32$5 = $6$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[i64toi32_i32$1 >> 2] = $6_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$5;
              $48_1 = i64toi32_i32$1;
              i64toi32_i32$5 = $5$hi;
              $49_1 = $5_1;
              $49$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              i64toi32_i32$0 = ($3_1 & -2147483648) | 0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$2 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                $27_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                    ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$5 << i64toi32_i32$2) | 0) |
                  0;
                $27_1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
              }
              $53$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $49$hi;
              i64toi32_i32$5 = $49_1;
              i64toi32_i32$0 = $53$hi;
              i64toi32_i32$3 = $27_1;
              i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
              $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
              i64toi32_i32$5 = $48_1;
              HEAP32[((i64toi32_i32$5 + 8) | 0) >> 2] = $54_1;
              HEAP32[((i64toi32_i32$5 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $305() {
              return 17472 | 0;
            }

            function $306($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$3 = 0,
                $3_1 = 0,
                i64toi32_i32$4 = 0,
                $2_1 = 0,
                $4_1 = 0,
                $4$hi = 0,
                $5_1 = 0,
                $5$hi = 0,
                $21_1 = 0,
                $22_1 = 0,
                $19_1 = 0,
                $27_1 = 0,
                $27$hi = 0,
                $31$hi = 0,
                $32_1 = 0,
                $32$hi = 0,
                $36$hi = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  if ($1_1) {
                    break label$2;
                  }
                  i64toi32_i32$0 = 0;
                  $4_1 = 0;
                  $4$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  $5_1 = 0;
                  $5$hi = i64toi32_i32$0;
                  break label$1;
                }
                $3_1 = ($1_1 >> 31) | 0;
                $3_1 = ((($1_1 + $3_1) | 0) ^ $3_1) | 0;
                i64toi32_i32$0 = 0;
                $19_1 = $3_1;
                $3_1 = Math_clz32($3_1);
                i64toi32_i32$1 = 0;
                $303($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, ($3_1 + 81) | 0 | 0);
                i64toi32_i32$2 = ($2_1 + 8) | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                i64toi32_i32$2 = i64toi32_i32$1;
                i64toi32_i32$1 = 65536;
                i64toi32_i32$3 = 0;
                i64toi32_i32$1 = (i64toi32_i32$0 ^ i64toi32_i32$1) | 0;
                $27_1 = (i64toi32_i32$2 ^ i64toi32_i32$3) | 0;
                $27$hi = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = (16414 - $3_1) | 0;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = 48;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  $21_1 = 0;
                } else {
                  i64toi32_i32$2 =
                    (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                      ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                    0;
                  $21_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                }
                $31$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $27$hi;
                i64toi32_i32$1 = $27_1;
                i64toi32_i32$0 = $31$hi;
                i64toi32_i32$3 = $21_1;
                i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                }
                $32_1 = i64toi32_i32$4;
                $32$hi = i64toi32_i32$5;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = ($1_1 & -2147483648) | 0;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 32;
                i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                  $22_1 = 0;
                } else {
                  i64toi32_i32$1 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$5 << i64toi32_i32$0) | 0) |
                    0;
                  $22_1 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                }
                $36$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $32$hi;
                i64toi32_i32$5 = $32_1;
                i64toi32_i32$2 = $36$hi;
                i64toi32_i32$3 = $22_1;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                $5$hi = i64toi32_i32$2;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                $4_1 = i64toi32_i32$2;
                $4$hi = i64toi32_i32$5;
              }
              i64toi32_i32$5 = $4$hi;
              i64toi32_i32$2 = $0_1;
              HEAP32[i64toi32_i32$2 >> 2] = $4_1;
              HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] = i64toi32_i32$5;
              i64toi32_i32$5 = $5$hi;
              HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] = $5_1;
              HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] = i64toi32_i32$5;
              global$0 = ($2_1 + 16) | 0;
            }

            function $307($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                $4$hi = 0,
                $18_1 = 0,
                $20_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $11$hi = 0,
                $18$hi = 0,
                $19_1 = 0,
                $19$hi = 0,
                $4_1 = 0,
                $24$hi = 0;
              label$1: {
                label$2: {
                  if (!(($3_1 & 64) | 0)) {
                    break label$2;
                  }
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$0 = 0;
                  $11$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$2 = $2_1;
                  i64toi32_i32$1 = $11$hi;
                  i64toi32_i32$3 = ($3_1 + -64) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $18_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                    $18_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $1_1 = $18_1;
                  $1$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $2_1 = 0;
                  $2$hi = i64toi32_i32$1;
                  break label$1;
                }
                if (!$3_1) {
                  break label$1;
                }
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = 0;
                $18$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$2 = $18$hi;
                i64toi32_i32$3 = (64 - $3_1) | 0;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  $20_1 = 0;
                } else {
                  i64toi32_i32$2 =
                    (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                      ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                    0;
                  $20_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                }
                $19_1 = $20_1;
                $19$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$2 = 0;
                $4_1 = $3_1;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$1 = $1_1;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$0 = 0;
                  $21_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                } else {
                  i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                  $21_1 =
                    (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                      ((32 - i64toi32_i32$4) | 0)) |
                    0 |
                    ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                    0;
                }
                $24$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $19$hi;
                i64toi32_i32$2 = $19_1;
                i64toi32_i32$1 = $24$hi;
                i64toi32_i32$3 = $21_1;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $1$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = 0;
                  $22_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                } else {
                  i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                  $22_1 =
                    (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                      ((32 - i64toi32_i32$4) | 0)) |
                    0 |
                    ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                    0;
                }
                $2_1 = $22_1;
                $2$hi = i64toi32_i32$2;
              }
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$0 = $0_1;
              HEAP32[i64toi32_i32$0 >> 2] = $1_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$2;
              i64toi32_i32$2 = $2$hi;
              HEAP32[((i64toi32_i32$0 + 8) | 0) >> 2] = $2_1;
              HEAP32[((i64toi32_i32$0 + 12) | 0) >> 2] = i64toi32_i32$2;
            }

            function $308($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                $5_1 = 0,
                $14$hi = 0,
                $14_1 = 0,
                $12$hi = 0,
                $11$hi = 0,
                $10$hi = 0,
                $15$hi = 0,
                $12_1 = 0,
                $6_1 = 0,
                $15_1 = 0,
                $11_1 = 0,
                $10_1 = 0,
                $18$hi = 0,
                $8_1 = 0,
                $18_1 = 0,
                $13$hi = 0,
                $16$hi = 0,
                $17$hi = 0,
                $7_1 = 0,
                $13_1 = 0,
                $16_1 = 0,
                $17_1 = 0,
                $19$hi = 0,
                $22$hi = 0,
                $19_1 = 0,
                $9_1 = 0,
                $20$hi = 0,
                $21$hi = 0,
                $23$hi = 0,
                $24$hi = 0,
                $228_1 = 0,
                $229_1 = 0,
                $230_1 = 0,
                $231_1 = 0,
                $232_1 = 0,
                $233_1 = 0,
                $234_1 = 0,
                $235_1 = 0,
                $237_1 = 0,
                $238_1 = 0,
                $239_1 = 0,
                $240_1 = 0,
                $241_1 = 0,
                $242_1 = 0,
                $244_1 = 0,
                $246_1 = 0,
                $248_1 = 0,
                $249_1 = 0,
                $251_1 = 0,
                $252_1 = 0,
                $254_1 = 0,
                $256_1 = 0,
                $20_1 = 0,
                $257_1 = 0,
                $258_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $259_1 = 0,
                $24_1 = 0,
                $260_1 = 0,
                $261_1 = 0,
                $262_1 = 0,
                $263_1 = 0,
                $265_1 = 0,
                $266_1 = 0,
                $267_1 = 0,
                $268_1 = 0,
                $270_1 = 0,
                $271_1 = 0,
                $272_1 = 0,
                $273_1 = 0,
                $274_1 = 0,
                $275_1 = 0,
                $276_1 = 0,
                $278_1 = 0,
                $29_1 = 0,
                $29$hi = 0,
                $31$hi = 0,
                $34_1 = 0,
                $34$hi = 0,
                $36$hi = 0,
                $39_1 = 0,
                $39$hi = 0,
                $43$hi = 0,
                $70_1 = 0,
                $74_1 = 0,
                $81_1 = 0,
                $85_1 = 0,
                $94_1 = 0,
                $94$hi = 0,
                $106_1 = 0,
                $106$hi = 0,
                $128_1 = 0,
                $129_1 = 0,
                $129$hi = 0,
                $130_1 = 0,
                $130$hi = 0,
                $137$hi = 0,
                $140$hi = 0,
                $150_1 = 0,
                $150$hi = 0,
                $155$hi = 0,
                $162_1 = 0,
                $163_1 = 0,
                $163$hi = 0,
                $164_1 = 0,
                $164$hi = 0,
                $171$hi = 0,
                $174$hi = 0,
                $186_1 = 0,
                $186$hi = 0,
                $191$hi = 0,
                $194_1 = 0,
                $194$hi = 0,
                $196$hi = 0,
                $207_1 = 0,
                $207$hi = 0,
                $215_1 = 0,
                $215$hi = 0,
                $222_1 = 0,
                $222$hi = 0,
                $227_1 = 0,
                $227$hi = 0,
                $236_1 = 0,
                $236$hi = 0,
                $243_1 = 0,
                $243$hi = 0,
                $245_1 = 0,
                $245$hi = 0,
                $247_1 = 0,
                $247$hi = 0,
                $250_1 = 0,
                $252$hi = 0,
                $253_1 = 0,
                $253$hi = 0,
                $255_1 = 0,
                $255$hi = 0,
                $264_1 = 0,
                $264$hi = 0,
                $269_1 = 0,
                $269$hi = 0,
                $277_1 = 0,
                $277$hi = 0,
                $280$hi = 0,
                $23_1 = 0,
                $296_1 = 0,
                $296$hi = 0,
                $300_1 = 0,
                $301_1 = 0,
                $301$hi = 0,
                $305_1 = 0,
                $305$hi = 0,
                $309_1 = 0,
                $310$hi = 0,
                $311_1 = 0,
                $311$hi = 0,
                $312_1 = 0,
                $312$hi = 0,
                $315_1 = 0,
                $316$hi = 0,
                $319_1 = 0,
                $320$hi = 0,
                $321$hi = 0,
                $325_1 = 0,
                $326$hi = 0,
                $327$hi = 0,
                $330_1 = 0,
                $330$hi = 0,
                $331_1 = 0,
                $331$hi = 0,
                $338_1 = 0,
                $338$hi = 0,
                $344_1 = 0,
                $344$hi = 0,
                $346$hi = 0,
                $347_1 = 0,
                $347$hi = 0,
                $348_1 = 0,
                $348$hi = 0,
                $349_1 = 0,
                $349$hi = 0,
                $351$hi = 0,
                $355_1 = 0,
                $356$hi = 0,
                $357_1 = 0,
                $357$hi = 0,
                $358_1 = 0,
                $358$hi = 0,
                $360_1 = 0,
                $360$hi = 0,
                $363_1 = 0,
                $364$hi = 0,
                $367_1 = 0,
                $368$hi = 0,
                $369$hi = 0,
                $372_1 = 0,
                $373$hi = 0,
                $375$hi = 0,
                $376_1 = 0,
                $376$hi = 0,
                $380_1 = 0,
                $381$hi = 0,
                $382_1 = 0,
                $382$hi = 0,
                $383_1 = 0,
                $383$hi = 0,
                $386_1 = 0,
                $387$hi = 0,
                $390_1 = 0,
                $391$hi = 0,
                $392$hi = 0,
                $396_1 = 0,
                $397$hi = 0,
                $407_1 = 0,
                $407$hi = 0,
                $409$hi = 0,
                $412_1 = 0,
                $412$hi = 0,
                $414$hi = 0,
                $418_1 = 0,
                $418$hi = 0,
                $420$hi = 0,
                $454_1 = 0,
                $454$hi = 0,
                $456_1 = 0,
                $456$hi = 0,
                $457_1 = 0,
                $457$hi = 0,
                $459_1 = 0,
                $459$hi = 0,
                $463_1 = 0,
                $463$hi = 0,
                $465_1 = 0,
                $466$hi = 0,
                $471_1 = 0,
                $471$hi = 0,
                $475_1 = 0,
                $475$hi = 0,
                $484$hi = 0,
                $486_1 = 0,
                $486$hi = 0,
                $492_1 = 0,
                $498_1 = 0,
                $498$hi = 0,
                $503_1 = 0,
                $504$hi = 0,
                $508_1 = 0,
                $508$hi = 0,
                $512_1 = 0,
                $512$hi = 0,
                $515_1 = 0,
                $515$hi = 0,
                $519_1 = 0,
                $520$hi = 0;
              $5_1 = (global$0 - 96) | 0;
              global$0 = $5_1;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $228_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $228_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $29_1 = $228_1;
              $29$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                $229_1 = 0;
              } else {
                i64toi32_i32$2 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                  0;
                $229_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
              }
              $31$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $29$hi;
              i64toi32_i32$1 = $29_1;
              i64toi32_i32$0 = $31$hi;
              i64toi32_i32$3 = $229_1;
              i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
              $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
              $10$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 17;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $230_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $230_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $34_1 = $230_1;
              $34$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 47;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                $231_1 = 0;
              } else {
                i64toi32_i32$2 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                  0;
                $231_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
              }
              $36$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $34$hi;
              i64toi32_i32$1 = $34_1;
              i64toi32_i32$0 = $36$hi;
              i64toi32_i32$3 = $231_1;
              i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
              $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
              $11$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 49;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $232_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $232_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $39_1 = $232_1;
              $39$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$2 = 65535;
              i64toi32_i32$3 = -1;
              i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
              $12_1 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
              $12$hi = i64toi32_i32$2;
              i64toi32_i32$1 = $12_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 15;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                $233_1 = 0;
              } else {
                i64toi32_i32$0 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                  0;
                $233_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
              }
              $43$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $39$hi;
              i64toi32_i32$2 = $39_1;
              i64toi32_i32$1 = $43$hi;
              i64toi32_i32$3 = $233_1;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $13$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$3 = $2_1;
              i64toi32_i32$2 = (i64toi32_i32$1 ^ i64toi32_i32$2) | 0;
              i64toi32_i32$1 = (i64toi32_i32$0 ^ i64toi32_i32$3) | 0;
              i64toi32_i32$0 = -2147483648;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
              $14_1 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
              $14$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$1 = 65535;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $15_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
              $15$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $15_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $234_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                $234_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $16_1 = $234_1;
              $16$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $12$hi;
              i64toi32_i32$1 = $12_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 17;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $235_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                $235_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $17_1 = $235_1;
              $17$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $237_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $237_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $6_1 = ($237_1 & 32767) | 0;
              label$1: {
                label$2: {
                  label$3: {
                    i64toi32_i32$1 = $2$hi;
                    i64toi32_i32$0 = $2_1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 48;
                    i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                      i64toi32_i32$2 = 0;
                      $238_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                    } else {
                      i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                      $238_1 =
                        (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                          ((32 - i64toi32_i32$4) | 0)) |
                        0 |
                        ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                        0;
                    }
                    $7_1 = ($238_1 & 32767) | 0;
                    if ((($7_1 + -1) | 0) >>> 0 > 32765 >>> 0) {
                      break label$3;
                    }
                    $8_1 = 0;
                    if ((($6_1 + -1) | 0) >>> 0 < 32766 >>> 0) {
                      break label$2;
                    }
                  }
                  label$4: {
                    i64toi32_i32$2 = $1$hi;
                    $70_1 = !($1_1 | i64toi32_i32$2 | 0);
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$1 = $2_1;
                    i64toi32_i32$0 = 2147483647;
                    i64toi32_i32$3 = -1;
                    i64toi32_i32$0 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
                    $18_1 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                    $18$hi = i64toi32_i32$0;
                    i64toi32_i32$2 = $18_1;
                    i64toi32_i32$1 = 2147418112;
                    i64toi32_i32$3 = 0;
                    $74_1 =
                      (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) |
                      ((((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = i64toi32_i32$0;
                    i64toi32_i32$2 = i64toi32_i32$0;
                    i64toi32_i32$3 = $18_1;
                    i64toi32_i32$0 = 2147418112;
                    i64toi32_i32$1 = 0;
                    if (
                      (((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0)) &
                        ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0))) |
                      0
                        ? $70_1
                        : $74_1
                    ) {
                      break label$4;
                    }
                    i64toi32_i32$3 = $2$hi;
                    i64toi32_i32$1 = $2_1;
                    i64toi32_i32$2 = 32768;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                    $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                    $14$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  label$5: {
                    i64toi32_i32$2 = $3$hi;
                    $81_1 = !($3_1 | i64toi32_i32$2 | 0);
                    i64toi32_i32$2 = $4$hi;
                    i64toi32_i32$3 = $4_1;
                    i64toi32_i32$1 = 2147483647;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                    $2_1 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                    $2$hi = i64toi32_i32$1;
                    i64toi32_i32$2 = $2_1;
                    i64toi32_i32$3 = 2147418112;
                    i64toi32_i32$0 = 0;
                    $85_1 =
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = i64toi32_i32$1;
                    i64toi32_i32$0 = $2_1;
                    i64toi32_i32$1 = 2147418112;
                    i64toi32_i32$3 = 0;
                    if (
                      (((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0)) &
                        ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0))) |
                      0
                        ? $81_1
                        : $85_1
                    ) {
                      break label$5;
                    }
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$3 = $4_1;
                    i64toi32_i32$2 = 32768;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                    $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                    $14$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $3$hi;
                    $1_1 = $3_1;
                    $1$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  label$6: {
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$2 = $18$hi;
                    i64toi32_i32$0 = $18_1;
                    i64toi32_i32$3 = 2147418112;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$3 = (i64toi32_i32$2 ^ i64toi32_i32$3) | 0;
                    $94_1 = (i64toi32_i32$0 ^ i64toi32_i32$1) | 0;
                    $94$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$2 = $1_1;
                    i64toi32_i32$0 = $94$hi;
                    i64toi32_i32$1 = $94_1;
                    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$1 = 0;
                    if (
                      ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0)) |
                      ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0)) |
                      0
                    ) {
                      break label$6;
                    }
                    label$7: {
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$3 = $2$hi;
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$1 = $3_1;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
                        break label$7;
                      }
                      i64toi32_i32$0 = 2147450880;
                      $14_1 = 0;
                      $14$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      $1_1 = 0;
                      $1$hi = i64toi32_i32$0;
                      break label$1;
                    }
                    i64toi32_i32$0 = $14$hi;
                    i64toi32_i32$3 = $14_1;
                    i64toi32_i32$1 = 2147418112;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                    $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                    $14$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = 0;
                    $1_1 = 0;
                    $1$hi = i64toi32_i32$1;
                    break label$1;
                  }
                  label$8: {
                    i64toi32_i32$1 = $3$hi;
                    i64toi32_i32$1 = $2$hi;
                    i64toi32_i32$0 = $2_1;
                    i64toi32_i32$3 = 2147418112;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = (i64toi32_i32$1 ^ i64toi32_i32$3) | 0;
                    $106_1 = (i64toi32_i32$0 ^ i64toi32_i32$2) | 0;
                    $106$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$1 = $3_1;
                    i64toi32_i32$0 = $106$hi;
                    i64toi32_i32$2 = $106_1;
                    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = 0;
                    if (
                      ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0)) |
                      ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0)) |
                      0
                    ) {
                      break label$8;
                    }
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$3 = $18$hi;
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$2 = $1_1;
                    i64toi32_i32$0 = $18$hi;
                    i64toi32_i32$1 = $18_1;
                    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                    $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    $2$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = 0;
                    $1_1 = 0;
                    $1$hi = i64toi32_i32$0;
                    label$9: {
                      i64toi32_i32$0 = $2$hi;
                      if (!!($2_1 | i64toi32_i32$0 | 0)) {
                        break label$9;
                      }
                      i64toi32_i32$0 = 2147450880;
                      $14_1 = 0;
                      $14$hi = i64toi32_i32$0;
                      break label$1;
                    }
                    i64toi32_i32$0 = $14$hi;
                    i64toi32_i32$3 = $14_1;
                    i64toi32_i32$2 = 2147418112;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                    $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                    $14$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  label$10: {
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$2 = $18$hi;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$0 = $1_1;
                    i64toi32_i32$3 = $18$hi;
                    i64toi32_i32$1 = $18_1;
                    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$1 = 0;
                    if (
                      ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0)) |
                      ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                      0
                    ) {
                      break label$10;
                    }
                    i64toi32_i32$2 = 0;
                    $1_1 = 0;
                    $1$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  label$11: {
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$1 = $3_1;
                    i64toi32_i32$3 = $2$hi;
                    i64toi32_i32$0 = $2_1;
                    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$0 = 0;
                    if (
                      ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0)) |
                      ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0)) |
                      0
                    ) {
                      break label$11;
                    }
                    i64toi32_i32$2 = 0;
                    $1_1 = 0;
                    $1$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  $8_1 = 0;
                  label$12: {
                    i64toi32_i32$2 = $18$hi;
                    i64toi32_i32$0 = $18_1;
                    i64toi32_i32$3 = 65535;
                    i64toi32_i32$1 = -1;
                    if (
                      (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$12;
                    }
                    $128_1 = ($5_1 + 80) | 0;
                    i64toi32_i32$0 = $1$hi;
                    $129_1 = $1_1;
                    $129$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $15$hi;
                    $130_1 = $15_1;
                    $130$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$0 = $15$hi;
                    $8_1 = !($15_1 | i64toi32_i32$0 | 0);
                    i64toi32_i32$4 = $8_1;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$2 = $15$hi;
                    i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
                    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
                    i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
                    i64toi32_i32$4 = 0;
                    if ((i64toi32_i32$0 | 0) == (32 | 0)) {
                      $239_1 = (Math_clz32(i64toi32_i32$3) + 32) | 0;
                    } else {
                      $239_1 = i64toi32_i32$0;
                    }
                    $137$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = 0;
                    $140$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $137$hi;
                    i64toi32_i32$3 = $239_1;
                    i64toi32_i32$1 = $140$hi;
                    i64toi32_i32$0 = ($8_1 << 6) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$4 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $8_1 = i64toi32_i32$2;
                    i64toi32_i32$5 = $129$hi;
                    i64toi32_i32$3 = $130$hi;
                    $303(
                      $128_1 | 0,
                      $129_1 | 0,
                      i64toi32_i32$5 | 0,
                      $130_1 | 0,
                      i64toi32_i32$3 | 0,
                      (i64toi32_i32$2 + -15) | 0 | 0
                    );
                    $8_1 = (16 - i64toi32_i32$2) | 0;
                    i64toi32_i32$4 = $5_1;
                    i64toi32_i32$3 = HEAP32[((i64toi32_i32$4 + 80) | 0) >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 84) | 0) >> 2] | 0;
                    $1_1 = i64toi32_i32$3;
                    $1$hi = i64toi32_i32$5;
                    i64toi32_i32$4 = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 32;
                    i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $240_1 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                      $240_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$4 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $150_1 = $240_1;
                    $150$hi = i64toi32_i32$3;
                    i64toi32_i32$5 = ($5_1 + 88) | 0;
                    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                    i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                    $15_1 = i64toi32_i32$3;
                    $15$hi = i64toi32_i32$4;
                    i64toi32_i32$5 = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 32;
                    i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$5 << i64toi32_i32$1) | 0;
                      $241_1 = 0;
                    } else {
                      i64toi32_i32$3 =
                        (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                          ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                        0;
                      $241_1 = (i64toi32_i32$5 << i64toi32_i32$1) | 0;
                    }
                    $155$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $150$hi;
                    i64toi32_i32$4 = $150_1;
                    i64toi32_i32$5 = $155$hi;
                    i64toi32_i32$0 = $241_1;
                    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                    $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
                    $10$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $15$hi;
                    i64toi32_i32$3 = $15_1;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$0 = 32;
                    i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$4 = 0;
                      $242_1 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$4 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                      $242_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$3 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $16_1 = $242_1;
                    $16$hi = i64toi32_i32$4;
                  }
                  i64toi32_i32$4 = $2$hi;
                  i64toi32_i32$5 = $2_1;
                  i64toi32_i32$3 = 65535;
                  i64toi32_i32$0 = -1;
                  if (
                    (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0)) &
                      (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$2;
                  }
                  $162_1 = ($5_1 + 64) | 0;
                  i64toi32_i32$5 = $3$hi;
                  $163_1 = $3_1;
                  $163$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $12$hi;
                  $164_1 = $12_1;
                  $164$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$5 = $12$hi;
                  $9_1 = !($12_1 | i64toi32_i32$5 | 0);
                  i64toi32_i32$1 = $9_1;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$4 = $12$hi;
                  i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
                  i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
                  i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
                  i64toi32_i32$1 = 0;
                  if ((i64toi32_i32$5 | 0) == (32 | 0)) {
                    $244_1 = (Math_clz32(i64toi32_i32$3) + 32) | 0;
                  } else {
                    $244_1 = i64toi32_i32$5;
                  }
                  $171$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $174$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $171$hi;
                  i64toi32_i32$3 = $244_1;
                  i64toi32_i32$0 = $174$hi;
                  i64toi32_i32$5 = ($9_1 << 6) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                  }
                  $9_1 = i64toi32_i32$4;
                  i64toi32_i32$2 = $163$hi;
                  i64toi32_i32$3 = $164$hi;
                  $303(
                    $162_1 | 0,
                    $163_1 | 0,
                    i64toi32_i32$2 | 0,
                    $164_1 | 0,
                    i64toi32_i32$3 | 0,
                    (i64toi32_i32$4 + -15) | 0 | 0
                  );
                  $8_1 = ((($8_1 - i64toi32_i32$4) | 0) + 16) | 0;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 64) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 68) | 0) >> 2] | 0;
                  $3_1 = i64toi32_i32$3;
                  $3$hi = i64toi32_i32$2;
                  i64toi32_i32$1 = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = 49;
                  i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = 0;
                    $246_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$3 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                    $246_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$1 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $186_1 = $246_1;
                  $186$hi = i64toi32_i32$3;
                  i64toi32_i32$2 = ($5_1 + 72) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$3;
                  $2$hi = i64toi32_i32$1;
                  i64toi32_i32$2 = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = 15;
                  i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                    $248_1 = 0;
                  } else {
                    i64toi32_i32$3 =
                      (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$1 << i64toi32_i32$0) | 0) |
                      0;
                    $248_1 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                  }
                  $191$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $186$hi;
                  i64toi32_i32$1 = $186_1;
                  i64toi32_i32$2 = $191$hi;
                  i64toi32_i32$5 = $248_1;
                  i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                  $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                  $13$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$3 = $3_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$5 = 17;
                  i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $249_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                    $249_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $194_1 = $249_1;
                  $194$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$2 = $2_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = 47;
                  i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                    $251_1 = 0;
                  } else {
                    i64toi32_i32$3 =
                      (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$1 << i64toi32_i32$0) | 0) |
                      0;
                    $251_1 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                  }
                  $196$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $194$hi;
                  i64toi32_i32$1 = $194_1;
                  i64toi32_i32$2 = $196$hi;
                  i64toi32_i32$5 = $251_1;
                  i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                  $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                  $11$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$3 = $2_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$5 = 17;
                  i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $252_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                    $252_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $17_1 = $252_1;
                  $17$hi = i64toi32_i32$1;
                }
                i64toi32_i32$1 = $11$hi;
                i64toi32_i32$2 = $11_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = -1;
                i64toi32_i32$3 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                $2_1 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
                $2$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$1 = $1_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$5 = -1;
                i64toi32_i32$2 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                $4_1 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$1 =
                  __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                $19_1 = i64toi32_i32$1;
                $19$hi = i64toi32_i32$2;
                $207_1 = i64toi32_i32$1;
                $207$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$5 = 15;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                  $254_1 = 0;
                } else {
                  i64toi32_i32$1 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$2 << i64toi32_i32$0) | 0) |
                    0;
                  $254_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                }
                i64toi32_i32$2 = $254_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = -32768;
                i64toi32_i32$3 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                $1_1 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
                $1$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$1 = $10_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$5 = -1;
                i64toi32_i32$2 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                $3_1 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                $3$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 =
                  __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                $215_1 = i64toi32_i32$1;
                $215$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $207$hi;
                i64toi32_i32$3 = $207_1;
                i64toi32_i32$1 = $215$hi;
                i64toi32_i32$5 = $215_1;
                i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                }
                $10_1 = i64toi32_i32$0;
                $10$hi = i64toi32_i32$4;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 32;
                i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                  $256_1 = 0;
                } else {
                  i64toi32_i32$3 =
                    (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                      ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                    0;
                  $256_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                }
                $12_1 = $256_1;
                $12$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 =
                  __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $222_1 = i64toi32_i32$2;
                $222$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $12$hi;
                i64toi32_i32$4 = $12_1;
                i64toi32_i32$2 = $222$hi;
                i64toi32_i32$5 = $222_1;
                i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                }
                $11_1 = i64toi32_i32$1;
                $11$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $12$hi;
                i64toi32_i32$0 = $11$hi;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$4 = $12$hi;
                i64toi32_i32$5 = $12_1;
                i64toi32_i32$3 = 0;
                $227_1 =
                  (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) |
                  ((((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0)) &
                    (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                    0) |
                  0;
                $227$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 =
                  __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $20_1 = i64toi32_i32$0;
                $20$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = $15$hi;
                i64toi32_i32$5 = $15_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$4 = -1;
                i64toi32_i32$0 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                $12_1 = (i64toi32_i32$5 & i64toi32_i32$4) | 0;
                $12$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$5 = $12$hi;
                i64toi32_i32$5 =
                  __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $236_1 = i64toi32_i32$5;
                $236$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $20$hi;
                i64toi32_i32$3 = $20_1;
                i64toi32_i32$5 = $236$hi;
                i64toi32_i32$4 = $236_1;
                i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$4) | 0;
                i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                }
                $18_1 = i64toi32_i32$2;
                $18$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $13$hi;
                i64toi32_i32$0 = $13_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$4 = -1;
                i64toi32_i32$3 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                $15_1 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
                $15$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$3 = $15$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 =
                  __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $243_1 = i64toi32_i32$0;
                $243$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$1 = i64toi32_i32$2;
                i64toi32_i32$0 = $243$hi;
                i64toi32_i32$4 = $243_1;
                i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                }
                $13_1 = i64toi32_i32$5;
                $13$hi = i64toi32_i32$2;
                $245_1 = i64toi32_i32$5;
                $245$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$3 = $10_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$4 = 32;
                i64toi32_i32$0 = (i64toi32_i32$4 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $257_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                } else {
                  i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                  $257_1 =
                    (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                      ((32 - i64toi32_i32$0) | 0)) |
                    0 |
                    ((i64toi32_i32$3 >>> i64toi32_i32$0) | 0) |
                    0;
                }
                $247_1 = $257_1;
                $247$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $10$hi;
                i64toi32_i32$1 = $19$hi;
                i64toi32_i32$1 = $10$hi;
                i64toi32_i32$2 = $10_1;
                i64toi32_i32$3 = $19$hi;
                i64toi32_i32$4 = $19_1;
                $250_1 =
                  (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) |
                  ((((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                    (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$2 = 0;
                i64toi32_i32$4 = $250_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 32;
                i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = (i64toi32_i32$4 << i64toi32_i32$0) | 0;
                  $258_1 = 0;
                } else {
                  i64toi32_i32$1 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$2 << i64toi32_i32$0) | 0) |
                    0;
                  $258_1 = (i64toi32_i32$4 << i64toi32_i32$0) | 0;
                }
                $252$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $247$hi;
                i64toi32_i32$2 = $247_1;
                i64toi32_i32$4 = $252$hi;
                i64toi32_i32$3 = $258_1;
                i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
                $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $253$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $245$hi;
                i64toi32_i32$1 = $245_1;
                i64toi32_i32$2 = $253$hi;
                i64toi32_i32$3 = $253_1;
                i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                i64toi32_i32$5 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                }
                $19_1 = i64toi32_i32$0;
                $19$hi = i64toi32_i32$5;
                $255_1 = i64toi32_i32$0;
                $255$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$5 = $12$hi;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$1 = $12$hi;
                i64toi32_i32$1 =
                  __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $21_1 = i64toi32_i32$1;
                $21$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $1$hi;
                i64toi32_i32$5 = $16$hi;
                i64toi32_i32$4 = $16_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 65536;
                i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
                $10$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$4 = $10$hi;
                i64toi32_i32$4 =
                  __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $264_1 = i64toi32_i32$4;
                $264$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$5 = $21_1;
                i64toi32_i32$4 = $264$hi;
                i64toi32_i32$3 = $264_1;
                i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                }
                $16_1 = i64toi32_i32$2;
                $16$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $15$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $15$hi;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$5 =
                  __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $269_1 = i64toi32_i32$5;
                $269$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $16$hi;
                i64toi32_i32$1 = i64toi32_i32$2;
                i64toi32_i32$5 = $269$hi;
                i64toi32_i32$3 = $269_1;
                i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                }
                $22_1 = i64toi32_i32$4;
                $22$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $17$hi;
                i64toi32_i32$0 = $17_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 2147483647;
                i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                i64toi32_i32$2 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = -2147483648;
                i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $1$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 =
                  __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $277_1 = i64toi32_i32$2;
                $277$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $22$hi;
                i64toi32_i32$1 = i64toi32_i32$4;
                i64toi32_i32$2 = $277$hi;
                i64toi32_i32$3 = $277_1;
                i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                }
                $17_1 = i64toi32_i32$5;
                $17$hi = i64toi32_i32$4;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 32;
                i64toi32_i32$2 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                  $259_1 = 0;
                } else {
                  i64toi32_i32$1 =
                    (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                      ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$4 << i64toi32_i32$2) | 0) |
                    0;
                  $259_1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                }
                $280$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $255$hi;
                i64toi32_i32$4 = $255_1;
                i64toi32_i32$0 = $280$hi;
                i64toi32_i32$3 = $259_1;
                i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                }
                $23_1 = i64toi32_i32$2;
                $23$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $227$hi;
                i64toi32_i32$1 = $227_1;
                i64toi32_i32$4 = $23$hi;
                i64toi32_i32$3 = i64toi32_i32$2;
                i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                }
                $4_1 = i64toi32_i32$0;
                $4$hi = i64toi32_i32$2;
                $6_1 = ((((($7_1 + $6_1) | 0) + $8_1) | 0) + -16383) | 0;
                label$13: {
                  label$14: {
                    i64toi32_i32$2 = $15$hi;
                    i64toi32_i32$2 = $12$hi;
                    i64toi32_i32$2 = $15$hi;
                    i64toi32_i32$1 = $12$hi;
                    i64toi32_i32$1 =
                      __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
                    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                    $24_1 = i64toi32_i32$1;
                    $24$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$2 = $10$hi;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$1 = $10$hi;
                    i64toi32_i32$1 =
                      __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
                    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                    $296_1 = i64toi32_i32$1;
                    $296$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $24$hi;
                    i64toi32_i32$5 = $24_1;
                    i64toi32_i32$1 = $296$hi;
                    i64toi32_i32$3 = $296_1;
                    i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    $2_1 = i64toi32_i32$4;
                    $2$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $24$hi;
                    i64toi32_i32$0 = $2$hi;
                    i64toi32_i32$2 = i64toi32_i32$4;
                    i64toi32_i32$5 = $24$hi;
                    i64toi32_i32$3 = $24_1;
                    $300_1 =
                      (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    $301_1 = $300_1;
                    $301$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = i64toi32_i32$0;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$0 =
                      __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
                    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                    $305_1 = i64toi32_i32$0;
                    $305$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$3 = i64toi32_i32$4;
                    i64toi32_i32$0 = $305$hi;
                    i64toi32_i32$5 = $305_1;
                    i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $3_1 = i64toi32_i32$1;
                    $3$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$2 = i64toi32_i32$1;
                    i64toi32_i32$3 = $2$hi;
                    i64toi32_i32$5 = $2_1;
                    $309_1 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    $310$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $301$hi;
                    i64toi32_i32$5 = $301_1;
                    i64toi32_i32$4 = $310$hi;
                    i64toi32_i32$3 = $309_1;
                    i64toi32_i32$0 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                    i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                    }
                    $311_1 = i64toi32_i32$0;
                    $311$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $3$hi;
                    $312_1 = $3_1;
                    $312$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $18$hi;
                    i64toi32_i32$1 = $20$hi;
                    i64toi32_i32$1 = $18$hi;
                    i64toi32_i32$2 = $18_1;
                    i64toi32_i32$5 = $20$hi;
                    i64toi32_i32$3 = $20_1;
                    $315_1 =
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    $316$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $13$hi;
                    i64toi32_i32$2 = i64toi32_i32$1;
                    i64toi32_i32$2 = $13$hi;
                    i64toi32_i32$3 = $13_1;
                    i64toi32_i32$5 = $18_1;
                    $319_1 =
                      (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) |
                      ((((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0)) &
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$3 = 0;
                    $320$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $316$hi;
                    i64toi32_i32$5 = $315_1;
                    i64toi32_i32$2 = $320$hi;
                    i64toi32_i32$1 = $319_1;
                    i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    $321$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $312$hi;
                    i64toi32_i32$3 = $312_1;
                    i64toi32_i32$5 = $321$hi;
                    i64toi32_i32$1 = i64toi32_i32$4;
                    i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $2_1 = i64toi32_i32$2;
                    $2$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$0 = i64toi32_i32$2;
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$1 = $3_1;
                    $325_1 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$0 = 0;
                    $326$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $311$hi;
                    i64toi32_i32$1 = $311_1;
                    i64toi32_i32$4 = $326$hi;
                    i64toi32_i32$3 = $325_1;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                    }
                    $327$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$2 = $10$hi;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$1 = $10$hi;
                    i64toi32_i32$1 =
                      __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
                    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                    $330_1 = i64toi32_i32$1;
                    $330$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $327$hi;
                    i64toi32_i32$0 = i64toi32_i32$5;
                    i64toi32_i32$1 = $330$hi;
                    i64toi32_i32$3 = $330_1;
                    i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $331_1 = i64toi32_i32$4;
                    $331$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $1$hi;
                    i64toi32_i32$5 = $12$hi;
                    i64toi32_i32$5 = $1$hi;
                    i64toi32_i32$0 = $12$hi;
                    i64toi32_i32$0 =
                      __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
                    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                    $3_1 = i64toi32_i32$0;
                    $3$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $15$hi;
                    i64toi32_i32$5 = $10$hi;
                    i64toi32_i32$5 = $15$hi;
                    i64toi32_i32$0 = $10$hi;
                    i64toi32_i32$0 =
                      __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
                    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                    $338_1 = i64toi32_i32$0;
                    $338$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $3$hi;
                    i64toi32_i32$2 = $3_1;
                    i64toi32_i32$0 = $338$hi;
                    i64toi32_i32$3 = $338_1;
                    i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $1_1 = i64toi32_i32$1;
                    $1$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$5 = i64toi32_i32$1;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$3 = $3_1;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$3 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$0 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                      $260_1 = 0;
                    } else {
                      i64toi32_i32$4 =
                        (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                          ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$5 << i64toi32_i32$0) | 0) |
                        0;
                      $260_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                    }
                    $344_1 = $260_1;
                    $344$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$5 = $1_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$0 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $261_1 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                      $261_1 =
                        (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                          ((32 - i64toi32_i32$0) | 0)) |
                        0 |
                        ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                        0;
                    }
                    $346$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $344$hi;
                    i64toi32_i32$4 = $344_1;
                    i64toi32_i32$5 = $346$hi;
                    i64toi32_i32$2 = $261_1;
                    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                    $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                    $347$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $331$hi;
                    i64toi32_i32$3 = $331_1;
                    i64toi32_i32$4 = $347$hi;
                    i64toi32_i32$2 = $347_1;
                    i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                    i64toi32_i32$1 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                    }
                    $348_1 = i64toi32_i32$0;
                    $348$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $2$hi;
                    $349_1 = $2_1;
                    $349$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $1$hi;
                    i64toi32_i32$5 = $1_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                      $262_1 = 0;
                    } else {
                      i64toi32_i32$3 =
                        (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                          ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                        0;
                      $262_1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                    }
                    $351$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $349$hi;
                    i64toi32_i32$1 = $349_1;
                    i64toi32_i32$5 = $351$hi;
                    i64toi32_i32$2 = $262_1;
                    i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    $1_1 = i64toi32_i32$4;
                    $1$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $2$hi;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$3 = i64toi32_i32$4;
                    i64toi32_i32$1 = $2$hi;
                    i64toi32_i32$2 = $2_1;
                    $355_1 =
                      (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) |
                      ((((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0)) &
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$3 = 0;
                    $356$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $348$hi;
                    i64toi32_i32$2 = $348_1;
                    i64toi32_i32$0 = $356$hi;
                    i64toi32_i32$1 = $355_1;
                    i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $357_1 = i64toi32_i32$5;
                    $357$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $1$hi;
                    $358_1 = $1_1;
                    $358$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $17$hi;
                    i64toi32_i32$3 = $17_1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$1 = 32;
                    i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                      i64toi32_i32$2 = 0;
                      $263_1 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                    } else {
                      i64toi32_i32$2 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                      $263_1 =
                        (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                          ((32 - i64toi32_i32$0) | 0)) |
                        0 |
                        ((i64toi32_i32$3 >>> i64toi32_i32$0) | 0) |
                        0;
                    }
                    $360_1 = $263_1;
                    $360$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $16$hi;
                    i64toi32_i32$2 = $21$hi;
                    i64toi32_i32$2 = $16$hi;
                    i64toi32_i32$4 = $16_1;
                    i64toi32_i32$3 = $21$hi;
                    i64toi32_i32$1 = $21_1;
                    $363_1 =
                      (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$4 = 0;
                    $364$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $22$hi;
                    i64toi32_i32$4 = i64toi32_i32$2;
                    i64toi32_i32$4 = $22$hi;
                    i64toi32_i32$1 = $22_1;
                    i64toi32_i32$3 = $16_1;
                    $367_1 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$1 = 0;
                    $368$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $364$hi;
                    i64toi32_i32$3 = $363_1;
                    i64toi32_i32$4 = $368$hi;
                    i64toi32_i32$2 = $367_1;
                    i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $369$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $17$hi;
                    i64toi32_i32$5 = $22$hi;
                    i64toi32_i32$5 = $17$hi;
                    i64toi32_i32$1 = $17_1;
                    i64toi32_i32$3 = $22$hi;
                    i64toi32_i32$2 = $22_1;
                    $372_1 =
                      (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$1 = 0;
                    $373$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $369$hi;
                    i64toi32_i32$2 = i64toi32_i32$0;
                    i64toi32_i32$5 = $373$hi;
                    i64toi32_i32$3 = $372_1;
                    i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    i64toi32_i32$1 = i64toi32_i32$4;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 32;
                    i64toi32_i32$5 = (i64toi32_i32$3 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$1 << i64toi32_i32$5) | 0;
                      $265_1 = 0;
                    } else {
                      i64toi32_i32$2 =
                        (((((1 << i64toi32_i32$5) | 0) - 1) | 0) &
                          ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$5) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$0 << i64toi32_i32$5) | 0) |
                        0;
                      $265_1 = (i64toi32_i32$1 << i64toi32_i32$5) | 0;
                    }
                    $375$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $360$hi;
                    i64toi32_i32$0 = $360_1;
                    i64toi32_i32$1 = $375$hi;
                    i64toi32_i32$3 = $265_1;
                    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    $376_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                    $376$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $358$hi;
                    i64toi32_i32$2 = $358_1;
                    i64toi32_i32$0 = $376$hi;
                    i64toi32_i32$3 = $376_1;
                    i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $3_1 = i64toi32_i32$5;
                    $3$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$1 = i64toi32_i32$5;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$3 = $1_1;
                    $380_1 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$1 = 0;
                    $381$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $357$hi;
                    i64toi32_i32$3 = $357_1;
                    i64toi32_i32$4 = $381$hi;
                    i64toi32_i32$2 = $380_1;
                    i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $382_1 = i64toi32_i32$0;
                    $382$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $3$hi;
                    $383_1 = $3_1;
                    $383$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $19$hi;
                    i64toi32_i32$5 = $13$hi;
                    i64toi32_i32$5 = $19$hi;
                    i64toi32_i32$1 = $19_1;
                    i64toi32_i32$3 = $13$hi;
                    i64toi32_i32$2 = $13_1;
                    $386_1 =
                      (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$1 = 0;
                    $387$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $23$hi;
                    i64toi32_i32$1 = i64toi32_i32$5;
                    i64toi32_i32$1 = $23$hi;
                    i64toi32_i32$2 = $23_1;
                    i64toi32_i32$3 = $19_1;
                    $390_1 =
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    $391$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $387$hi;
                    i64toi32_i32$3 = $386_1;
                    i64toi32_i32$1 = $391$hi;
                    i64toi32_i32$5 = $390_1;
                    i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    $392$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $383$hi;
                    i64toi32_i32$2 = $383_1;
                    i64toi32_i32$3 = $392$hi;
                    i64toi32_i32$5 = i64toi32_i32$4;
                    i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $2_1 = i64toi32_i32$1;
                    $2$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$0 = i64toi32_i32$1;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$5 = $3_1;
                    $396_1 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$0 = 0;
                    $397$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $382$hi;
                    i64toi32_i32$5 = $382_1;
                    i64toi32_i32$4 = $397$hi;
                    i64toi32_i32$2 = $396_1;
                    i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                    i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                    }
                    $1_1 = i64toi32_i32$3;
                    $1$hi = i64toi32_i32$1;
                    i64toi32_i32$0 = i64toi32_i32$3;
                    i64toi32_i32$5 = 65536;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$5 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                    if (!((i64toi32_i32$0 & i64toi32_i32$2) | 0 | i64toi32_i32$5 | 0)) {
                      break label$14;
                    }
                    $6_1 = ($6_1 + 1) | 0;
                    break label$13;
                  }
                  i64toi32_i32$5 = $11$hi;
                  i64toi32_i32$1 = $11_1;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$2 = 63;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $266_1 = (i64toi32_i32$5 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$0 = (i64toi32_i32$5 >>> i64toi32_i32$4) | 0;
                    $266_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $3_1 = $266_1;
                  $3$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$5 = $1_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                    $267_1 = 0;
                  } else {
                    i64toi32_i32$1 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                      0;
                    $267_1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                  }
                  $407_1 = $267_1;
                  $407$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$0 = $2_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 63;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = 0;
                    $268_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$5 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                    $268_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $409$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $407$hi;
                  i64toi32_i32$1 = $407_1;
                  i64toi32_i32$0 = $409$hi;
                  i64toi32_i32$2 = $268_1;
                  i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                  $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                  $1$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$5 = $2_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                    $270_1 = 0;
                  } else {
                    i64toi32_i32$1 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                      0;
                    $270_1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                  }
                  $412_1 = $270_1;
                  $412$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $4$hi;
                  i64toi32_i32$0 = $4_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 63;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = 0;
                    $271_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$5 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                    $271_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $414$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $412$hi;
                  i64toi32_i32$1 = $412_1;
                  i64toi32_i32$0 = $414$hi;
                  i64toi32_i32$2 = $271_1;
                  i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                  $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                  $2$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $11$hi;
                  i64toi32_i32$5 = $11_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                    $272_1 = 0;
                  } else {
                    i64toi32_i32$1 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                      0;
                    $272_1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                  }
                  $11_1 = $272_1;
                  $11$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $3$hi;
                  $418_1 = $3_1;
                  $418$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $4$hi;
                  i64toi32_i32$0 = $4_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                    $273_1 = 0;
                  } else {
                    i64toi32_i32$5 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                      0;
                    $273_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  }
                  $420$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $418$hi;
                  i64toi32_i32$1 = $418_1;
                  i64toi32_i32$0 = $420$hi;
                  i64toi32_i32$2 = $273_1;
                  i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                  $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                  $4$hi = i64toi32_i32$0;
                }
                label$15: {
                  if (($6_1 | 0) < (32767 | 0)) {
                    break label$15;
                  }
                  i64toi32_i32$0 = $14$hi;
                  i64toi32_i32$5 = $14_1;
                  i64toi32_i32$1 = 2147418112;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                  $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  $14$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $1_1 = 0;
                  $1$hi = i64toi32_i32$1;
                  break label$1;
                }
                label$16: {
                  label$17: {
                    if (($6_1 | 0) > (0 | 0)) {
                      break label$17;
                    }
                    label$18: {
                      $7_1 = (1 - $6_1) | 0;
                      if ($7_1 >>> 0 < 128 >>> 0) {
                        break label$18;
                      }
                      i64toi32_i32$1 = 0;
                      $1_1 = 0;
                      $1$hi = i64toi32_i32$1;
                      break label$1;
                    }
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$1 = $4$hi;
                    $6_1 = ($6_1 + 127) | 0;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$5 = $4$hi;
                    $303(
                      ($5_1 + 48) | 0 | 0,
                      $11_1 | 0,
                      i64toi32_i32$1 | 0,
                      $4_1 | 0,
                      i64toi32_i32$5 | 0,
                      $6_1 | 0
                    );
                    i64toi32_i32$5 = $2$hi;
                    i64toi32_i32$5 = $1$hi;
                    i64toi32_i32$5 = $2$hi;
                    i64toi32_i32$1 = $1$hi;
                    $303(
                      ($5_1 + 32) | 0 | 0,
                      $2_1 | 0,
                      i64toi32_i32$5 | 0,
                      $1_1 | 0,
                      i64toi32_i32$1 | 0,
                      $6_1 | 0
                    );
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$1 = $4$hi;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$5 = $4$hi;
                    $307(
                      ($5_1 + 16) | 0 | 0,
                      $11_1 | 0,
                      i64toi32_i32$1 | 0,
                      $4_1 | 0,
                      i64toi32_i32$5 | 0,
                      $7_1 | 0
                    );
                    i64toi32_i32$5 = $2$hi;
                    i64toi32_i32$5 = $1$hi;
                    i64toi32_i32$5 = $2$hi;
                    i64toi32_i32$1 = $1$hi;
                    $307($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
                    i64toi32_i32$0 = $5_1;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 32) | 0) >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 36) | 0) >> 2] | 0;
                    $454_1 = i64toi32_i32$1;
                    $454$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 16) | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 20) | 0) >> 2] | 0;
                    $456_1 = i64toi32_i32$5;
                    $456$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $454$hi;
                    i64toi32_i32$0 = $454_1;
                    i64toi32_i32$5 = $456$hi;
                    i64toi32_i32$2 = $456_1;
                    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                    $457_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                    $457$hi = i64toi32_i32$5;
                    i64toi32_i32$1 = $5_1;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 48) | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[((i64toi32_i32$1 + 52) | 0) >> 2] | 0;
                    $459_1 = i64toi32_i32$5;
                    $459$hi = i64toi32_i32$0;
                    i64toi32_i32$1 = (((i64toi32_i32$1 + 48) | 0) + 8) | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                    $463_1 = i64toi32_i32$0;
                    $463$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $459$hi;
                    i64toi32_i32$1 = $459_1;
                    i64toi32_i32$0 = $463$hi;
                    i64toi32_i32$2 = $463_1;
                    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = 0;
                    $465_1 =
                      ((i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0)) |
                      ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0)) |
                      0;
                    i64toi32_i32$5 = 0;
                    $466$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $457$hi;
                    i64toi32_i32$2 = $457_1;
                    i64toi32_i32$0 = $466$hi;
                    i64toi32_i32$1 = $465_1;
                    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                    $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    $11$hi = i64toi32_i32$0;
                    i64toi32_i32$5 = ((($5_1 + 32) | 0) + 8) | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                    $471_1 = i64toi32_i32$0;
                    $471$hi = i64toi32_i32$2;
                    i64toi32_i32$5 = ((($5_1 + 16) | 0) + 8) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                    $475_1 = i64toi32_i32$2;
                    $475$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $471$hi;
                    i64toi32_i32$5 = $471_1;
                    i64toi32_i32$2 = $475$hi;
                    i64toi32_i32$1 = $475_1;
                    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                    $4$hi = i64toi32_i32$2;
                    i64toi32_i32$0 = ($5_1 + 8) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                    $1_1 = i64toi32_i32$2;
                    $1$hi = i64toi32_i32$5;
                    i64toi32_i32$0 = $5_1;
                    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                    $2_1 = i64toi32_i32$5;
                    $2$hi = i64toi32_i32$2;
                    break label$16;
                  }
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$0 = $6_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$1 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                    $274_1 = 0;
                  } else {
                    i64toi32_i32$5 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                      0;
                    $274_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  }
                  $484$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $1$hi;
                  i64toi32_i32$2 = $1_1;
                  i64toi32_i32$0 = 65535;
                  i64toi32_i32$1 = -1;
                  i64toi32_i32$0 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
                  $486_1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                  $486$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $484$hi;
                  i64toi32_i32$5 = $274_1;
                  i64toi32_i32$2 = $486$hi;
                  i64toi32_i32$1 = $486_1;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                  $1$hi = i64toi32_i32$2;
                }
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$2 = $14$hi;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$5 = $14$hi;
                i64toi32_i32$1 = $14_1;
                i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $14$hi = i64toi32_i32$5;
                label$19: {
                  i64toi32_i32$5 = $11$hi;
                  $492_1 = !($11_1 | i64toi32_i32$5 | 0);
                  i64toi32_i32$5 = $4$hi;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$0 = -1;
                  i64toi32_i32$1 = -1;
                  if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
                    $275_1 = 1;
                  } else {
                    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
                      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
                        $276_1 = 0;
                      } else {
                        $276_1 = 1;
                      }
                      $278_1 = $276_1;
                    } else {
                      $278_1 = 0;
                    }
                    $275_1 = $278_1;
                  }
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$1 = $4_1;
                  i64toi32_i32$5 = -2147483648;
                  i64toi32_i32$0 = 0;
                  if (
                    (((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) &
                      ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0))) |
                    0
                      ? $492_1
                      : $275_1
                  ) {
                    break label$19;
                  }
                  i64toi32_i32$1 = $14$hi;
                  $498_1 = $14_1;
                  $498$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$0 = $2_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$5 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                  }
                  $1_1 = i64toi32_i32$4;
                  $1$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$1 = i64toi32_i32$4;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$5 = $2_1;
                  $503_1 =
                    (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) |
                    ((((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0)) &
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$1 = 0;
                  $504$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $498$hi;
                  i64toi32_i32$5 = $498_1;
                  i64toi32_i32$3 = $504$hi;
                  i64toi32_i32$0 = $503_1;
                  i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $14_1 = i64toi32_i32$2;
                  $14$hi = i64toi32_i32$4;
                  break label$1;
                }
                label$20: {
                  i64toi32_i32$4 = $11$hi;
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$1 = $4_1;
                  i64toi32_i32$5 = -2147483648;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = (i64toi32_i32$4 ^ i64toi32_i32$5) | 0;
                  $508_1 = (i64toi32_i32$1 ^ i64toi32_i32$0) | 0;
                  $508$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $11$hi;
                  i64toi32_i32$4 = $11_1;
                  i64toi32_i32$1 = $508$hi;
                  i64toi32_i32$0 = $508_1;
                  i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$0 = 0;
                  if (
                    (((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0)) &
                      ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0))) |
                    0
                  ) {
                    break label$20;
                  }
                  i64toi32_i32$5 = $2$hi;
                  $1_1 = $2_1;
                  $1$hi = i64toi32_i32$5;
                  break label$1;
                }
                i64toi32_i32$5 = $14$hi;
                $512_1 = $14_1;
                $512$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$4 = 1;
                i64toi32_i32$1 = (i64toi32_i32$5 & i64toi32_i32$1) | 0;
                $515_1 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
                $515$hi = i64toi32_i32$1;
                i64toi32_i32$1 = i64toi32_i32$5;
                i64toi32_i32$5 = i64toi32_i32$0;
                i64toi32_i32$0 = $515$hi;
                i64toi32_i32$4 = $515_1;
                i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                }
                $1_1 = i64toi32_i32$3;
                $1$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$1 = i64toi32_i32$3;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$4 = $2_1;
                $519_1 =
                  (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) |
                  ((((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0)) &
                    (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$1 = 0;
                $520$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $512$hi;
                i64toi32_i32$4 = $512_1;
                i64toi32_i32$2 = $520$hi;
                i64toi32_i32$5 = $519_1;
                i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                }
                $14_1 = i64toi32_i32$0;
                $14$hi = i64toi32_i32$3;
              }
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$4 = $0_1;
              HEAP32[i64toi32_i32$4 >> 2] = $1_1;
              HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] = i64toi32_i32$3;
              i64toi32_i32$3 = $14$hi;
              HEAP32[((i64toi32_i32$4 + 8) | 0) >> 2] = $14_1;
              HEAP32[((i64toi32_i32$4 + 12) | 0) >> 2] = i64toi32_i32$3;
              global$0 = ($5_1 + 96) | 0;
            }

            function $309() {
              return 0 | 0;
            }

            function $310() {
              return 0 | 0;
            }

            function $311($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$0 = 0,
                $6_1 = 0,
                $7_1 = 0,
                $5_1 = 0,
                $9$hi = 0,
                $9_1 = 0,
                $10$hi = 0,
                $11$hi = 0,
                $10_1 = 0,
                $11_1 = 0,
                i64toi32_i32$6 = 0,
                $12$hi = 0,
                $8_1 = 0,
                $136_1 = 0,
                $137_1 = 0,
                $138_1 = 0,
                $139_1 = 0,
                $140_1 = 0,
                $141_1 = 0,
                $142_1 = 0,
                $143_1 = 0,
                $144_1 = 0,
                $12_1 = 0,
                $145_1 = 0,
                $146_1 = 0,
                $147_1 = 0,
                $148_1 = 0,
                $149_1 = 0,
                $150_1 = 0,
                $154_1 = 0,
                $155_1 = 0,
                $156_1 = 0,
                $157_1 = 0,
                $158_1 = 0,
                $159_1 = 0,
                $21_1 = 0,
                $27_1 = 0,
                $28$hi = 0,
                $32_1 = 0,
                $39_1 = 0,
                $43_1 = 0,
                $44$hi = 0,
                $48_1 = 0,
                $53_1 = 0,
                $55_1 = 0,
                $63_1 = 0,
                $65_1 = 0,
                $73_1 = 0,
                $73$hi = 0,
                $79_1 = 0,
                $79$hi = 0,
                $83_1 = 0,
                $83$hi = 0,
                $93_1 = 0,
                $93$hi = 0,
                $121_1 = 0,
                $124_1 = 0,
                $151_1 = 0,
                $152_1 = 0,
                $152$hi = 0,
                $153_1 = 0,
                $153$hi = 0,
                $160$hi = 0,
                $163$hi = 0,
                $183_1 = 0,
                $184_1 = 0,
                $184$hi = 0,
                $185_1 = 0,
                $185$hi = 0,
                $192$hi = 0,
                $195$hi = 0,
                $208_1 = 0,
                $208$hi = 0,
                $210$hi = 0,
                $214_1 = 0,
                $214$hi = 0,
                $216$hi = 0,
                $242_1 = 0,
                $242$hi = 0,
                $244_1 = 0,
                $244$hi = 0,
                $248_1 = 0,
                $248$hi = 0,
                $250_1 = 0,
                $251$hi = 0,
                $269$hi = 0,
                $272_1 = 0,
                $273$hi = 0,
                $282_1 = 0,
                $283_1 = 0,
                $283$hi = 0,
                $284_1 = 0,
                $284$hi = 0,
                $291$hi = 0,
                $294$hi = 0,
                $309_1 = 0,
                $309$hi = 0,
                $315_1 = 0,
                $316$hi = 0,
                $322_1 = 0,
                $322$hi = 0,
                $324$hi = 0,
                $325_1 = 0,
                $325$hi = 0,
                $327_1 = 0,
                $327$hi = 0,
                $354_1 = 0,
                $354$hi = 0,
                $356_1 = 0,
                $356$hi = 0,
                $360_1 = 0,
                $360$hi = 0,
                $362_1 = 0,
                $363$hi = 0,
                $369_1 = 0,
                $369$hi = 0,
                $371$hi = 0,
                $375_1 = 0,
                $375$hi = 0,
                $378_1 = 0,
                $378$hi = 0,
                $379$hi = 0,
                $386_1 = 0,
                $386$hi = 0,
                $390$hi = 0,
                $394_1 = 0,
                $395$hi = 0,
                $400_1 = 0,
                $400$hi = 0,
                $408_1 = 0,
                $409$hi = 0,
                $411_1 = 0,
                $411$hi = 0,
                $417_1 = 0,
                $418$hi = 0,
                $422_1 = 0,
                $423$hi = 0,
                $426_1 = 0,
                $426$hi = 0,
                $432_1 = 0,
                $433$hi = 0,
                $437_1 = 0,
                $438$hi = 0;
              $5_1 = (global$0 - 112) | 0;
              global$0 = $5_1;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 2147483647;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $9_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
              $9$hi = i64toi32_i32$1;
              label$1: {
                label$2: {
                  label$3: {
                    i64toi32_i32$1 = $1$hi;
                    i64toi32_i32$0 = $1_1;
                    i64toi32_i32$2 = -1;
                    i64toi32_i32$3 = -1;
                    i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $10_1 = i64toi32_i32$4;
                    $10$hi = i64toi32_i32$5;
                    i64toi32_i32$1 = i64toi32_i32$4;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$3 = -1;
                    $21_1 =
                      (((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                        ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0))) |
                      0;
                    i64toi32_i32$1 = $2$hi;
                    i64toi32_i32$3 = $2_1;
                    i64toi32_i32$5 = 2147483647;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$5 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                    $11_1 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                    $11$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $10$hi;
                    i64toi32_i32$5 = $1$hi;
                    i64toi32_i32$5 = $10$hi;
                    i64toi32_i32$1 = i64toi32_i32$4;
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$0 = $1_1;
                    $27_1 =
                      (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$1 = 0;
                    $28$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$0 = $11_1;
                    i64toi32_i32$5 = $28$hi;
                    i64toi32_i32$3 = $27_1;
                    i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    i64toi32_i32$1 = i64toi32_i32$2;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$3 = -1;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                    }
                    $10_1 = i64toi32_i32$5;
                    $10$hi = i64toi32_i32$2;
                    i64toi32_i32$4 = i64toi32_i32$5;
                    i64toi32_i32$1 = 2147418111;
                    i64toi32_i32$3 = -1;
                    $32_1 =
                      (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) |
                      ((((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0)) &
                        (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$4 = i64toi32_i32$2;
                    i64toi32_i32$3 = i64toi32_i32$5;
                    i64toi32_i32$2 = 2147418111;
                    i64toi32_i32$1 = -1;
                    if (
                      (((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0)) &
                        ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0))) |
                      0
                        ? $21_1
                        : $32_1
                    ) {
                      break label$3;
                    }
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$1 = $3_1;
                    i64toi32_i32$4 = -1;
                    i64toi32_i32$2 = -1;
                    i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$3 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $10_1 = i64toi32_i32$0;
                    $10$hi = i64toi32_i32$5;
                    i64toi32_i32$3 = i64toi32_i32$0;
                    i64toi32_i32$1 = -1;
                    i64toi32_i32$2 = -1;
                    $39_1 =
                      ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0)) |
                      ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0)) |
                      0;
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$3 = i64toi32_i32$5;
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$3 = i64toi32_i32$5;
                    i64toi32_i32$2 = i64toi32_i32$0;
                    i64toi32_i32$5 = $3$hi;
                    i64toi32_i32$1 = $3_1;
                    $43_1 =
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    $44$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $9$hi;
                    i64toi32_i32$1 = $9_1;
                    i64toi32_i32$3 = $44$hi;
                    i64toi32_i32$5 = $43_1;
                    i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    i64toi32_i32$2 = i64toi32_i32$4;
                    i64toi32_i32$1 = -1;
                    i64toi32_i32$5 = -1;
                    i64toi32_i32$3 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $10_1 = i64toi32_i32$3;
                    $10$hi = i64toi32_i32$4;
                    i64toi32_i32$0 = i64toi32_i32$3;
                    i64toi32_i32$2 = 2147418111;
                    i64toi32_i32$5 = -1;
                    $48_1 =
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$0 = i64toi32_i32$4;
                    i64toi32_i32$0 = i64toi32_i32$4;
                    i64toi32_i32$5 = i64toi32_i32$3;
                    i64toi32_i32$4 = 2147418111;
                    i64toi32_i32$2 = -1;
                    if (
                      (((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                        ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0))) |
                      0
                        ? $39_1
                        : $48_1
                    ) {
                      break label$2;
                    }
                  }
                  label$4: {
                    i64toi32_i32$5 = $1$hi;
                    $53_1 = !($1_1 | i64toi32_i32$5 | 0);
                    i64toi32_i32$5 = $11$hi;
                    i64toi32_i32$2 = $11_1;
                    i64toi32_i32$0 = 2147418112;
                    i64toi32_i32$4 = 0;
                    $55_1 =
                      (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) |
                      ((((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = i64toi32_i32$5;
                    i64toi32_i32$2 = i64toi32_i32$5;
                    i64toi32_i32$4 = $11_1;
                    i64toi32_i32$5 = 2147418112;
                    i64toi32_i32$0 = 0;
                    if (
                      (((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0)) &
                        ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0))) |
                      0
                        ? $53_1
                        : $55_1
                    ) {
                      break label$4;
                    }
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$0 = $2_1;
                    i64toi32_i32$2 = 32768;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                    $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                    $4$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $1$hi;
                    $3_1 = $1_1;
                    $3$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  label$5: {
                    i64toi32_i32$2 = $3$hi;
                    $63_1 = !($3_1 | i64toi32_i32$2 | 0);
                    i64toi32_i32$2 = $9$hi;
                    i64toi32_i32$4 = $9_1;
                    i64toi32_i32$0 = 2147418112;
                    i64toi32_i32$5 = 0;
                    $65_1 =
                      (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) |
                      ((((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$4 = i64toi32_i32$2;
                    i64toi32_i32$5 = $9_1;
                    i64toi32_i32$2 = 2147418112;
                    i64toi32_i32$0 = 0;
                    if (
                      (((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0)) &
                        ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0))) |
                      0
                        ? $63_1
                        : $65_1
                    ) {
                      break label$5;
                    }
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$0 = $4_1;
                    i64toi32_i32$4 = 32768;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                    $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                    $4$hi = i64toi32_i32$4;
                    break label$1;
                  }
                  label$6: {
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$4 = $11$hi;
                    i64toi32_i32$5 = $11_1;
                    i64toi32_i32$0 = 2147418112;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = (i64toi32_i32$4 ^ i64toi32_i32$0) | 0;
                    $73_1 = (i64toi32_i32$5 ^ i64toi32_i32$2) | 0;
                    $73$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$4 = $1_1;
                    i64toi32_i32$5 = $73$hi;
                    i64toi32_i32$2 = $73_1;
                    i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$2 = 0;
                    if (
                      ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0)) |
                      ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0)) |
                      0
                    ) {
                      break label$6;
                    }
                    i64toi32_i32$0 = $2$hi;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$2 = $3_1;
                    i64toi32_i32$5 = $1$hi;
                    i64toi32_i32$4 = $1_1;
                    i64toi32_i32$5 = (i64toi32_i32$0 ^ i64toi32_i32$5) | 0;
                    $79_1 = (i64toi32_i32$2 ^ i64toi32_i32$4) | 0;
                    $79$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$5 = $2$hi;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$0 = $4_1;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$4 = $2_1;
                    i64toi32_i32$2 = (i64toi32_i32$5 ^ i64toi32_i32$2) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$0 ^ i64toi32_i32$4) | 0;
                    i64toi32_i32$0 = -2147483648;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$0 = (i64toi32_i32$2 ^ i64toi32_i32$0) | 0;
                    $83_1 = (i64toi32_i32$5 ^ i64toi32_i32$4) | 0;
                    $83$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $79$hi;
                    i64toi32_i32$2 = $79_1;
                    i64toi32_i32$5 = $83$hi;
                    i64toi32_i32$4 = $83_1;
                    i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                    $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
                    i64toi32_i32$1 = $6_1;
                    i64toi32_i32$5 = 2147450880;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
                    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
                    $4_1 = i64toi32_i32$4;
                    $4$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$2 = i64toi32_i32$1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
                    i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
                    $3_1 = i64toi32_i32$5;
                    $3$hi = i64toi32_i32$1;
                    break label$1;
                  }
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$1 = $9$hi;
                  i64toi32_i32$2 = $9_1;
                  i64toi32_i32$5 = 2147418112;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = (i64toi32_i32$1 ^ i64toi32_i32$5) | 0;
                  $93_1 = (i64toi32_i32$2 ^ i64toi32_i32$0) | 0;
                  $93$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$2 = $93$hi;
                  i64toi32_i32$0 = $93_1;
                  i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
                    break label$1;
                  }
                  label$7: {
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$2 = $11$hi;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$5 = $1_1;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$0 = $11_1;
                    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$0 = 0;
                    if (
                      ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0)) |
                      ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0)) |
                      0
                    ) {
                      break label$7;
                    }
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$2 = $9$hi;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$0 = $3_1;
                    i64toi32_i32$1 = $9$hi;
                    i64toi32_i32$5 = $9_1;
                    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$5 = 0;
                    if (
                      ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0)) |
                      ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0)) |
                      0
                    ) {
                      break label$1;
                    }
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$2 = $1$hi;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$5 = $3_1;
                    i64toi32_i32$1 = $1$hi;
                    i64toi32_i32$0 = $1_1;
                    i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                    $3_1 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
                    $3$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $4$hi;
                    i64toi32_i32$1 = $2$hi;
                    i64toi32_i32$1 = $4$hi;
                    i64toi32_i32$2 = $4_1;
                    i64toi32_i32$5 = $2$hi;
                    i64toi32_i32$0 = $2_1;
                    i64toi32_i32$5 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                    $4_1 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
                    $4$hi = i64toi32_i32$5;
                    break label$1;
                  }
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$5 = $9$hi;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$2 = $9$hi;
                  i64toi32_i32$0 = $9_1;
                  i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
                    break label$2;
                  }
                  i64toi32_i32$2 = $1$hi;
                  $3_1 = $1_1;
                  $3$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $2$hi;
                  $4_1 = $2_1;
                  $4$hi = i64toi32_i32$2;
                  break label$1;
                }
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$5 = $3_1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                $121_1 =
                  (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) |
                  ((((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0)) &
                    (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$5 = $9$hi;
                i64toi32_i32$5 = $11$hi;
                i64toi32_i32$5 = $9$hi;
                i64toi32_i32$0 = $9_1;
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$1 = $11_1;
                $124_1 =
                  (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0) |
                  ((((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                    (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$1 = $9_1;
                i64toi32_i32$5 = i64toi32_i32$2;
                i64toi32_i32$2 = $11_1;
                $7_1 =
                  (((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0)) &
                    ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0))) |
                  0
                    ? $121_1
                    : $124_1;
                i64toi32_i32$4 = $7_1;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
                i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
                $9_1 = i64toi32_i32$5;
                $9$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
                i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
                $11_1 = i64toi32_i32$1;
                $11$hi = i64toi32_i32$4;
                i64toi32_i32$0 = i64toi32_i32$1;
                i64toi32_i32$1 = 65535;
                i64toi32_i32$2 = -1;
                i64toi32_i32$1 = (i64toi32_i32$4 & i64toi32_i32$1) | 0;
                $10_1 = (i64toi32_i32$0 & i64toi32_i32$2) | 0;
                $10$hi = i64toi32_i32$1;
                i64toi32_i32$1 = i64toi32_i32$5;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$5 = $7_1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
                i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
                $2_1 = i64toi32_i32$2;
                $2$hi = i64toi32_i32$4;
                i64toi32_i32$5 = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = 48;
                i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = 0;
                  $136_1 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                } else {
                  i64toi32_i32$2 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                  $136_1 =
                    (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                      ((32 - i64toi32_i32$0) | 0)) |
                    0 |
                    ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                    0;
                }
                $8_1 = ($136_1 & 32767) | 0;
                label$8: {
                  i64toi32_i32$2 = $11$hi;
                  i64toi32_i32$4 = $11_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$1 = 48;
                  i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = 0;
                    $137_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$5 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                    $137_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$4 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $6_1 = ($137_1 & 32767) | 0;
                  if ($6_1) {
                    break label$8;
                  }
                  $151_1 = ($5_1 + 96) | 0;
                  i64toi32_i32$5 = $9$hi;
                  $152_1 = $9_1;
                  $152$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $10$hi;
                  $153_1 = $10_1;
                  $153$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $9$hi;
                  i64toi32_i32$5 = $10$hi;
                  $6_1 = !($10_1 | i64toi32_i32$5 | 0);
                  i64toi32_i32$0 = $6_1;
                  i64toi32_i32$5 = $9$hi;
                  i64toi32_i32$4 = $10$hi;
                  i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
                  i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
                  i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
                  i64toi32_i32$0 = 0;
                  if ((i64toi32_i32$5 | 0) == (32 | 0)) {
                    $138_1 = (Math_clz32(i64toi32_i32$1) + 32) | 0;
                  } else {
                    $138_1 = i64toi32_i32$5;
                  }
                  $160$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  $163$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $160$hi;
                  i64toi32_i32$1 = $138_1;
                  i64toi32_i32$2 = $163$hi;
                  i64toi32_i32$5 = ($6_1 << 6) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                  }
                  $6_1 = i64toi32_i32$4;
                  i64toi32_i32$3 = $152$hi;
                  i64toi32_i32$1 = $153$hi;
                  $303(
                    $151_1 | 0,
                    $152_1 | 0,
                    i64toi32_i32$3 | 0,
                    $153_1 | 0,
                    i64toi32_i32$1 | 0,
                    (i64toi32_i32$4 + -15) | 0 | 0
                  );
                  $6_1 = (16 - i64toi32_i32$4) | 0;
                  i64toi32_i32$0 = ($5_1 + 104) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                  $10_1 = i64toi32_i32$1;
                  $10$hi = i64toi32_i32$3;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 96) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 100) | 0) >> 2] | 0;
                  $9_1 = i64toi32_i32$3;
                  $9$hi = i64toi32_i32$1;
                }
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$2 = $7_1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
                i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
                $3_1 = i64toi32_i32$5;
                $3$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$5 = 65535;
                i64toi32_i32$1 = -1;
                i64toi32_i32$5 = (i64toi32_i32$0 & i64toi32_i32$5) | 0;
                $4_1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                $4$hi = i64toi32_i32$5;
                label$9: {
                  if ($8_1) {
                    break label$9;
                  }
                  $183_1 = ($5_1 + 80) | 0;
                  i64toi32_i32$5 = $3$hi;
                  $184_1 = $3_1;
                  $184$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $4$hi;
                  $185_1 = $4_1;
                  $185$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$5 = $4$hi;
                  $7_1 = !($4_1 | i64toi32_i32$5 | 0);
                  i64toi32_i32$3 = $7_1;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
                  i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
                  i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
                  i64toi32_i32$3 = 0;
                  if ((i64toi32_i32$5 | 0) == (32 | 0)) {
                    $139_1 = (Math_clz32(i64toi32_i32$1) + 32) | 0;
                  } else {
                    $139_1 = i64toi32_i32$5;
                  }
                  $192$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  $195$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $192$hi;
                  i64toi32_i32$1 = $139_1;
                  i64toi32_i32$0 = $195$hi;
                  i64toi32_i32$5 = ($7_1 << 6) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $7_1 = i64toi32_i32$2;
                  i64toi32_i32$4 = $184$hi;
                  i64toi32_i32$1 = $185$hi;
                  $303(
                    $183_1 | 0,
                    $184_1 | 0,
                    i64toi32_i32$4 | 0,
                    $185_1 | 0,
                    i64toi32_i32$1 | 0,
                    (i64toi32_i32$2 + -15) | 0 | 0
                  );
                  $8_1 = (16 - i64toi32_i32$2) | 0;
                  i64toi32_i32$3 = ($5_1 + 88) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$1;
                  $4$hi = i64toi32_i32$4;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 80) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 84) | 0) >> 2] | 0;
                  $3_1 = i64toi32_i32$4;
                  $3$hi = i64toi32_i32$1;
                }
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 3;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$4 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                  $140_1 = 0;
                } else {
                  i64toi32_i32$4 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$1 << i64toi32_i32$0) | 0) |
                    0;
                  $140_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                }
                $208_1 = $140_1;
                $208$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $3$hi;
                i64toi32_i32$1 = $3_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 61;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $141_1 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                } else {
                  i64toi32_i32$3 = (i64toi32_i32$4 >>> i64toi32_i32$0) | 0;
                  $141_1 =
                    (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                      ((32 - i64toi32_i32$0) | 0)) |
                    0 |
                    ((i64toi32_i32$1 >>> i64toi32_i32$0) | 0) |
                    0;
                }
                $210$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $208$hi;
                i64toi32_i32$4 = $208_1;
                i64toi32_i32$1 = $210$hi;
                i64toi32_i32$5 = $141_1;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                i64toi32_i32$4 = 524288;
                i64toi32_i32$5 = 0;
                i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
                $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                $4$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $10$hi;
                i64toi32_i32$1 = $10_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 3;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$0) | 0;
                  $142_1 = 0;
                } else {
                  i64toi32_i32$3 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$4 << i64toi32_i32$0) | 0) |
                    0;
                  $142_1 = (i64toi32_i32$1 << i64toi32_i32$0) | 0;
                }
                $214_1 = $142_1;
                $214$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$4 = $9_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$5 = 61;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $143_1 = (i64toi32_i32$3 >>> i64toi32_i32$0) | 0;
                } else {
                  i64toi32_i32$1 = (i64toi32_i32$3 >>> i64toi32_i32$0) | 0;
                  $143_1 =
                    (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                      ((32 - i64toi32_i32$0) | 0)) |
                    0 |
                    ((i64toi32_i32$4 >>> i64toi32_i32$0) | 0) |
                    0;
                }
                $216$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $214$hi;
                i64toi32_i32$3 = $214_1;
                i64toi32_i32$4 = $216$hi;
                i64toi32_i32$5 = $143_1;
                i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
                $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                $1$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $3$hi;
                i64toi32_i32$1 = $3_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 3;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$0) | 0;
                  $144_1 = 0;
                } else {
                  i64toi32_i32$3 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$4 << i64toi32_i32$0) | 0) |
                    0;
                  $144_1 = (i64toi32_i32$1 << i64toi32_i32$0) | 0;
                }
                $3_1 = $144_1;
                $3$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$4 = $11_1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$5 = $2_1;
                i64toi32_i32$1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                $10_1 = (i64toi32_i32$4 ^ i64toi32_i32$5) | 0;
                $10$hi = i64toi32_i32$1;
                label$10: {
                  $7_1 = ($6_1 - $8_1) | 0;
                  if (!$7_1) {
                    break label$10;
                  }
                  label$11: {
                    if ($7_1 >>> 0 <= 127 >>> 0) {
                      break label$11;
                    }
                    i64toi32_i32$1 = 0;
                    $4_1 = 0;
                    $4$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = 0;
                    $3_1 = 1;
                    $3$hi = i64toi32_i32$1;
                    break label$10;
                  }
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$1 = $4$hi;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$4 = $4$hi;
                  $303(
                    ($5_1 + 64) | 0 | 0,
                    $3_1 | 0,
                    i64toi32_i32$1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$4 | 0,
                    (128 - $7_1) | 0 | 0
                  );
                  i64toi32_i32$4 = i64toi32_i32$1;
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$4 = i64toi32_i32$1;
                  i64toi32_i32$1 = $4$hi;
                  $307(
                    ($5_1 + 48) | 0 | 0,
                    $3_1 | 0,
                    i64toi32_i32$4 | 0,
                    $4_1 | 0,
                    i64toi32_i32$1 | 0,
                    $7_1 | 0
                  );
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 48) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 52) | 0) >> 2] | 0;
                  $242_1 = i64toi32_i32$1;
                  $242$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 64) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 68) | 0) >> 2] | 0;
                  $244_1 = i64toi32_i32$4;
                  $244$hi = i64toi32_i32$1;
                  i64toi32_i32$3 = (((i64toi32_i32$3 + 64) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                  $248_1 = i64toi32_i32$1;
                  $248$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $244$hi;
                  i64toi32_i32$3 = $244_1;
                  i64toi32_i32$1 = $248$hi;
                  i64toi32_i32$5 = $248_1;
                  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = 0;
                  $250_1 =
                    ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0)) |
                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0)) |
                    0;
                  i64toi32_i32$4 = 0;
                  $251$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $242$hi;
                  i64toi32_i32$5 = $242_1;
                  i64toi32_i32$1 = $251$hi;
                  i64toi32_i32$3 = $250_1;
                  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                  $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                  $3$hi = i64toi32_i32$1;
                  i64toi32_i32$4 = ((($5_1 + 48) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$1;
                  $4$hi = i64toi32_i32$5;
                }
                i64toi32_i32$5 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$1 = 524288;
                i64toi32_i32$3 = 0;
                i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
                $12$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $9$hi;
                i64toi32_i32$5 = $9_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$3 = 3;
                i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$4 = (i64toi32_i32$5 << i64toi32_i32$0) | 0;
                  $145_1 = 0;
                } else {
                  i64toi32_i32$4 =
                    (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                      ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$1 << i64toi32_i32$0) | 0) |
                    0;
                  $145_1 = (i64toi32_i32$5 << i64toi32_i32$0) | 0;
                }
                $2_1 = $145_1;
                $2$hi = i64toi32_i32$4;
                label$12: {
                  label$13: {
                    i64toi32_i32$4 = $10$hi;
                    i64toi32_i32$1 = $10_1;
                    i64toi32_i32$5 = -1;
                    i64toi32_i32$3 = -1;
                    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
                      $146_1 = 1;
                    } else {
                      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
                        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
                          $147_1 = 0;
                        } else {
                          $147_1 = 1;
                        }
                        $148_1 = $147_1;
                      } else {
                        $148_1 = 0;
                      }
                      $146_1 = $148_1;
                    }
                    if ($146_1) {
                      break label$13;
                    }
                    label$14: {
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$3 = $2_1;
                      i64toi32_i32$4 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      i64toi32_i32$0 = (i64toi32_i32$3 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$2 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$1 - i64toi32_i32$2) | 0;
                      $1_1 = i64toi32_i32$0;
                      $1$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $12$hi;
                      i64toi32_i32$2 = $4$hi;
                      i64toi32_i32$2 = $12$hi;
                      i64toi32_i32$1 = $12_1;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$5 = $4_1;
                      i64toi32_i32$4 = (i64toi32_i32$1 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$0 = (i64toi32_i32$6 + i64toi32_i32$3) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$2 - i64toi32_i32$0) | 0;
                      $269$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$0 = $3$hi;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      $272_1 =
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0)) &
                          (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = 0;
                      $273$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $269$hi;
                      i64toi32_i32$5 = i64toi32_i32$4;
                      i64toi32_i32$0 = $273$hi;
                      i64toi32_i32$1 = $272_1;
                      i64toi32_i32$3 = (i64toi32_i32$5 - i64toi32_i32$1) | 0;
                      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
                      i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$0) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$2 - i64toi32_i32$4) | 0;
                      $4_1 = i64toi32_i32$3;
                      $4$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $1$hi;
                      i64toi32_i32$2 = $1_1;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$1 = i64toi32_i32$3;
                      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
                        break label$14;
                      }
                      i64toi32_i32$5 = 0;
                      $3_1 = 0;
                      $3$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      $4_1 = 0;
                      $4$hi = i64toi32_i32$5;
                      break label$1;
                    }
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$4 = $4_1;
                    i64toi32_i32$2 = 524287;
                    i64toi32_i32$1 = -1;
                    if (
                      (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$12;
                    }
                    $282_1 = ($5_1 + 32) | 0;
                    i64toi32_i32$4 = $1$hi;
                    $283_1 = $1_1;
                    $283$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $4$hi;
                    $284_1 = $4_1;
                    $284$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$4 = $4$hi;
                    $7_1 = !($4_1 | i64toi32_i32$4 | 0);
                    i64toi32_i32$0 = $7_1;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
                    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
                    i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
                    i64toi32_i32$0 = 0;
                    if ((i64toi32_i32$4 | 0) == (32 | 0)) {
                      $149_1 = (Math_clz32(i64toi32_i32$2) + 32) | 0;
                    } else {
                      $149_1 = i64toi32_i32$4;
                    }
                    $291$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = 0;
                    $294$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $291$hi;
                    i64toi32_i32$2 = $149_1;
                    i64toi32_i32$1 = $294$hi;
                    i64toi32_i32$4 = ($7_1 << 6) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                    i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                    }
                    $7_1 = (i64toi32_i32$5 + -12) | 0;
                    i64toi32_i32$3 = $283$hi;
                    i64toi32_i32$2 = $284$hi;
                    $303(
                      $282_1 | 0,
                      $283_1 | 0,
                      i64toi32_i32$3 | 0,
                      $284_1 | 0,
                      i64toi32_i32$2 | 0,
                      $7_1 | 0
                    );
                    $6_1 = ($6_1 - $7_1) | 0;
                    i64toi32_i32$0 = ($5_1 + 40) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                    $4_1 = i64toi32_i32$2;
                    $4$hi = i64toi32_i32$3;
                    i64toi32_i32$0 = $5_1;
                    i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 32) | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 36) | 0) >> 2] | 0;
                    $1_1 = i64toi32_i32$3;
                    $1$hi = i64toi32_i32$2;
                    break label$12;
                  }
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$2 = $12$hi;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$0 = $4_1;
                  i64toi32_i32$3 = $12$hi;
                  i64toi32_i32$4 = $12_1;
                  i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$4) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  $309_1 = i64toi32_i32$1;
                  $309$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$5 = $2$hi;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$2 = $3_1;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$4 = $2_1;
                  i64toi32_i32$3 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                  }
                  $1_1 = i64toi32_i32$3;
                  $1$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$5 = i64toi32_i32$3;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$4 = $3_1;
                  $315_1 =
                    (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) |
                    ((((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0)) &
                      (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$5 = 0;
                  $316$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $309$hi;
                  i64toi32_i32$4 = $309_1;
                  i64toi32_i32$1 = $316$hi;
                  i64toi32_i32$2 = $315_1;
                  i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                  }
                  $4_1 = i64toi32_i32$0;
                  $4$hi = i64toi32_i32$3;
                  i64toi32_i32$5 = i64toi32_i32$0;
                  i64toi32_i32$4 = 1048576;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$4 = (i64toi32_i32$3 & i64toi32_i32$4) | 0;
                  if (!((i64toi32_i32$5 & i64toi32_i32$2) | 0 | i64toi32_i32$4 | 0)) {
                    break label$12;
                  }
                  i64toi32_i32$4 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$1 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = 0;
                    $150_1 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                  } else {
                    i64toi32_i32$5 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                    $150_1 =
                      (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                        ((32 - i64toi32_i32$1) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$1) | 0) |
                      0;
                  }
                  $322_1 = $150_1;
                  $322$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $4$hi;
                  i64toi32_i32$4 = $4_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$2 = 63;
                  i64toi32_i32$1 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                    $154_1 = 0;
                  } else {
                    i64toi32_i32$3 =
                      (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                        ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$1) | 0) |
                      0;
                    $154_1 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                  }
                  $324$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $322$hi;
                  i64toi32_i32$5 = $322_1;
                  i64toi32_i32$4 = $324$hi;
                  i64toi32_i32$2 = $154_1;
                  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
                  $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  $325$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$5 = (i64toi32_i32$4 & i64toi32_i32$5) | 0;
                  $327_1 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                  $327$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $325$hi;
                  i64toi32_i32$4 = $325_1;
                  i64toi32_i32$3 = $327$hi;
                  i64toi32_i32$2 = $327_1;
                  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                  $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                  $1$hi = i64toi32_i32$3;
                  $6_1 = ($6_1 + 1) | 0;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$5 = $4_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$1 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$4 = 0;
                    $155_1 = (i64toi32_i32$3 >>> i64toi32_i32$1) | 0;
                  } else {
                    i64toi32_i32$4 = (i64toi32_i32$3 >>> i64toi32_i32$1) | 0;
                    $155_1 =
                      (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                        ((32 - i64toi32_i32$1) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$1) | 0) |
                      0;
                  }
                  $4_1 = $155_1;
                  $4$hi = i64toi32_i32$4;
                }
                i64toi32_i32$4 = $11$hi;
                i64toi32_i32$3 = $11_1;
                i64toi32_i32$5 = -2147483648;
                i64toi32_i32$2 = 0;
                i64toi32_i32$5 = (i64toi32_i32$4 & i64toi32_i32$5) | 0;
                $2_1 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                $2$hi = i64toi32_i32$5;
                label$15: {
                  if (($6_1 | 0) < (32767 | 0)) {
                    break label$15;
                  }
                  i64toi32_i32$5 = $2$hi;
                  i64toi32_i32$4 = $2_1;
                  i64toi32_i32$3 = 2147418112;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                  $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                  $4$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  $3_1 = 0;
                  $3$hi = i64toi32_i32$3;
                  break label$1;
                }
                $7_1 = 0;
                label$16: {
                  label$17: {
                    if (($6_1 | 0) <= (0 | 0)) {
                      break label$17;
                    }
                    $7_1 = $6_1;
                    break label$16;
                  }
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$4 = $4$hi;
                  $303(
                    ($5_1 + 16) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$3 | 0,
                    $4_1 | 0,
                    i64toi32_i32$4 | 0,
                    ($6_1 + 127) | 0 | 0
                  );
                  i64toi32_i32$4 = i64toi32_i32$3;
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$4 = i64toi32_i32$3;
                  i64toi32_i32$3 = $4$hi;
                  $307(
                    $5_1 | 0,
                    $1_1 | 0,
                    i64toi32_i32$4 | 0,
                    $4_1 | 0,
                    i64toi32_i32$3 | 0,
                    (1 - $6_1) | 0 | 0
                  );
                  i64toi32_i32$5 = $5_1;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $354_1 = i64toi32_i32$3;
                  $354$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 16) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 20) | 0) >> 2] | 0;
                  $356_1 = i64toi32_i32$4;
                  $356$hi = i64toi32_i32$3;
                  i64toi32_i32$5 = (((i64toi32_i32$5 + 16) | 0) + 8) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $360_1 = i64toi32_i32$3;
                  $360$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $356$hi;
                  i64toi32_i32$5 = $356_1;
                  i64toi32_i32$3 = $360$hi;
                  i64toi32_i32$2 = $360_1;
                  i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
                  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 0;
                  $362_1 =
                    ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0)) |
                    ((i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0)) |
                    0;
                  i64toi32_i32$4 = 0;
                  $363$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $354$hi;
                  i64toi32_i32$2 = $354_1;
                  i64toi32_i32$3 = $363$hi;
                  i64toi32_i32$5 = $362_1;
                  i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
                  $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                  $1$hi = i64toi32_i32$3;
                  i64toi32_i32$4 = ($5_1 + 8) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$3;
                  $4$hi = i64toi32_i32$2;
                }
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 3;
                i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $156_1 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                } else {
                  i64toi32_i32$3 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                  $156_1 =
                    (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                      ((32 - i64toi32_i32$1) | 0)) |
                    0 |
                    ((i64toi32_i32$4 >>> i64toi32_i32$1) | 0) |
                    0;
                }
                $369_1 = $156_1;
                $369$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$2 = $4_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 61;
                i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$4 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                  $157_1 = 0;
                } else {
                  i64toi32_i32$4 =
                    (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                      ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$3 << i64toi32_i32$1) | 0) |
                    0;
                  $157_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                }
                $371$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $369$hi;
                i64toi32_i32$3 = $369_1;
                i64toi32_i32$2 = $371$hi;
                i64toi32_i32$5 = $157_1;
                i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                $3$hi = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                i64toi32_i32$4 = $7_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 48;
                i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                  $158_1 = 0;
                } else {
                  i64toi32_i32$3 =
                    (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                      ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$2 << i64toi32_i32$1) | 0) |
                    0;
                  $158_1 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                }
                $375_1 = $158_1;
                $375$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$2 = $4_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 3;
                i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $159_1 = (i64toi32_i32$3 >>> i64toi32_i32$1) | 0;
                } else {
                  i64toi32_i32$4 = (i64toi32_i32$3 >>> i64toi32_i32$1) | 0;
                  $159_1 =
                    (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                      ((32 - i64toi32_i32$1) | 0)) |
                    0 |
                    ((i64toi32_i32$2 >>> i64toi32_i32$1) | 0) |
                    0;
                }
                i64toi32_i32$3 = $159_1;
                i64toi32_i32$2 = 65535;
                i64toi32_i32$5 = -1;
                i64toi32_i32$2 = (i64toi32_i32$4 & i64toi32_i32$2) | 0;
                $378_1 = (i64toi32_i32$3 & i64toi32_i32$5) | 0;
                $378$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $375$hi;
                i64toi32_i32$4 = $375_1;
                i64toi32_i32$3 = $378$hi;
                i64toi32_i32$5 = $378_1;
                i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $379$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $379$hi;
                i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                i64toi32_i32$4 = $2$hi;
                i64toi32_i32$5 = $2_1;
                i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
                $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                $4$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $1$hi;
                $6_1 = ($1_1 & 7) | 0;
                label$18: {
                  label$19: {
                    label$20: {
                      switch ($309() | 0 | 0) {
                        case 0:
                          i64toi32_i32$4 = $4$hi;
                          $386_1 = $4_1;
                          $386$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = $3$hi;
                          i64toi32_i32$4 = 0;
                          $390$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = $3$hi;
                          i64toi32_i32$3 = $3_1;
                          i64toi32_i32$2 = $390$hi;
                          i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
                          i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                          i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
                          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                            i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                          }
                          $1_1 = i64toi32_i32$1;
                          $1$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $3$hi;
                          i64toi32_i32$0 = $1$hi;
                          i64toi32_i32$4 = i64toi32_i32$1;
                          i64toi32_i32$3 = $3$hi;
                          i64toi32_i32$5 = $3_1;
                          $394_1 =
                            (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) |
                            ((((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0)) &
                              (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0)) |
                              0) |
                            0;
                          i64toi32_i32$4 = 0;
                          $395$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = $386$hi;
                          i64toi32_i32$5 = $386_1;
                          i64toi32_i32$0 = $395$hi;
                          i64toi32_i32$3 = $394_1;
                          i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                          i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                          }
                          $4_1 = i64toi32_i32$2;
                          $4$hi = i64toi32_i32$1;
                          label$23: {
                            if (($6_1 | 0) == (4 | 0)) {
                              break label$23;
                            }
                            i64toi32_i32$1 = $1$hi;
                            $3_1 = $1_1;
                            $3$hi = i64toi32_i32$1;
                            break label$19;
                          }
                          i64toi32_i32$1 = $4$hi;
                          $400_1 = $4_1;
                          $400$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $1$hi;
                          i64toi32_i32$4 = $1_1;
                          i64toi32_i32$5 = 0;
                          i64toi32_i32$3 = 1;
                          i64toi32_i32$5 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                          $2_1 = (i64toi32_i32$4 & i64toi32_i32$3) | 0;
                          $2$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = i64toi32_i32$1;
                          i64toi32_i32$5 = $2$hi;
                          i64toi32_i32$1 = $2_1;
                          i64toi32_i32$4 = $1$hi;
                          i64toi32_i32$3 = $1_1;
                          i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                          i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                          }
                          $3_1 = i64toi32_i32$0;
                          $3$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $2$hi;
                          i64toi32_i32$2 = $3$hi;
                          i64toi32_i32$5 = i64toi32_i32$0;
                          i64toi32_i32$1 = $2$hi;
                          i64toi32_i32$3 = $2_1;
                          $408_1 =
                            (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) |
                            ((((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0)) &
                              (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0)) |
                              0) |
                            0;
                          i64toi32_i32$5 = 0;
                          $409$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $400$hi;
                          i64toi32_i32$3 = $400_1;
                          i64toi32_i32$2 = $409$hi;
                          i64toi32_i32$1 = $408_1;
                          i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                          i64toi32_i32$0 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                            i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                          }
                          $4_1 = i64toi32_i32$4;
                          $4$hi = i64toi32_i32$0;
                          break label$18;
                        case 1:
                          i64toi32_i32$0 = $4$hi;
                          $411_1 = $4_1;
                          $411$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $3$hi;
                          i64toi32_i32$0 = $2$hi;
                          i64toi32_i32$5 = $2_1;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$1 = 0;
                          $417_1 =
                            ((((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0)) |
                              ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0)) |
                              0) &
                              (($6_1 | 0) != (0 | 0))) |
                            0;
                          i64toi32_i32$5 = 0;
                          $418$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $3$hi;
                          i64toi32_i32$1 = $3_1;
                          i64toi32_i32$0 = $418$hi;
                          i64toi32_i32$3 = $417_1;
                          i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                          i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                          }
                          $1_1 = i64toi32_i32$2;
                          $1$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = $3$hi;
                          i64toi32_i32$4 = $1$hi;
                          i64toi32_i32$5 = i64toi32_i32$2;
                          i64toi32_i32$1 = $3$hi;
                          i64toi32_i32$3 = $3_1;
                          $422_1 =
                            (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) |
                            ((((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0)) &
                              (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0)) |
                              0) |
                            0;
                          i64toi32_i32$5 = 0;
                          $423$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $411$hi;
                          i64toi32_i32$3 = $411_1;
                          i64toi32_i32$4 = $423$hi;
                          i64toi32_i32$1 = $422_1;
                          i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                          i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                            i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                          }
                          $4_1 = i64toi32_i32$0;
                          $4$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $1$hi;
                          $3_1 = $1_1;
                          $3$hi = i64toi32_i32$2;
                          break label$19;
                        case 2:
                          break label$20;
                        default:
                          break label$19;
                      }
                    }
                    i64toi32_i32$2 = $4$hi;
                    $426_1 = $4_1;
                    $426$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$2 = $2$hi;
                    $432_1 = (!($2_1 | i64toi32_i32$2 | 0) & (($6_1 | 0) != (0 | 0))) | 0;
                    i64toi32_i32$2 = 0;
                    $433$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$5 = $3_1;
                    i64toi32_i32$3 = $433$hi;
                    i64toi32_i32$1 = $432_1;
                    i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                    }
                    $1_1 = i64toi32_i32$4;
                    $1$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$2 = i64toi32_i32$4;
                    i64toi32_i32$5 = $3$hi;
                    i64toi32_i32$1 = $3_1;
                    $437_1 =
                      (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    $438$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $426$hi;
                    i64toi32_i32$1 = $426_1;
                    i64toi32_i32$0 = $438$hi;
                    i64toi32_i32$5 = $437_1;
                    i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $4_1 = i64toi32_i32$3;
                    $4$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $1$hi;
                    $3_1 = $1_1;
                    $3$hi = i64toi32_i32$4;
                  }
                  if (!$6_1) {
                    break label$1;
                  }
                }
                $310() | 0;
              }
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[i64toi32_i32$1 >> 2] = $3_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$4;
              i64toi32_i32$4 = $4$hi;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $4_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$4;
              global$0 = ($5_1 + 112) | 0;
            }

            function $312($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = +$1_1;
              var i64toi32_i32$3 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$2 = 0,
                $5_1 = 0,
                $5$hi = 0,
                $2_1 = 0,
                $4_1 = 0,
                $4$hi = 0,
                $6_1 = 0,
                $6$hi = 0,
                $26_1 = 0,
                $27_1 = 0,
                $28_1 = 0,
                $29_1 = 0,
                $30_1 = 0,
                $3_1 = 0,
                $31_1 = 0,
                $32_1 = 0,
                $33_1 = 0,
                $33$hi = 0,
                $37_1 = 0,
                $50_1 = 0,
                $50$hi = 0,
                $54$hi = 0,
                $63_1 = 0,
                $63$hi = 0,
                $64_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  wasm2js_scratch_store_f64(+$1_1);
                  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
                  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
                  $4$hi = i64toi32_i32$0;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$1 = 2147483647;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
                  $5_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                  $5$hi = i64toi32_i32$1;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$2 = -1048576;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  i64toi32_i32$1 = i64toi32_i32$4;
                  i64toi32_i32$0 = 2145386495;
                  i64toi32_i32$3 = -1;
                  if (
                    (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0) |
                    ((((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0)) &
                      (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$2;
                  }
                  i64toi32_i32$1 = $5$hi;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$0 = 60;
                  i64toi32_i32$2 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$3 << i64toi32_i32$2) | 0;
                    $26_1 = 0;
                  } else {
                    i64toi32_i32$5 =
                      (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                        ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$1 << i64toi32_i32$2) | 0) |
                      0;
                    $26_1 = (i64toi32_i32$3 << i64toi32_i32$2) | 0;
                  }
                  $6_1 = $26_1;
                  $6$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $5$hi;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$0 = 4;
                  i64toi32_i32$2 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = 0;
                    $27_1 = (i64toi32_i32$5 >>> i64toi32_i32$2) | 0;
                  } else {
                    i64toi32_i32$3 = (i64toi32_i32$5 >>> i64toi32_i32$2) | 0;
                    $27_1 =
                      (((((((1 << i64toi32_i32$2) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                        ((32 - i64toi32_i32$2) | 0)) |
                      0 |
                      ((i64toi32_i32$1 >>> i64toi32_i32$2) | 0) |
                      0;
                  }
                  i64toi32_i32$5 = $27_1;
                  i64toi32_i32$1 = 1006632960;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $5_1 = i64toi32_i32$2;
                  $5$hi = i64toi32_i32$4;
                  break label$1;
                }
                label$3: {
                  i64toi32_i32$4 = $5$hi;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$5 = 2146435072;
                  i64toi32_i32$0 = 0;
                  if (
                    (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0)) &
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$3;
                  }
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$0 = $4_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$5 = 60;
                  i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                    $28_1 = 0;
                  } else {
                    i64toi32_i32$4 =
                      (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                        ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$3 << i64toi32_i32$1) | 0) |
                      0;
                    $28_1 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                  }
                  $6_1 = $28_1;
                  $6$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$3 = $4_1;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = 4;
                  i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $29_1 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                  } else {
                    i64toi32_i32$0 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                    $29_1 =
                      (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                        ((32 - i64toi32_i32$1) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$1) | 0) |
                      0;
                  }
                  i64toi32_i32$4 = $29_1;
                  i64toi32_i32$3 = 2147418112;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                  $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                  $5$hi = i64toi32_i32$3;
                  break label$1;
                }
                label$4: {
                  i64toi32_i32$3 = $5$hi;
                  if (!!($5_1 | i64toi32_i32$3 | 0)) {
                    break label$4;
                  }
                  i64toi32_i32$3 = 0;
                  $6_1 = 0;
                  $6$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  $5_1 = 0;
                  $5$hi = i64toi32_i32$3;
                  break label$1;
                }
                $32_1 = $2_1;
                i64toi32_i32$3 = $5$hi;
                $33_1 = $5_1;
                $33$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                $37_1 = (Math_clz32($4_1) + 32) | 0;
                i64toi32_i32$3 = $5$hi;
                i64toi32_i32$0 = $5_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 32;
                i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $30_1 = (i64toi32_i32$3 >>> i64toi32_i32$1) | 0;
                } else {
                  i64toi32_i32$4 = (i64toi32_i32$3 >>> i64toi32_i32$1) | 0;
                  $30_1 =
                    (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                      ((32 - i64toi32_i32$1) | 0)) |
                    0 |
                    ((i64toi32_i32$0 >>> i64toi32_i32$1) | 0) |
                    0;
                }
                i64toi32_i32$4 = $5$hi;
                i64toi32_i32$3 = $5_1;
                i64toi32_i32$0 = 1;
                i64toi32_i32$5 = 0;
                $3_1 =
                  (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) |
                  ((((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0)) &
                    (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0)) |
                    0) |
                  0
                    ? $37_1
                    : Math_clz32($30_1);
                i64toi32_i32$3 = $33$hi;
                i64toi32_i32$4 = 0;
                $303(
                  $32_1 | 0,
                  $33_1 | 0,
                  i64toi32_i32$3 | 0,
                  0 | 0,
                  i64toi32_i32$4 | 0,
                  ($3_1 + 49) | 0 | 0
                );
                i64toi32_i32$5 = ($2_1 + 8) | 0;
                i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                i64toi32_i32$5 = i64toi32_i32$4;
                i64toi32_i32$4 = 65536;
                i64toi32_i32$0 = 0;
                i64toi32_i32$4 = (i64toi32_i32$3 ^ i64toi32_i32$4) | 0;
                $50_1 = (i64toi32_i32$5 ^ i64toi32_i32$0) | 0;
                $50$hi = i64toi32_i32$4;
                i64toi32_i32$4 = 0;
                i64toi32_i32$3 = (15372 - $3_1) | 0;
                i64toi32_i32$5 = 0;
                i64toi32_i32$0 = 48;
                i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                  $31_1 = 0;
                } else {
                  i64toi32_i32$5 =
                    (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                      ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                    0;
                  $31_1 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                }
                $54$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $50$hi;
                i64toi32_i32$4 = $50_1;
                i64toi32_i32$3 = $54$hi;
                i64toi32_i32$0 = $31_1;
                i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
                $5$hi = i64toi32_i32$3;
                i64toi32_i32$5 = $2_1;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                $6_1 = i64toi32_i32$3;
                $6$hi = i64toi32_i32$4;
              }
              i64toi32_i32$4 = $6$hi;
              i64toi32_i32$3 = $0_1;
              HEAP32[i64toi32_i32$3 >> 2] = $6_1;
              HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] = i64toi32_i32$4;
              i64toi32_i32$4 = $5$hi;
              i64toi32_i32$4 = $4$hi;
              i64toi32_i32$5 = $4_1;
              i64toi32_i32$3 = -2147483648;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = (i64toi32_i32$4 & i64toi32_i32$3) | 0;
              $63_1 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
              $63$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $5$hi;
              i64toi32_i32$4 = $5_1;
              i64toi32_i32$5 = $63$hi;
              i64toi32_i32$0 = $63_1;
              i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
              $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
              i64toi32_i32$4 = $0_1;
              HEAP32[((i64toi32_i32$4 + 8) | 0) >> 2] = $64_1;
              HEAP32[((i64toi32_i32$4 + 12) | 0) >> 2] = i64toi32_i32$5;
              global$0 = ($2_1 + 16) | 0;
            }

            function $313($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$1 = 0,
                $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $5$hi = 0,
                $6$hi = 0,
                $35_1 = 0,
                $36_1 = 0,
                $37_1 = 0,
                $38_1 = 0,
                $39_1 = 0,
                $41_1 = 0,
                $42_1 = 0,
                $43_1 = 0,
                $44_1 = 0,
                $8_1 = 0,
                $12_1 = 0,
                $17_1 = 0,
                $21_1 = 0,
                $27_1 = 0,
                $27$hi = 0,
                $30_1 = 0,
                $30$hi = 0,
                $40_1 = 0,
                $50_1 = 0,
                $50$hi = 0,
                $53_1 = 0,
                $53$hi = 0,
                $58_1 = 0,
                $68_1 = 0,
                $68$hi = 0,
                $71_1 = 0,
                $71$hi = 0;
              $4_1 = 1;
              label$1: {
                i64toi32_i32$0 = $0$hi;
                i64toi32_i32$2 = $0_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 0;
                $8_1 =
                  ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0)) |
                  ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0)) |
                  0;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$0 = 2147483647;
                i64toi32_i32$1 = -1;
                i64toi32_i32$0 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
                $5_1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                $5$hi = i64toi32_i32$0;
                i64toi32_i32$2 = $5_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$1 = 0;
                $12_1 =
                  (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) |
                  ((((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0)) &
                    (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$3 = 0;
                if (
                  (((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                    ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0))) |
                  0
                    ? $8_1
                    : $12_1
                ) {
                  break label$1;
                }
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$3 = $2_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$0 = 0;
                $17_1 =
                  ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                  ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                  0;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$0 = $3_1;
                i64toi32_i32$1 = 2147483647;
                i64toi32_i32$2 = -1;
                i64toi32_i32$1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                $6_1 = (i64toi32_i32$0 & i64toi32_i32$2) | 0;
                $6$hi = i64toi32_i32$1;
                i64toi32_i32$3 = $6_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$2 = 0;
                $21_1 =
                  (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0) |
                  ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) &
                    (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$2 = $6_1;
                i64toi32_i32$1 = 2147418112;
                i64toi32_i32$0 = 0;
                if (
                  (((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                    ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0))) |
                  0
                    ? $17_1
                    : $21_1
                ) {
                  break label$1;
                }
                label$2: {
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$0 = $2_1;
                  i64toi32_i32$3 = $0$hi;
                  i64toi32_i32$1 = $0_1;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                  $27$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$3 = $5$hi;
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$2 = $6_1;
                  i64toi32_i32$0 = $5$hi;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                  $30$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $27$hi;
                  i64toi32_i32$3 = $27_1;
                  i64toi32_i32$2 = $30$hi;
                  i64toi32_i32$1 = $30_1;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
                    break label$2;
                  }
                  return 0 | 0;
                }
                label$3: {
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$2 = $1$hi;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$0 = $3_1;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$1 = $1_1;
                  i64toi32_i32$3 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = 0;
                  if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
                    $35_1 = 1;
                  } else {
                    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
                      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
                        $36_1 = 0;
                      } else {
                        $36_1 = 1;
                      }
                      $37_1 = $36_1;
                    } else {
                      $37_1 = 0;
                    }
                    $35_1 = $37_1;
                  }
                  if ($35_1) {
                    break label$3;
                  }
                  $4_1 = -1;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$1 = $0_1;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$0 = $2_1;
                  $40_1 =
                    (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) |
                    ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$0 = $1_1;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$3 = $3_1;
                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
                    $38_1 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
                      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
                        $39_1 = 0;
                      } else {
                        $39_1 = 1;
                      }
                      $41_1 = $39_1;
                    } else {
                      $41_1 = 0;
                    }
                    $38_1 = $41_1;
                  }
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = $3$hi;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$2 = $3_1;
                  if (
                    (((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                      ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0))) |
                    0
                      ? $40_1
                      : $38_1
                  ) {
                    break label$1;
                  }
                  i64toi32_i32$3 = $0$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $0$hi;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$1 = $2_1;
                  i64toi32_i32$0 = (i64toi32_i32$3 ^ i64toi32_i32$0) | 0;
                  $50_1 = (i64toi32_i32$2 ^ i64toi32_i32$1) | 0;
                  $50$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = $3$hi;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$2 = (i64toi32_i32$0 ^ i64toi32_i32$2) | 0;
                  $53_1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                  $53$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $50$hi;
                  i64toi32_i32$0 = $50_1;
                  i64toi32_i32$3 = $53$hi;
                  i64toi32_i32$1 = $53_1;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = 0;
                  return (
                    ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0)) |
                    ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                    0 |
                    0
                  );
                }
                $4_1 = -1;
                i64toi32_i32$2 = $0$hi;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = $0$hi;
                i64toi32_i32$1 = $0_1;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$0 = $2_1;
                $58_1 =
                  (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) |
                  ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                    (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$3 = $3_1;
                if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
                  $42_1 = 1;
                } else {
                  if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
                    if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
                      $43_1 = 0;
                    } else {
                      $43_1 = 1;
                    }
                    $44_1 = $43_1;
                  } else {
                    $44_1 = 0;
                  }
                  $42_1 = $44_1;
                }
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$2 = $3_1;
                if (
                  (((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                    ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0))) |
                  0
                    ? $58_1
                    : $42_1
                ) {
                  break label$1;
                }
                i64toi32_i32$3 = $0$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $0$hi;
                i64toi32_i32$2 = $0_1;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$0 = (i64toi32_i32$3 ^ i64toi32_i32$0) | 0;
                $68_1 = (i64toi32_i32$2 ^ i64toi32_i32$1) | 0;
                $68$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$1 = $3_1;
                i64toi32_i32$2 = (i64toi32_i32$0 ^ i64toi32_i32$2) | 0;
                $71_1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                $71$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $68$hi;
                i64toi32_i32$0 = $68_1;
                i64toi32_i32$3 = $71$hi;
                i64toi32_i32$1 = $71_1;
                i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = 0;
                $4_1 =
                  ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0)) |
                  ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                  0;
              }
              return $4_1 | 0;
            }

            function $314($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $4_1 = 0,
                $5$hi = 0,
                $6$hi = 0,
                $35_1 = 0,
                $36_1 = 0,
                $37_1 = 0,
                $38_1 = 0,
                $39_1 = 0,
                $41_1 = 0,
                $42_1 = 0,
                $43_1 = 0,
                $44_1 = 0,
                $8_1 = 0,
                $12_1 = 0,
                $17_1 = 0,
                $21_1 = 0,
                $27_1 = 0,
                $27$hi = 0,
                $30_1 = 0,
                $30$hi = 0,
                $40_1 = 0,
                $50_1 = 0,
                $50$hi = 0,
                $53_1 = 0,
                $53$hi = 0,
                $58_1 = 0,
                $68_1 = 0,
                $68$hi = 0,
                $71_1 = 0,
                $71$hi = 0;
              $4_1 = -1;
              label$1: {
                i64toi32_i32$0 = $0$hi;
                i64toi32_i32$2 = $0_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 0;
                $8_1 =
                  ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0)) |
                  ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0)) |
                  0;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$0 = 2147483647;
                i64toi32_i32$1 = -1;
                i64toi32_i32$0 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
                $5_1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                $5$hi = i64toi32_i32$0;
                i64toi32_i32$2 = $5_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$1 = 0;
                $12_1 =
                  (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) |
                  ((((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0)) &
                    (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$3 = 0;
                if (
                  (((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                    ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0))) |
                  0
                    ? $8_1
                    : $12_1
                ) {
                  break label$1;
                }
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$3 = $2_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$0 = 0;
                $17_1 =
                  ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                  ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                  0;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$0 = $3_1;
                i64toi32_i32$1 = 2147483647;
                i64toi32_i32$2 = -1;
                i64toi32_i32$1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                $6_1 = (i64toi32_i32$0 & i64toi32_i32$2) | 0;
                $6$hi = i64toi32_i32$1;
                i64toi32_i32$3 = $6_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$2 = 0;
                $21_1 =
                  (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0) |
                  ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) &
                    (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$2 = $6_1;
                i64toi32_i32$1 = 2147418112;
                i64toi32_i32$0 = 0;
                if (
                  (((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                    ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0))) |
                  0
                    ? $17_1
                    : $21_1
                ) {
                  break label$1;
                }
                label$2: {
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$0 = $2_1;
                  i64toi32_i32$3 = $0$hi;
                  i64toi32_i32$1 = $0_1;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                  $27$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$3 = $5$hi;
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$2 = $6_1;
                  i64toi32_i32$0 = $5$hi;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                  $30$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $27$hi;
                  i64toi32_i32$3 = $27_1;
                  i64toi32_i32$2 = $30$hi;
                  i64toi32_i32$1 = $30_1;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
                    break label$2;
                  }
                  return 0 | 0;
                }
                label$3: {
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$2 = $1$hi;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$0 = $3_1;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$1 = $1_1;
                  i64toi32_i32$3 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = 0;
                  if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
                    $35_1 = 1;
                  } else {
                    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
                      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
                        $36_1 = 0;
                      } else {
                        $36_1 = 1;
                      }
                      $37_1 = $36_1;
                    } else {
                      $37_1 = 0;
                    }
                    $35_1 = $37_1;
                  }
                  if ($35_1) {
                    break label$3;
                  }
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$1 = $0_1;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$0 = $2_1;
                  $40_1 =
                    (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) |
                    ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$0 = $1_1;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$3 = $3_1;
                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
                    $38_1 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
                      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
                        $39_1 = 0;
                      } else {
                        $39_1 = 1;
                      }
                      $41_1 = $39_1;
                    } else {
                      $41_1 = 0;
                    }
                    $38_1 = $41_1;
                  }
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = $3$hi;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$2 = $3_1;
                  if (
                    (((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                      ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0))) |
                    0
                      ? $40_1
                      : $38_1
                  ) {
                    break label$1;
                  }
                  i64toi32_i32$3 = $0$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $0$hi;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$1 = $2_1;
                  i64toi32_i32$0 = (i64toi32_i32$3 ^ i64toi32_i32$0) | 0;
                  $50_1 = (i64toi32_i32$2 ^ i64toi32_i32$1) | 0;
                  $50$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = $3$hi;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$2 = (i64toi32_i32$0 ^ i64toi32_i32$2) | 0;
                  $53_1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                  $53$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $50$hi;
                  i64toi32_i32$0 = $50_1;
                  i64toi32_i32$3 = $53$hi;
                  i64toi32_i32$1 = $53_1;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = 0;
                  return (
                    ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0)) |
                    ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                    0 |
                    0
                  );
                }
                i64toi32_i32$2 = $0$hi;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = $0$hi;
                i64toi32_i32$1 = $0_1;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$0 = $2_1;
                $58_1 =
                  (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) |
                  ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                    (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0)) |
                    0) |
                  0;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$3 = $3_1;
                if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
                  $42_1 = 1;
                } else {
                  if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
                    if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
                      $43_1 = 0;
                    } else {
                      $43_1 = 1;
                    }
                    $44_1 = $43_1;
                  } else {
                    $44_1 = 0;
                  }
                  $42_1 = $44_1;
                }
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$2 = $3_1;
                if (
                  (((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                    ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0))) |
                  0
                    ? $58_1
                    : $42_1
                ) {
                  break label$1;
                }
                i64toi32_i32$3 = $0$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $0$hi;
                i64toi32_i32$2 = $0_1;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$0 = (i64toi32_i32$3 ^ i64toi32_i32$0) | 0;
                $68_1 = (i64toi32_i32$2 ^ i64toi32_i32$1) | 0;
                $68$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$1 = $3_1;
                i64toi32_i32$2 = (i64toi32_i32$0 ^ i64toi32_i32$2) | 0;
                $71_1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                $71$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $68$hi;
                i64toi32_i32$0 = $68_1;
                i64toi32_i32$3 = $71$hi;
                i64toi32_i32$1 = $71_1;
                i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = 0;
                $4_1 =
                  ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0)) |
                  ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                  0;
              }
              return $4_1 | 0;
            }

            function $315($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                $22_1 = 0,
                $23_1 = 0,
                $24_1 = 0,
                $7_1 = 0,
                $11_1 = 0,
                $18$hi = 0,
                $20_1 = 0,
                $20$hi = 0,
                $21_1 = 0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[i64toi32_i32$1 >> 2] = $1_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              $7_1 = i64toi32_i32$1;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $22_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $22_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $11_1 = ($22_1 & 32768) | 0;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $23_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                $23_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = $11_1 | (($23_1 & 32767) | 0) | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                $24_1 = 0;
              } else {
                i64toi32_i32$0 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                  0;
                $24_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
              }
              $18$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$1 = 65535;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $20_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
              $20$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $18$hi;
              i64toi32_i32$0 = $24_1;
              i64toi32_i32$2 = $20$hi;
              i64toi32_i32$3 = $20_1;
              i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
              $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
              i64toi32_i32$0 = $7_1;
              HEAP32[((i64toi32_i32$0 + 8) | 0) >> 2] = $21_1;
              HEAP32[((i64toi32_i32$0 + 12) | 0) >> 2] = i64toi32_i32$2;
            }

            function $316($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $2_1 = 0,
                $3_1 = 0,
                $3$hi = 0,
                $4_1 = 0,
                $4$hi = 0,
                $17_1 = 0,
                $11_1 = 0,
                $19_1 = 0,
                $19$hi = 0,
                $23$hi = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  if ($1_1) {
                    break label$2;
                  }
                  i64toi32_i32$0 = 0;
                  $3_1 = 0;
                  $3$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  $4_1 = 0;
                  $4$hi = i64toi32_i32$0;
                  break label$1;
                }
                i64toi32_i32$0 = 0;
                $11_1 = $1_1;
                $1_1 = Math_clz32($1_1);
                i64toi32_i32$1 = 0;
                $303($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, ($1_1 + 81) | 0 | 0);
                i64toi32_i32$2 = ($2_1 + 8) | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                i64toi32_i32$2 = i64toi32_i32$1;
                i64toi32_i32$1 = 65536;
                i64toi32_i32$3 = 0;
                i64toi32_i32$1 = (i64toi32_i32$0 ^ i64toi32_i32$1) | 0;
                $19_1 = (i64toi32_i32$2 ^ i64toi32_i32$3) | 0;
                $19$hi = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = (16414 - $1_1) | 0;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = 48;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  $17_1 = 0;
                } else {
                  i64toi32_i32$2 =
                    (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                      ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                    0;
                  $17_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                }
                $23$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $19$hi;
                i64toi32_i32$1 = $19_1;
                i64toi32_i32$0 = $23$hi;
                i64toi32_i32$3 = $17_1;
                i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                }
                $4_1 = i64toi32_i32$4;
                $4$hi = i64toi32_i32$5;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                $3_1 = i64toi32_i32$5;
                $3$hi = i64toi32_i32$1;
              }
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$5 = $0_1;
              HEAP32[i64toi32_i32$5 >> 2] = $3_1;
              HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $4$hi;
              HEAP32[((i64toi32_i32$5 + 8) | 0) >> 2] = $4_1;
              HEAP32[((i64toi32_i32$5 + 12) | 0) >> 2] = i64toi32_i32$1;
              global$0 = ($2_1 + 16) | 0;
            }

            function $317($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                $5_1 = 0,
                $14_1 = 0,
                $14$hi = 0,
                $17_1 = 0,
                $20_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = -2147483648;
              i64toi32_i32$3 = 0;
              i64toi32_i32$1 = (i64toi32_i32$0 ^ i64toi32_i32$1) | 0;
              $14_1 = (i64toi32_i32$2 ^ i64toi32_i32$3) | 0;
              $14$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$3 = $14$hi;
              $311(
                $5_1 | 0,
                $1_1 | 0,
                i64toi32_i32$1 | 0,
                $2_1 | 0,
                i64toi32_i32$2 | 0,
                $3_1 | 0,
                i64toi32_i32$0 | 0,
                $14_1 | 0,
                i64toi32_i32$3 | 0
              );
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
              $17_1 = i64toi32_i32$3;
              i64toi32_i32$3 = $0_1;
              HEAP32[i64toi32_i32$3 >> 2] = $17_1;
              HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $0_1;
              HEAP32[((i64toi32_i32$0 + 8) | 0) >> 2] = $20_1;
              HEAP32[((i64toi32_i32$0 + 12) | 0) >> 2] = i64toi32_i32$3;
              global$0 = (i64toi32_i32$2 + 16) | 0;
            }

            function $318($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                $4_1 = 0,
                i64toi32_i32$4 = 0,
                $20_1 = 0,
                $70_1 = 0,
                $71_1 = 0,
                $71$hi = 0,
                $72_1 = 0,
                $72$hi = 0,
                $76$hi = 0,
                $80_1 = 0,
                $83_1 = 0;
              $4_1 = (global$0 - 80) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  if (($3_1 | 0) < (16384 | 0)) {
                    break label$2;
                  }
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 2147352576;
                  $308(
                    ($4_1 + 32) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$0 | 0,
                    $2_1 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$1 = ((($4_1 + 32) | 0) + 8) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$3;
                  $2$hi = i64toi32_i32$2;
                  i64toi32_i32$1 = $4_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 32) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 36) | 0) >> 2] | 0;
                  $1_1 = i64toi32_i32$2;
                  $1$hi = i64toi32_i32$3;
                  label$3: {
                    if (($3_1 | 0) >= (32767 | 0)) {
                      break label$3;
                    }
                    $3_1 = ($3_1 + -16383) | 0;
                    break label$1;
                  }
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$0 = 2147352576;
                  $308(
                    ($4_1 + 16) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$3 | 0,
                    $2_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$0 | 0
                  );
                  $3_1 = ((($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766) | 0;
                  i64toi32_i32$2 = ((($4_1 + 16) | 0) + 8) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$0;
                  $2$hi = i64toi32_i32$1;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 16) | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 20) | 0) >> 2] | 0;
                  $1_1 = i64toi32_i32$1;
                  $1$hi = i64toi32_i32$0;
                  break label$1;
                }
                if (($3_1 | 0) > (-16383 | 0)) {
                  break label$1;
                }
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = 65536;
                $308(
                  ($4_1 + 64) | 0 | 0,
                  $1_1 | 0,
                  i64toi32_i32$0 | 0,
                  $2_1 | 0,
                  i64toi32_i32$1 | 0,
                  0 | 0,
                  i64toi32_i32$2 | 0,
                  0 | 0,
                  i64toi32_i32$3 | 0
                );
                i64toi32_i32$1 = ((($4_1 + 64) | 0) + 8) | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                $2_1 = i64toi32_i32$3;
                $2$hi = i64toi32_i32$2;
                i64toi32_i32$1 = $4_1;
                i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 64) | 0) >> 2] | 0;
                i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 68) | 0) >> 2] | 0;
                $1_1 = i64toi32_i32$2;
                $1$hi = i64toi32_i32$3;
                label$4: {
                  if (($3_1 | 0) <= (-32765 | 0)) {
                    break label$4;
                  }
                  $3_1 = ($3_1 + 16382) | 0;
                  break label$1;
                }
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 65536;
                $308(
                  ($4_1 + 48) | 0 | 0,
                  $1_1 | 0,
                  i64toi32_i32$3 | 0,
                  $2_1 | 0,
                  i64toi32_i32$2 | 0,
                  0 | 0,
                  i64toi32_i32$1 | 0,
                  0 | 0,
                  i64toi32_i32$0 | 0
                );
                $3_1 = ((($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764) | 0;
                i64toi32_i32$2 = ((($4_1 + 48) | 0) + 8) | 0;
                i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                $2_1 = i64toi32_i32$0;
                $2$hi = i64toi32_i32$1;
                i64toi32_i32$2 = $4_1;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 48) | 0) >> 2] | 0;
                i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 52) | 0) >> 2] | 0;
                $1_1 = i64toi32_i32$1;
                $1$hi = i64toi32_i32$0;
              }
              $70_1 = $4_1;
              i64toi32_i32$0 = $1$hi;
              $71_1 = $1_1;
              $71$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $2$hi;
              $72_1 = $2_1;
              $72$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = ($3_1 + 16383) | 0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $20_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $20_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              $76$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $71$hi;
              i64toi32_i32$2 = $72$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = $76$hi;
              $308(
                $70_1 | 0,
                $71_1 | 0,
                i64toi32_i32$1 | 0,
                $72_1 | 0,
                i64toi32_i32$2 | 0,
                0 | 0,
                i64toi32_i32$0 | 0,
                $20_1 | 0,
                i64toi32_i32$3 | 0
              );
              i64toi32_i32$2 = ($4_1 + 8) | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
              $80_1 = i64toi32_i32$3;
              i64toi32_i32$3 = $0_1;
              HEAP32[((i64toi32_i32$3 + 8) | 0) >> 2] = $80_1;
              HEAP32[((i64toi32_i32$3 + 12) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
              $83_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $0_1;
              HEAP32[i64toi32_i32$0 >> 2] = $83_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$3;
              global$0 = (i64toi32_i32$2 + 80) | 0;
            }

            function $319($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $46_1 = 0,
                $48_1 = 0,
                $49_1 = 0,
                $50_1 = 0,
                $53_1 = 0,
                $54_1 = 0,
                $6_1 = 0,
                $9_1 = 0,
                $9$hi = 0,
                $12_1 = 0,
                $12$hi = 0,
                $13_1 = 0,
                $13$hi = 0,
                $16_1 = 0,
                $16$hi = 0,
                $20_1 = 0,
                $20$hi = 0,
                $21_1 = 0,
                $21$hi = 0,
                $5_1 = 0,
                $5$hi = 0,
                $30$hi = 0,
                $33_1 = 0,
                $33$hi = 0,
                $36$hi = 0,
                $37_1 = 0,
                $37$hi = 0,
                $39_1 = 0,
                $39$hi = 0,
                $42_1 = 0,
                $42$hi = 0,
                $45$hi = 0,
                $47_1 = 0,
                $49$hi = 0,
                $51_1 = 0,
                $51$hi = 0,
                $52_1 = 0;
              $6_1 = $0_1;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $9_1 = i64toi32_i32$1;
              $9$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $12_1 = i64toi32_i32$1;
              $12$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $9$hi;
              i64toi32_i32$2 = $9_1;
              i64toi32_i32$1 = $12$hi;
              i64toi32_i32$3 = $12_1;
              i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
              i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
              }
              $13_1 = i64toi32_i32$4;
              $13$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $46_1 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
              } else {
                i64toi32_i32$2 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                $46_1 =
                  (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                    ((32 - i64toi32_i32$1) | 0)) |
                  0 |
                  ((i64toi32_i32$0 >>> i64toi32_i32$1) | 0) |
                  0;
              }
              $4_1 = $46_1;
              $4$hi = i64toi32_i32$2;
              $16_1 = $4_1;
              $16$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$5 = $1_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $48_1 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
              } else {
                i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                $48_1 =
                  (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                    ((32 - i64toi32_i32$1) | 0)) |
                  0 |
                  ((i64toi32_i32$5 >>> i64toi32_i32$1) | 0) |
                  0;
              }
              $2_1 = $48_1;
              $2$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $16$hi;
              i64toi32_i32$5 = $2$hi;
              i64toi32_i32$5 =
                __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $20_1 = i64toi32_i32$5;
              $20$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $13$hi;
              i64toi32_i32$2 = $13_1;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$3 = $20_1;
              i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
              i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
              }
              $21_1 = i64toi32_i32$1;
              $21$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = -1;
              i64toi32_i32$2 = (i64toi32_i32$4 & i64toi32_i32$2) | 0;
              $3_1 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
              $3$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$4 = $1_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = -1;
              i64toi32_i32$0 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
              $1_1 = (i64toi32_i32$4 & i64toi32_i32$3) | 0;
              $1$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$4 = $1$hi;
              i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $5_1 = i64toi32_i32$4;
              $5$hi = i64toi32_i32$0;
              i64toi32_i32$2 = i64toi32_i32$4;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$5 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$4 = 0;
                $49_1 = (i64toi32_i32$0 >>> i64toi32_i32$5) | 0;
              } else {
                i64toi32_i32$4 = (i64toi32_i32$0 >>> i64toi32_i32$5) | 0;
                $49_1 =
                  (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$5) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$5) | 0) |
                  0;
              }
              $30$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$4 = $2$hi;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
              i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
              $33_1 = i64toi32_i32$2;
              $33$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $30$hi;
              i64toi32_i32$0 = $49_1;
              i64toi32_i32$2 = $33$hi;
              i64toi32_i32$3 = $33_1;
              i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
              i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
              if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
              }
              $3_1 = i64toi32_i32$5;
              $3$hi = i64toi32_i32$1;
              i64toi32_i32$4 = i64toi32_i32$5;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$2 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $50_1 = (i64toi32_i32$1 >>> i64toi32_i32$2) | 0;
              } else {
                i64toi32_i32$0 = (i64toi32_i32$1 >>> i64toi32_i32$2) | 0;
                $50_1 =
                  (((((((1 << i64toi32_i32$2) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                    ((32 - i64toi32_i32$2) | 0)) |
                  0 |
                  ((i64toi32_i32$4 >>> i64toi32_i32$2) | 0) |
                  0;
              }
              $36$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $21$hi;
              i64toi32_i32$1 = $21_1;
              i64toi32_i32$4 = $36$hi;
              i64toi32_i32$3 = $50_1;
              i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
              i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$4) | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
              }
              $37_1 = i64toi32_i32$2;
              $37$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = (i64toi32_i32$5 & i64toi32_i32$1) | 0;
              $39_1 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
              $39$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $42_1 = i64toi32_i32$0;
              $42$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $39$hi;
              i64toi32_i32$5 = $39_1;
              i64toi32_i32$0 = $42$hi;
              i64toi32_i32$3 = $42_1;
              i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
              i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
              }
              $3_1 = i64toi32_i32$4;
              $3$hi = i64toi32_i32$2;
              i64toi32_i32$1 = i64toi32_i32$4;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$5 = 0;
                $53_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
              } else {
                i64toi32_i32$5 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                $53_1 =
                  (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                    ((32 - i64toi32_i32$0) | 0)) |
                  0 |
                  ((i64toi32_i32$1 >>> i64toi32_i32$0) | 0) |
                  0;
              }
              $45$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $37$hi;
              i64toi32_i32$2 = $37_1;
              i64toi32_i32$1 = $45$hi;
              i64toi32_i32$3 = $53_1;
              i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
              i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
              }
              i64toi32_i32$2 = $6_1;
              HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] = i64toi32_i32$0;
              HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] = i64toi32_i32$4;
              $47_1 = $0_1;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$5 = $3_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = (i64toi32_i32$5 << i64toi32_i32$1) | 0;
                $54_1 = 0;
              } else {
                i64toi32_i32$2 =
                  (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                    ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                  0;
                $54_1 = (i64toi32_i32$5 << i64toi32_i32$1) | 0;
              }
              $49$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $5$hi;
              i64toi32_i32$4 = $5_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = -1;
              i64toi32_i32$5 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
              $51_1 = (i64toi32_i32$4 & i64toi32_i32$3) | 0;
              $51$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $49$hi;
              i64toi32_i32$2 = $54_1;
              i64toi32_i32$4 = $51$hi;
              i64toi32_i32$3 = $51_1;
              i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
              $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              i64toi32_i32$2 = $47_1;
              HEAP32[i64toi32_i32$2 >> 2] = $52_1;
              HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] = i64toi32_i32$4;
            }

            function $320($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                $15$hi = 0,
                $13$hi = 0,
                $15_1 = 0,
                $16$hi = 0,
                $13_1 = 0,
                i64toi32_i32$6 = 0,
                $5_1 = 0,
                $18$hi = 0,
                $19$hi = 0,
                $17$hi = 0,
                $16_1 = 0,
                $18_1 = 0,
                $19_1 = 0,
                $11$hi = 0,
                $17_1 = 0,
                $12$hi = 0,
                $20$hi = 0,
                $11_1 = 0,
                $12_1 = 0,
                $20_1 = 0,
                $10$hi = 0,
                $10_1 = 0,
                $8_1 = 0,
                $6_1 = 0,
                $14_1 = 0,
                $14$hi = 0,
                $7_1 = 0,
                $21$hi = 0,
                $9_1 = 0,
                $470_1 = 0,
                $471_1 = 0,
                $475_1 = 0,
                $476_1 = 0,
                $478_1 = 0,
                $479_1 = 0,
                $480_1 = 0,
                $481_1 = 0,
                $482_1 = 0,
                $484_1 = 0,
                $485_1 = 0,
                $486_1 = 0,
                $488_1 = 0,
                $489_1 = 0,
                $490_1 = 0,
                $491_1 = 0,
                $494_1 = 0,
                $495_1 = 0,
                $496_1 = 0,
                $497_1 = 0,
                $498_1 = 0,
                $499_1 = 0,
                $501_1 = 0,
                $502_1 = 0,
                $503_1 = 0,
                $504_1 = 0,
                $505_1 = 0,
                $507_1 = 0,
                $508_1 = 0,
                $512_1 = 0,
                $513_1 = 0,
                $514_1 = 0,
                $515_1 = 0,
                $516_1 = 0,
                $518_1 = 0,
                $521_1 = 0,
                $522_1 = 0,
                $523_1 = 0,
                $524_1 = 0,
                $525_1 = 0,
                $526_1 = 0,
                $527_1 = 0,
                $528_1 = 0,
                $530_1 = 0,
                $21_1 = 0,
                $531_1 = 0,
                $532_1 = 0,
                $533_1 = 0,
                $537_1 = 0,
                $538_1 = 0,
                $539_1 = 0,
                $540_1 = 0,
                $542_1 = 0,
                $543_1 = 0,
                $544_1 = 0,
                $546_1 = 0,
                $547_1 = 0,
                $548_1 = 0,
                $549_1 = 0,
                $550_1 = 0,
                $552_1 = 0,
                $555_1 = 0,
                $556_1 = 0,
                $557_1 = 0,
                $558_1 = 0,
                $559_1 = 0,
                $560_1 = 0,
                $562_1 = 0,
                $563_1 = 0,
                $564_1 = 0,
                $565_1 = 0,
                $567_1 = 0,
                $568_1 = 0,
                $569_1 = 0,
                $570_1 = 0,
                $572_1 = 0,
                $573_1 = 0,
                $575_1 = 0,
                $576_1 = 0,
                $48_1 = 0,
                $52_1 = 0,
                $59_1 = 0,
                $63_1 = 0,
                $72_1 = 0,
                $72$hi = 0,
                $77_1 = 0,
                $77$hi = 0,
                $85_1 = 0,
                $85$hi = 0,
                $101_1 = 0,
                $102_1 = 0,
                $102$hi = 0,
                $103_1 = 0,
                $103$hi = 0,
                $110$hi = 0,
                $113$hi = 0,
                $128_1 = 0,
                $129_1 = 0,
                $129$hi = 0,
                $130_1 = 0,
                $130$hi = 0,
                $137$hi = 0,
                $140$hi = 0,
                $155_1 = 0,
                $157_1 = 0,
                $157$hi = 0,
                $161$hi = 0,
                $172_1 = 0,
                $172$hi = 0,
                $173$hi = 0,
                $176_1 = 0,
                $179_1 = 0,
                $179$hi = 0,
                $184$hi = 0,
                $194_1 = 0,
                $194$hi = 0,
                $195$hi = 0,
                $197_1 = 0,
                $200_1 = 0,
                $200$hi = 0,
                $205$hi = 0,
                $215_1 = 0,
                $215$hi = 0,
                $216$hi = 0,
                $218_1 = 0,
                $221_1 = 0,
                $221$hi = 0,
                $226$hi = 0,
                $236_1 = 0,
                $236$hi = 0,
                $237$hi = 0,
                $239_1 = 0,
                $242_1 = 0,
                $242$hi = 0,
                $247$hi = 0,
                $256_1 = 0,
                $256$hi = 0,
                $257$hi = 0,
                $265_1 = 0,
                $265$hi = 0,
                $269$hi = 0,
                $274_1 = 0,
                $274$hi = 0,
                $279_1 = 0,
                $279$hi = 0,
                $286_1 = 0,
                $286$hi = 0,
                $289_1 = 0,
                $289$hi = 0,
                $292_1 = 0,
                $294$hi = 0,
                $295_1 = 0,
                $295$hi = 0,
                $298_1 = 0,
                $298$hi = 0,
                $299_1 = 0,
                $299$hi = 0,
                $305_1 = 0,
                $305$hi = 0,
                $309_1 = 0,
                $310$hi = 0,
                $311_1 = 0,
                $311$hi = 0,
                $312_1 = 0,
                $312$hi = 0,
                $313_1 = 0,
                $313$hi = 0,
                $319_1 = 0,
                $319$hi = 0,
                $320_1 = 0,
                $320$hi = 0,
                $325_1 = 0,
                $325$hi = 0,
                $332_1 = 0,
                $332$hi = 0,
                $333$hi = 0,
                $335_1 = 0,
                $336_1 = 0,
                $336$hi = 0,
                $338_1 = 0,
                $338$hi = 0,
                $341_1 = 0,
                $343$hi = 0,
                $344_1 = 0,
                $344$hi = 0,
                $347_1 = 0,
                $347$hi = 0,
                $348$hi = 0,
                $349$hi = 0,
                $353_1 = 0,
                $354$hi = 0,
                $355$hi = 0,
                $357_1 = 0,
                $358$hi = 0,
                $359$hi = 0,
                $366_1 = 0,
                $366$hi = 0,
                $370_1 = 0,
                $370$hi = 0,
                $371_1 = 0,
                $371$hi = 0,
                $375_1 = 0,
                $375$hi = 0,
                $378$hi = 0,
                $383_1 = 0,
                $383$hi = 0,
                $385_1 = 0,
                $385$hi = 0,
                $388_1 = 0,
                $390$hi = 0,
                $391_1 = 0,
                $391$hi = 0,
                $394_1 = 0,
                $394$hi = 0,
                $395$hi = 0,
                $396_1 = 0,
                $396$hi = 0,
                $397_1 = 0,
                $397$hi = 0,
                $410_1 = 0,
                $410$hi = 0,
                $417_1 = 0,
                $417$hi = 0,
                $418$hi = 0,
                $420_1 = 0,
                $421_1 = 0,
                $421$hi = 0,
                $423_1 = 0,
                $423$hi = 0,
                $426_1 = 0,
                $428$hi = 0,
                $429_1 = 0,
                $429$hi = 0,
                $432_1 = 0,
                $432$hi = 0,
                $433$hi = 0,
                $434$hi = 0,
                $438_1 = 0,
                $439$hi = 0,
                $440_1 = 0,
                $440$hi = 0,
                $445_1 = 0,
                $446$hi = 0,
                $451_1 = 0,
                $451$hi = 0,
                $453_1 = 0,
                $453$hi = 0,
                $455$hi = 0,
                $460_1 = 0,
                $460$hi = 0,
                $464_1 = 0,
                $464$hi = 0,
                $468_1 = 0,
                $468$hi = 0,
                $472_1 = 0,
                $473_1 = 0,
                $473$hi = 0,
                $474_1 = 0,
                $474$hi = 0,
                $477_1 = 0,
                $477$hi = 0,
                $483_1 = 0,
                $483$hi = 0,
                $487_1 = 0,
                $488$hi = 0,
                $489$hi = 0,
                $492_1 = 0,
                $492$hi = 0,
                $493_1 = 0,
                $493$hi = 0,
                $500_1 = 0,
                $500$hi = 0,
                $506_1 = 0,
                $506$hi = 0,
                $508$hi = 0,
                $509_1 = 0,
                $509$hi = 0,
                $510_1 = 0,
                $510$hi = 0,
                $511_1 = 0,
                $511$hi = 0,
                $513$hi = 0,
                $517_1 = 0,
                $518$hi = 0,
                $519_1 = 0,
                $519$hi = 0,
                $520_1 = 0,
                $520$hi = 0,
                $529_1 = 0,
                $529$hi = 0,
                $534_1 = 0,
                $534$hi = 0,
                $535_1 = 0,
                $535$hi = 0,
                $536_1 = 0,
                $536$hi = 0,
                $541_1 = 0,
                $541$hi = 0,
                $545_1 = 0,
                $546$hi = 0,
                $547$hi = 0,
                $551_1 = 0,
                $552$hi = 0,
                $553_1 = 0,
                $553$hi = 0,
                $554_1 = 0,
                $554$hi = 0,
                $561_1 = 0,
                $561$hi = 0,
                $566_1 = 0,
                $566$hi = 0,
                $571_1 = 0,
                $571$hi = 0,
                $574_1 = 0,
                $574$hi = 0,
                $577_1 = 0,
                $578$hi = 0,
                $581_1 = 0,
                $582$hi = 0,
                $583$hi = 0,
                $586_1 = 0,
                $587$hi = 0,
                $589$hi = 0,
                $590_1 = 0,
                $590$hi = 0,
                $594_1 = 0,
                $595$hi = 0,
                $596_1 = 0,
                $596$hi = 0,
                $597_1 = 0,
                $597$hi = 0,
                $598_1 = 0,
                $598$hi = 0,
                $605_1 = 0,
                $605$hi = 0,
                $608_1 = 0,
                $608$hi = 0,
                $611_1 = 0,
                $613$hi = 0,
                $614_1 = 0,
                $614$hi = 0,
                $618_1 = 0,
                $619_1 = 0,
                $619$hi = 0,
                $620_1 = 0,
                $620$hi = 0,
                $622$hi = 0,
                $623$hi = 0,
                $625_1 = 0,
                $626$hi = 0,
                $627$hi = 0,
                $631_1 = 0,
                $632$hi = 0,
                $637$hi = 0,
                $646_1 = 0,
                $647$hi = 0,
                $648_1 = 0,
                $648$hi = 0,
                $651_1 = 0,
                $651$hi = 0,
                $657_1 = 0,
                $657$hi = 0,
                $658_1 = 0,
                $658$hi = 0,
                $662_1 = 0,
                $662$hi = 0,
                $667_1 = 0,
                $668$hi = 0,
                $669_1 = 0,
                $669$hi = 0,
                $670_1 = 0,
                $670$hi = 0,
                $672$hi = 0,
                $673_1 = 0,
                $673$hi = 0,
                $674_1 = 0,
                $674$hi = 0,
                $676$hi = 0,
                $677_1 = 0,
                $677$hi = 0,
                $678$hi = 0,
                $681_1 = 0,
                $681$hi = 0,
                $682$hi = 0,
                $685_1 = 0,
                $685$hi = 0,
                $687_1 = 0,
                $687$hi = 0,
                $689$hi = 0,
                $578_1 = 0,
                $691_1 = 0,
                $691$hi = 0,
                $694_1 = 0,
                $694$hi = 0,
                $695_1 = 0,
                $695$hi = 0,
                $696$hi = 0,
                $699_1 = 0,
                $699$hi = 0,
                $700_1 = 0,
                $700$hi = 0,
                $702_1 = 0,
                $702$hi = 0,
                $705_1 = 0,
                $707$hi = 0,
                $708_1 = 0,
                $708$hi = 0,
                $709$hi = 0,
                $710$hi = 0,
                $720_1 = 0,
                $720$hi = 0,
                $722_1 = 0,
                $722$hi = 0,
                $724$hi = 0,
                $734_1 = 0,
                $735$hi = 0,
                $736_1 = 0,
                $736$hi = 0,
                $739_1 = 0,
                $739$hi = 0,
                $740_1 = 0,
                $740$hi = 0,
                $745_1 = 0,
                $745$hi = 0,
                $746_1 = 0,
                $746$hi = 0,
                $748$hi = 0,
                $754_1 = 0,
                $754$hi = 0,
                $759_1 = 0,
                $760$hi = 0,
                $761_1 = 0,
                $761$hi = 0,
                $762_1 = 0,
                $762$hi = 0,
                $764$hi = 0,
                $765_1 = 0,
                $765$hi = 0,
                $766_1 = 0,
                $766$hi = 0,
                $768$hi = 0,
                $769_1 = 0,
                $769$hi = 0,
                $770_1 = 0,
                $770$hi = 0,
                $775_1 = 0,
                $775$hi = 0,
                $776$hi = 0,
                $779_1 = 0,
                $779$hi = 0,
                $781_1 = 0,
                $781$hi = 0,
                $784_1 = 0,
                $784$hi = 0,
                $786$hi = 0,
                $579_1 = 0,
                $788_1 = 0,
                $788$hi = 0,
                $789$hi = 0,
                $792_1 = 0,
                $792$hi = 0,
                $793_1 = 0,
                $793$hi = 0,
                $794_1 = 0,
                $794$hi = 0,
                $796_1 = 0,
                $796$hi = 0,
                $799_1 = 0,
                $801$hi = 0,
                $802_1 = 0,
                $802$hi = 0,
                $803$hi = 0,
                $804$hi = 0,
                $820_1 = 0,
                $820$hi = 0,
                $821_1 = 0,
                $821$hi = 0,
                $823$hi = 0,
                $825_1 = 0,
                $827_1 = 0,
                $827$hi = 0,
                $829$hi = 0,
                $833_1 = 0,
                $837_1 = 0,
                $838$hi = 0,
                $842_1 = 0,
                $843$hi = 0,
                $852_1 = 0,
                $852$hi = 0,
                $853_1 = 0,
                $853$hi = 0,
                $855$hi = 0,
                $857_1 = 0,
                $859_1 = 0,
                $859$hi = 0,
                $861$hi = 0,
                $865_1 = 0,
                $869_1 = 0,
                $870$hi = 0,
                $874_1 = 0,
                $875$hi = 0,
                $876_1 = 0,
                $876$hi = 0,
                $879$hi = 0,
                $880$hi = 0,
                $896_1 = 0;
              $5_1 = (global$0 - 192) | 0;
              global$0 = $5_1;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 65535;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $10_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
              $10$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$2 = 65535;
              i64toi32_i32$3 = -1;
              i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
              $11_1 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
              $11$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$3 = $2_1;
              i64toi32_i32$0 = (i64toi32_i32$2 ^ i64toi32_i32$0) | 0;
              i64toi32_i32$2 = (i64toi32_i32$1 ^ i64toi32_i32$3) | 0;
              i64toi32_i32$1 = -2147483648;
              i64toi32_i32$3 = 0;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $12_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
              $12$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $470_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                $470_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $6_1 = ($470_1 & 32767) | 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$1 = $2_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 48;
                      i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = 0;
                        $471_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                      } else {
                        i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                        $471_1 =
                          (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                            ((32 - i64toi32_i32$4) | 0)) |
                          0 |
                          ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                          0;
                      }
                      $7_1 = ($471_1 & 32767) | 0;
                      if ((($7_1 + -1) | 0) >>> 0 > 32765 >>> 0) {
                        break label$4;
                      }
                      $8_1 = 0;
                      if ((($6_1 + -1) | 0) >>> 0 < 32766 >>> 0) {
                        break label$3;
                      }
                    }
                    label$5: {
                      i64toi32_i32$0 = $1$hi;
                      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$1 = 2147483647;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
                      $13_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                      $13$hi = i64toi32_i32$1;
                      i64toi32_i32$0 = $13_1;
                      i64toi32_i32$2 = 2147418112;
                      i64toi32_i32$3 = 0;
                      $52_1 =
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$3 = $13_1;
                      i64toi32_i32$1 = 2147418112;
                      i64toi32_i32$2 = 0;
                      if (
                        (((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                          ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0))) |
                        0
                          ? $48_1
                          : $52_1
                      ) {
                        break label$5;
                      }
                      i64toi32_i32$3 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$0 = 32768;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                      $12$hi = i64toi32_i32$0;
                      break label$2;
                    }
                    label$6: {
                      i64toi32_i32$0 = $3$hi;
                      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$3 = $4_1;
                      i64toi32_i32$2 = 2147483647;
                      i64toi32_i32$1 = -1;
                      i64toi32_i32$2 = (i64toi32_i32$0 & i64toi32_i32$2) | 0;
                      $2_1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                      $2$hi = i64toi32_i32$2;
                      i64toi32_i32$0 = $2_1;
                      i64toi32_i32$3 = 2147418112;
                      i64toi32_i32$1 = 0;
                      $63_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$0 = i64toi32_i32$2;
                      i64toi32_i32$1 = $2_1;
                      i64toi32_i32$2 = 2147418112;
                      i64toi32_i32$3 = 0;
                      if (
                        (((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                          ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0))) |
                        0
                          ? $59_1
                          : $63_1
                      ) {
                        break label$6;
                      }
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$3 = $4_1;
                      i64toi32_i32$0 = 32768;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                      $12$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $3$hi;
                      $1_1 = $3_1;
                      $1$hi = i64toi32_i32$0;
                      break label$2;
                    }
                    label$7: {
                      i64toi32_i32$0 = $1$hi;
                      i64toi32_i32$0 = $13$hi;
                      i64toi32_i32$1 = $13_1;
                      i64toi32_i32$3 = 2147418112;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$3 = (i64toi32_i32$0 ^ i64toi32_i32$3) | 0;
                      $72_1 = (i64toi32_i32$1 ^ i64toi32_i32$2) | 0;
                      $72$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $1$hi;
                      i64toi32_i32$0 = $1_1;
                      i64toi32_i32$1 = $72$hi;
                      i64toi32_i32$2 = $72_1;
                      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = 0;
                      if (
                        ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0)) |
                        ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0)) |
                        0
                      ) {
                        break label$7;
                      }
                      label$8: {
                        i64toi32_i32$3 = $3$hi;
                        i64toi32_i32$3 = $2$hi;
                        i64toi32_i32$2 = $2_1;
                        i64toi32_i32$1 = 2147418112;
                        i64toi32_i32$0 = 0;
                        i64toi32_i32$1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                        $77_1 = (i64toi32_i32$2 ^ i64toi32_i32$0) | 0;
                        $77$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = $3$hi;
                        i64toi32_i32$3 = $3_1;
                        i64toi32_i32$2 = $77$hi;
                        i64toi32_i32$0 = $77_1;
                        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                        if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
                          break label$8;
                        }
                        i64toi32_i32$2 = 0;
                        $1_1 = 0;
                        $1$hi = i64toi32_i32$2;
                        i64toi32_i32$2 = 2147450880;
                        $12_1 = 0;
                        $12$hi = i64toi32_i32$2;
                        break label$2;
                      }
                      i64toi32_i32$2 = $12$hi;
                      i64toi32_i32$1 = $12_1;
                      i64toi32_i32$3 = 2147418112;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                      $12$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = 0;
                      $1_1 = 0;
                      $1$hi = i64toi32_i32$3;
                      break label$2;
                    }
                    label$9: {
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$3 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$1 = 2147418112;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                      $85_1 = (i64toi32_i32$2 ^ i64toi32_i32$0) | 0;
                      $85$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$3 = $3_1;
                      i64toi32_i32$2 = $85$hi;
                      i64toi32_i32$0 = $85_1;
                      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$0 = 0;
                      if (
                        ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0)) |
                        ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0)) |
                        0
                      ) {
                        break label$9;
                      }
                      i64toi32_i32$1 = 0;
                      $1_1 = 0;
                      $1$hi = i64toi32_i32$1;
                      break label$2;
                    }
                    i64toi32_i32$1 = $1$hi;
                    i64toi32_i32$1 = $13$hi;
                    i64toi32_i32$1 = $1$hi;
                    i64toi32_i32$0 = $1_1;
                    i64toi32_i32$2 = $13$hi;
                    i64toi32_i32$3 = $13_1;
                    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$3 = 0;
                    if (
                      (((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                        ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0))) |
                      0
                    ) {
                      break label$1;
                    }
                    label$10: {
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$3 = $3_1;
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$0 = $2_1;
                      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$0 = 0;
                      if (
                        ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0)) |
                        ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0)) |
                        0
                      ) {
                        break label$10;
                      }
                      i64toi32_i32$1 = $12$hi;
                      i64toi32_i32$0 = $12_1;
                      i64toi32_i32$2 = 2147418112;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                      $12$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = 0;
                      $1_1 = 0;
                      $1$hi = i64toi32_i32$2;
                      break label$2;
                    }
                    $8_1 = 0;
                    label$11: {
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$1 = $13_1;
                      i64toi32_i32$0 = 65535;
                      i64toi32_i32$3 = -1;
                      if (
                        (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0)) |
                          0) |
                        0
                      ) {
                        break label$11;
                      }
                      $101_1 = ($5_1 + 176) | 0;
                      i64toi32_i32$1 = $1$hi;
                      $102_1 = $1_1;
                      $102$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $11$hi;
                      $103_1 = $11_1;
                      $103$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $1$hi;
                      i64toi32_i32$1 = $11$hi;
                      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
                      i64toi32_i32$4 = $8_1;
                      i64toi32_i32$1 = $1$hi;
                      i64toi32_i32$2 = $11$hi;
                      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
                      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
                      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
                      i64toi32_i32$4 = 0;
                      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
                        $475_1 = (Math_clz32(i64toi32_i32$0) + 32) | 0;
                      } else {
                        $475_1 = i64toi32_i32$1;
                      }
                      $110$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = 0;
                      $113$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $110$hi;
                      i64toi32_i32$0 = $475_1;
                      i64toi32_i32$3 = $113$hi;
                      i64toi32_i32$1 = ($8_1 << 6) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $8_1 = i64toi32_i32$2;
                      i64toi32_i32$5 = $102$hi;
                      i64toi32_i32$0 = $103$hi;
                      $303(
                        $101_1 | 0,
                        $102_1 | 0,
                        i64toi32_i32$5 | 0,
                        $103_1 | 0,
                        i64toi32_i32$0 | 0,
                        (i64toi32_i32$2 + -15) | 0 | 0
                      );
                      $8_1 = (16 - i64toi32_i32$2) | 0;
                      i64toi32_i32$4 = ($5_1 + 184) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                      $11_1 = i64toi32_i32$0;
                      $11$hi = i64toi32_i32$5;
                      i64toi32_i32$4 = $5_1;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 176) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[((i64toi32_i32$4 + 180) | 0) >> 2] | 0;
                      $1_1 = i64toi32_i32$5;
                      $1$hi = i64toi32_i32$0;
                    }
                    i64toi32_i32$0 = $2$hi;
                    i64toi32_i32$4 = $2_1;
                    i64toi32_i32$5 = 65535;
                    i64toi32_i32$1 = -1;
                    if (
                      (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$3;
                    }
                    $128_1 = ($5_1 + 160) | 0;
                    i64toi32_i32$4 = $3$hi;
                    $129_1 = $3_1;
                    $129$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $10$hi;
                    $130_1 = $10_1;
                    $130$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$4 = $10$hi;
                    $9_1 = !($10_1 | i64toi32_i32$4 | 0);
                    i64toi32_i32$3 = $9_1;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$0 = $10$hi;
                    i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
                    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
                    i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
                    i64toi32_i32$3 = 0;
                    if ((i64toi32_i32$4 | 0) == (32 | 0)) {
                      $476_1 = (Math_clz32(i64toi32_i32$5) + 32) | 0;
                    } else {
                      $476_1 = i64toi32_i32$4;
                    }
                    $137$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    $140$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $137$hi;
                    i64toi32_i32$5 = $476_1;
                    i64toi32_i32$1 = $140$hi;
                    i64toi32_i32$4 = ($9_1 << 6) | 0;
                    i64toi32_i32$0 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                    }
                    $9_1 = i64toi32_i32$0;
                    i64toi32_i32$2 = $129$hi;
                    i64toi32_i32$5 = $130$hi;
                    $303(
                      $128_1 | 0,
                      $129_1 | 0,
                      i64toi32_i32$2 | 0,
                      $130_1 | 0,
                      i64toi32_i32$5 | 0,
                      (i64toi32_i32$0 + -15) | 0 | 0
                    );
                    $8_1 = (((i64toi32_i32$0 + $8_1) | 0) + -16) | 0;
                    i64toi32_i32$3 = ($5_1 + 168) | 0;
                    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                    $10_1 = i64toi32_i32$5;
                    $10$hi = i64toi32_i32$2;
                    i64toi32_i32$3 = $5_1;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$3 + 160) | 0) >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 164) | 0) >> 2] | 0;
                    $3_1 = i64toi32_i32$2;
                    $3$hi = i64toi32_i32$5;
                  }
                  $155_1 = ($5_1 + 144) | 0;
                  i64toi32_i32$5 = $3$hi;
                  i64toi32_i32$3 = $3_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$4 = 49;
                  i64toi32_i32$1 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $478_1 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                  } else {
                    i64toi32_i32$2 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                    $478_1 =
                      (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                        ((32 - i64toi32_i32$1) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$1) | 0) |
                      0;
                  }
                  $157_1 = $478_1;
                  $157$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $10$hi;
                  i64toi32_i32$5 = $10_1;
                  i64toi32_i32$3 = 65536;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  $14_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                  $14$hi = i64toi32_i32$3;
                  i64toi32_i32$2 = $14_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = 15;
                  i64toi32_i32$1 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                    $479_1 = 0;
                  } else {
                    i64toi32_i32$5 =
                      (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$3 << i64toi32_i32$1) | 0) |
                      0;
                    $479_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                  }
                  $161$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $157$hi;
                  i64toi32_i32$3 = $157_1;
                  i64toi32_i32$2 = $161$hi;
                  i64toi32_i32$4 = $479_1;
                  i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
                  $2$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = 1963258675;
                  i64toi32_i32$5 = -102865788;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$4 = $2_1;
                  i64toi32_i32$1 = (i64toi32_i32$5 - i64toi32_i32$4) | 0;
                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
                  i64toi32_i32$0 = (i64toi32_i32$6 + i64toi32_i32$3) | 0;
                  i64toi32_i32$0 = (i64toi32_i32$2 - i64toi32_i32$0) | 0;
                  $4_1 = i64toi32_i32$1;
                  $4$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = i64toi32_i32$3;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$4 = 0;
                  $319(
                    $155_1 | 0,
                    $2_1 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    i64toi32_i32$1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$4 | 0
                  );
                  i64toi32_i32$5 = ((($5_1 + 144) | 0) + 8) | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $172_1 = i64toi32_i32$4;
                  $172$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = $172$hi;
                  i64toi32_i32$0 = $172_1;
                  i64toi32_i32$3 = (i64toi32_i32$5 - i64toi32_i32$0) | 0;
                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$1 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$2 - i64toi32_i32$1) | 0;
                  $173$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $4$hi;
                  i64toi32_i32$1 = $173$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$0 = 0;
                  $319(
                    ($5_1 + 128) | 0 | 0,
                    i64toi32_i32$3 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    $4_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$0 | 0
                  );
                  $176_1 = ($5_1 + 112) | 0;
                  i64toi32_i32$5 = $5_1;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 128) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 132) | 0) >> 2] | 0;
                  i64toi32_i32$5 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = 63;
                  i64toi32_i32$4 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $480_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                    $480_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $179_1 = $480_1;
                  $179$hi = i64toi32_i32$0;
                  i64toi32_i32$2 = ((($5_1 + 128) | 0) + 8) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  i64toi32_i32$2 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                    $481_1 = 0;
                  } else {
                    i64toi32_i32$0 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$4) | 0) |
                      0;
                    $481_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                  }
                  $184$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $179$hi;
                  i64toi32_i32$5 = $179_1;
                  i64toi32_i32$2 = $184$hi;
                  i64toi32_i32$1 = $481_1;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                  $4$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$1 = 0;
                  $319(
                    $176_1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    $2_1 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$1 = i64toi32_i32$2;
                  i64toi32_i32$5 = ((($5_1 + 112) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $194_1 = i64toi32_i32$1;
                  $194$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$1 = $194$hi;
                  i64toi32_i32$2 = $194_1;
                  i64toi32_i32$4 = (i64toi32_i32$5 - i64toi32_i32$2) | 0;
                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
                  i64toi32_i32$3 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$0 - i64toi32_i32$3) | 0;
                  $195$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$0 = $195$hi;
                  i64toi32_i32$2 = 0;
                  $319(
                    ($5_1 + 96) | 0 | 0,
                    $4_1 | 0,
                    i64toi32_i32$3 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    i64toi32_i32$4 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0
                  );
                  $197_1 = ($5_1 + 80) | 0;
                  i64toi32_i32$5 = $5_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 96) | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 100) | 0) >> 2] | 0;
                  i64toi32_i32$5 = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 63;
                  i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $482_1 = (i64toi32_i32$0 >>> i64toi32_i32$1) | 0;
                  } else {
                    i64toi32_i32$2 = (i64toi32_i32$0 >>> i64toi32_i32$1) | 0;
                    $482_1 =
                      (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                        ((32 - i64toi32_i32$1) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$1) | 0) |
                      0;
                  }
                  $200_1 = $482_1;
                  $200$hi = i64toi32_i32$2;
                  i64toi32_i32$0 = ((($5_1 + 96) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                  i64toi32_i32$0 = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 1;
                  i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                    $484_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                        ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$1) | 0) |
                      0;
                    $484_1 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                  }
                  $205$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $200$hi;
                  i64toi32_i32$5 = $200_1;
                  i64toi32_i32$0 = $205$hi;
                  i64toi32_i32$3 = $484_1;
                  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                  $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                  $4$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$3 = 0;
                  $319(
                    $197_1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    $2_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$3 = i64toi32_i32$0;
                  i64toi32_i32$5 = ((($5_1 + 80) | 0) + 8) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $215_1 = i64toi32_i32$3;
                  $215$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$3 = $215$hi;
                  i64toi32_i32$0 = $215_1;
                  i64toi32_i32$1 = (i64toi32_i32$5 - i64toi32_i32$0) | 0;
                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$3) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$2 - i64toi32_i32$4) | 0;
                  $216$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = $216$hi;
                  i64toi32_i32$0 = 0;
                  $319(
                    ($5_1 + 64) | 0 | 0,
                    $4_1 | 0,
                    i64toi32_i32$4 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    i64toi32_i32$1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$0 | 0
                  );
                  $218_1 = ($5_1 + 48) | 0;
                  i64toi32_i32$5 = $5_1;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 64) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 68) | 0) >> 2] | 0;
                  i64toi32_i32$5 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$4 = 63;
                  i64toi32_i32$3 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $485_1 = (i64toi32_i32$2 >>> i64toi32_i32$3) | 0;
                  } else {
                    i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$3) | 0;
                    $485_1 =
                      (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$3) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$3) | 0) |
                      0;
                  }
                  $221_1 = $485_1;
                  $221$hi = i64toi32_i32$0;
                  i64toi32_i32$2 = ((($5_1 + 64) | 0) + 8) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  i64toi32_i32$2 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$4 = 1;
                  i64toi32_i32$3 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                    $486_1 = 0;
                  } else {
                    i64toi32_i32$0 =
                      (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$3) | 0) |
                      0;
                    $486_1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                  }
                  $226$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $221$hi;
                  i64toi32_i32$5 = $221_1;
                  i64toi32_i32$2 = $226$hi;
                  i64toi32_i32$4 = $486_1;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                  $4$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$4 = 0;
                  $319(
                    $218_1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    $2_1 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$4 | 0
                  );
                  i64toi32_i32$4 = i64toi32_i32$2;
                  i64toi32_i32$5 = ((($5_1 + 48) | 0) + 8) | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $236_1 = i64toi32_i32$4;
                  $236$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = $236$hi;
                  i64toi32_i32$2 = $236_1;
                  i64toi32_i32$3 = (i64toi32_i32$5 - i64toi32_i32$2) | 0;
                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
                  i64toi32_i32$1 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$0 - i64toi32_i32$1) | 0;
                  $237$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$0 = $237$hi;
                  i64toi32_i32$2 = 0;
                  $319(
                    ($5_1 + 32) | 0 | 0,
                    $4_1 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    i64toi32_i32$3 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0
                  );
                  $239_1 = ($5_1 + 16) | 0;
                  i64toi32_i32$5 = $5_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 32) | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 36) | 0) >> 2] | 0;
                  i64toi32_i32$5 = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 63;
                  i64toi32_i32$4 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $488_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$2 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                    $488_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $242_1 = $488_1;
                  $242$hi = i64toi32_i32$2;
                  i64toi32_i32$0 = ((($5_1 + 32) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                  i64toi32_i32$0 = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                    $489_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$4) | 0) |
                      0;
                    $489_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  }
                  $247$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $242$hi;
                  i64toi32_i32$5 = $242_1;
                  i64toi32_i32$0 = $247$hi;
                  i64toi32_i32$1 = $489_1;
                  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                  $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
                  $4$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$1 = 0;
                  $319(
                    $239_1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    $2_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$1 = i64toi32_i32$0;
                  i64toi32_i32$5 = ((($5_1 + 16) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $256_1 = i64toi32_i32$1;
                  $256$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$1 = $256$hi;
                  i64toi32_i32$0 = $256_1;
                  i64toi32_i32$4 = (i64toi32_i32$5 - i64toi32_i32$0) | 0;
                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$3 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$2 - i64toi32_i32$3) | 0;
                  $257$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = $257$hi;
                  i64toi32_i32$0 = 0;
                  $319(
                    $5_1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$3 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    i64toi32_i32$4 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$0 | 0
                  );
                  $6_1 = ($8_1 + (($7_1 - $6_1) | 0)) | 0;
                  label$12: {
                    label$13: {
                      i64toi32_i32$5 = $5_1;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                      i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                      i64toi32_i32$5 = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 63;
                      i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = 0;
                        $490_1 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                      } else {
                        i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                        $490_1 =
                          (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                            ((32 - i64toi32_i32$1) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$1) | 0) |
                          0;
                      }
                      $265_1 = $490_1;
                      $265$hi = i64toi32_i32$0;
                      i64toi32_i32$2 = ($5_1 + 8) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                      i64toi32_i32$2 = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 1;
                      i64toi32_i32$1 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                        $491_1 = 0;
                      } else {
                        i64toi32_i32$0 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$5 << i64toi32_i32$1) | 0) |
                          0;
                        $491_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                      }
                      $269$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $265$hi;
                      i64toi32_i32$5 = $265_1;
                      i64toi32_i32$2 = $269$hi;
                      i64toi32_i32$3 = $491_1;
                      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                      i64toi32_i32$5 = -1;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $13_1 = i64toi32_i32$1;
                      $13$hi = i64toi32_i32$4;
                      i64toi32_i32$2 = i64toi32_i32$1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$0 = (i64toi32_i32$4 & i64toi32_i32$0) | 0;
                      $4_1 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                      $4$hi = i64toi32_i32$0;
                      $274_1 = $4_1;
                      $274$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$4 = $2_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$3 = 32;
                      i64toi32_i32$5 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = 0;
                        $494_1 = (i64toi32_i32$0 >>> i64toi32_i32$5) | 0;
                      } else {
                        i64toi32_i32$2 = (i64toi32_i32$0 >>> i64toi32_i32$5) | 0;
                        $494_1 =
                          (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                            ((32 - i64toi32_i32$5) | 0)) |
                          0 |
                          ((i64toi32_i32$4 >>> i64toi32_i32$5) | 0) |
                          0;
                      }
                      $15_1 = $494_1;
                      $15$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $274$hi;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($274_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                      $16_1 = i64toi32_i32$4;
                      $16$hi = i64toi32_i32$2;
                      $279_1 = i64toi32_i32$4;
                      $279$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$0 = $13_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$3 = 32;
                      i64toi32_i32$5 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = 0;
                        $495_1 = (i64toi32_i32$2 >>> i64toi32_i32$5) | 0;
                      } else {
                        i64toi32_i32$4 = (i64toi32_i32$2 >>> i64toi32_i32$5) | 0;
                        $495_1 =
                          (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                            ((32 - i64toi32_i32$5) | 0)) |
                          0 |
                          ((i64toi32_i32$0 >>> i64toi32_i32$5) | 0) |
                          0;
                      }
                      $13_1 = $495_1;
                      $13$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$0 = (i64toi32_i32$4 & i64toi32_i32$0) | 0;
                      $17_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                      $17$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $13$hi;
                      i64toi32_i32$2 = $17$hi;
                      i64toi32_i32$2 =
                        __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $286_1 = i64toi32_i32$2;
                      $286$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $279$hi;
                      i64toi32_i32$4 = $279_1;
                      i64toi32_i32$2 = $286$hi;
                      i64toi32_i32$3 = $286_1;
                      i64toi32_i32$5 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$5;
                      $2$hi = i64toi32_i32$1;
                      i64toi32_i32$0 = i64toi32_i32$5;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$3 = 32;
                      i64toi32_i32$2 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = 0;
                        $496_1 = (i64toi32_i32$1 >>> i64toi32_i32$2) | 0;
                      } else {
                        i64toi32_i32$4 = (i64toi32_i32$1 >>> i64toi32_i32$2) | 0;
                        $496_1 =
                          (((((((1 << i64toi32_i32$2) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$2) | 0)) |
                          0 |
                          ((i64toi32_i32$0 >>> i64toi32_i32$2) | 0) |
                          0;
                      }
                      $289_1 = $496_1;
                      $289$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$4 = $16$hi;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$1 = $2_1;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$3 = $16_1;
                      $292_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$3 = $292_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$0 = 32;
                      i64toi32_i32$2 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$3 << i64toi32_i32$2) | 0;
                        $497_1 = 0;
                      } else {
                        i64toi32_i32$4 =
                          (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$1 << i64toi32_i32$2) | 0) |
                          0;
                        $497_1 = (i64toi32_i32$3 << i64toi32_i32$2) | 0;
                      }
                      $294$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $289$hi;
                      i64toi32_i32$1 = $289_1;
                      i64toi32_i32$3 = $294$hi;
                      i64toi32_i32$0 = $497_1;
                      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
                      $295_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                      $295$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$1 = $15$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $298_1 = i64toi32_i32$1;
                      $298$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $295$hi;
                      i64toi32_i32$4 = $295_1;
                      i64toi32_i32$1 = $298$hi;
                      i64toi32_i32$0 = $298_1;
                      i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $299_1 = i64toi32_i32$2;
                      $299$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $2$hi;
                      i64toi32_i32$3 = $2_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$0 = 32;
                      i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                        $498_1 = 0;
                      } else {
                        i64toi32_i32$4 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$5 << i64toi32_i32$1) | 0) |
                          0;
                        $498_1 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                      }
                      $15_1 = $498_1;
                      $15$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $4$hi;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$4 = $4$hi;
                      i64toi32_i32$3 = $17$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $305_1 = i64toi32_i32$3;
                      $305$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$5 = $15_1;
                      i64toi32_i32$3 = $305$hi;
                      i64toi32_i32$0 = $305_1;
                      i64toi32_i32$1 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$1;
                      $2$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$4 = i64toi32_i32$1;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$0 = $15_1;
                      $309_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = 0;
                      $310$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $299$hi;
                      i64toi32_i32$0 = $299_1;
                      i64toi32_i32$2 = $310$hi;
                      i64toi32_i32$5 = $309_1;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $311_1 = i64toi32_i32$3;
                      $311$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      $312_1 = $2_1;
                      $312$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $4$hi;
                      $313_1 = $4_1;
                      $313$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$4 = $3_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = 17;
                      i64toi32_i32$2 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = 0;
                        $499_1 = (i64toi32_i32$1 >>> i64toi32_i32$2) | 0;
                      } else {
                        i64toi32_i32$0 = (i64toi32_i32$1 >>> i64toi32_i32$2) | 0;
                        $499_1 =
                          (((((((1 << i64toi32_i32$2) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$2) | 0)) |
                          0 |
                          ((i64toi32_i32$4 >>> i64toi32_i32$2) | 0) |
                          0;
                      }
                      i64toi32_i32$1 = $499_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$5 = -1;
                      i64toi32_i32$4 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
                      $16_1 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                      $16$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $313$hi;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($313_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $17_1 = i64toi32_i32$1;
                      $17$hi = i64toi32_i32$4;
                      $319_1 = i64toi32_i32$1;
                      $319$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $13$hi;
                      $320_1 = $13_1;
                      $320$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $3$hi;
                      i64toi32_i32$0 = $3_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$5 = 15;
                      i64toi32_i32$2 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                        $501_1 = 0;
                      } else {
                        i64toi32_i32$1 =
                          (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                            ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$2) | 0) |
                          0;
                        $501_1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                      }
                      i64toi32_i32$4 = $501_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = -32768;
                      i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                      $18_1 = (i64toi32_i32$4 & i64toi32_i32$5) | 0;
                      $18$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $320$hi;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($320_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $325_1 = i64toi32_i32$4;
                      $325$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $319$hi;
                      i64toi32_i32$1 = $319_1;
                      i64toi32_i32$4 = $325$hi;
                      i64toi32_i32$5 = $325_1;
                      i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $15_1 = i64toi32_i32$2;
                      $15$hi = i64toi32_i32$3;
                      i64toi32_i32$0 = i64toi32_i32$2;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                        $502_1 = 0;
                      } else {
                        i64toi32_i32$1 =
                          (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                            ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                          0;
                        $502_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                      }
                      $19_1 = $502_1;
                      $19$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 = $18$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$0 =
                        __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $332_1 = i64toi32_i32$0;
                      $332$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$3 = $19_1;
                      i64toi32_i32$0 = $332$hi;
                      i64toi32_i32$5 = $332_1;
                      i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $333$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$2 = $333$hi;
                      i64toi32_i32$1 = i64toi32_i32$4;
                      i64toi32_i32$3 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      $335_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      $336_1 = $335_1;
                      $336$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $15$hi;
                      i64toi32_i32$5 = $15_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$3 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = 0;
                        $503_1 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                      } else {
                        i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                        $503_1 =
                          (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$0) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                          0;
                      }
                      $338_1 = $503_1;
                      $338$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$2 = $17$hi;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$1 = $15_1;
                      i64toi32_i32$5 = $17$hi;
                      i64toi32_i32$3 = $17_1;
                      $341_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$3 = $341_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                        $504_1 = 0;
                      } else {
                        i64toi32_i32$2 =
                          (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$1 << i64toi32_i32$0) | 0) |
                          0;
                        $504_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                      }
                      $343$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $338$hi;
                      i64toi32_i32$1 = $338_1;
                      i64toi32_i32$3 = $343$hi;
                      i64toi32_i32$5 = $504_1;
                      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                      $344_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                      $344$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$3 = $16$hi;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $347_1 = i64toi32_i32$1;
                      $347$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $344$hi;
                      i64toi32_i32$2 = $344_1;
                      i64toi32_i32$1 = $347$hi;
                      i64toi32_i32$5 = $347_1;
                      i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $348$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $336$hi;
                      i64toi32_i32$3 = $336_1;
                      i64toi32_i32$2 = $348$hi;
                      i64toi32_i32$5 = i64toi32_i32$0;
                      i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $349$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $312$hi;
                      i64toi32_i32$4 = $312_1;
                      i64toi32_i32$3 = $349$hi;
                      i64toi32_i32$5 = i64toi32_i32$1;
                      i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$1) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $15_1 = i64toi32_i32$2;
                      $15$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$1 = $15$hi;
                      i64toi32_i32$0 = i64toi32_i32$2;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$5 = $2_1;
                      $353_1 =
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) |
                        ((((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0)) &
                          (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$0 = 0;
                      $354$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $311$hi;
                      i64toi32_i32$5 = $311_1;
                      i64toi32_i32$1 = $354$hi;
                      i64toi32_i32$4 = $353_1;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $355$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$0 = $15_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$4 = 0;
                      $357_1 =
                        ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0)) |
                        ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0)) |
                        0;
                      i64toi32_i32$0 = 0;
                      $358$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $355$hi;
                      i64toi32_i32$4 = i64toi32_i32$3;
                      i64toi32_i32$2 = $358$hi;
                      i64toi32_i32$5 = $357_1;
                      i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $359$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$4 = $359$hi;
                      i64toi32_i32$5 = i64toi32_i32$1;
                      i64toi32_i32$2 = (i64toi32_i32$0 - i64toi32_i32$1) | 0;
                      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
                      i64toi32_i32$1 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$3 - i64toi32_i32$1) | 0;
                      $2_1 = i64toi32_i32$2;
                      $2$hi = i64toi32_i32$1;
                      i64toi32_i32$3 = i64toi32_i32$2;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = -1;
                      i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                      $16_1 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
                      $16$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $17_1 = i64toi32_i32$3;
                      $17$hi = i64toi32_i32$0;
                      $366_1 = i64toi32_i32$3;
                      $366$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$0 = $13$hi;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $18_1 = i64toi32_i32$3;
                      $18$hi = i64toi32_i32$0;
                      $370_1 = i64toi32_i32$3;
                      $370$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $4$hi;
                      $371_1 = $4_1;
                      $371$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$1 = i64toi32_i32$2;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = 0;
                        $505_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                      } else {
                        i64toi32_i32$3 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                        $505_1 =
                          (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                            ((32 - i64toi32_i32$4) | 0)) |
                          0 |
                          ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                          0;
                      }
                      $19_1 = $505_1;
                      $19$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $371$hi;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($371_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $375_1 = i64toi32_i32$1;
                      $375$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $370$hi;
                      i64toi32_i32$0 = $370_1;
                      i64toi32_i32$1 = $375$hi;
                      i64toi32_i32$5 = $375_1;
                      i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$4;
                      $2$hi = i64toi32_i32$2;
                      i64toi32_i32$3 = i64toi32_i32$4;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                        $507_1 = 0;
                      } else {
                        i64toi32_i32$0 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$2 << i64toi32_i32$1) | 0) |
                          0;
                        $507_1 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                      }
                      $378$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $366$hi;
                      i64toi32_i32$2 = $366_1;
                      i64toi32_i32$3 = $378$hi;
                      i64toi32_i32$5 = $507_1;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $16_1 = i64toi32_i32$1;
                      $16$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$4 = $16$hi;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$2 = $17$hi;
                      i64toi32_i32$5 = $17_1;
                      i64toi32_i32$0 = 0;
                      $383_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      $383$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$5 = $2_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = 0;
                        $508_1 = (i64toi32_i32$0 >>> i64toi32_i32$3) | 0;
                      } else {
                        i64toi32_i32$4 = (i64toi32_i32$0 >>> i64toi32_i32$3) | 0;
                        $508_1 =
                          (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                            ((32 - i64toi32_i32$3) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$3) | 0) |
                          0;
                      }
                      $385_1 = $508_1;
                      $385$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$0 = $2_1;
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$2 = $18_1;
                      $388_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = $388_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                        $512_1 = 0;
                      } else {
                        i64toi32_i32$4 =
                          (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$0 << i64toi32_i32$3) | 0) |
                          0;
                        $512_1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                      }
                      $390$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $385$hi;
                      i64toi32_i32$0 = $385_1;
                      i64toi32_i32$2 = $390$hi;
                      i64toi32_i32$5 = $512_1;
                      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                      $391_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                      $391$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$0 = $19$hi;
                      i64toi32_i32$0 =
                        __wasm_i64_mul($13_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                      $394_1 = i64toi32_i32$0;
                      $394$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $391$hi;
                      i64toi32_i32$4 = $391_1;
                      i64toi32_i32$0 = $394$hi;
                      i64toi32_i32$5 = $394_1;
                      i64toi32_i32$3 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $395$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $383$hi;
                      i64toi32_i32$2 = $383_1;
                      i64toi32_i32$4 = $395$hi;
                      i64toi32_i32$5 = i64toi32_i32$3;
                      i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $396_1 = i64toi32_i32$0;
                      $396$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $16$hi;
                      $397_1 = $16_1;
                      $397$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$5 = $15_1;
                      i64toi32_i32$4 = (i64toi32_i32$1 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$0 = (i64toi32_i32$6 + i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$3 - i64toi32_i32$0) | 0;
                      $2_1 = i64toi32_i32$4;
                      $2$hi = i64toi32_i32$0;
                      i64toi32_i32$3 = i64toi32_i32$4;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$2 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $513_1 = (i64toi32_i32$0 >>> i64toi32_i32$2) | 0;
                      } else {
                        i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$2) | 0;
                        $513_1 =
                          (((((((1 << i64toi32_i32$2) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                            ((32 - i64toi32_i32$2) | 0)) |
                          0 |
                          ((i64toi32_i32$3 >>> i64toi32_i32$2) | 0) |
                          0;
                      }
                      $15_1 = $513_1;
                      $15$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 = $15$hi;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $17_1 = i64toi32_i32$3;
                      $17$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$0 = $2_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$5 = -1;
                      i64toi32_i32$3 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                      $18_1 = (i64toi32_i32$0 & i64toi32_i32$5) | 0;
                      $18$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$3 = $18$hi;
                      i64toi32_i32$0 = $13$hi;
                      i64toi32_i32$0 =
                        __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $410_1 = i64toi32_i32$0;
                      $410$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $17$hi;
                      i64toi32_i32$1 = $17_1;
                      i64toi32_i32$0 = $410$hi;
                      i64toi32_i32$5 = $410_1;
                      i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$2;
                      $2$hi = i64toi32_i32$4;
                      i64toi32_i32$3 = i64toi32_i32$2;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                        $514_1 = 0;
                      } else {
                        i64toi32_i32$1 =
                          (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$0) | 0) |
                          0;
                        $514_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                      }
                      $19_1 = $514_1;
                      $19$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $18$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 = $18$hi;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $417_1 = i64toi32_i32$3;
                      $417$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$4 = $19_1;
                      i64toi32_i32$3 = $417$hi;
                      i64toi32_i32$5 = $417_1;
                      i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $418$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$2 = $418$hi;
                      i64toi32_i32$1 = i64toi32_i32$0;
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      $420_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      $421_1 = $420_1;
                      $421$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$5 = $2_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$4 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$4 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = 0;
                        $515_1 = (i64toi32_i32$1 >>> i64toi32_i32$3) | 0;
                      } else {
                        i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$3) | 0;
                        $515_1 =
                          (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$3) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$3) | 0) |
                          0;
                      }
                      $423_1 = $515_1;
                      $423$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$2 = $17$hi;
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$1 = $2_1;
                      i64toi32_i32$5 = $17$hi;
                      i64toi32_i32$4 = $17_1;
                      $426_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$4 = $426_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$4 << i64toi32_i32$3) | 0;
                        $516_1 = 0;
                      } else {
                        i64toi32_i32$2 =
                          (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                            ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$1 << i64toi32_i32$3) | 0) |
                          0;
                        $516_1 = (i64toi32_i32$4 << i64toi32_i32$3) | 0;
                      }
                      $428$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $423$hi;
                      i64toi32_i32$1 = $423_1;
                      i64toi32_i32$4 = $428$hi;
                      i64toi32_i32$5 = $516_1;
                      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                      $429_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                      $429$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$4 = $13$hi;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$1 = $13$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $432_1 = i64toi32_i32$1;
                      $432$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $429$hi;
                      i64toi32_i32$2 = $429_1;
                      i64toi32_i32$1 = $432$hi;
                      i64toi32_i32$5 = $432_1;
                      i64toi32_i32$3 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $433$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $421$hi;
                      i64toi32_i32$4 = $421_1;
                      i64toi32_i32$2 = $433$hi;
                      i64toi32_i32$5 = i64toi32_i32$3;
                      i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $434$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $397$hi;
                      i64toi32_i32$0 = $397_1;
                      i64toi32_i32$4 = $434$hi;
                      i64toi32_i32$5 = i64toi32_i32$1;
                      i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$2;
                      $2$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$3 = i64toi32_i32$2;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$5 = $16_1;
                      $438_1 =
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$3 = 0;
                      $439$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $396$hi;
                      i64toi32_i32$5 = $396_1;
                      i64toi32_i32$1 = $439$hi;
                      i64toi32_i32$0 = $438_1;
                      i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $440_1 = i64toi32_i32$4;
                      $440$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$3 = $2_1;
                      i64toi32_i32$5 = -1;
                      i64toi32_i32$0 = -2;
                      i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $17_1 = i64toi32_i32$1;
                      $17$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $2$hi;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$2 = i64toi32_i32$1;
                      i64toi32_i32$3 = $2$hi;
                      i64toi32_i32$0 = $2_1;
                      $445_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = 0;
                      $446$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $440$hi;
                      i64toi32_i32$0 = $440_1;
                      i64toi32_i32$4 = $446$hi;
                      i64toi32_i32$3 = $445_1;
                      i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$0 = -1;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $15_1 = i64toi32_i32$4;
                      $15$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = i64toi32_i32$4;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$2 = (i64toi32_i32$5 & i64toi32_i32$2) | 0;
                      $2_1 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                      $2$hi = i64toi32_i32$2;
                      $451_1 = $2_1;
                      $451$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $1$hi;
                      i64toi32_i32$5 = $1_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$3 = 62;
                      i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $518_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                      } else {
                        i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                        $518_1 =
                          (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                            ((32 - i64toi32_i32$0) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                          0;
                      }
                      $453_1 = $518_1;
                      $453$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $11$hi;
                      i64toi32_i32$2 = $11_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$3 = 2;
                      i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                        $521_1 = 0;
                      } else {
                        i64toi32_i32$5 =
                          (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$1 << i64toi32_i32$0) | 0) |
                          0;
                        $521_1 = (i64toi32_i32$2 << i64toi32_i32$0) | 0;
                      }
                      $455$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $453$hi;
                      i64toi32_i32$1 = $453_1;
                      i64toi32_i32$2 = $455$hi;
                      i64toi32_i32$3 = $521_1;
                      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                      $4_1 = (i64toi32_i32$5 & i64toi32_i32$3) | 0;
                      $4$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $451$hi;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($451_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $16_1 = i64toi32_i32$5;
                      $16$hi = i64toi32_i32$1;
                      $460_1 = i64toi32_i32$5;
                      $460$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $1$hi;
                      i64toi32_i32$2 = $1_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$3 = 30;
                      i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$5 = 0;
                        $522_1 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                      } else {
                        i64toi32_i32$5 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                        $522_1 =
                          (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$0) | 0)) |
                          0 |
                          ((i64toi32_i32$2 >>> i64toi32_i32$0) | 0) |
                          0;
                      }
                      i64toi32_i32$1 = $522_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$2 = (i64toi32_i32$5 & i64toi32_i32$2) | 0;
                      $13_1 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                      $13$hi = i64toi32_i32$2;
                      $464_1 = $13_1;
                      $464$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$5 = $15_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$3 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $523_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                      } else {
                        i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                        $523_1 =
                          (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                            ((32 - i64toi32_i32$0) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                          0;
                      }
                      $15_1 = $523_1;
                      $15$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $464$hi;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($464_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $468_1 = i64toi32_i32$5;
                      $468$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $460$hi;
                      i64toi32_i32$2 = $460_1;
                      i64toi32_i32$5 = $468$hi;
                      i64toi32_i32$3 = $468_1;
                      i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $18_1 = i64toi32_i32$0;
                      $18$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $16$hi;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$1 = i64toi32_i32$0;
                      i64toi32_i32$2 = $16$hi;
                      i64toi32_i32$3 = $16_1;
                      $472_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      $473_1 = $472_1;
                      $473$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = i64toi32_i32$4;
                      $474_1 = i64toi32_i32$0;
                      $474$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $17$hi;
                      i64toi32_i32$3 = $17_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$5 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = 0;
                        $524_1 = (i64toi32_i32$1 >>> i64toi32_i32$5) | 0;
                      } else {
                        i64toi32_i32$4 = (i64toi32_i32$1 >>> i64toi32_i32$5) | 0;
                        $524_1 =
                          (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$5) | 0)) |
                          0 |
                          ((i64toi32_i32$3 >>> i64toi32_i32$5) | 0) |
                          0;
                      }
                      $16_1 = $524_1;
                      $16$hi = i64toi32_i32$4;
                      $477_1 = $16_1;
                      $477$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $11$hi;
                      i64toi32_i32$1 = $11_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = 30;
                      i64toi32_i32$5 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = 0;
                        $525_1 = (i64toi32_i32$4 >>> i64toi32_i32$5) | 0;
                      } else {
                        i64toi32_i32$3 = (i64toi32_i32$4 >>> i64toi32_i32$5) | 0;
                        $525_1 =
                          (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                            ((32 - i64toi32_i32$5) | 0)) |
                          0 |
                          ((i64toi32_i32$1 >>> i64toi32_i32$5) | 0) |
                          0;
                      }
                      i64toi32_i32$4 = $525_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$2 = -262145;
                      i64toi32_i32$1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$4 & i64toi32_i32$2) | 0;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$2 = 262144;
                      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
                      $11_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                      $11$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $477$hi;
                      i64toi32_i32$3 = $11$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($477_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $483_1 = i64toi32_i32$3;
                      $483$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $474$hi;
                      i64toi32_i32$1 = $474_1;
                      i64toi32_i32$3 = $483$hi;
                      i64toi32_i32$2 = $483_1;
                      i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $19_1 = i64toi32_i32$5;
                      $19$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$0 = $19$hi;
                      i64toi32_i32$4 = i64toi32_i32$5;
                      i64toi32_i32$1 = $18$hi;
                      i64toi32_i32$2 = $18_1;
                      $487_1 =
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0)) &
                          (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = 0;
                      $488$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $473$hi;
                      i64toi32_i32$2 = $473_1;
                      i64toi32_i32$0 = $488$hi;
                      i64toi32_i32$1 = $487_1;
                      i64toi32_i32$3 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $489$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $11$hi;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$5 = $11$hi;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$2 =
                        __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $492_1 = i64toi32_i32$2;
                      $492$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $489$hi;
                      i64toi32_i32$4 = i64toi32_i32$3;
                      i64toi32_i32$2 = $492$hi;
                      i64toi32_i32$1 = $492_1;
                      i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $493_1 = i64toi32_i32$0;
                      $493$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $2$hi;
                      i64toi32_i32$3 = $11$hi;
                      i64toi32_i32$3 = $2$hi;
                      i64toi32_i32$4 = $11$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $20_1 = i64toi32_i32$4;
                      $20$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $500_1 = i64toi32_i32$4;
                      $500$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $20$hi;
                      i64toi32_i32$5 = $20_1;
                      i64toi32_i32$4 = $500$hi;
                      i64toi32_i32$1 = $500_1;
                      i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $18_1 = i64toi32_i32$2;
                      $18$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $20$hi;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$3 = i64toi32_i32$2;
                      i64toi32_i32$5 = $20$hi;
                      i64toi32_i32$1 = $20_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$1 =
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                        $526_1 = 0;
                      } else {
                        i64toi32_i32$0 =
                          (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                            ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                          0;
                        $526_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                      }
                      $506_1 = $526_1;
                      $506$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$3 = $18_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $527_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                      } else {
                        i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                        $527_1 =
                          (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                            ((32 - i64toi32_i32$4) | 0)) |
                          0 |
                          ((i64toi32_i32$3 >>> i64toi32_i32$4) | 0) |
                          0;
                      }
                      $508$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $506$hi;
                      i64toi32_i32$0 = $506_1;
                      i64toi32_i32$3 = $508$hi;
                      i64toi32_i32$5 = $527_1;
                      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                      $509_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                      $509$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $493$hi;
                      i64toi32_i32$1 = $493_1;
                      i64toi32_i32$0 = $509$hi;
                      i64toi32_i32$5 = $509_1;
                      i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      $510_1 = i64toi32_i32$4;
                      $510$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $19$hi;
                      $511_1 = $19_1;
                      $511$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $18$hi;
                      i64toi32_i32$3 = $18_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                        $528_1 = 0;
                      } else {
                        i64toi32_i32$1 =
                          (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$2 << i64toi32_i32$0) | 0) |
                          0;
                        $528_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                      }
                      $513$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $511$hi;
                      i64toi32_i32$2 = $511_1;
                      i64toi32_i32$3 = $513$hi;
                      i64toi32_i32$5 = $528_1;
                      i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $18_1 = i64toi32_i32$0;
                      $18$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$1 = i64toi32_i32$0;
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      $517_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      $518$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $510$hi;
                      i64toi32_i32$5 = $510_1;
                      i64toi32_i32$4 = $518$hi;
                      i64toi32_i32$2 = $517_1;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $519_1 = i64toi32_i32$3;
                      $519$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $18$hi;
                      $520_1 = $18_1;
                      $520$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$0 = $13$hi;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$5 = $13$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $20_1 = i64toi32_i32$5;
                      $20$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $17$hi;
                      i64toi32_i32$1 = $17_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$2 = -1;
                      i64toi32_i32$5 = (i64toi32_i32$0 & i64toi32_i32$5) | 0;
                      $17_1 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                      $17$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$5 = $17$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $529_1 = i64toi32_i32$1;
                      $529$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $20$hi;
                      i64toi32_i32$0 = $20_1;
                      i64toi32_i32$1 = $529$hi;
                      i64toi32_i32$2 = $529_1;
                      i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $19_1 = i64toi32_i32$4;
                      $19$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $20$hi;
                      i64toi32_i32$3 = $19$hi;
                      i64toi32_i32$5 = i64toi32_i32$4;
                      i64toi32_i32$0 = $20$hi;
                      i64toi32_i32$2 = $20_1;
                      i64toi32_i32$5 = 0;
                      $534_1 =
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      $534$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = i64toi32_i32$3;
                      $535_1 = i64toi32_i32$4;
                      $535$hi = i64toi32_i32$3;
                      i64toi32_i32$5 = $2$hi;
                      $536_1 = $2_1;
                      $536$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $1$hi;
                      i64toi32_i32$2 = $1_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$0 = 2;
                      i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                        $530_1 = 0;
                      } else {
                        i64toi32_i32$3 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$5 << i64toi32_i32$1) | 0) |
                          0;
                        $530_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                      }
                      i64toi32_i32$5 = $530_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$0 = -4;
                      i64toi32_i32$2 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                      $20_1 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
                      $20$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $536$hi;
                      i64toi32_i32$5 = $20$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($536_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                      $541_1 = i64toi32_i32$5;
                      $541$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $535$hi;
                      i64toi32_i32$3 = $535_1;
                      i64toi32_i32$5 = $541$hi;
                      i64toi32_i32$0 = $541_1;
                      i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $21_1 = i64toi32_i32$1;
                      $21$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$4 = $21$hi;
                      i64toi32_i32$2 = i64toi32_i32$1;
                      i64toi32_i32$3 = $19$hi;
                      i64toi32_i32$0 = $19_1;
                      $545_1 =
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = 0;
                      $546$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $534$hi;
                      i64toi32_i32$0 = $534_1;
                      i64toi32_i32$4 = $546$hi;
                      i64toi32_i32$3 = $545_1;
                      i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $547$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $520$hi;
                      i64toi32_i32$2 = $520_1;
                      i64toi32_i32$0 = $547$hi;
                      i64toi32_i32$3 = i64toi32_i32$5;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $19_1 = i64toi32_i32$4;
                      $19$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$5 = $19$hi;
                      i64toi32_i32$1 = i64toi32_i32$4;
                      i64toi32_i32$2 = $18$hi;
                      i64toi32_i32$3 = $18_1;
                      $551_1 =
                        (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      $552$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $519$hi;
                      i64toi32_i32$3 = $519_1;
                      i64toi32_i32$5 = $552$hi;
                      i64toi32_i32$2 = $551_1;
                      i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $553_1 = i64toi32_i32$0;
                      $553$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $19$hi;
                      $554_1 = $19_1;
                      $554$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $20$hi;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$4 = $20$hi;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $18_1 = i64toi32_i32$3;
                      $18$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$4 = $11$hi;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$3 = $11$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($17_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $561_1 = i64toi32_i32$3;
                      $561$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$1 = $18_1;
                      i64toi32_i32$3 = $561$hi;
                      i64toi32_i32$2 = $561_1;
                      i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $15_1 = i64toi32_i32$5;
                      $15$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $566_1 = i64toi32_i32$1;
                      $566$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $15$hi;
                      i64toi32_i32$4 = i64toi32_i32$5;
                      i64toi32_i32$1 = $566$hi;
                      i64toi32_i32$2 = $566_1;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $4_1 = i64toi32_i32$3;
                      $4$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $2$hi;
                      i64toi32_i32$5 = $13$hi;
                      i64toi32_i32$5 = $2$hi;
                      i64toi32_i32$4 = $13$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $571_1 = i64toi32_i32$4;
                      $571$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$0 = i64toi32_i32$3;
                      i64toi32_i32$4 = $571$hi;
                      i64toi32_i32$2 = $571_1;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$1;
                      $2$hi = i64toi32_i32$3;
                      i64toi32_i32$5 = i64toi32_i32$1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = 0;
                        $531_1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                      } else {
                        i64toi32_i32$0 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                        $531_1 =
                          (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                            ((32 - i64toi32_i32$4) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$4) | 0) |
                          0;
                      }
                      $574_1 = $531_1;
                      $574$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $15$hi;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$0 = $15$hi;
                      i64toi32_i32$3 = $15_1;
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$2 = $18_1;
                      $577_1 =
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$3 = 0;
                      $578$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$3 = i64toi32_i32$0;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$2 = $4_1;
                      i64toi32_i32$5 = $15_1;
                      $581_1 =
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = 0;
                      $582$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $578$hi;
                      i64toi32_i32$5 = $577_1;
                      i64toi32_i32$3 = $582$hi;
                      i64toi32_i32$0 = $581_1;
                      i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $583$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$0 = $4_1;
                      $586_1 =
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = 0;
                      $587$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $583$hi;
                      i64toi32_i32$0 = i64toi32_i32$4;
                      i64toi32_i32$1 = $587$hi;
                      i64toi32_i32$5 = $586_1;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      i64toi32_i32$2 = i64toi32_i32$3;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                        $532_1 = 0;
                      } else {
                        i64toi32_i32$0 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                          0;
                        $532_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                      }
                      $589$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $574$hi;
                      i64toi32_i32$4 = $574_1;
                      i64toi32_i32$2 = $589$hi;
                      i64toi32_i32$5 = $532_1;
                      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                      $590_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                      $590$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $554$hi;
                      i64toi32_i32$0 = $554_1;
                      i64toi32_i32$4 = $590$hi;
                      i64toi32_i32$5 = $590_1;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $15_1 = i64toi32_i32$1;
                      $15$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $19$hi;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$2 = i64toi32_i32$1;
                      i64toi32_i32$0 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      $594_1 =
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = 0;
                      $595$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $553$hi;
                      i64toi32_i32$5 = $553_1;
                      i64toi32_i32$3 = $595$hi;
                      i64toi32_i32$0 = $594_1;
                      i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $596_1 = i64toi32_i32$4;
                      $596$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $15$hi;
                      $597_1 = $15_1;
                      $597$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $21$hi;
                      $598_1 = $21_1;
                      $598$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 = $20$hi;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$5 = $20$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $4_1 = i64toi32_i32$5;
                      $4$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $17$hi;
                      i64toi32_i32$1 = $13$hi;
                      i64toi32_i32$1 = $17$hi;
                      i64toi32_i32$5 = $13$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($17_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $605_1 = i64toi32_i32$5;
                      $605$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$2 = $4_1;
                      i64toi32_i32$5 = $605$hi;
                      i64toi32_i32$0 = $605_1;
                      i64toi32_i32$3 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $13_1 = i64toi32_i32$3;
                      $13$hi = i64toi32_i32$4;
                      i64toi32_i32$1 = i64toi32_i32$3;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$0 = 32;
                      i64toi32_i32$5 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = 0;
                        $533_1 = (i64toi32_i32$4 >>> i64toi32_i32$5) | 0;
                      } else {
                        i64toi32_i32$2 = (i64toi32_i32$4 >>> i64toi32_i32$5) | 0;
                        $533_1 =
                          (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                            ((32 - i64toi32_i32$5) | 0)) |
                          0 |
                          ((i64toi32_i32$1 >>> i64toi32_i32$5) | 0) |
                          0;
                      }
                      $608_1 = $533_1;
                      $608$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$2 = $4$hi;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$4 = $13_1;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$0 = $4_1;
                      $611_1 =
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0)) &
                          (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$0 = $611_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$1 = 32;
                      i64toi32_i32$5 = (i64toi32_i32$1 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$5) | 0;
                        $537_1 = 0;
                      } else {
                        i64toi32_i32$2 =
                          (((((1 << i64toi32_i32$5) | 0) - 1) | 0) &
                            ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$5) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$5) | 0) |
                          0;
                        $537_1 = (i64toi32_i32$0 << i64toi32_i32$5) | 0;
                      }
                      $613$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $608$hi;
                      i64toi32_i32$4 = $608_1;
                      i64toi32_i32$0 = $613$hi;
                      i64toi32_i32$1 = $537_1;
                      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                      $614_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                      $614$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $598$hi;
                      i64toi32_i32$2 = $598_1;
                      i64toi32_i32$4 = $614$hi;
                      i64toi32_i32$1 = $614_1;
                      i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $4_1 = i64toi32_i32$5;
                      $4$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $21$hi;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$0 = i64toi32_i32$5;
                      i64toi32_i32$2 = $21$hi;
                      i64toi32_i32$1 = $21_1;
                      $618_1 =
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$0 = 0;
                      $619_1 = $618_1;
                      $619$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = i64toi32_i32$3;
                      $620_1 = i64toi32_i32$5;
                      $620$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$1 = $2_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                        $538_1 = 0;
                      } else {
                        i64toi32_i32$3 =
                          (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                            ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                          0;
                        $538_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                      }
                      $622$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $620$hi;
                      i64toi32_i32$0 = $620_1;
                      i64toi32_i32$1 = $622$hi;
                      i64toi32_i32$2 = $538_1;
                      i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $623$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$5 = $623$hi;
                      i64toi32_i32$3 = i64toi32_i32$4;
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$2 = $4_1;
                      $625_1 =
                        (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$3 = 0;
                      $626$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $619$hi;
                      i64toi32_i32$2 = $619_1;
                      i64toi32_i32$5 = $626$hi;
                      i64toi32_i32$0 = $625_1;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $627$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $597$hi;
                      i64toi32_i32$3 = $597_1;
                      i64toi32_i32$2 = $627$hi;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$5 = (i64toi32_i32$3 + i64toi32_i32$1) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $4_1 = i64toi32_i32$5;
                      $4$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $15$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$4 = i64toi32_i32$5;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$0 = $15_1;
                      $631_1 =
                        (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = 0;
                      $632$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $596$hi;
                      i64toi32_i32$0 = $596_1;
                      i64toi32_i32$1 = $632$hi;
                      i64toi32_i32$3 = $631_1;
                      i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$4 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $2_1 = i64toi32_i32$2;
                      $2$hi = i64toi32_i32$5;
                      i64toi32_i32$4 = i64toi32_i32$2;
                      i64toi32_i32$0 = 131071;
                      i64toi32_i32$3 = -1;
                      if (
                        (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0) |
                        ((((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0)) &
                          (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0)) |
                          0) |
                        0
                      ) {
                        break label$13;
                      }
                      i64toi32_i32$4 = $1$hi;
                      i64toi32_i32$3 = $1_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$0 = 49;
                      i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                        $539_1 = 0;
                      } else {
                        i64toi32_i32$5 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                          0;
                        $539_1 = (i64toi32_i32$3 << i64toi32_i32$1) | 0;
                      }
                      $637$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $4$hi;
                      i64toi32_i32$4 = $4_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$0 = -1;
                      i64toi32_i32$3 = (i64toi32_i32$5 & i64toi32_i32$3) | 0;
                      $1_1 = (i64toi32_i32$4 & i64toi32_i32$0) | 0;
                      $1$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$0 = -1;
                      i64toi32_i32$4 = (i64toi32_i32$3 & i64toi32_i32$4) | 0;
                      $13_1 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
                      $13$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $1$hi;
                      i64toi32_i32$5 = $13$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $15_1 = i64toi32_i32$5;
                      $15$hi = i64toi32_i32$4;
                      i64toi32_i32$3 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$0 = 0;
                      $646_1 =
                        ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0)) |
                        ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0)) |
                        0;
                      i64toi32_i32$3 = 0;
                      $647$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $637$hi;
                      i64toi32_i32$0 = $539_1;
                      i64toi32_i32$4 = $647$hi;
                      i64toi32_i32$5 = $646_1;
                      i64toi32_i32$1 = (i64toi32_i32$0 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$2 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$3 - i64toi32_i32$2) | 0;
                      $648_1 = i64toi32_i32$1;
                      $648$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$0 = $15$hi;
                      i64toi32_i32$5 = $15_1;
                      i64toi32_i32$4 = (i64toi32_i32$3 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$1 = (i64toi32_i32$6 + i64toi32_i32$0) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 - i64toi32_i32$1) | 0;
                      $17_1 = i64toi32_i32$4;
                      $17$hi = i64toi32_i32$1;
                      $651_1 = i64toi32_i32$4;
                      $651$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$2 = $4_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = 0;
                        $540_1 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                      } else {
                        i64toi32_i32$3 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                        $540_1 =
                          (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                            ((32 - i64toi32_i32$0) | 0)) |
                          0 |
                          ((i64toi32_i32$2 >>> i64toi32_i32$0) | 0) |
                          0;
                      }
                      $15_1 = $540_1;
                      $15$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$2 =
                        __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $18_1 = i64toi32_i32$2;
                      $18$hi = i64toi32_i32$3;
                      $657_1 = i64toi32_i32$2;
                      $657$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $1$hi;
                      $658_1 = $1_1;
                      $658$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$1 = $3_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$2 = 0;
                        $542_1 = (i64toi32_i32$3 >>> i64toi32_i32$0) | 0;
                      } else {
                        i64toi32_i32$2 = (i64toi32_i32$3 >>> i64toi32_i32$0) | 0;
                        $542_1 =
                          (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                            ((32 - i64toi32_i32$0) | 0)) |
                          0 |
                          ((i64toi32_i32$1 >>> i64toi32_i32$0) | 0) |
                          0;
                      }
                      $16_1 = $542_1;
                      $16$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $658$hi;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($658_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                      $662_1 = i64toi32_i32$1;
                      $662$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $657$hi;
                      i64toi32_i32$3 = $657_1;
                      i64toi32_i32$1 = $662$hi;
                      i64toi32_i32$5 = $662_1;
                      i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $11_1 = i64toi32_i32$0;
                      $11$hi = i64toi32_i32$4;
                      i64toi32_i32$2 = i64toi32_i32$0;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                        $543_1 = 0;
                      } else {
                        i64toi32_i32$3 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$1) | 0) |
                          0;
                        $543_1 = (i64toi32_i32$2 << i64toi32_i32$1) | 0;
                      }
                      $19_1 = $543_1;
                      $19$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $651$hi;
                      i64toi32_i32$4 = $651_1;
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      $667_1 =
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = 0;
                      $668$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $648$hi;
                      i64toi32_i32$5 = $648_1;
                      i64toi32_i32$3 = $668$hi;
                      i64toi32_i32$2 = $667_1;
                      i64toi32_i32$1 = (i64toi32_i32$5 - i64toi32_i32$2) | 0;
                      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
                      i64toi32_i32$0 = (i64toi32_i32$6 + i64toi32_i32$3) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$4 - i64toi32_i32$0) | 0;
                      $669_1 = i64toi32_i32$1;
                      $669$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $4$hi;
                      $670_1 = $4_1;
                      $670$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $14$hi;
                      i64toi32_i32$4 = $14_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$5 = 0;
                        $544_1 = (i64toi32_i32$0 >>> i64toi32_i32$3) | 0;
                      } else {
                        i64toi32_i32$5 = (i64toi32_i32$0 >>> i64toi32_i32$3) | 0;
                        $544_1 =
                          (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                            ((32 - i64toi32_i32$3) | 0)) |
                          0 |
                          ((i64toi32_i32$4 >>> i64toi32_i32$3) | 0) |
                          0;
                      }
                      $672$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $670$hi;
                      i64toi32_i32$4 = $672$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($670_1 | 0, i64toi32_i32$5 | 0, $544_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $673_1 = i64toi32_i32$4;
                      $673$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $3$hi;
                      $674_1 = $3_1;
                      $674$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $2$hi;
                      i64toi32_i32$0 = $2_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = 0;
                        $546_1 = (i64toi32_i32$5 >>> i64toi32_i32$3) | 0;
                      } else {
                        i64toi32_i32$4 = (i64toi32_i32$5 >>> i64toi32_i32$3) | 0;
                        $546_1 =
                          (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                            ((32 - i64toi32_i32$3) | 0)) |
                          0 |
                          ((i64toi32_i32$0 >>> i64toi32_i32$3) | 0) |
                          0;
                      }
                      $676$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $674$hi;
                      i64toi32_i32$0 = $676$hi;
                      i64toi32_i32$0 =
                        __wasm_i64_mul($674_1 | 0, i64toi32_i32$4 | 0, $546_1 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $677_1 = i64toi32_i32$0;
                      $677$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $673$hi;
                      i64toi32_i32$5 = $673_1;
                      i64toi32_i32$0 = $677$hi;
                      i64toi32_i32$2 = $677_1;
                      i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $678$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$5 = $16$hi;
                      i64toi32_i32$5 =
                        __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
                      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                      $681_1 = i64toi32_i32$5;
                      $681$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $678$hi;
                      i64toi32_i32$4 = i64toi32_i32$3;
                      i64toi32_i32$5 = $681$hi;
                      i64toi32_i32$2 = $681_1;
                      i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $682$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$3 = $10$hi;
                      i64toi32_i32$3 = $15$hi;
                      i64toi32_i32$4 = $10$hi;
                      i64toi32_i32$4 =
                        __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $685_1 = i64toi32_i32$4;
                      $685$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $682$hi;
                      i64toi32_i32$1 = i64toi32_i32$0;
                      i64toi32_i32$4 = $685$hi;
                      i64toi32_i32$2 = $685_1;
                      i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$3 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      i64toi32_i32$3 = i64toi32_i32$5;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                        $547_1 = 0;
                      } else {
                        i64toi32_i32$1 =
                          (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                            ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                          0;
                        $547_1 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                      }
                      $687_1 = $547_1;
                      $687$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$0 = $2_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = -1;
                      i64toi32_i32$3 = (i64toi32_i32$1 & i64toi32_i32$3) | 0;
                      $689$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $13$hi;
                      i64toi32_i32$3 = $689$hi;
                      $578_1 = (i64toi32_i32$0 & i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = $13$hi;
                      i64toi32_i32$0 =
                        __wasm_i64_mul($578_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                      $691_1 = i64toi32_i32$0;
                      $691$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $1$hi;
                      i64toi32_i32$3 = $10$hi;
                      i64toi32_i32$1 = $10_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = -1;
                      i64toi32_i32$0 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                      $694_1 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                      $694$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $1$hi;
                      i64toi32_i32$1 = $694$hi;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $694_1 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $695_1 = i64toi32_i32$1;
                      $695$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $691$hi;
                      i64toi32_i32$3 = $691_1;
                      i64toi32_i32$1 = $695$hi;
                      i64toi32_i32$2 = $695_1;
                      i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $696$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$5 = $16$hi;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$3 = $16$hi;
                      i64toi32_i32$3 =
                        __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $699_1 = i64toi32_i32$3;
                      $699$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $696$hi;
                      i64toi32_i32$0 = i64toi32_i32$4;
                      i64toi32_i32$3 = $699$hi;
                      i64toi32_i32$2 = $699_1;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $700_1 = i64toi32_i32$1;
                      $700$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $11$hi;
                      i64toi32_i32$5 = $11_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = 0;
                        $548_1 = (i64toi32_i32$4 >>> i64toi32_i32$3) | 0;
                      } else {
                        i64toi32_i32$0 = (i64toi32_i32$4 >>> i64toi32_i32$3) | 0;
                        $548_1 =
                          (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                            ((32 - i64toi32_i32$3) | 0)) |
                          0 |
                          ((i64toi32_i32$5 >>> i64toi32_i32$3) | 0) |
                          0;
                      }
                      $702_1 = $548_1;
                      $702$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $11$hi;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$0 = $11$hi;
                      i64toi32_i32$4 = $11_1;
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$2 = $18_1;
                      $705_1 =
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0)) &
                          (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$2 = $705_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = 32;
                      i64toi32_i32$3 = (i64toi32_i32$5 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                        $549_1 = 0;
                      } else {
                        i64toi32_i32$0 =
                          (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                            ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$4 << i64toi32_i32$3) | 0) |
                          0;
                        $549_1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                      }
                      $707$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $702$hi;
                      i64toi32_i32$4 = $702_1;
                      i64toi32_i32$2 = $707$hi;
                      i64toi32_i32$5 = $549_1;
                      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                      $708_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                      $708$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $700$hi;
                      i64toi32_i32$0 = $700_1;
                      i64toi32_i32$4 = $708$hi;
                      i64toi32_i32$5 = $708_1;
                      i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$5) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $709$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $687$hi;
                      i64toi32_i32$2 = $687_1;
                      i64toi32_i32$0 = $709$hi;
                      i64toi32_i32$5 = i64toi32_i32$3;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                      }
                      $710$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $669$hi;
                      i64toi32_i32$1 = $669_1;
                      i64toi32_i32$2 = $710$hi;
                      i64toi32_i32$5 = i64toi32_i32$4;
                      i64toi32_i32$0 = (i64toi32_i32$1 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$2) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$3 - i64toi32_i32$4) | 0;
                      $13_1 = i64toi32_i32$0;
                      $13$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$3 = $17_1;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      i64toi32_i32$2 = (i64toi32_i32$3 - i64toi32_i32$5) | 0;
                      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
                      i64toi32_i32$0 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$4 - i64toi32_i32$0) | 0;
                      $1_1 = i64toi32_i32$2;
                      $1$hi = i64toi32_i32$0;
                      $6_1 = ($6_1 + -1) | 0;
                      break label$12;
                    }
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$4 = $4_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$5 = 33;
                    i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $550_1 = (i64toi32_i32$0 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$0 >>> i64toi32_i32$1) | 0;
                      $550_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$4 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $16_1 = $550_1;
                    $16$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$0 = $1_1;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$5 = 48;
                    i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                      $552_1 = 0;
                    } else {
                      i64toi32_i32$4 =
                        (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                          ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$3 << i64toi32_i32$1) | 0) |
                        0;
                      $552_1 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                    }
                    $720_1 = $552_1;
                    $720$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $4$hi;
                    i64toi32_i32$3 = $4_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$5 = 1;
                    i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                      i64toi32_i32$0 = 0;
                      $555_1 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$0 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                      $555_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$3 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $722_1 = $555_1;
                    $722$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $2$hi;
                    i64toi32_i32$4 = $2_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$5 = 63;
                    i64toi32_i32$1 = (i64toi32_i32$5 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                      $556_1 = 0;
                    } else {
                      i64toi32_i32$3 =
                        (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                          ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$0 << i64toi32_i32$1) | 0) |
                        0;
                      $556_1 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                    }
                    $724$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $722$hi;
                    i64toi32_i32$0 = $722_1;
                    i64toi32_i32$4 = $724$hi;
                    i64toi32_i32$5 = $556_1;
                    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
                    $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                    $4$hi = i64toi32_i32$4;
                    i64toi32_i32$3 = $4_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$5 = -1;
                    i64toi32_i32$0 = (i64toi32_i32$4 & i64toi32_i32$0) | 0;
                    $1_1 = (i64toi32_i32$3 & i64toi32_i32$5) | 0;
                    $1$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$4 = $3_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$5 = -1;
                    i64toi32_i32$3 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
                    $13_1 = (i64toi32_i32$4 & i64toi32_i32$5) | 0;
                    $13$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$4 = $13$hi;
                    i64toi32_i32$4 =
                      __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
                    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                    $15_1 = i64toi32_i32$4;
                    $15$hi = i64toi32_i32$3;
                    i64toi32_i32$0 = i64toi32_i32$4;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$5 = 0;
                    $734_1 =
                      ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0)) |
                      ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0)) |
                      0;
                    i64toi32_i32$0 = 0;
                    $735$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $720$hi;
                    i64toi32_i32$5 = $720_1;
                    i64toi32_i32$3 = $735$hi;
                    i64toi32_i32$4 = $734_1;
                    i64toi32_i32$1 = (i64toi32_i32$5 - i64toi32_i32$4) | 0;
                    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
                    i64toi32_i32$2 = (i64toi32_i32$6 + i64toi32_i32$3) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$0 - i64toi32_i32$2) | 0;
                    $736_1 = i64toi32_i32$1;
                    $736$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $15$hi;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$5 = $15$hi;
                    i64toi32_i32$4 = $15_1;
                    i64toi32_i32$3 = (i64toi32_i32$0 - i64toi32_i32$4) | 0;
                    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
                    i64toi32_i32$1 = (i64toi32_i32$6 + i64toi32_i32$5) | 0;
                    i64toi32_i32$1 = (i64toi32_i32$2 - i64toi32_i32$1) | 0;
                    $11_1 = i64toi32_i32$3;
                    $11$hi = i64toi32_i32$1;
                    $739_1 = i64toi32_i32$3;
                    $739$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $1$hi;
                    $740_1 = $1_1;
                    $740$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $3$hi;
                    i64toi32_i32$2 = $3_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$4 = 32;
                    i64toi32_i32$5 = (i64toi32_i32$4 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                      i64toi32_i32$0 = 0;
                      $557_1 = (i64toi32_i32$1 >>> i64toi32_i32$5) | 0;
                    } else {
                      i64toi32_i32$0 = (i64toi32_i32$1 >>> i64toi32_i32$5) | 0;
                      $557_1 =
                        (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                          ((32 - i64toi32_i32$5) | 0)) |
                        0 |
                        ((i64toi32_i32$2 >>> i64toi32_i32$5) | 0) |
                        0;
                    }
                    $15_1 = $557_1;
                    $15$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $740$hi;
                    i64toi32_i32$2 = $15$hi;
                    i64toi32_i32$2 =
                      __wasm_i64_mul($740_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
                    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                    $17_1 = i64toi32_i32$2;
                    $17$hi = i64toi32_i32$0;
                    $745_1 = i64toi32_i32$2;
                    $745$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $16$hi;
                    $746_1 = $16_1;
                    $746$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $2$hi;
                    i64toi32_i32$1 = $2_1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$4 = 31;
                    i64toi32_i32$5 = (i64toi32_i32$4 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$1 << i64toi32_i32$5) | 0;
                      $558_1 = 0;
                    } else {
                      i64toi32_i32$2 =
                        (((((1 << i64toi32_i32$5) | 0) - 1) | 0) &
                          ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$5) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$0 << i64toi32_i32$5) | 0) |
                        0;
                      $558_1 = (i64toi32_i32$1 << i64toi32_i32$5) | 0;
                    }
                    $748$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $746$hi;
                    i64toi32_i32$0 = $746_1;
                    i64toi32_i32$1 = $748$hi;
                    i64toi32_i32$4 = $558_1;
                    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    $18_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
                    $18$hi = i64toi32_i32$1;
                    i64toi32_i32$2 = $18_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$4 = -1;
                    i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                    $19_1 = (i64toi32_i32$2 & i64toi32_i32$4) | 0;
                    $19$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $13$hi;
                    i64toi32_i32$0 = $19$hi;
                    i64toi32_i32$2 = $13$hi;
                    i64toi32_i32$2 =
                      __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
                    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                    $754_1 = i64toi32_i32$2;
                    $754$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $745$hi;
                    i64toi32_i32$1 = $745_1;
                    i64toi32_i32$2 = $754$hi;
                    i64toi32_i32$4 = $754_1;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                    i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                    }
                    $16_1 = i64toi32_i32$5;
                    $16$hi = i64toi32_i32$3;
                    i64toi32_i32$0 = i64toi32_i32$5;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$4 = 32;
                    i64toi32_i32$2 = (i64toi32_i32$4 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                      $559_1 = 0;
                    } else {
                      i64toi32_i32$1 =
                        (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                          ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$3 << i64toi32_i32$2) | 0) |
                        0;
                      $559_1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                    }
                    $20_1 = $559_1;
                    $20$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $739$hi;
                    i64toi32_i32$3 = $739_1;
                    i64toi32_i32$0 = $20$hi;
                    i64toi32_i32$4 = $20_1;
                    $759_1 =
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) &
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$3 = 0;
                    $760$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $736$hi;
                    i64toi32_i32$4 = $736_1;
                    i64toi32_i32$1 = $760$hi;
                    i64toi32_i32$0 = $759_1;
                    i64toi32_i32$2 = (i64toi32_i32$4 - i64toi32_i32$0) | 0;
                    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
                    i64toi32_i32$5 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$3 - i64toi32_i32$5) | 0;
                    $761_1 = i64toi32_i32$2;
                    $761$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $4$hi;
                    $762_1 = $4_1;
                    $762$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $14$hi;
                    i64toi32_i32$3 = $14_1;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$0 = 32;
                    i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$4 = 0;
                      $560_1 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$4 = (i64toi32_i32$5 >>> i64toi32_i32$1) | 0;
                      $560_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$3 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $764$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $762$hi;
                    i64toi32_i32$3 = $764$hi;
                    i64toi32_i32$3 =
                      __wasm_i64_mul($762_1 | 0, i64toi32_i32$4 | 0, $560_1 | 0, i64toi32_i32$3 | 0) | 0;
                    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                    $765_1 = i64toi32_i32$3;
                    $765$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $3$hi;
                    $766_1 = $3_1;
                    $766$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$5 = $2_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 33;
                    i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $562_1 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$4 >>> i64toi32_i32$1) | 0;
                      $562_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$5 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $768$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $766$hi;
                    i64toi32_i32$5 = $768$hi;
                    i64toi32_i32$5 =
                      __wasm_i64_mul($766_1 | 0, i64toi32_i32$3 | 0, $562_1 | 0, i64toi32_i32$5 | 0) | 0;
                    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                    $769_1 = i64toi32_i32$5;
                    $769$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $765$hi;
                    i64toi32_i32$4 = $765_1;
                    i64toi32_i32$5 = $769$hi;
                    i64toi32_i32$0 = $769_1;
                    i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$5) | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                    }
                    $770_1 = i64toi32_i32$1;
                    $770$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$3 = $2_1;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$0 = 1;
                    i64toi32_i32$5 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$4 = 0;
                      $563_1 = (i64toi32_i32$2 >>> i64toi32_i32$5) | 0;
                    } else {
                      i64toi32_i32$4 = (i64toi32_i32$2 >>> i64toi32_i32$5) | 0;
                      $563_1 =
                        (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                          ((32 - i64toi32_i32$5) | 0)) |
                        0 |
                        ((i64toi32_i32$3 >>> i64toi32_i32$5) | 0) |
                        0;
                    }
                    $2_1 = $563_1;
                    $2$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $15$hi;
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$3 = $15$hi;
                    i64toi32_i32$3 =
                      __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
                    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                    $775_1 = i64toi32_i32$3;
                    $775$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $770$hi;
                    i64toi32_i32$2 = $770_1;
                    i64toi32_i32$3 = $775$hi;
                    i64toi32_i32$0 = $775_1;
                    i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                    i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                    }
                    $776$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $18$hi;
                    i64toi32_i32$1 = $10$hi;
                    i64toi32_i32$1 = $18$hi;
                    i64toi32_i32$2 = $10$hi;
                    i64toi32_i32$2 =
                      __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
                    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                    $779_1 = i64toi32_i32$2;
                    $779$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $776$hi;
                    i64toi32_i32$4 = i64toi32_i32$5;
                    i64toi32_i32$2 = $779$hi;
                    i64toi32_i32$0 = $779_1;
                    i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    i64toi32_i32$1 = i64toi32_i32$3;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$0 = 32;
                    i64toi32_i32$2 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$1 << i64toi32_i32$2) | 0;
                      $564_1 = 0;
                    } else {
                      i64toi32_i32$4 =
                        (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                          ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$5 << i64toi32_i32$2) | 0) |
                        0;
                      $564_1 = (i64toi32_i32$1 << i64toi32_i32$2) | 0;
                    }
                    $781_1 = $564_1;
                    $781$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $19$hi;
                    i64toi32_i32$4 = $15$hi;
                    i64toi32_i32$4 = $19$hi;
                    i64toi32_i32$1 = $15$hi;
                    i64toi32_i32$1 =
                      __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
                    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                    $784_1 = i64toi32_i32$1;
                    $784$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $2$hi;
                    i64toi32_i32$5 = $2_1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$1 = (i64toi32_i32$4 & i64toi32_i32$1) | 0;
                    $786$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $13$hi;
                    i64toi32_i32$1 = $786$hi;
                    $579_1 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
                    i64toi32_i32$5 = $13$hi;
                    i64toi32_i32$5 =
                      __wasm_i64_mul($579_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
                    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                    $788_1 = i64toi32_i32$5;
                    $788$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $784$hi;
                    i64toi32_i32$4 = $784_1;
                    i64toi32_i32$5 = $788$hi;
                    i64toi32_i32$0 = $788_1;
                    i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$0) | 0;
                    i64toi32_i32$3 = (i64toi32_i32$1 + i64toi32_i32$5) | 0;
                    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                    }
                    $789$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $1$hi;
                    i64toi32_i32$3 = $10$hi;
                    i64toi32_i32$1 = $10_1;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$4 = (i64toi32_i32$3 & i64toi32_i32$4) | 0;
                    $792_1 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                    $792$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$1 = $792$hi;
                    i64toi32_i32$1 =
                      __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $792_1 | 0, i64toi32_i32$1 | 0) | 0;
                    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                    $793_1 = i64toi32_i32$1;
                    $793$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $789$hi;
                    i64toi32_i32$3 = i64toi32_i32$2;
                    i64toi32_i32$1 = $793$hi;
                    i64toi32_i32$0 = $793_1;
                    i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$0) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$4 + i64toi32_i32$1) | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                    }
                    $794_1 = i64toi32_i32$5;
                    $794$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $16$hi;
                    i64toi32_i32$4 = $16_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 32;
                    i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $565_1 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$2 >>> i64toi32_i32$1) | 0;
                      $565_1 =
                        (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                          ((32 - i64toi32_i32$1) | 0)) |
                        0 |
                        ((i64toi32_i32$4 >>> i64toi32_i32$1) | 0) |
                        0;
                    }
                    $796_1 = $565_1;
                    $796$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $16$hi;
                    i64toi32_i32$3 = $17$hi;
                    i64toi32_i32$3 = $16$hi;
                    i64toi32_i32$2 = $16_1;
                    i64toi32_i32$4 = $17$hi;
                    i64toi32_i32$0 = $17_1;
                    $799_1 =
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) |
                      ((((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0)) &
                        (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = $799_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$4 = 32;
                    i64toi32_i32$1 = (i64toi32_i32$4 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                      $567_1 = 0;
                    } else {
                      i64toi32_i32$3 =
                        (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                          ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$2 << i64toi32_i32$1) | 0) |
                        0;
                      $567_1 = (i64toi32_i32$0 << i64toi32_i32$1) | 0;
                    }
                    $801$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $796$hi;
                    i64toi32_i32$2 = $796_1;
                    i64toi32_i32$0 = $801$hi;
                    i64toi32_i32$4 = $567_1;
                    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                    $802_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                    $802$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $794$hi;
                    i64toi32_i32$3 = $794_1;
                    i64toi32_i32$2 = $802$hi;
                    i64toi32_i32$4 = $802_1;
                    i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$4) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
                      i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                    }
                    $803$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $781$hi;
                    i64toi32_i32$0 = $781_1;
                    i64toi32_i32$3 = $803$hi;
                    i64toi32_i32$4 = i64toi32_i32$1;
                    i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                    i64toi32_i32$1 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                    }
                    $804$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $761$hi;
                    i64toi32_i32$5 = $761_1;
                    i64toi32_i32$0 = $804$hi;
                    i64toi32_i32$4 = i64toi32_i32$2;
                    i64toi32_i32$3 = (i64toi32_i32$5 - i64toi32_i32$2) | 0;
                    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
                    i64toi32_i32$2 = (i64toi32_i32$6 + i64toi32_i32$0) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$1 - i64toi32_i32$2) | 0;
                    $13_1 = i64toi32_i32$3;
                    $13$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $11$hi;
                    i64toi32_i32$2 = $20$hi;
                    i64toi32_i32$2 = $11$hi;
                    i64toi32_i32$1 = $11_1;
                    i64toi32_i32$5 = $20$hi;
                    i64toi32_i32$4 = $20_1;
                    i64toi32_i32$0 = (i64toi32_i32$1 - i64toi32_i32$4) | 0;
                    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
                    i64toi32_i32$3 = (i64toi32_i32$6 + i64toi32_i32$5) | 0;
                    i64toi32_i32$3 = (i64toi32_i32$2 - i64toi32_i32$3) | 0;
                    $1_1 = i64toi32_i32$0;
                    $1$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $2$hi;
                    $2$hi = i64toi32_i32$3;
                  }
                  label$14: {
                    if (($6_1 | 0) < (16384 | 0)) {
                      break label$14;
                    }
                    i64toi32_i32$3 = $12$hi;
                    i64toi32_i32$2 = $12_1;
                    i64toi32_i32$1 = 2147418112;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                    $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                    $12$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = 0;
                    $1_1 = 0;
                    $1$hi = i64toi32_i32$1;
                    break label$2;
                  }
                  $7_1 = ($6_1 + 16383) | 0;
                  label$15: {
                    if (($6_1 | 0) > (-16383 | 0)) {
                      break label$15;
                    }
                    label$16: {
                      if ($7_1) {
                        break label$16;
                      }
                      i64toi32_i32$1 = $2$hi;
                      i64toi32_i32$3 = $2_1;
                      i64toi32_i32$2 = 65535;
                      i64toi32_i32$4 = -1;
                      i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                      $820_1 = (i64toi32_i32$3 & i64toi32_i32$4) | 0;
                      $820$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $4$hi;
                      $821_1 = $4_1;
                      $821$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $1$hi;
                      i64toi32_i32$1 = $1_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$4 = 1;
                      i64toi32_i32$5 = (i64toi32_i32$4 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$5) | 0;
                        $568_1 = 0;
                      } else {
                        i64toi32_i32$3 =
                          (((((1 << i64toi32_i32$5) | 0) - 1) | 0) &
                            ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$5) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$2 << i64toi32_i32$5) | 0) |
                          0;
                        $568_1 = (i64toi32_i32$1 << i64toi32_i32$5) | 0;
                      }
                      $823$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$3 = $823$hi;
                      i64toi32_i32$2 = $568_1;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$4 = $3_1;
                      $825_1 =
                        (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0) |
                        ((((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0)) &
                          (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$2 = $13$hi;
                      i64toi32_i32$4 = $13_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$1 = 1;
                      i64toi32_i32$5 = (i64toi32_i32$1 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$4 << i64toi32_i32$5) | 0;
                        $569_1 = 0;
                      } else {
                        i64toi32_i32$3 =
                          (((((1 << i64toi32_i32$5) | 0) - 1) | 0) &
                            ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$5) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$2 << i64toi32_i32$5) | 0) |
                          0;
                        $569_1 = (i64toi32_i32$4 << i64toi32_i32$5) | 0;
                      }
                      $827_1 = $569_1;
                      $827$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $1$hi;
                      i64toi32_i32$2 = $1_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$1 = 63;
                      i64toi32_i32$5 = (i64toi32_i32$1 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                        i64toi32_i32$4 = 0;
                        $570_1 = (i64toi32_i32$3 >>> i64toi32_i32$5) | 0;
                      } else {
                        i64toi32_i32$4 = (i64toi32_i32$3 >>> i64toi32_i32$5) | 0;
                        $570_1 =
                          (((((((1 << i64toi32_i32$5) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                            ((32 - i64toi32_i32$5) | 0)) |
                          0 |
                          ((i64toi32_i32$2 >>> i64toi32_i32$5) | 0) |
                          0;
                      }
                      $829$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $827$hi;
                      i64toi32_i32$3 = $827_1;
                      i64toi32_i32$2 = $829$hi;
                      i64toi32_i32$1 = $570_1;
                      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                      $1$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $14$hi;
                      i64toi32_i32$2 = $1$hi;
                      i64toi32_i32$4 = $1_1;
                      i64toi32_i32$3 = $14$hi;
                      i64toi32_i32$1 = $14_1;
                      $833_1 =
                        (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$4 = i64toi32_i32$2;
                      i64toi32_i32$4 = i64toi32_i32$3;
                      i64toi32_i32$4 = i64toi32_i32$2;
                      i64toi32_i32$1 = $1_1;
                      i64toi32_i32$2 = i64toi32_i32$3;
                      i64toi32_i32$3 = $14_1;
                      $837_1 =
                        (((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0)) &
                          ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0))) |
                        0
                          ? $825_1
                          : $833_1;
                      i64toi32_i32$1 = 0;
                      $838$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $821$hi;
                      i64toi32_i32$3 = $821_1;
                      i64toi32_i32$4 = $838$hi;
                      i64toi32_i32$2 = $837_1;
                      i64toi32_i32$5 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                      i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                      }
                      $1_1 = i64toi32_i32$5;
                      $1$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$0 = $1$hi;
                      i64toi32_i32$1 = i64toi32_i32$5;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$2 = $4_1;
                      $842_1 =
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0)) |
                          0) |
                        0;
                      i64toi32_i32$1 = 0;
                      $843$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $820$hi;
                      i64toi32_i32$2 = $820_1;
                      i64toi32_i32$0 = $843$hi;
                      i64toi32_i32$3 = $842_1;
                      i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $3_1 = i64toi32_i32$4;
                      $3$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = i64toi32_i32$4;
                      i64toi32_i32$2 = 65536;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = (i64toi32_i32$5 & i64toi32_i32$2) | 0;
                      if (!((i64toi32_i32$1 & i64toi32_i32$3) | 0 | i64toi32_i32$2 | 0)) {
                        break label$16;
                      }
                      i64toi32_i32$2 = $3$hi;
                      i64toi32_i32$2 = $12$hi;
                      i64toi32_i32$2 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      i64toi32_i32$1 = $12$hi;
                      i64toi32_i32$3 = $12_1;
                      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                      $12_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                      $12$hi = i64toi32_i32$1;
                      break label$2;
                    }
                    i64toi32_i32$1 = 0;
                    $1_1 = 0;
                    $1$hi = i64toi32_i32$1;
                    break label$2;
                  }
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$2 = $2_1;
                  i64toi32_i32$5 = 65535;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$5 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                  $852_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                  $852$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $4$hi;
                  $853_1 = $4_1;
                  $853$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $1$hi;
                  i64toi32_i32$1 = $1_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 1;
                  i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$1 << i64toi32_i32$0) | 0;
                    $572_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                        ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$0) | 0) |
                      0;
                    $572_1 = (i64toi32_i32$1 << i64toi32_i32$0) | 0;
                  }
                  $855$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$2 = $855$hi;
                  i64toi32_i32$5 = $572_1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$3 = $3_1;
                  $857_1 =
                    (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) |
                    ((((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0)) &
                      (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$5 = $13$hi;
                  i64toi32_i32$3 = $13_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 1;
                  i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                    $573_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                        ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$0) | 0) |
                      0;
                    $573_1 = (i64toi32_i32$3 << i64toi32_i32$0) | 0;
                  }
                  $859_1 = $573_1;
                  $859$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $1$hi;
                  i64toi32_i32$5 = $1_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$1 = 63;
                  i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = 0;
                    $575_1 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$3 = (i64toi32_i32$2 >>> i64toi32_i32$0) | 0;
                    $575_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $861$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $859$hi;
                  i64toi32_i32$2 = $859_1;
                  i64toi32_i32$5 = $861$hi;
                  i64toi32_i32$1 = $575_1;
                  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                  $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                  $1$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $14$hi;
                  i64toi32_i32$5 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$2 = $14$hi;
                  i64toi32_i32$1 = $14_1;
                  $865_1 =
                    (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0) |
                    ((((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                      (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$3 = i64toi32_i32$5;
                  i64toi32_i32$3 = i64toi32_i32$2;
                  i64toi32_i32$3 = i64toi32_i32$5;
                  i64toi32_i32$1 = $1_1;
                  i64toi32_i32$5 = i64toi32_i32$2;
                  i64toi32_i32$2 = $14_1;
                  $869_1 =
                    (((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0)) &
                      ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0))) |
                    0
                      ? $857_1
                      : $865_1;
                  i64toi32_i32$1 = 0;
                  $870$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $853$hi;
                  i64toi32_i32$2 = $853_1;
                  i64toi32_i32$3 = $870$hi;
                  i64toi32_i32$5 = $869_1;
                  i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $1_1 = i64toi32_i32$0;
                  $1$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$4 = $1$hi;
                  i64toi32_i32$1 = i64toi32_i32$0;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$5 = $4_1;
                  $874_1 =
                    (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$1 = 0;
                  $875$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $852$hi;
                  i64toi32_i32$5 = $852_1;
                  i64toi32_i32$4 = $875$hi;
                  i64toi32_i32$2 = $874_1;
                  i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                  i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                    i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                  }
                  $876_1 = i64toi32_i32$3;
                  $876$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                    $576_1 = 0;
                  } else {
                    i64toi32_i32$5 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                      0;
                    $576_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                  }
                  $879$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $876$hi;
                  i64toi32_i32$0 = $876_1;
                  i64toi32_i32$1 = $879$hi;
                  i64toi32_i32$2 = $576_1;
                  i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                  }
                  $880$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $12$hi;
                  i64toi32_i32$3 = $880$hi;
                  i64toi32_i32$5 = i64toi32_i32$4;
                  i64toi32_i32$0 = $12$hi;
                  i64toi32_i32$2 = $12_1;
                  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  $12_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                  $12$hi = i64toi32_i32$0;
                }
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$5 = $0_1;
                HEAP32[i64toi32_i32$5 >> 2] = $1_1;
                HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$0 = $12$hi;
                HEAP32[((i64toi32_i32$5 + 8) | 0) >> 2] = $12_1;
                HEAP32[((i64toi32_i32$5 + 12) | 0) >> 2] = i64toi32_i32$0;
                global$0 = ($5_1 + 192) | 0;
                return;
              }
              i64toi32_i32$5 = $0_1;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$5 >> 2] = 0;
              HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $12$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$3 = $3_1;
              i64toi32_i32$5 = $2$hi;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
              i64toi32_i32$1 = !(i64toi32_i32$3 | i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0);
              i64toi32_i32$5 = 2147450880;
              i64toi32_i32$3 = $12$hi;
              i64toi32_i32$2 = i64toi32_i32$1 ? 0 : $12_1;
              i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$3;
              $896_1 = i64toi32_i32$2;
              i64toi32_i32$2 = $0_1;
              HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] = $896_1;
              HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($5_1 + 192) | 0;
            }

            function $321($0_1, $1_1, $1$hi, $2_1, $2$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$1 = 2147483647;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $5_1 = (i64toi32_i32$2 & -1) | 0;
              i64toi32_i32$2 = $0_1;
              HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] = $5_1;
              HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $1$hi;
              HEAP32[i64toi32_i32$2 >> 2] = $1_1;
              HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] = i64toi32_i32$1;
            }

            function $322($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $9_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$2 = 0,
                $4_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $11$hi = 0,
                $10_1 = 0,
                $10$hi = 0,
                $6_1 = 0,
                $7_1 = 0;
              $4_1 = (global$0 - 48) | 0;
              global$0 = $4_1;
              i64toi32_i32$0 = 0;
              $10_1 = 0;
              $10$hi = i64toi32_i32$0;
              label$1: {
                label$2: {
                  if ($2_1 >>> 0 > 2 >>> 0) {
                    break label$2;
                  }
                  $5_1 = ($1_1 + 4) | 0;
                  $2_1 = ($2_1 << 2) | 0;
                  $6_1 = HEAP32[(($2_1 + 3100) | 0) >> 2] | 0;
                  $7_1 = HEAP32[(($2_1 + 3088) | 0) >> 2] | 0;
                  label$3: while (1) {
                    label$4: {
                      label$5: {
                        $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$5;
                        }
                        HEAP32[$5_1 >> 2] = ($2_1 + 1) | 0;
                        $2_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$4;
                      }
                      $2_1 = $300($1_1 | 0) | 0;
                    }
                    if ($292($2_1 | 0) | 0) {
                      continue label$3;
                    }
                    break label$3;
                  }
                  $8_1 = 1;
                  label$6: {
                    label$7: {
                      switch (($2_1 + -43) | 0 | 0) {
                        case 0:
                        case 2:
                          break label$7;
                        default:
                          break label$6;
                      }
                    }
                    $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
                    label$8: {
                      $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                        break label$8;
                      }
                      HEAP32[$5_1 >> 2] = ($2_1 + 1) | 0;
                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                      break label$6;
                    }
                    $2_1 = $300($1_1 | 0) | 0;
                  }
                  $9_1 = 0;
                  label$9: {
                    label$10: {
                      label$11: {
                        label$12: while (1) {
                          if (($2_1 | 32 | 0 | 0) != (HEAP8[(($9_1 + 3024) | 0) >> 0] | 0 | 0)) {
                            break label$11;
                          }
                          label$13: {
                            if ($9_1 >>> 0 > 6 >>> 0) {
                              break label$13;
                            }
                            label$14: {
                              $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                              if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                break label$14;
                              }
                              HEAP32[$5_1 >> 2] = ($2_1 + 1) | 0;
                              $2_1 = HEAPU8[$2_1 >> 0] | 0;
                              break label$13;
                            }
                            $2_1 = $300($1_1 | 0) | 0;
                          }
                          $9_1 = ($9_1 + 1) | 0;
                          if (($9_1 | 0) != (8 | 0)) {
                            continue label$12;
                          }
                          break label$10;
                        }
                      }
                      label$15: {
                        if (($9_1 | 0) == (3 | 0)) {
                          break label$15;
                        }
                        if (($9_1 | 0) == (8 | 0)) {
                          break label$10;
                        }
                        if (!$3_1) {
                          break label$9;
                        }
                        if ($9_1 >>> 0 < 4 >>> 0) {
                          break label$9;
                        }
                        if (($9_1 | 0) == (8 | 0)) {
                          break label$10;
                        }
                      }
                      label$16: {
                        $1_1 = HEAP32[(($1_1 + 104) | 0) >> 2] | 0;
                        if (!$1_1) {
                          break label$16;
                        }
                        HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                      }
                      if (!$3_1) {
                        break label$10;
                      }
                      if ($9_1 >>> 0 < 4 >>> 0) {
                        break label$10;
                      }
                      label$17: while (1) {
                        label$18: {
                          if (!$1_1) {
                            break label$18;
                          }
                          HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                        }
                        $9_1 = ($9_1 + -1) | 0;
                        if ($9_1 >>> 0 > 3 >>> 0) {
                          continue label$17;
                        }
                        break label$17;
                      }
                    }
                    $304($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
                    i64toi32_i32$2 = ($4_1 + 8) | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                    $11_1 = i64toi32_i32$0;
                    $11$hi = i64toi32_i32$1;
                    i64toi32_i32$2 = $4_1;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                    $10_1 = i64toi32_i32$1;
                    $10$hi = i64toi32_i32$0;
                    break label$1;
                  }
                  label$19: {
                    label$20: {
                      label$21: {
                        if ($9_1) {
                          break label$21;
                        }
                        $9_1 = 0;
                        label$22: while (1) {
                          if (($2_1 | 32 | 0 | 0) != (HEAP8[(($9_1 + 3033) | 0) >> 0] | 0 | 0)) {
                            break label$21;
                          }
                          label$23: {
                            if ($9_1 >>> 0 > 1 >>> 0) {
                              break label$23;
                            }
                            label$24: {
                              $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                              if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                break label$24;
                              }
                              HEAP32[$5_1 >> 2] = ($2_1 + 1) | 0;
                              $2_1 = HEAPU8[$2_1 >> 0] | 0;
                              break label$23;
                            }
                            $2_1 = $300($1_1 | 0) | 0;
                          }
                          $9_1 = ($9_1 + 1) | 0;
                          if (($9_1 | 0) != (3 | 0)) {
                            continue label$22;
                          }
                          break label$20;
                        }
                      }
                      label$25: {
                        switch ($9_1 | 0) {
                          case 0:
                            label$27: {
                              if (($2_1 | 0) != (48 | 0)) {
                                break label$27;
                              }
                              label$28: {
                                label$29: {
                                  $9_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                                  if ($9_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                    break label$29;
                                  }
                                  HEAP32[$5_1 >> 2] = ($9_1 + 1) | 0;
                                  $9_1 = HEAPU8[$9_1 >> 0] | 0;
                                  break label$28;
                                }
                                $9_1 = $300($1_1 | 0) | 0;
                              }
                              label$30: {
                                if ((($9_1 & -33) | 0 | 0) != (88 | 0)) {
                                  break label$30;
                                }
                                $323(($4_1 + 16) | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
                                i64toi32_i32$2 = $4_1;
                                i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 24) | 0) >> 2] | 0;
                                i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 28) | 0) >> 2] | 0;
                                $11_1 = i64toi32_i32$0;
                                $11$hi = i64toi32_i32$1;
                                i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 16) | 0) >> 2] | 0;
                                i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 20) | 0) >> 2] | 0;
                                $10_1 = i64toi32_i32$1;
                                $10$hi = i64toi32_i32$0;
                                break label$1;
                              }
                              if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                                break label$27;
                              }
                              HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                            }
                            $324(
                              ($4_1 + 32) | 0 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $7_1 | 0,
                              $6_1 | 0,
                              $8_1 | 0,
                              $3_1 | 0
                            );
                            i64toi32_i32$2 = $4_1;
                            i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 40) | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 44) | 0) >> 2] | 0;
                            $11_1 = i64toi32_i32$0;
                            $11$hi = i64toi32_i32$1;
                            i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 32) | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 36) | 0) >> 2] | 0;
                            $10_1 = i64toi32_i32$1;
                            $10$hi = i64toi32_i32$0;
                            break label$1;
                          case 3:
                            break label$20;
                          default:
                            break label$25;
                        }
                      }
                      label$31: {
                        if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                          break label$31;
                        }
                        HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                      }
                      HEAP32[($305() | 0) >> 2] = 28;
                      break label$19;
                    }
                    label$32: {
                      label$33: {
                        $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$33;
                        }
                        HEAP32[$5_1 >> 2] = ($2_1 + 1) | 0;
                        $2_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$32;
                      }
                      $2_1 = $300($1_1 | 0) | 0;
                    }
                    label$34: {
                      label$35: {
                        if (($2_1 | 0) != (40 | 0)) {
                          break label$35;
                        }
                        $9_1 = 1;
                        break label$34;
                      }
                      i64toi32_i32$0 = 2147450880;
                      $11_1 = 0;
                      $11$hi = i64toi32_i32$0;
                      if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                        break label$1;
                      }
                      HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                      break label$1;
                    }
                    label$36: while (1) {
                      label$37: {
                        label$38: {
                          $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                          if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                            break label$38;
                          }
                          HEAP32[$5_1 >> 2] = ($2_1 + 1) | 0;
                          $2_1 = HEAPU8[$2_1 >> 0] | 0;
                          break label$37;
                        }
                        $2_1 = $300($1_1 | 0) | 0;
                      }
                      $8_1 = ($2_1 + -65) | 0;
                      label$39: {
                        label$40: {
                          if ((($2_1 + -48) | 0) >>> 0 < 10 >>> 0) {
                            break label$40;
                          }
                          if ($8_1 >>> 0 < 26 >>> 0) {
                            break label$40;
                          }
                          $8_1 = ($2_1 + -97) | 0;
                          if (($2_1 | 0) == (95 | 0)) {
                            break label$40;
                          }
                          if ($8_1 >>> 0 >= 26 >>> 0) {
                            break label$39;
                          }
                        }
                        $9_1 = ($9_1 + 1) | 0;
                        continue label$36;
                      }
                      break label$36;
                    }
                    i64toi32_i32$0 = 2147450880;
                    $11_1 = 0;
                    $11$hi = i64toi32_i32$0;
                    if (($2_1 | 0) == (41 | 0)) {
                      break label$1;
                    }
                    label$41: {
                      $2_1 = HEAP32[(($1_1 + 104) | 0) >> 2] | 0;
                      if (!$2_1) {
                        break label$41;
                      }
                      HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                    }
                    label$42: {
                      if (!$3_1) {
                        break label$42;
                      }
                      if (!$9_1) {
                        break label$1;
                      }
                      label$43: while (1) {
                        $9_1 = ($9_1 + -1) | 0;
                        label$44: {
                          if (!$2_1) {
                            break label$44;
                          }
                          HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + -1) | 0;
                        }
                        if ($9_1) {
                          continue label$43;
                        }
                        break label$1;
                      }
                    }
                    HEAP32[($305() | 0) >> 2] = 28;
                  }
                  i64toi32_i32$0 = 0;
                  $10_1 = 0;
                  $10$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  $299($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                }
                i64toi32_i32$0 = 0;
                $11_1 = 0;
                $11$hi = i64toi32_i32$0;
              }
              i64toi32_i32$0 = $10$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[i64toi32_i32$1 >> 2] = $10_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $11$hi;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $11_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($4_1 + 48) | 0;
            }

            function $323($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                $6_1 = 0,
                i64toi32_i32$4 = 0,
                $7_1 = 0,
                $16$hi = 0,
                $19$hi = 0,
                $16_1 = 0,
                $19_1 = 0,
                $15$hi = 0,
                $17$hi = 0,
                $14$hi = 0,
                $15_1 = 0,
                $17_1 = 0,
                $18$hi = 0,
                $14_1 = 0,
                $10_1 = 0,
                $18_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $20$hi = 0,
                $20_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $106_1 = 0,
                $107_1 = 0,
                $108_1 = 0,
                $109_1 = 0,
                $110_1 = 0,
                $111_1 = 0,
                $112_1 = 0,
                $113_1 = 0,
                $114_1 = 0,
                $115_1 = 0,
                $116_1 = 0,
                $117_1 = 0,
                $118_1 = 0,
                $119_1 = 0,
                $120_1 = 0,
                $121_1 = 0,
                $122_1 = 0,
                $123_1 = 0,
                $124_1 = 0,
                $133_1 = 0,
                $133$hi = 0,
                $137_1 = 0,
                $137$hi = 0,
                $142_1 = 0,
                $142$hi = 0,
                $146_1 = 0,
                $146$hi = 0,
                $164_1 = 0,
                $164$hi = 0,
                $168_1 = 0,
                $168$hi = 0,
                $258$hi = 0,
                $265$hi = 0,
                $274_1 = 0,
                $274$hi = 0,
                $278_1 = 0,
                $278$hi = 0,
                $282_1 = 0,
                $282$hi = 0,
                $286_1 = 0,
                $286$hi = 0,
                $296_1 = 0,
                $296$hi = 0,
                $313_1 = 0,
                $313$hi = 0,
                $317_1 = 0,
                $317$hi = 0,
                $322_1 = 0,
                $322$hi = 0,
                $324_1 = 0,
                $324$hi = 0,
                $342$hi = 0,
                $350_1 = 0,
                $351_1 = 0,
                $354$hi = 0,
                $378_1 = 0,
                $378$hi = 0,
                $382_1 = 0,
                $382$hi = 0,
                $416_1 = 0,
                $416$hi = 0,
                $420_1 = 0,
                $420$hi = 0,
                $424_1 = 0,
                $424$hi = 0,
                $428_1 = 0,
                $428$hi = 0,
                $435_1 = 0,
                $435$hi = 0,
                $438_1 = 0,
                $438$hi = 0,
                $444_1 = 0,
                $444$hi = 0,
                $448_1 = 0,
                $448$hi = 0,
                $450_1 = 0,
                $450$hi = 0,
                $454_1 = 0,
                $454$hi = 0,
                $458_1 = 0,
                $458$hi = 0,
                $462_1 = 0,
                $462$hi = 0,
                $492_1 = 0,
                $492$hi = 0,
                $496_1 = 0,
                $496$hi = 0,
                $500_1 = 0,
                $500$hi = 0,
                $504_1 = 0,
                $504$hi = 0;
              $6_1 = (global$0 - 432) | 0;
              global$0 = $6_1;
              label$1: {
                label$2: {
                  $7_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                  if ($7_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                    break label$2;
                  }
                  HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                  $7_1 = HEAPU8[$7_1 >> 0] | 0;
                  break label$1;
                }
                $7_1 = $300($1_1 | 0) | 0;
              }
              $8_1 = 0;
              i64toi32_i32$0 = 0;
              $14_1 = 0;
              $14$hi = i64toi32_i32$0;
              $9_1 = 0;
              label$3: {
                label$4: {
                  label$5: {
                    label$6: while (1) {
                      label$7: {
                        if (($7_1 | 0) == (48 | 0)) {
                          break label$7;
                        }
                        if (($7_1 | 0) != (46 | 0)) {
                          break label$3;
                        }
                        $7_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        if ($7_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$5;
                        }
                        HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                        $7_1 = HEAPU8[$7_1 >> 0] | 0;
                        break label$4;
                      }
                      label$8: {
                        $7_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        if ($7_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$8;
                        }
                        $9_1 = 1;
                        HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                        $7_1 = HEAPU8[$7_1 >> 0] | 0;
                        continue label$6;
                      }
                      $9_1 = 1;
                      $7_1 = $300($1_1 | 0) | 0;
                      continue label$6;
                    }
                  }
                  $7_1 = $300($1_1 | 0) | 0;
                }
                $8_1 = 1;
                i64toi32_i32$0 = 0;
                $14_1 = 0;
                $14$hi = i64toi32_i32$0;
                if (($7_1 | 0) != (48 | 0)) {
                  break label$3;
                }
                label$9: while (1) {
                  label$10: {
                    label$11: {
                      $7_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      if ($7_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                        break label$11;
                      }
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                      $7_1 = HEAPU8[$7_1 >> 0] | 0;
                      break label$10;
                    }
                    $7_1 = $300($1_1 | 0) | 0;
                  }
                  i64toi32_i32$0 = $14$hi;
                  i64toi32_i32$2 = $14_1;
                  i64toi32_i32$1 = -1;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  $14_1 = i64toi32_i32$4;
                  $14$hi = i64toi32_i32$5;
                  if (($7_1 | 0) == (48 | 0)) {
                    continue label$9;
                  }
                  break label$9;
                }
                $8_1 = 1;
                $9_1 = 1;
              }
              i64toi32_i32$5 = 1073676288;
              $15_1 = 0;
              $15$hi = i64toi32_i32$5;
              $10_1 = 0;
              i64toi32_i32$5 = 0;
              $16_1 = 0;
              $16$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              $17_1 = 0;
              $17$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              $18_1 = 0;
              $18$hi = i64toi32_i32$5;
              $11_1 = 0;
              i64toi32_i32$5 = 0;
              $19_1 = 0;
              $19$hi = i64toi32_i32$5;
              label$12: {
                label$13: while (1) {
                  $12_1 = $7_1 | 32 | 0;
                  label$14: {
                    label$15: {
                      $13_1 = ($7_1 + -48) | 0;
                      if ($13_1 >>> 0 < 10 >>> 0) {
                        break label$15;
                      }
                      label$16: {
                        if (($7_1 | 0) == (46 | 0)) {
                          break label$16;
                        }
                        if ((($12_1 + -97) | 0) >>> 0 > 5 >>> 0) {
                          break label$12;
                        }
                      }
                      if (($7_1 | 0) != (46 | 0)) {
                        break label$15;
                      }
                      if ($8_1) {
                        break label$12;
                      }
                      $8_1 = 1;
                      i64toi32_i32$5 = $19$hi;
                      $14_1 = $19_1;
                      $14$hi = i64toi32_i32$5;
                      break label$14;
                    }
                    $7_1 = ($7_1 | 0) > (57 | 0) ? ($12_1 + -87) | 0 : $13_1;
                    label$17: {
                      label$18: {
                        i64toi32_i32$5 = $19$hi;
                        i64toi32_i32$0 = $19_1;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 7;
                        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
                          $106_1 = 1;
                        } else {
                          if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
                            if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
                              $107_1 = 0;
                            } else {
                              $107_1 = 1;
                            }
                            $108_1 = $107_1;
                          } else {
                            $108_1 = 0;
                          }
                          $106_1 = $108_1;
                        }
                        if ($106_1) {
                          break label$18;
                        }
                        $10_1 = ($7_1 + (($10_1 << 4) | 0)) | 0;
                        break label$17;
                      }
                      label$19: {
                        i64toi32_i32$0 = $19$hi;
                        i64toi32_i32$3 = $19_1;
                        i64toi32_i32$5 = 0;
                        i64toi32_i32$2 = 28;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
                          $109_1 = 1;
                        } else {
                          if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
                            if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
                              $110_1 = 0;
                            } else {
                              $110_1 = 1;
                            }
                            $111_1 = $110_1;
                          } else {
                            $111_1 = 0;
                          }
                          $109_1 = $111_1;
                        }
                        if ($109_1) {
                          break label$19;
                        }
                        $306(($6_1 + 48) | 0 | 0, $7_1 | 0);
                        i64toi32_i32$3 = $18$hi;
                        i64toi32_i32$3 = $15$hi;
                        i64toi32_i32$3 = $18$hi;
                        i64toi32_i32$0 = $15$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$5 = 1073414144;
                        $308(
                          ($6_1 + 32) | 0 | 0,
                          $18_1 | 0,
                          i64toi32_i32$3 | 0,
                          $15_1 | 0,
                          i64toi32_i32$0 | 0,
                          0 | 0,
                          i64toi32_i32$2 | 0,
                          0 | 0,
                          i64toi32_i32$5 | 0
                        );
                        i64toi32_i32$0 = $6_1;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 32) | 0) >> 2] | 0;
                        i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 36) | 0) >> 2] | 0;
                        $18_1 = i64toi32_i32$5;
                        $18$hi = i64toi32_i32$2;
                        i64toi32_i32$0 = (((i64toi32_i32$0 + 32) | 0) + 8) | 0;
                        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                        $15_1 = i64toi32_i32$2;
                        $15$hi = i64toi32_i32$5;
                        i64toi32_i32$0 = $6_1;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 48) | 0) >> 2] | 0;
                        i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 52) | 0) >> 2] | 0;
                        $133_1 = i64toi32_i32$5;
                        $133$hi = i64toi32_i32$2;
                        i64toi32_i32$0 = (((i64toi32_i32$0 + 48) | 0) + 8) | 0;
                        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                        $137_1 = i64toi32_i32$2;
                        $137$hi = i64toi32_i32$5;
                        i64toi32_i32$5 = $18$hi;
                        i64toi32_i32$2 = $15$hi;
                        i64toi32_i32$0 = $133$hi;
                        i64toi32_i32$3 = $137$hi;
                        $308(
                          ($6_1 + 16) | 0 | 0,
                          $18_1 | 0,
                          i64toi32_i32$5 | 0,
                          $15_1 | 0,
                          i64toi32_i32$2 | 0,
                          $133_1 | 0,
                          i64toi32_i32$0 | 0,
                          $137_1 | 0,
                          i64toi32_i32$3 | 0
                        );
                        i64toi32_i32$3 = $16$hi;
                        i64toi32_i32$3 = $17$hi;
                        i64toi32_i32$2 = $6_1;
                        i64toi32_i32$3 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[(($6_1 + 20) | 0) >> 2] | 0;
                        $142_1 = i64toi32_i32$3;
                        $142$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = ((($6_1 + 16) | 0) + 8) | 0;
                        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                        i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                        $146_1 = i64toi32_i32$0;
                        $146$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $16$hi;
                        i64toi32_i32$0 = $17$hi;
                        i64toi32_i32$2 = $142$hi;
                        i64toi32_i32$5 = $146$hi;
                        $311(
                          $6_1 | 0,
                          $16_1 | 0,
                          i64toi32_i32$3 | 0,
                          $17_1 | 0,
                          i64toi32_i32$0 | 0,
                          $142_1 | 0,
                          i64toi32_i32$2 | 0,
                          $146_1 | 0,
                          i64toi32_i32$5 | 0
                        );
                        i64toi32_i32$0 = ($6_1 + 8) | 0;
                        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                        i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                        $17_1 = i64toi32_i32$5;
                        $17$hi = i64toi32_i32$2;
                        i64toi32_i32$0 = $6_1;
                        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                        $16_1 = i64toi32_i32$2;
                        $16$hi = i64toi32_i32$5;
                        break label$17;
                      }
                      if ($11_1) {
                        break label$17;
                      }
                      if (!$7_1) {
                        break label$17;
                      }
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$2 = $15$hi;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 1073610752;
                      $308(
                        ($6_1 + 80) | 0 | 0,
                        $18_1 | 0,
                        i64toi32_i32$5 | 0,
                        $15_1 | 0,
                        i64toi32_i32$2 | 0,
                        0 | 0,
                        i64toi32_i32$0 | 0,
                        0 | 0,
                        i64toi32_i32$3 | 0
                      );
                      i64toi32_i32$3 = $16$hi;
                      i64toi32_i32$3 = $17$hi;
                      i64toi32_i32$2 = $6_1;
                      i64toi32_i32$3 = HEAP32[(($6_1 + 80) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[(($6_1 + 84) | 0) >> 2] | 0;
                      $164_1 = i64toi32_i32$3;
                      $164$hi = i64toi32_i32$0;
                      i64toi32_i32$2 = ((($6_1 + 80) | 0) + 8) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                      $168_1 = i64toi32_i32$0;
                      $168$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $16$hi;
                      i64toi32_i32$0 = $17$hi;
                      i64toi32_i32$2 = $164$hi;
                      i64toi32_i32$5 = $168$hi;
                      $311(
                        ($6_1 + 64) | 0 | 0,
                        $16_1 | 0,
                        i64toi32_i32$3 | 0,
                        $17_1 | 0,
                        i64toi32_i32$0 | 0,
                        $164_1 | 0,
                        i64toi32_i32$2 | 0,
                        $168_1 | 0,
                        i64toi32_i32$5 | 0
                      );
                      i64toi32_i32$0 = ((($6_1 + 64) | 0) + 8) | 0;
                      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                      i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                      $17_1 = i64toi32_i32$5;
                      $17$hi = i64toi32_i32$2;
                      $11_1 = 1;
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 64) | 0) >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 68) | 0) >> 2] | 0;
                      $16_1 = i64toi32_i32$2;
                      $16$hi = i64toi32_i32$5;
                    }
                    i64toi32_i32$5 = $19$hi;
                    i64toi32_i32$0 = $19_1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 1;
                    i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                    }
                    $19_1 = i64toi32_i32$1;
                    $19$hi = i64toi32_i32$4;
                    $9_1 = 1;
                  }
                  label$20: {
                    $7_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                    if ($7_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                      break label$20;
                    }
                    HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                    $7_1 = HEAPU8[$7_1 >> 0] | 0;
                    continue label$13;
                  }
                  $7_1 = $300($1_1 | 0) | 0;
                  continue label$13;
                }
              }
              label$21: {
                label$22: {
                  label$23: {
                    label$24: {
                      if ($9_1) {
                        break label$24;
                      }
                      label$25: {
                        if (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) {
                          break label$25;
                        }
                        if ($5_1) {
                          break label$22;
                        }
                        break label$23;
                      }
                      $7_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + -1) | 0;
                      if (!$5_1) {
                        break label$23;
                      }
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + -2) | 0;
                      if (!$8_1) {
                        break label$22;
                      }
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ($7_1 + -3) | 0;
                      break label$22;
                    }
                    label$26: {
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$5 = $19_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 7;
                      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
                        $112_1 = 1;
                      } else {
                        if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
                          if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
                            $113_1 = 0;
                          } else {
                            $113_1 = 1;
                          }
                          $114_1 = $113_1;
                        } else {
                          $114_1 = 0;
                        }
                        $112_1 = $114_1;
                      }
                      if ($112_1) {
                        break label$26;
                      }
                      i64toi32_i32$5 = $19$hi;
                      $15_1 = $19_1;
                      $15$hi = i64toi32_i32$5;
                      label$27: while (1) {
                        $10_1 = ($10_1 << 4) | 0;
                        i64toi32_i32$5 = $15$hi;
                        i64toi32_i32$3 = $15_1;
                        i64toi32_i32$4 = 0;
                        i64toi32_i32$0 = 1;
                        i64toi32_i32$2 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                        i64toi32_i32$1 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                          i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                        }
                        $15_1 = i64toi32_i32$2;
                        $15$hi = i64toi32_i32$1;
                        i64toi32_i32$5 = i64toi32_i32$2;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = 8;
                        if (
                          ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0)) |
                          ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0)) |
                          0
                        ) {
                          continue label$27;
                        }
                        break label$27;
                      }
                    }
                    label$28: {
                      label$29: {
                        if ((($7_1 & -33) | 0 | 0) != (80 | 0)) {
                          break label$29;
                        }
                        i64toi32_i32$5 = $325($1_1 | 0, $5_1 | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                        $15_1 = i64toi32_i32$5;
                        $15$hi = i64toi32_i32$1;
                        i64toi32_i32$0 = i64toi32_i32$5;
                        i64toi32_i32$5 = -2147483648;
                        i64toi32_i32$3 = 0;
                        if (
                          ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0)) |
                          ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0)) |
                          0
                        ) {
                          break label$28;
                        }
                        label$30: {
                          if (!$5_1) {
                            break label$30;
                          }
                          i64toi32_i32$0 = 0;
                          $15_1 = 0;
                          $15$hi = i64toi32_i32$0;
                          if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                            break label$28;
                          }
                          HEAP32[(($1_1 + 4) | 0) >> 2] = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                          break label$28;
                        }
                        i64toi32_i32$0 = 0;
                        $16_1 = 0;
                        $16$hi = i64toi32_i32$0;
                        i64toi32_i32$0 = 0;
                        $299($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                        i64toi32_i32$0 = 0;
                        $19_1 = 0;
                        $19$hi = i64toi32_i32$0;
                        break label$21;
                      }
                      i64toi32_i32$0 = 0;
                      $15_1 = 0;
                      $15$hi = i64toi32_i32$0;
                      if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                        break label$28;
                      }
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                    }
                    label$31: {
                      if ($10_1) {
                        break label$31;
                      }
                      $312(($6_1 + 112) | 0 | 0, +(+($4_1 | 0) * 0.0));
                      i64toi32_i32$3 = ($6_1 + 120) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                      $19_1 = i64toi32_i32$0;
                      $19$hi = i64toi32_i32$1;
                      i64toi32_i32$3 = $6_1;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 112) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 116) | 0) >> 2] | 0;
                      $16_1 = i64toi32_i32$1;
                      $16$hi = i64toi32_i32$0;
                      break label$21;
                    }
                    label$32: {
                      i64toi32_i32$0 = $14$hi;
                      i64toi32_i32$0 = $19$hi;
                      i64toi32_i32$4 = $8_1;
                      i64toi32_i32$0 = $14$hi;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
                      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
                      i64toi32_i32$4 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$0 = 2;
                      i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                        $115_1 = 0;
                      } else {
                        i64toi32_i32$5 =
                          (((((1 << i64toi32_i32$1) | 0) - 1) | 0) &
                            ((i64toi32_i32$4 >>> ((32 - i64toi32_i32$1) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$3 << i64toi32_i32$1) | 0) |
                          0;
                        $115_1 = (i64toi32_i32$4 << i64toi32_i32$1) | 0;
                      }
                      $258$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $15$hi;
                      i64toi32_i32$5 = $258$hi;
                      i64toi32_i32$3 = $115_1;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$0 = $15_1;
                      i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                      }
                      i64toi32_i32$5 = i64toi32_i32$1;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$0 = -32;
                      i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $19_1 = i64toi32_i32$4;
                      $19$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = 0;
                      $265$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$2 = i64toi32_i32$4;
                      i64toi32_i32$5 = $265$hi;
                      i64toi32_i32$0 = (0 - $3_1) | 0;
                      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
                        $116_1 = 1;
                      } else {
                        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
                          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
                            $117_1 = 0;
                          } else {
                            $117_1 = 1;
                          }
                          $118_1 = $117_1;
                        } else {
                          $118_1 = 0;
                        }
                        $116_1 = $118_1;
                      }
                      if ($116_1) {
                        break label$32;
                      }
                      HEAP32[($305() | 0) >> 2] = 68;
                      $306(($6_1 + 160) | 0 | 0, $4_1 | 0);
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 160) | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 164) | 0) >> 2] | 0;
                      $274_1 = i64toi32_i32$2;
                      $274$hi = i64toi32_i32$1;
                      i64toi32_i32$0 = (((i64toi32_i32$0 + 160) | 0) + 8) | 0;
                      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                      i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                      $278_1 = i64toi32_i32$1;
                      $278$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $274$hi;
                      i64toi32_i32$1 = $278$hi;
                      i64toi32_i32$0 = -1;
                      i64toi32_i32$5 = 2147418111;
                      $308(
                        ($6_1 + 144) | 0 | 0,
                        $274_1 | 0,
                        i64toi32_i32$2 | 0,
                        $278_1 | 0,
                        i64toi32_i32$1 | 0,
                        -1 | 0,
                        i64toi32_i32$0 | 0,
                        -1 | 0,
                        i64toi32_i32$5 | 0
                      );
                      i64toi32_i32$1 = $6_1;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 144) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[((i64toi32_i32$1 + 148) | 0) >> 2] | 0;
                      $282_1 = i64toi32_i32$5;
                      $282$hi = i64toi32_i32$0;
                      i64toi32_i32$1 = (((i64toi32_i32$1 + 144) | 0) + 8) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                      $286_1 = i64toi32_i32$0;
                      $286$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $282$hi;
                      i64toi32_i32$0 = $286$hi;
                      i64toi32_i32$1 = -1;
                      i64toi32_i32$2 = 2147418111;
                      $308(
                        ($6_1 + 128) | 0 | 0,
                        $282_1 | 0,
                        i64toi32_i32$5 | 0,
                        $286_1 | 0,
                        i64toi32_i32$0 | 0,
                        -1 | 0,
                        i64toi32_i32$1 | 0,
                        -1 | 0,
                        i64toi32_i32$2 | 0
                      );
                      i64toi32_i32$0 = ((($6_1 + 128) | 0) + 8) | 0;
                      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                      $19_1 = i64toi32_i32$2;
                      $19$hi = i64toi32_i32$1;
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 128) | 0) >> 2] | 0;
                      i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 132) | 0) >> 2] | 0;
                      $16_1 = i64toi32_i32$1;
                      $16$hi = i64toi32_i32$2;
                      break label$21;
                    }
                    label$33: {
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$1 = ($3_1 + -226) | 0;
                      i64toi32_i32$2 = (i64toi32_i32$1 >> 31) | 0;
                      $296_1 = i64toi32_i32$1;
                      $296$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $19$hi;
                      i64toi32_i32$0 = $19_1;
                      i64toi32_i32$1 = $296$hi;
                      i64toi32_i32$5 = $296_1;
                      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
                        $119_1 = 1;
                      } else {
                        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
                            $120_1 = 0;
                          } else {
                            $120_1 = 1;
                          }
                          $121_1 = $120_1;
                        } else {
                          $121_1 = 0;
                        }
                        $119_1 = $121_1;
                      }
                      if ($119_1) {
                        break label$33;
                      }
                      label$34: {
                        if (($10_1 | 0) <= (-1 | 0)) {
                          break label$34;
                        }
                        label$35: while (1) {
                          i64toi32_i32$0 = $16$hi;
                          i64toi32_i32$0 = $17$hi;
                          i64toi32_i32$0 = $16$hi;
                          i64toi32_i32$2 = $17$hi;
                          i64toi32_i32$5 = 0;
                          i64toi32_i32$1 = -1073807360;
                          $311(
                            ($6_1 + 416) | 0 | 0,
                            $16_1 | 0,
                            i64toi32_i32$0 | 0,
                            $17_1 | 0,
                            i64toi32_i32$2 | 0,
                            0 | 0,
                            i64toi32_i32$5 | 0,
                            0 | 0,
                            i64toi32_i32$1 | 0
                          );
                          i64toi32_i32$1 = i64toi32_i32$0;
                          i64toi32_i32$1 = i64toi32_i32$2;
                          i64toi32_i32$1 = i64toi32_i32$0;
                          i64toi32_i32$5 = i64toi32_i32$2;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = 1073610752;
                          $7_1 =
                            $314(
                              $16_1 | 0,
                              i64toi32_i32$1 | 0,
                              $17_1 | 0,
                              i64toi32_i32$5 | 0,
                              0 | 0,
                              i64toi32_i32$2 | 0,
                              0 | 0,
                              i64toi32_i32$0 | 0
                            ) | 0;
                          i64toi32_i32$0 = i64toi32_i32$1;
                          i64toi32_i32$0 = i64toi32_i32$5;
                          i64toi32_i32$0 = i64toi32_i32$1;
                          i64toi32_i32$5 = $6_1;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 416) | 0) >> 2] | 0;
                          i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 420) | 0) >> 2] | 0;
                          $313_1 = i64toi32_i32$0;
                          $313$hi = i64toi32_i32$2;
                          $1_1 = ($7_1 | 0) < (0 | 0);
                          i64toi32_i32$3 = $1_1;
                          i64toi32_i32$2 = i64toi32_i32$1;
                          i64toi32_i32$0 = $313$hi;
                          i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $313_1;
                          i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
                          $317_1 = i64toi32_i32$1;
                          $317$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $17$hi;
                          i64toi32_i32$3 = ((($6_1 + 416) | 0) + 8) | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                          $322_1 = i64toi32_i32$5;
                          $322$hi = i64toi32_i32$1;
                          i64toi32_i32$0 = $1_1;
                          i64toi32_i32$1 = $17$hi;
                          i64toi32_i32$5 = $322$hi;
                          i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $322_1;
                          i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
                          $324_1 = i64toi32_i32$2;
                          $324$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = $16$hi;
                          i64toi32_i32$2 = i64toi32_i32$1;
                          i64toi32_i32$0 = $317$hi;
                          i64toi32_i32$1 = $324$hi;
                          $311(
                            ($6_1 + 400) | 0 | 0,
                            $16_1 | 0,
                            i64toi32_i32$3 | 0,
                            $17_1 | 0,
                            i64toi32_i32$2 | 0,
                            $317_1 | 0,
                            i64toi32_i32$0 | 0,
                            $324_1 | 0,
                            i64toi32_i32$1 | 0
                          );
                          i64toi32_i32$1 = $19$hi;
                          i64toi32_i32$2 = $19_1;
                          i64toi32_i32$0 = -1;
                          i64toi32_i32$3 = -1;
                          i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                          i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                          }
                          $19_1 = i64toi32_i32$5;
                          $19$hi = i64toi32_i32$4;
                          i64toi32_i32$1 = ((($6_1 + 400) | 0) + 8) | 0;
                          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                          $17_1 = i64toi32_i32$4;
                          $17$hi = i64toi32_i32$2;
                          i64toi32_i32$1 = $6_1;
                          i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 400) | 0) >> 2] | 0;
                          i64toi32_i32$4 = HEAP32[((i64toi32_i32$1 + 404) | 0) >> 2] | 0;
                          $16_1 = i64toi32_i32$2;
                          $16$hi = i64toi32_i32$4;
                          $10_1 = ($10_1 << 1) | 0 | (($7_1 | 0) > (-1 | 0)) | 0;
                          if (($10_1 | 0) > (-1 | 0)) {
                            continue label$35;
                          }
                          break label$35;
                        }
                      }
                      label$36: {
                        label$37: {
                          i64toi32_i32$4 = $19$hi;
                          i64toi32_i32$2 = $3_1;
                          i64toi32_i32$4 = (i64toi32_i32$2 >> 31) | 0;
                          $342$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = $19$hi;
                          i64toi32_i32$1 = $19_1;
                          i64toi32_i32$2 = $342$hi;
                          i64toi32_i32$3 = $3_1;
                          i64toi32_i32$0 = (i64toi32_i32$1 - i64toi32_i32$3) | 0;
                          i64toi32_i32$5 =
                            ((i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2) | 0;
                          i64toi32_i32$5 = (i64toi32_i32$4 - i64toi32_i32$5) | 0;
                          i64toi32_i32$4 = i64toi32_i32$0;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$3 = 32;
                          i64toi32_i32$2 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                          i64toi32_i32$0 = (i64toi32_i32$5 + i64toi32_i32$1) | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                          }
                          $14_1 = i64toi32_i32$2;
                          $14$hi = i64toi32_i32$0;
                          $7_1 = i64toi32_i32$2;
                          $350_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
                          $351_1 = $2_1;
                          i64toi32_i32$0 = 0;
                          $354$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $14$hi;
                          i64toi32_i32$5 = i64toi32_i32$2;
                          i64toi32_i32$4 = $354$hi;
                          i64toi32_i32$3 = $2_1;
                          if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
                            $122_1 = 1;
                          } else {
                            if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
                              if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                                $123_1 = 0;
                              } else {
                                $123_1 = 1;
                              }
                              $124_1 = $123_1;
                            } else {
                              $124_1 = 0;
                            }
                            $122_1 = $124_1;
                          }
                          $7_1 = $122_1 ? $350_1 : $351_1;
                          if (($7_1 | 0) < (113 | 0)) {
                            break label$37;
                          }
                          $306(($6_1 + 384) | 0 | 0, $4_1 | 0);
                          i64toi32_i32$3 = ($6_1 + 392) | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                          $14_1 = i64toi32_i32$5;
                          $14$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = 0;
                          $15_1 = 0;
                          $15$hi = i64toi32_i32$0;
                          i64toi32_i32$3 = $6_1;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 384) | 0) >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 388) | 0) >> 2] | 0;
                          $18_1 = i64toi32_i32$0;
                          $18$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = 0;
                          $20_1 = 0;
                          $20$hi = i64toi32_i32$5;
                          break label$36;
                        }
                        $312(($6_1 + 352) | 0 | 0, +(+$1705(+1.0, (144 - $7_1) | 0 | 0)));
                        $306(($6_1 + 336) | 0 | 0, $4_1 | 0);
                        i64toi32_i32$3 = $6_1;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 352) | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 356) | 0) >> 2] | 0;
                        $378_1 = i64toi32_i32$5;
                        $378$hi = i64toi32_i32$0;
                        i64toi32_i32$3 = (((i64toi32_i32$3 + 352) | 0) + 8) | 0;
                        i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                        $382_1 = i64toi32_i32$0;
                        $382$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $6_1;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 336) | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 340) | 0) >> 2] | 0;
                        $18_1 = i64toi32_i32$5;
                        $18$hi = i64toi32_i32$0;
                        i64toi32_i32$3 = (((i64toi32_i32$3 + 336) | 0) + 8) | 0;
                        i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                        i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                        $14_1 = i64toi32_i32$0;
                        $14$hi = i64toi32_i32$5;
                        i64toi32_i32$5 = $378$hi;
                        i64toi32_i32$0 = $382$hi;
                        i64toi32_i32$3 = $18$hi;
                        i64toi32_i32$4 = $14$hi;
                        $315(
                          ($6_1 + 368) | 0 | 0,
                          $378_1 | 0,
                          i64toi32_i32$5 | 0,
                          $382_1 | 0,
                          i64toi32_i32$0 | 0,
                          $18_1 | 0,
                          i64toi32_i32$3 | 0,
                          $14_1 | 0,
                          i64toi32_i32$4 | 0
                        );
                        i64toi32_i32$0 = $6_1;
                        i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 376) | 0) >> 2] | 0;
                        i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 380) | 0) >> 2] | 0;
                        $20_1 = i64toi32_i32$4;
                        $20$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 368) | 0) >> 2] | 0;
                        i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 372) | 0) >> 2] | 0;
                        $15_1 = i64toi32_i32$3;
                        $15$hi = i64toi32_i32$4;
                      }
                      i64toi32_i32$4 = $16$hi;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$4 = $16$hi;
                      i64toi32_i32$3 = $17$hi;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$5 = 0;
                      $7_1 =
                        (!(($10_1 & 1) | 0) &
                          (((($313(
                            $16_1 | 0,
                            i64toi32_i32$4 | 0,
                            $17_1 | 0,
                            i64toi32_i32$3 | 0,
                            0 | 0,
                            i64toi32_i32$0 | 0,
                            0 | 0,
                            i64toi32_i32$5 | 0
                          ) |
                            0 |
                            0) !=
                            (0 | 0)) &
                            (($7_1 | 0) < (32 | 0))) |
                            0)) |
                        0;
                      $316(($6_1 + 320) | 0 | 0, ($10_1 + $7_1) | 0 | 0);
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$5 = $14$hi;
                      i64toi32_i32$3 = $6_1;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 320) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 324) | 0) >> 2] | 0;
                      $416_1 = i64toi32_i32$5;
                      $416$hi = i64toi32_i32$0;
                      i64toi32_i32$3 = (((i64toi32_i32$3 + 320) | 0) + 8) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                      $420_1 = i64toi32_i32$0;
                      $420$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $18$hi;
                      i64toi32_i32$0 = $14$hi;
                      i64toi32_i32$3 = $416$hi;
                      i64toi32_i32$4 = $420$hi;
                      $308(
                        ($6_1 + 304) | 0 | 0,
                        $18_1 | 0,
                        i64toi32_i32$5 | 0,
                        $14_1 | 0,
                        i64toi32_i32$0 | 0,
                        $416_1 | 0,
                        i64toi32_i32$3 | 0,
                        $420_1 | 0,
                        i64toi32_i32$4 | 0
                      );
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 304) | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 308) | 0) >> 2] | 0;
                      $424_1 = i64toi32_i32$4;
                      $424$hi = i64toi32_i32$3;
                      i64toi32_i32$0 = (((i64toi32_i32$0 + 304) | 0) + 8) | 0;
                      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                      i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                      $428_1 = i64toi32_i32$3;
                      $428$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $15$hi;
                      i64toi32_i32$4 = $20$hi;
                      i64toi32_i32$4 = $424$hi;
                      i64toi32_i32$3 = $428$hi;
                      i64toi32_i32$0 = $15$hi;
                      i64toi32_i32$5 = $20$hi;
                      $311(
                        ($6_1 + 272) | 0 | 0,
                        $424_1 | 0,
                        i64toi32_i32$4 | 0,
                        $428_1 | 0,
                        i64toi32_i32$3 | 0,
                        $15_1 | 0,
                        i64toi32_i32$0 | 0,
                        $20_1 | 0,
                        i64toi32_i32$5 | 0
                      );
                      i64toi32_i32$5 = $16$hi;
                      i64toi32_i32$1 = $7_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$0 = $16$hi;
                      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
                      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
                      $435_1 = i64toi32_i32$4;
                      $435$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $17$hi;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$4 = $17$hi;
                      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
                      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
                      $438_1 = i64toi32_i32$5;
                      $438$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $18$hi;
                      i64toi32_i32$1 = $14$hi;
                      i64toi32_i32$1 = $435$hi;
                      i64toi32_i32$5 = $438$hi;
                      i64toi32_i32$0 = $18$hi;
                      i64toi32_i32$3 = $14$hi;
                      $308(
                        ($6_1 + 288) | 0 | 0,
                        $435_1 | 0,
                        i64toi32_i32$1 | 0,
                        $438_1 | 0,
                        i64toi32_i32$5 | 0,
                        $18_1 | 0,
                        i64toi32_i32$0 | 0,
                        $14_1 | 0,
                        i64toi32_i32$3 | 0
                      );
                      i64toi32_i32$5 = $6_1;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 288) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 292) | 0) >> 2] | 0;
                      $444_1 = i64toi32_i32$3;
                      $444$hi = i64toi32_i32$0;
                      i64toi32_i32$5 = (((i64toi32_i32$5 + 288) | 0) + 8) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                      $448_1 = i64toi32_i32$0;
                      $448$hi = i64toi32_i32$3;
                      i64toi32_i32$5 = $6_1;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 272) | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 276) | 0) >> 2] | 0;
                      $450_1 = i64toi32_i32$3;
                      $450$hi = i64toi32_i32$0;
                      i64toi32_i32$5 = (((i64toi32_i32$5 + 272) | 0) + 8) | 0;
                      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                      $454_1 = i64toi32_i32$0;
                      $454$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $444$hi;
                      i64toi32_i32$0 = $448$hi;
                      i64toi32_i32$5 = $450$hi;
                      i64toi32_i32$1 = $454$hi;
                      $311(
                        ($6_1 + 256) | 0 | 0,
                        $444_1 | 0,
                        i64toi32_i32$3 | 0,
                        $448_1 | 0,
                        i64toi32_i32$0 | 0,
                        $450_1 | 0,
                        i64toi32_i32$5 | 0,
                        $454_1 | 0,
                        i64toi32_i32$1 | 0
                      );
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 256) | 0) >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 260) | 0) >> 2] | 0;
                      $458_1 = i64toi32_i32$1;
                      $458$hi = i64toi32_i32$5;
                      i64toi32_i32$0 = (((i64toi32_i32$0 + 256) | 0) + 8) | 0;
                      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                      $462_1 = i64toi32_i32$5;
                      $462$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $15$hi;
                      i64toi32_i32$1 = $20$hi;
                      i64toi32_i32$1 = $458$hi;
                      i64toi32_i32$5 = $462$hi;
                      i64toi32_i32$0 = $15$hi;
                      i64toi32_i32$3 = $20$hi;
                      $317(
                        ($6_1 + 240) | 0 | 0,
                        $458_1 | 0,
                        i64toi32_i32$1 | 0,
                        $462_1 | 0,
                        i64toi32_i32$5 | 0,
                        $15_1 | 0,
                        i64toi32_i32$0 | 0,
                        $20_1 | 0,
                        i64toi32_i32$3 | 0
                      );
                      label$38: {
                        i64toi32_i32$5 = $6_1;
                        i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 240) | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[((i64toi32_i32$5 + 244) | 0) >> 2] | 0;
                        $16_1 = i64toi32_i32$3;
                        $16$hi = i64toi32_i32$0;
                        i64toi32_i32$5 = (((i64toi32_i32$5 + 240) | 0) + 8) | 0;
                        i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                        i64toi32_i32$3 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                        $17_1 = i64toi32_i32$0;
                        $17$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $16$hi;
                        i64toi32_i32$0 = $17$hi;
                        i64toi32_i32$5 = 0;
                        i64toi32_i32$1 = 0;
                        if (
                          $313(
                            $16_1 | 0,
                            i64toi32_i32$3 | 0,
                            $17_1 | 0,
                            i64toi32_i32$0 | 0,
                            0 | 0,
                            i64toi32_i32$5 | 0,
                            0 | 0,
                            i64toi32_i32$1 | 0
                          ) | 0
                        ) {
                          break label$38;
                        }
                        HEAP32[($305() | 0) >> 2] = 68;
                      }
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$1 = $17$hi;
                      i64toi32_i32$1 = $19$hi;
                      i64toi32_i32$1 = $16$hi;
                      i64toi32_i32$5 = $17$hi;
                      $318(
                        ($6_1 + 224) | 0 | 0,
                        $16_1 | 0,
                        i64toi32_i32$1 | 0,
                        $17_1 | 0,
                        i64toi32_i32$5 | 0,
                        $19_1 | 0
                      );
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 232) | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 236) | 0) >> 2] | 0;
                      $19_1 = i64toi32_i32$5;
                      $19$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 224) | 0) >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 228) | 0) >> 2] | 0;
                      $16_1 = i64toi32_i32$1;
                      $16$hi = i64toi32_i32$5;
                      break label$21;
                    }
                    HEAP32[($305() | 0) >> 2] = 68;
                    $306(($6_1 + 208) | 0 | 0, $4_1 | 0);
                    i64toi32_i32$0 = $6_1;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 208) | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 212) | 0) >> 2] | 0;
                    $492_1 = i64toi32_i32$5;
                    $492$hi = i64toi32_i32$1;
                    i64toi32_i32$0 = (((i64toi32_i32$0 + 208) | 0) + 8) | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                    $496_1 = i64toi32_i32$1;
                    $496$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $492$hi;
                    i64toi32_i32$1 = $496$hi;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$3 = 65536;
                    $308(
                      ($6_1 + 192) | 0 | 0,
                      $492_1 | 0,
                      i64toi32_i32$5 | 0,
                      $496_1 | 0,
                      i64toi32_i32$1 | 0,
                      0 | 0,
                      i64toi32_i32$0 | 0,
                      0 | 0,
                      i64toi32_i32$3 | 0
                    );
                    i64toi32_i32$1 = $6_1;
                    i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 192) | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[((i64toi32_i32$1 + 196) | 0) >> 2] | 0;
                    $500_1 = i64toi32_i32$3;
                    $500$hi = i64toi32_i32$0;
                    i64toi32_i32$1 = (((i64toi32_i32$1 + 192) | 0) + 8) | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                    i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                    $504_1 = i64toi32_i32$0;
                    $504$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $500$hi;
                    i64toi32_i32$0 = $504$hi;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$5 = 65536;
                    $308(
                      ($6_1 + 176) | 0 | 0,
                      $500_1 | 0,
                      i64toi32_i32$3 | 0,
                      $504_1 | 0,
                      i64toi32_i32$0 | 0,
                      0 | 0,
                      i64toi32_i32$1 | 0,
                      0 | 0,
                      i64toi32_i32$5 | 0
                    );
                    i64toi32_i32$0 = ((($6_1 + 176) | 0) + 8) | 0;
                    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                    $19_1 = i64toi32_i32$5;
                    $19$hi = i64toi32_i32$1;
                    i64toi32_i32$0 = $6_1;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 176) | 0) >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 180) | 0) >> 2] | 0;
                    $16_1 = i64toi32_i32$1;
                    $16$hi = i64toi32_i32$5;
                    break label$21;
                  }
                  i64toi32_i32$5 = 0;
                  $299($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
                }
                $312(($6_1 + 96) | 0 | 0, +(+($4_1 | 0) * 0.0));
                i64toi32_i32$0 = ($6_1 + 104) | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                $19_1 = i64toi32_i32$5;
                $19$hi = i64toi32_i32$1;
                i64toi32_i32$0 = $6_1;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$0 + 96) | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 100) | 0) >> 2] | 0;
                $16_1 = i64toi32_i32$1;
                $16$hi = i64toi32_i32$5;
              }
              i64toi32_i32$5 = $16$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[i64toi32_i32$1 >> 2] = $16_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$5;
              i64toi32_i32$5 = $19$hi;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $19_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$5;
              global$0 = ($6_1 + 432) | 0;
            }

            function $324($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var i64toi32_i32$4 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$1 = 0,
                $7_1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                $19$hi = 0,
                $14_1 = 0,
                $19_1 = 0,
                $20$hi = 0,
                i64toi32_i32$0 = 0,
                $11_1 = 0,
                $13_1 = 0,
                $20_1 = 0,
                $15_1 = 0,
                $8_1 = 0,
                $22$hi = 0,
                $16_1 = 0,
                $21$hi = 0,
                $22_1 = 0,
                $21_1 = 0,
                $12_1 = 0,
                $17_1 = 0,
                $23$hi = 0,
                $24$hi = 0,
                $23_1 = 0,
                $24_1 = 0,
                $9_1 = 0,
                $168_1 = 0,
                $169_1 = 0,
                $170_1 = 0,
                $171_1 = 0,
                $172_1 = 0,
                $173_1 = 0,
                $174_1 = 0,
                $175_1 = 0,
                $176_1 = 0,
                $177_1 = 0,
                $18_1 = 0,
                $25_1 = 0.0,
                $10_1 = 0,
                $127_1 = 0,
                $233_1 = 0,
                $233$hi = 0,
                $237_1 = 0,
                $237$hi = 0,
                $239_1 = 0,
                $239$hi = 0,
                $243_1 = 0,
                $243$hi = 0,
                $253$hi = 0,
                $262_1 = 0,
                $262$hi = 0,
                $266_1 = 0,
                $266$hi = 0,
                $270_1 = 0,
                $270$hi = 0,
                $274_1 = 0,
                $274$hi = 0,
                $284_1 = 0,
                $284$hi = 0,
                $293_1 = 0,
                $293$hi = 0,
                $297_1 = 0,
                $297$hi = 0,
                $301_1 = 0,
                $301$hi = 0,
                $305_1 = 0,
                $305$hi = 0,
                $354_1 = 0,
                $354$hi = 0,
                $358_1 = 0,
                $358$hi = 0,
                $360_1 = 0,
                $360$hi = 0,
                $364_1 = 0,
                $364$hi = 0,
                $383_1 = 0,
                $383$hi = 0,
                $387_1 = 0,
                $387$hi = 0,
                $389_1 = 0,
                $389$hi = 0,
                $393_1 = 0,
                $393$hi = 0,
                $404_1 = 0,
                $404$hi = 0,
                $408_1 = 0,
                $408$hi = 0,
                $410_1 = 0,
                $410$hi = 0,
                $414_1 = 0,
                $414$hi = 0,
                $442_1 = 0,
                $442$hi = 0,
                $446_1 = 0,
                $446$hi = 0,
                $448_1 = 0,
                $448$hi = 0,
                $452_1 = 0,
                $452$hi = 0,
                $462_1 = 0,
                $462$hi = 0,
                $466_1 = 0,
                $466$hi = 0,
                $468_1 = 0,
                $468$hi = 0,
                $472_1 = 0,
                $472$hi = 0,
                $511_1 = 0,
                $588$hi = 0,
                $590$hi = 0,
                $598_1 = 0,
                $598$hi = 0,
                $736_1 = 0,
                $736$hi = 0,
                $740_1 = 0,
                $740$hi = 0,
                $742_1 = 0,
                $742$hi = 0,
                $746_1 = 0,
                $746$hi = 0,
                $765_1 = 0,
                $765$hi = 0,
                $769_1 = 0,
                $769$hi = 0,
                $814_1 = 0,
                $876_1 = 0,
                $876$hi = 0,
                $880_1 = 0,
                $880$hi = 0,
                $897_1 = 0,
                $897$hi = 0,
                $901_1 = 0,
                $901$hi = 0,
                $917_1 = 0,
                $917$hi = 0,
                $921_1 = 0,
                $921$hi = 0,
                $958_1 = 0,
                $958$hi = 0,
                $962_1 = 0,
                $962$hi = 0,
                $981_1 = 0,
                $981$hi = 0,
                $985_1 = 0,
                $985$hi = 0,
                $1008_1 = 0,
                $1008$hi = 0,
                $1012_1 = 0,
                $1012$hi = 0,
                $1028_1 = 0,
                $1028$hi = 0,
                $1032_1 = 0,
                $1032$hi = 0,
                $1046_1 = 0,
                $1046$hi = 0,
                $1048_1 = 0,
                $1048$hi = 0,
                $1068_1 = 0,
                $1068$hi = 0,
                $1072_1 = 0,
                $1072$hi = 0,
                $1095_1 = 0,
                $1095$hi = 0,
                $1097_1 = 0,
                $1097$hi = 0,
                $1103_1 = 0,
                $1103$hi = 0,
                $1110_1 = 0,
                $1110$hi = 0;
              $7_1 = (global$0 - 8976) | 0;
              global$0 = $7_1;
              $8_1 = 0;
              $9_1 = ($4_1 + $3_1) | 0;
              $10_1 = (0 - $9_1) | 0;
              i64toi32_i32$0 = 0;
              $19_1 = 0;
              $19$hi = i64toi32_i32$0;
              $11_1 = 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: while (1) {
                      label$5: {
                        if (($2_1 | 0) == (48 | 0)) {
                          break label$5;
                        }
                        if (($2_1 | 0) != (46 | 0)) {
                          break label$1;
                        }
                        $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$3;
                        }
                        HEAP32[(($1_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                        $2_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$2;
                      }
                      label$6: {
                        $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$6;
                        }
                        $11_1 = 1;
                        HEAP32[(($1_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                        $2_1 = HEAPU8[$2_1 >> 0] | 0;
                        continue label$4;
                      }
                      $11_1 = 1;
                      $2_1 = $300($1_1 | 0) | 0;
                      continue label$4;
                    }
                  }
                  $2_1 = $300($1_1 | 0) | 0;
                }
                $8_1 = 1;
                i64toi32_i32$0 = 0;
                $19_1 = 0;
                $19$hi = i64toi32_i32$0;
                if (($2_1 | 0) != (48 | 0)) {
                  break label$1;
                }
                label$7: while (1) {
                  label$8: {
                    label$9: {
                      $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                        break label$9;
                      }
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                      break label$8;
                    }
                    $2_1 = $300($1_1 | 0) | 0;
                  }
                  i64toi32_i32$0 = $19$hi;
                  i64toi32_i32$2 = $19_1;
                  i64toi32_i32$1 = -1;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  $19_1 = i64toi32_i32$4;
                  $19$hi = i64toi32_i32$5;
                  if (($2_1 | 0) == (48 | 0)) {
                    continue label$7;
                  }
                  break label$7;
                }
                $11_1 = 1;
                $8_1 = 1;
              }
              $12_1 = 0;
              HEAP32[(($7_1 + 784) | 0) >> 2] = 0;
              $13_1 = ($2_1 + -48) | 0;
              label$10: {
                label$11: {
                  label$12: {
                    label$13: {
                      label$14: {
                        label$15: {
                          label$16: {
                            $14_1 = ($2_1 | 0) == (46 | 0);
                            if ($14_1) {
                              break label$16;
                            }
                            i64toi32_i32$5 = 0;
                            $20_1 = 0;
                            $20$hi = i64toi32_i32$5;
                            if ($13_1 >>> 0 <= 9 >>> 0) {
                              break label$16;
                            }
                            $15_1 = 0;
                            $16_1 = 0;
                            break label$15;
                          }
                          i64toi32_i32$5 = 0;
                          $20_1 = 0;
                          $20$hi = i64toi32_i32$5;
                          $16_1 = 0;
                          $15_1 = 0;
                          $12_1 = 0;
                          label$17: while (1) {
                            label$18: {
                              label$19: {
                                if (!(($14_1 & 1) | 0)) {
                                  break label$19;
                                }
                                label$20: {
                                  if ($8_1) {
                                    break label$20;
                                  }
                                  i64toi32_i32$5 = $20$hi;
                                  $19_1 = $20_1;
                                  $19$hi = i64toi32_i32$5;
                                  $8_1 = 1;
                                  break label$18;
                                }
                                $14_1 = !$11_1;
                                break label$14;
                              }
                              i64toi32_i32$5 = $20$hi;
                              i64toi32_i32$0 = $20_1;
                              i64toi32_i32$2 = 0;
                              i64toi32_i32$3 = 1;
                              i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                              i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                              }
                              $20_1 = i64toi32_i32$1;
                              $20$hi = i64toi32_i32$4;
                              label$21: {
                                if (($15_1 | 0) > (2044 | 0)) {
                                  break label$21;
                                }
                                $11_1 = ($2_1 | 0) == (48 | 0);
                                i64toi32_i32$4 = $20$hi;
                                $17_1 = $20_1;
                                $14_1 = ((($7_1 + 784) | 0) + (($15_1 << 2) | 0)) | 0;
                                label$22: {
                                  if (!$16_1) {
                                    break label$22;
                                  }
                                  $13_1 = ((($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10)) | 0) + -48) | 0;
                                }
                                $12_1 = $11_1 ? $12_1 : $17_1;
                                HEAP32[$14_1 >> 2] = $13_1;
                                $11_1 = 1;
                                $2_1 = ($16_1 + 1) | 0;
                                $127_1 = $2_1;
                                $2_1 = ($2_1 | 0) == (9 | 0);
                                $16_1 = $2_1 ? 0 : $127_1;
                                $15_1 = ($15_1 + $2_1) | 0;
                                break label$18;
                              }
                              if (($2_1 | 0) == (48 | 0)) {
                                break label$18;
                              }
                              HEAP32[(($7_1 + 8960) | 0) >> 2] = HEAP32[(($7_1 + 8960) | 0) >> 2] | 0 | 1 | 0;
                              $12_1 = 18396;
                            }
                            label$23: {
                              label$24: {
                                $2_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                                if ($2_1 >>> 0 >= (HEAP32[(($1_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                  break label$24;
                                }
                                HEAP32[(($1_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                                $2_1 = HEAPU8[$2_1 >> 0] | 0;
                                break label$23;
                              }
                              $2_1 = $300($1_1 | 0) | 0;
                            }
                            $13_1 = ($2_1 + -48) | 0;
                            $14_1 = ($2_1 | 0) == (46 | 0);
                            if ($14_1) {
                              continue label$17;
                            }
                            if ($13_1 >>> 0 < 10 >>> 0) {
                              continue label$17;
                            }
                            break label$17;
                          }
                        }
                        i64toi32_i32$4 = $19$hi;
                        i64toi32_i32$4 = $20$hi;
                        i64toi32_i32$2 = $8_1;
                        i64toi32_i32$4 = $19$hi;
                        i64toi32_i32$0 = $20$hi;
                        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
                        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
                        $19_1 = i64toi32_i32$3;
                        $19$hi = i64toi32_i32$5;
                        label$25: {
                          if (!$11_1) {
                            break label$25;
                          }
                          if ((($2_1 & -33) | 0 | 0) != (69 | 0)) {
                            break label$25;
                          }
                          label$26: {
                            i64toi32_i32$5 = $325($1_1 | 0, $6_1 | 0) | 0;
                            i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                            $21_1 = i64toi32_i32$5;
                            $21$hi = i64toi32_i32$3;
                            i64toi32_i32$2 = i64toi32_i32$5;
                            i64toi32_i32$5 = -2147483648;
                            i64toi32_i32$4 = 0;
                            if (
                              ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0)) |
                              ((i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0)) |
                              0
                            ) {
                              break label$26;
                            }
                            if (!$6_1) {
                              break label$12;
                            }
                            i64toi32_i32$2 = 0;
                            $21_1 = 0;
                            $21$hi = i64toi32_i32$2;
                            if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                              break label$26;
                            }
                            HEAP32[(($1_1 + 4) | 0) >> 2] = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                          }
                          i64toi32_i32$2 = $21$hi;
                          i64toi32_i32$2 = $19$hi;
                          i64toi32_i32$2 = $21$hi;
                          i64toi32_i32$4 = $21_1;
                          i64toi32_i32$3 = $19$hi;
                          i64toi32_i32$5 = $19_1;
                          i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                          i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                            i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                          }
                          $19_1 = i64toi32_i32$0;
                          $19$hi = i64toi32_i32$1;
                          break label$11;
                        }
                        $14_1 = !$11_1;
                        if (($2_1 | 0) < (0 | 0)) {
                          break label$13;
                        }
                      }
                      if (!(HEAP32[(($1_1 + 104) | 0) >> 2] | 0)) {
                        break label$13;
                      }
                      HEAP32[(($1_1 + 4) | 0) >> 2] = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                    }
                    if (!$14_1) {
                      break label$11;
                    }
                    HEAP32[($305() | 0) >> 2] = 28;
                  }
                  i64toi32_i32$1 = 0;
                  $20_1 = 0;
                  $20$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $299($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
                  i64toi32_i32$1 = 0;
                  $19_1 = 0;
                  $19$hi = i64toi32_i32$1;
                  break label$10;
                }
                label$27: {
                  $1_1 = HEAP32[(($7_1 + 784) | 0) >> 2] | 0;
                  if ($1_1) {
                    break label$27;
                  }
                  $312($7_1 | 0, +(+($5_1 | 0) * 0.0));
                  i64toi32_i32$2 = ($7_1 + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$1;
                  $19$hi = i64toi32_i32$4;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 4) | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$4;
                  $20$hi = i64toi32_i32$1;
                  break label$10;
                }
                label$28: {
                  i64toi32_i32$1 = $20$hi;
                  i64toi32_i32$2 = $20_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$5 = 9;
                  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                    $168_1 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
                        $169_1 = 0;
                      } else {
                        $169_1 = 1;
                      }
                      $170_1 = $169_1;
                    } else {
                      $170_1 = 0;
                    }
                    $168_1 = $170_1;
                  }
                  if ($168_1) {
                    break label$28;
                  }
                  i64toi32_i32$2 = $19$hi;
                  i64toi32_i32$2 = $20$hi;
                  i64toi32_i32$2 = $19$hi;
                  i64toi32_i32$5 = $19_1;
                  i64toi32_i32$1 = $20$hi;
                  i64toi32_i32$4 = $20_1;
                  if (
                    ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0)) |
                    ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0)) |
                    0
                  ) {
                    break label$28;
                  }
                  label$29: {
                    if (($3_1 | 0) > (30 | 0)) {
                      break label$29;
                    }
                    if (($1_1 >>> $3_1) | 0) {
                      break label$28;
                    }
                  }
                  $306(($7_1 + 48) | 0 | 0, $5_1 | 0);
                  $316(($7_1 + 32) | 0 | 0, $1_1 | 0);
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 48) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 52) | 0) >> 2] | 0;
                  $233_1 = i64toi32_i32$5;
                  $233$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = (((i64toi32_i32$4 + 48) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $237_1 = i64toi32_i32$2;
                  $237$hi = i64toi32_i32$5;
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 32) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 36) | 0) >> 2] | 0;
                  $239_1 = i64toi32_i32$5;
                  $239$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = (((i64toi32_i32$4 + 32) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $243_1 = i64toi32_i32$2;
                  $243$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $233$hi;
                  i64toi32_i32$2 = $237$hi;
                  i64toi32_i32$4 = $239$hi;
                  i64toi32_i32$1 = $243$hi;
                  $308(
                    ($7_1 + 16) | 0 | 0,
                    $233_1 | 0,
                    i64toi32_i32$5 | 0,
                    $237_1 | 0,
                    i64toi32_i32$2 | 0,
                    $239_1 | 0,
                    i64toi32_i32$4 | 0,
                    $243_1 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$2 = ((($7_1 + 16) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$1;
                  $19$hi = i64toi32_i32$4;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 16) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 20) | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$4;
                  $20$hi = i64toi32_i32$1;
                  break label$10;
                }
                label$30: {
                  i64toi32_i32$1 = $19$hi;
                  i64toi32_i32$1 = 0;
                  $253$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $19$hi;
                  i64toi32_i32$2 = $19_1;
                  i64toi32_i32$4 = $253$hi;
                  i64toi32_i32$5 = (($4_1 | 0) / (-2 | 0)) | 0;
                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                    $171_1 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
                        $172_1 = 0;
                      } else {
                        $172_1 = 1;
                      }
                      $173_1 = $172_1;
                    } else {
                      $173_1 = 0;
                    }
                    $171_1 = $173_1;
                  }
                  if ($171_1) {
                    break label$30;
                  }
                  HEAP32[($305() | 0) >> 2] = 68;
                  $306(($7_1 + 96) | 0 | 0, $5_1 | 0);
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 96) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 100) | 0) >> 2] | 0;
                  $262_1 = i64toi32_i32$2;
                  $262$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (((i64toi32_i32$5 + 96) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $266_1 = i64toi32_i32$1;
                  $266$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $262$hi;
                  i64toi32_i32$1 = $266$hi;
                  i64toi32_i32$5 = -1;
                  i64toi32_i32$4 = 2147418111;
                  $308(
                    ($7_1 + 80) | 0 | 0,
                    $262_1 | 0,
                    i64toi32_i32$2 | 0,
                    $266_1 | 0,
                    i64toi32_i32$1 | 0,
                    -1 | 0,
                    i64toi32_i32$5 | 0,
                    -1 | 0,
                    i64toi32_i32$4 | 0
                  );
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$1 + 80) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 84) | 0) >> 2] | 0;
                  $270_1 = i64toi32_i32$4;
                  $270$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = (((i64toi32_i32$1 + 80) | 0) + 8) | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $274_1 = i64toi32_i32$5;
                  $274$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $270$hi;
                  i64toi32_i32$5 = $274$hi;
                  i64toi32_i32$1 = -1;
                  i64toi32_i32$2 = 2147418111;
                  $308(
                    ($7_1 + 64) | 0 | 0,
                    $270_1 | 0,
                    i64toi32_i32$4 | 0,
                    $274_1 | 0,
                    i64toi32_i32$5 | 0,
                    -1 | 0,
                    i64toi32_i32$1 | 0,
                    -1 | 0,
                    i64toi32_i32$2 | 0
                  );
                  i64toi32_i32$5 = ((($7_1 + 64) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$2;
                  $19$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 64) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$5 + 68) | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$1;
                  $20$hi = i64toi32_i32$2;
                  break label$10;
                }
                label$31: {
                  i64toi32_i32$2 = $19$hi;
                  i64toi32_i32$1 = ($4_1 + -226) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 >> 31) | 0;
                  $284_1 = i64toi32_i32$1;
                  $284$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $19$hi;
                  i64toi32_i32$5 = $19_1;
                  i64toi32_i32$1 = $284$hi;
                  i64toi32_i32$4 = $284_1;
                  if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
                    $174_1 = 1;
                  } else {
                    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                        $175_1 = 0;
                      } else {
                        $175_1 = 1;
                      }
                      $176_1 = $175_1;
                    } else {
                      $176_1 = 0;
                    }
                    $174_1 = $176_1;
                  }
                  if ($174_1) {
                    break label$31;
                  }
                  HEAP32[($305() | 0) >> 2] = 68;
                  $306(($7_1 + 144) | 0 | 0, $5_1 | 0);
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 144) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 148) | 0) >> 2] | 0;
                  $293_1 = i64toi32_i32$5;
                  $293$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = (((i64toi32_i32$4 + 144) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $297_1 = i64toi32_i32$2;
                  $297$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $293$hi;
                  i64toi32_i32$2 = $297$hi;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$1 = 65536;
                  $308(
                    ($7_1 + 128) | 0 | 0,
                    $293_1 | 0,
                    i64toi32_i32$5 | 0,
                    $297_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$4 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 128) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 132) | 0) >> 2] | 0;
                  $301_1 = i64toi32_i32$1;
                  $301$hi = i64toi32_i32$4;
                  i64toi32_i32$2 = ((($7_1 + 128) | 0) + 8) | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $305_1 = i64toi32_i32$4;
                  $305$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $301$hi;
                  i64toi32_i32$4 = $305$hi;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$5 = 65536;
                  $308(
                    ($7_1 + 112) | 0 | 0,
                    $301_1 | 0,
                    i64toi32_i32$1 | 0,
                    $305_1 | 0,
                    i64toi32_i32$4 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0
                  );
                  i64toi32_i32$4 = ((($7_1 + 112) | 0) + 8) | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$5;
                  $19$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 112) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 116) | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$2;
                  $20$hi = i64toi32_i32$5;
                  break label$10;
                }
                label$32: {
                  if (!$16_1) {
                    break label$32;
                  }
                  label$33: {
                    if (($16_1 | 0) > (8 | 0)) {
                      break label$33;
                    }
                    $2_1 = ((($7_1 + 784) | 0) + (($15_1 << 2) | 0)) | 0;
                    $1_1 = HEAP32[$2_1 >> 2] | 0;
                    label$34: while (1) {
                      $1_1 = Math_imul($1_1, 10);
                      $16_1 = ($16_1 + 1) | 0;
                      if (($16_1 | 0) != (9 | 0)) {
                        continue label$34;
                      }
                      break label$34;
                    }
                    HEAP32[$2_1 >> 2] = $1_1;
                  }
                  $15_1 = ($15_1 + 1) | 0;
                }
                i64toi32_i32$5 = $19$hi;
                $8_1 = $19_1;
                label$35: {
                  if (($12_1 | 0) >= (9 | 0)) {
                    break label$35;
                  }
                  if (($12_1 | 0) > ($8_1 | 0)) {
                    break label$35;
                  }
                  if (($8_1 | 0) > (17 | 0)) {
                    break label$35;
                  }
                  label$36: {
                    if (($8_1 | 0) != (9 | 0)) {
                      break label$36;
                    }
                    $306(($7_1 + 192) | 0 | 0, $5_1 | 0);
                    $316(($7_1 + 176) | 0 | 0, HEAP32[(($7_1 + 784) | 0) >> 2] | 0 | 0);
                    i64toi32_i32$4 = $7_1;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 192) | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 196) | 0) >> 2] | 0;
                    $354_1 = i64toi32_i32$5;
                    $354$hi = i64toi32_i32$2;
                    i64toi32_i32$4 = (((i64toi32_i32$4 + 192) | 0) + 8) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                    $358_1 = i64toi32_i32$2;
                    $358$hi = i64toi32_i32$5;
                    i64toi32_i32$4 = $7_1;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 176) | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 180) | 0) >> 2] | 0;
                    $360_1 = i64toi32_i32$5;
                    $360$hi = i64toi32_i32$2;
                    i64toi32_i32$4 = (((i64toi32_i32$4 + 176) | 0) + 8) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                    $364_1 = i64toi32_i32$2;
                    $364$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $354$hi;
                    i64toi32_i32$2 = $358$hi;
                    i64toi32_i32$4 = $360$hi;
                    i64toi32_i32$1 = $364$hi;
                    $308(
                      ($7_1 + 160) | 0 | 0,
                      $354_1 | 0,
                      i64toi32_i32$5 | 0,
                      $358_1 | 0,
                      i64toi32_i32$2 | 0,
                      $360_1 | 0,
                      i64toi32_i32$4 | 0,
                      $364_1 | 0,
                      i64toi32_i32$1 | 0
                    );
                    i64toi32_i32$2 = ((($7_1 + 160) | 0) + 8) | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$4 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                    $19_1 = i64toi32_i32$1;
                    $19$hi = i64toi32_i32$4;
                    i64toi32_i32$2 = $7_1;
                    i64toi32_i32$4 = HEAP32[(($7_1 + 160) | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(($7_1 + 164) | 0) >> 2] | 0;
                    $20_1 = i64toi32_i32$4;
                    $20$hi = i64toi32_i32$1;
                    break label$10;
                  }
                  label$37: {
                    if (($8_1 | 0) > (8 | 0)) {
                      break label$37;
                    }
                    $306(($7_1 + 272) | 0 | 0, $5_1 | 0);
                    $316(($7_1 + 256) | 0 | 0, HEAP32[(($7_1 + 784) | 0) >> 2] | 0 | 0);
                    i64toi32_i32$2 = $7_1;
                    i64toi32_i32$1 = HEAP32[(($7_1 + 272) | 0) >> 2] | 0;
                    i64toi32_i32$4 = HEAP32[(($7_1 + 276) | 0) >> 2] | 0;
                    $383_1 = i64toi32_i32$1;
                    $383$hi = i64toi32_i32$4;
                    i64toi32_i32$2 = ((($7_1 + 272) | 0) + 8) | 0;
                    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                    $387_1 = i64toi32_i32$4;
                    $387$hi = i64toi32_i32$1;
                    i64toi32_i32$2 = $7_1;
                    i64toi32_i32$1 = HEAP32[(($7_1 + 256) | 0) >> 2] | 0;
                    i64toi32_i32$4 = HEAP32[(($7_1 + 260) | 0) >> 2] | 0;
                    $389_1 = i64toi32_i32$1;
                    $389$hi = i64toi32_i32$4;
                    i64toi32_i32$2 = ((($7_1 + 256) | 0) + 8) | 0;
                    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                    $393_1 = i64toi32_i32$4;
                    $393$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $383$hi;
                    i64toi32_i32$4 = $387$hi;
                    i64toi32_i32$2 = $389$hi;
                    i64toi32_i32$5 = $393$hi;
                    $308(
                      ($7_1 + 240) | 0 | 0,
                      $383_1 | 0,
                      i64toi32_i32$1 | 0,
                      $387_1 | 0,
                      i64toi32_i32$4 | 0,
                      $389_1 | 0,
                      i64toi32_i32$2 | 0,
                      $393_1 | 0,
                      i64toi32_i32$5 | 0
                    );
                    $306(
                      ($7_1 + 224) | 0 | 0,
                      HEAP32[((((((8 - $8_1) | 0) << 2) | 0) + 3056) | 0) >> 2] | 0 | 0
                    );
                    i64toi32_i32$4 = $7_1;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 240) | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 244) | 0) >> 2] | 0;
                    $404_1 = i64toi32_i32$5;
                    $404$hi = i64toi32_i32$2;
                    i64toi32_i32$4 = (((i64toi32_i32$4 + 240) | 0) + 8) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                    $408_1 = i64toi32_i32$2;
                    $408$hi = i64toi32_i32$5;
                    i64toi32_i32$4 = $7_1;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 224) | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 228) | 0) >> 2] | 0;
                    $410_1 = i64toi32_i32$5;
                    $410$hi = i64toi32_i32$2;
                    i64toi32_i32$4 = (((i64toi32_i32$4 + 224) | 0) + 8) | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                    $414_1 = i64toi32_i32$2;
                    $414$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $404$hi;
                    i64toi32_i32$2 = $408$hi;
                    i64toi32_i32$4 = $410$hi;
                    i64toi32_i32$1 = $414$hi;
                    $320(
                      ($7_1 + 208) | 0 | 0,
                      $404_1 | 0,
                      i64toi32_i32$5 | 0,
                      $408_1 | 0,
                      i64toi32_i32$2 | 0,
                      $410_1 | 0,
                      i64toi32_i32$4 | 0,
                      $414_1 | 0,
                      i64toi32_i32$1 | 0
                    );
                    i64toi32_i32$2 = ((($7_1 + 208) | 0) + 8) | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$4 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                    $19_1 = i64toi32_i32$1;
                    $19$hi = i64toi32_i32$4;
                    i64toi32_i32$2 = $7_1;
                    i64toi32_i32$4 = HEAP32[(($7_1 + 208) | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(($7_1 + 212) | 0) >> 2] | 0;
                    $20_1 = i64toi32_i32$4;
                    $20$hi = i64toi32_i32$1;
                    break label$10;
                  }
                  $1_1 = HEAP32[(($7_1 + 784) | 0) >> 2] | 0;
                  label$38: {
                    $2_1 = ((($3_1 + Math_imul($8_1, -3)) | 0) + 27) | 0;
                    if (($2_1 | 0) > (30 | 0)) {
                      break label$38;
                    }
                    if (($1_1 >>> $2_1) | 0) {
                      break label$35;
                    }
                  }
                  $306(($7_1 + 352) | 0 | 0, $5_1 | 0);
                  $316(($7_1 + 336) | 0 | 0, $1_1 | 0);
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 352) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 356) | 0) >> 2] | 0;
                  $442_1 = i64toi32_i32$1;
                  $442$hi = i64toi32_i32$4;
                  i64toi32_i32$2 = ((($7_1 + 352) | 0) + 8) | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $446_1 = i64toi32_i32$4;
                  $446$hi = i64toi32_i32$1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 336) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 340) | 0) >> 2] | 0;
                  $448_1 = i64toi32_i32$1;
                  $448$hi = i64toi32_i32$4;
                  i64toi32_i32$2 = ((($7_1 + 336) | 0) + 8) | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $452_1 = i64toi32_i32$4;
                  $452$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $442$hi;
                  i64toi32_i32$4 = $446$hi;
                  i64toi32_i32$2 = $448$hi;
                  i64toi32_i32$5 = $452$hi;
                  $308(
                    ($7_1 + 320) | 0 | 0,
                    $442_1 | 0,
                    i64toi32_i32$1 | 0,
                    $446_1 | 0,
                    i64toi32_i32$4 | 0,
                    $448_1 | 0,
                    i64toi32_i32$2 | 0,
                    $452_1 | 0,
                    i64toi32_i32$5 | 0
                  );
                  $306(($7_1 + 304) | 0 | 0, HEAP32[(((($8_1 << 2) | 0) + 3016) | 0) >> 2] | 0 | 0);
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 320) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 324) | 0) >> 2] | 0;
                  $462_1 = i64toi32_i32$5;
                  $462$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = (((i64toi32_i32$4 + 320) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $466_1 = i64toi32_i32$2;
                  $466$hi = i64toi32_i32$5;
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 304) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$4 + 308) | 0) >> 2] | 0;
                  $468_1 = i64toi32_i32$5;
                  $468$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = (((i64toi32_i32$4 + 304) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                  $472_1 = i64toi32_i32$2;
                  $472$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $462$hi;
                  i64toi32_i32$2 = $466$hi;
                  i64toi32_i32$4 = $468$hi;
                  i64toi32_i32$1 = $472$hi;
                  $308(
                    ($7_1 + 288) | 0 | 0,
                    $462_1 | 0,
                    i64toi32_i32$5 | 0,
                    $466_1 | 0,
                    i64toi32_i32$2 | 0,
                    $468_1 | 0,
                    i64toi32_i32$4 | 0,
                    $472_1 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$2 = ((($7_1 + 288) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$1;
                  $19$hi = i64toi32_i32$4;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 288) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 292) | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$4;
                  $20$hi = i64toi32_i32$1;
                  break label$10;
                }
                label$39: while (1) {
                  $2_1 = $15_1;
                  $15_1 = ($2_1 + -1) | 0;
                  if (!(HEAP32[(((($7_1 + 784) | 0) + (($15_1 << 2) | 0)) | 0) >> 2] | 0)) {
                    continue label$39;
                  }
                  break label$39;
                }
                $16_1 = 0;
                label$40: {
                  label$41: {
                    $1_1 = ($8_1 | 0) % (9 | 0) | 0;
                    if ($1_1) {
                      break label$41;
                    }
                    $14_1 = 0;
                    break label$40;
                  }
                  $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : ($1_1 + 9) | 0;
                  label$42: {
                    label$43: {
                      if ($2_1) {
                        break label$43;
                      }
                      $14_1 = 0;
                      $2_1 = 0;
                      break label$42;
                    }
                    $11_1 = HEAP32[((((((8 - $6_1) | 0) << 2) | 0) + 3056) | 0) >> 2] | 0;
                    $17_1 = ((1e9 | 0) / ($11_1 | 0)) | 0;
                    $13_1 = 0;
                    $1_1 = 0;
                    $14_1 = 0;
                    label$44: while (1) {
                      $15_1 = ((($7_1 + 784) | 0) + (($1_1 << 2) | 0)) | 0;
                      $511_1 = $15_1;
                      $15_1 = HEAP32[$15_1 >> 2] | 0;
                      $12_1 = (($15_1 >>> 0) / ($11_1 >>> 0)) | 0;
                      $13_1 = ($12_1 + $13_1) | 0;
                      HEAP32[$511_1 >> 2] = $13_1;
                      $13_1 = ((($1_1 | 0) == ($14_1 | 0)) & !$13_1) | 0;
                      $14_1 = $13_1 ? ((($14_1 + 1) | 0) & 2047) | 0 : $14_1;
                      $8_1 = $13_1 ? ($8_1 + -9) | 0 : $8_1;
                      $13_1 = Math_imul($17_1, ($15_1 - Math_imul($12_1, $11_1)) | 0);
                      $1_1 = ($1_1 + 1) | 0;
                      if (($1_1 | 0) != ($2_1 | 0)) {
                        continue label$44;
                      }
                      break label$44;
                    }
                    if (!$13_1) {
                      break label$42;
                    }
                    HEAP32[(((($7_1 + 784) | 0) + (($2_1 << 2) | 0)) | 0) >> 2] = $13_1;
                    $2_1 = ($2_1 + 1) | 0;
                  }
                  $8_1 = ((($8_1 - $6_1) | 0) + 9) | 0;
                }
                label$45: {
                  label$46: while (1) {
                    label$47: {
                      if (($8_1 | 0) < (36 | 0)) {
                        break label$47;
                      }
                      if (($8_1 | 0) != (36 | 0)) {
                        break label$45;
                      }
                      if (
                        (HEAP32[(((($7_1 + 784) | 0) + (($14_1 << 2) | 0)) | 0) >> 2] | 0) >>> 0 >=
                        10384593 >>> 0
                      ) {
                        break label$45;
                      }
                    }
                    $15_1 = ($2_1 + 2047) | 0;
                    $13_1 = 0;
                    $11_1 = $2_1;
                    label$48: while (1) {
                      $2_1 = $11_1;
                      label$49: {
                        label$50: {
                          $1_1 = ($15_1 & 2047) | 0;
                          $11_1 = ((($7_1 + 784) | 0) + (($1_1 << 2) | 0)) | 0;
                          i64toi32_i32$2 = $11_1;
                          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                          i64toi32_i32$4 = 0;
                          i64toi32_i32$2 = i64toi32_i32$1;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$5 = 29;
                          i64toi32_i32$3 = (i64toi32_i32$5 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                            i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                            $177_1 = 0;
                          } else {
                            i64toi32_i32$1 =
                              (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                                ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                              0 |
                              ((i64toi32_i32$4 << i64toi32_i32$3) | 0) |
                              0;
                            $177_1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                          }
                          $588$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = 0;
                          $590$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $588$hi;
                          i64toi32_i32$4 = $177_1;
                          i64toi32_i32$2 = $590$hi;
                          i64toi32_i32$5 = $13_1;
                          i64toi32_i32$3 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                          i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                            i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                          }
                          $19_1 = i64toi32_i32$3;
                          $19$hi = i64toi32_i32$0;
                          i64toi32_i32$1 = i64toi32_i32$3;
                          i64toi32_i32$4 = 0;
                          i64toi32_i32$5 = 1000000001;
                          if (
                            (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0) |
                            ((((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0)) &
                              (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0)) |
                              0) |
                            0
                          ) {
                            break label$50;
                          }
                          $13_1 = 0;
                          break label$49;
                        }
                        i64toi32_i32$1 = $19$hi;
                        i64toi32_i32$0 = 0;
                        i64toi32_i32$0 =
                          __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                        $20_1 = i64toi32_i32$0;
                        $20$hi = i64toi32_i32$1;
                        i64toi32_i32$0 = 0;
                        i64toi32_i32$0 =
                          __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                        $598_1 = i64toi32_i32$0;
                        $598$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = $19$hi;
                        i64toi32_i32$5 = $19_1;
                        i64toi32_i32$0 = $598$hi;
                        i64toi32_i32$4 = $598_1;
                        i64toi32_i32$2 = (i64toi32_i32$5 - i64toi32_i32$4) | 0;
                        i64toi32_i32$3 = ((i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0) | 0;
                        i64toi32_i32$3 = (i64toi32_i32$1 - i64toi32_i32$3) | 0;
                        $19_1 = i64toi32_i32$2;
                        $19$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $20$hi;
                        $13_1 = $20_1;
                      }
                      i64toi32_i32$3 = $19$hi;
                      $15_1 = $19_1;
                      HEAP32[$11_1 >> 2] = $15_1;
                      $11_1 =
                        ($1_1 | 0) != (((($2_1 + -1) | 0) & 2047) | 0 | 0)
                          ? $2_1
                          : ($1_1 | 0) == ($14_1 | 0)
                          ? $2_1
                          : $15_1
                          ? $2_1
                          : $1_1;
                      $15_1 = ($1_1 + -1) | 0;
                      if (($1_1 | 0) != ($14_1 | 0)) {
                        continue label$48;
                      }
                      break label$48;
                    }
                    $16_1 = ($16_1 + -29) | 0;
                    if (!$13_1) {
                      continue label$46;
                    }
                    label$51: {
                      $14_1 = ((($14_1 + -1) | 0) & 2047) | 0;
                      if (($14_1 | 0) != ($11_1 | 0)) {
                        break label$51;
                      }
                      $1_1 = ((($7_1 + 784) | 0) + (((((($11_1 + 2046) | 0) & 2047) | 0) << 2) | 0)) | 0;
                      $2_1 = ((($11_1 + -1) | 0) & 2047) | 0;
                      HEAP32[$1_1 >> 2] =
                        HEAP32[$1_1 >> 2] |
                        0 |
                        (HEAP32[(((($7_1 + 784) | 0) + (($2_1 << 2) | 0)) | 0) >> 2] | 0) |
                        0;
                    }
                    $8_1 = ($8_1 + 9) | 0;
                    HEAP32[(((($7_1 + 784) | 0) + (($14_1 << 2) | 0)) | 0) >> 2] = $13_1;
                    continue label$46;
                  }
                }
                label$52: {
                  label$53: while (1) {
                    $6_1 = ((($2_1 + 1) | 0) & 2047) | 0;
                    $18_1 = ((($7_1 + 784) | 0) + (((((($2_1 + -1) | 0) & 2047) | 0) << 2) | 0)) | 0;
                    label$54: while (1) {
                      $11_1 = $14_1;
                      $1_1 = 0;
                      label$55: {
                        label$56: {
                          label$57: {
                            label$58: while (1) {
                              $14_1 = ((($1_1 + $11_1) | 0) & 2047) | 0;
                              if (($14_1 | 0) == ($2_1 | 0)) {
                                break label$57;
                              }
                              $14_1 = HEAP32[(((($7_1 + 784) | 0) + (($14_1 << 2) | 0)) | 0) >> 2] | 0;
                              $13_1 = HEAP32[(((($1_1 << 2) | 0) + 3040) | 0) >> 2] | 0;
                              if ($14_1 >>> 0 < $13_1 >>> 0) {
                                break label$57;
                              }
                              if ($14_1 >>> 0 > $13_1 >>> 0) {
                                break label$56;
                              }
                              $1_1 = ($1_1 + 1) | 0;
                              if (($1_1 | 0) != (4 | 0)) {
                                continue label$58;
                              }
                              break label$58;
                            }
                          }
                          if (($8_1 | 0) != (36 | 0)) {
                            break label$56;
                          }
                          i64toi32_i32$3 = 0;
                          $19_1 = 0;
                          $19$hi = i64toi32_i32$3;
                          $1_1 = 0;
                          i64toi32_i32$3 = 0;
                          $20_1 = 0;
                          $20$hi = i64toi32_i32$3;
                          label$59: while (1) {
                            label$60: {
                              $14_1 = ((($1_1 + $11_1) | 0) & 2047) | 0;
                              if (($14_1 | 0) != ($2_1 | 0)) {
                                break label$60;
                              }
                              $2_1 = ((($2_1 + 1) | 0) & 2047) | 0;
                              HEAP32[(((((($2_1 << 2) | 0) + (($7_1 + 784) | 0)) | 0) + -4) | 0) >> 2] = 0;
                            }
                            i64toi32_i32$3 = $19$hi;
                            i64toi32_i32$3 = $20$hi;
                            i64toi32_i32$3 = $19$hi;
                            i64toi32_i32$5 = $20$hi;
                            i64toi32_i32$1 = 0;
                            i64toi32_i32$4 = 1075633366;
                            $308(
                              ($7_1 + 768) | 0 | 0,
                              $19_1 | 0,
                              i64toi32_i32$3 | 0,
                              $20_1 | 0,
                              i64toi32_i32$5 | 0,
                              0 | 0,
                              i64toi32_i32$1 | 0,
                              1342177280 | 0,
                              i64toi32_i32$4 | 0
                            );
                            $316(
                              ($7_1 + 752) | 0 | 0,
                              HEAP32[(((($7_1 + 784) | 0) + (($14_1 << 2) | 0)) | 0) >> 2] | 0 | 0
                            );
                            i64toi32_i32$5 = $7_1;
                            i64toi32_i32$4 = HEAP32[(($7_1 + 768) | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[(($7_1 + 772) | 0) >> 2] | 0;
                            $736_1 = i64toi32_i32$4;
                            $736$hi = i64toi32_i32$1;
                            i64toi32_i32$5 = ((($7_1 + 768) | 0) + 8) | 0;
                            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                            i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                            $740_1 = i64toi32_i32$1;
                            $740$hi = i64toi32_i32$4;
                            i64toi32_i32$5 = $7_1;
                            i64toi32_i32$4 = HEAP32[(($7_1 + 752) | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[(($7_1 + 756) | 0) >> 2] | 0;
                            $742_1 = i64toi32_i32$4;
                            $742$hi = i64toi32_i32$1;
                            i64toi32_i32$5 = ((($7_1 + 752) | 0) + 8) | 0;
                            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                            i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                            $746_1 = i64toi32_i32$1;
                            $746$hi = i64toi32_i32$4;
                            i64toi32_i32$4 = $736$hi;
                            i64toi32_i32$1 = $740$hi;
                            i64toi32_i32$5 = $742$hi;
                            i64toi32_i32$3 = $746$hi;
                            $311(
                              ($7_1 + 736) | 0 | 0,
                              $736_1 | 0,
                              i64toi32_i32$4 | 0,
                              $740_1 | 0,
                              i64toi32_i32$1 | 0,
                              $742_1 | 0,
                              i64toi32_i32$5 | 0,
                              $746_1 | 0,
                              i64toi32_i32$3 | 0
                            );
                            i64toi32_i32$1 = ((($7_1 + 736) | 0) + 8) | 0;
                            i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                            i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                            $20_1 = i64toi32_i32$3;
                            $20$hi = i64toi32_i32$5;
                            i64toi32_i32$1 = $7_1;
                            i64toi32_i32$5 = HEAP32[(($7_1 + 736) | 0) >> 2] | 0;
                            i64toi32_i32$3 = HEAP32[(($7_1 + 740) | 0) >> 2] | 0;
                            $19_1 = i64toi32_i32$5;
                            $19$hi = i64toi32_i32$3;
                            $1_1 = ($1_1 + 1) | 0;
                            if (($1_1 | 0) != (4 | 0)) {
                              continue label$59;
                            }
                            break label$59;
                          }
                          $306(($7_1 + 720) | 0 | 0, $5_1 | 0);
                          i64toi32_i32$3 = $19$hi;
                          i64toi32_i32$3 = $20$hi;
                          i64toi32_i32$1 = $7_1;
                          i64toi32_i32$3 = HEAP32[(($7_1 + 720) | 0) >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(($7_1 + 724) | 0) >> 2] | 0;
                          $765_1 = i64toi32_i32$3;
                          $765$hi = i64toi32_i32$5;
                          i64toi32_i32$1 = ((($7_1 + 720) | 0) + 8) | 0;
                          i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                          $769_1 = i64toi32_i32$5;
                          $769$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = $19$hi;
                          i64toi32_i32$5 = $20$hi;
                          i64toi32_i32$1 = $765$hi;
                          i64toi32_i32$4 = $769$hi;
                          $308(
                            ($7_1 + 704) | 0 | 0,
                            $19_1 | 0,
                            i64toi32_i32$3 | 0,
                            $20_1 | 0,
                            i64toi32_i32$5 | 0,
                            $765_1 | 0,
                            i64toi32_i32$1 | 0,
                            $769_1 | 0,
                            i64toi32_i32$4 | 0
                          );
                          i64toi32_i32$5 = ((($7_1 + 704) | 0) + 8) | 0;
                          i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                          $20_1 = i64toi32_i32$4;
                          $20$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = 0;
                          $19_1 = 0;
                          $19$hi = i64toi32_i32$1;
                          i64toi32_i32$5 = $7_1;
                          i64toi32_i32$1 = HEAP32[(($7_1 + 704) | 0) >> 2] | 0;
                          i64toi32_i32$4 = HEAP32[(($7_1 + 708) | 0) >> 2] | 0;
                          $21_1 = i64toi32_i32$1;
                          $21$hi = i64toi32_i32$4;
                          $13_1 = ($16_1 + 113) | 0;
                          $1_1 = ($13_1 - $4_1) | 0;
                          $8_1 = ($1_1 | 0) < ($3_1 | 0);
                          $14_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
                          if (($14_1 | 0) <= (112 | 0)) {
                            break label$55;
                          }
                          i64toi32_i32$4 = 0;
                          $22_1 = 0;
                          $22$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = 0;
                          $23_1 = 0;
                          $23$hi = i64toi32_i32$4;
                          i64toi32_i32$4 = 0;
                          $24_1 = 0;
                          $24$hi = i64toi32_i32$4;
                          break label$52;
                        }
                        $13_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
                        $16_1 = ($13_1 + $16_1) | 0;
                        $14_1 = $2_1;
                        if (($11_1 | 0) == ($2_1 | 0)) {
                          continue label$54;
                        }
                        $12_1 = (1e9 >>> $13_1) | 0;
                        $17_1 = (((-1 << $13_1) | 0) ^ -1) | 0;
                        $1_1 = 0;
                        $14_1 = $11_1;
                        label$61: while (1) {
                          $15_1 = ((($7_1 + 784) | 0) + (($11_1 << 2) | 0)) | 0;
                          $814_1 = $15_1;
                          $15_1 = HEAP32[$15_1 >> 2] | 0;
                          $1_1 = ((($15_1 >>> $13_1) | 0) + $1_1) | 0;
                          HEAP32[$814_1 >> 2] = $1_1;
                          $1_1 = ((($11_1 | 0) == ($14_1 | 0)) & !$1_1) | 0;
                          $14_1 = $1_1 ? ((($14_1 + 1) | 0) & 2047) | 0 : $14_1;
                          $8_1 = $1_1 ? ($8_1 + -9) | 0 : $8_1;
                          $1_1 = Math_imul(($15_1 & $17_1) | 0, $12_1);
                          $11_1 = ((($11_1 + 1) | 0) & 2047) | 0;
                          if (($11_1 | 0) != ($2_1 | 0)) {
                            continue label$61;
                          }
                          break label$61;
                        }
                        if (!$1_1) {
                          continue label$54;
                        }
                        label$62: {
                          if (($6_1 | 0) == ($14_1 | 0)) {
                            break label$62;
                          }
                          HEAP32[(((($7_1 + 784) | 0) + (($2_1 << 2) | 0)) | 0) >> 2] = $1_1;
                          $2_1 = $6_1;
                          continue label$53;
                        }
                        HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
                        $14_1 = $6_1;
                        continue label$54;
                      }
                      break label$54;
                    }
                    break label$53;
                  }
                  $312(($7_1 + 656) | 0 | 0, +(+$1705(+1.0, (225 - $14_1) | 0 | 0)));
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 656) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 660) | 0) >> 2] | 0;
                  $876_1 = i64toi32_i32$4;
                  $876$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = ((($7_1 + 656) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $880_1 = i64toi32_i32$1;
                  $880$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $21$hi;
                  i64toi32_i32$4 = $20$hi;
                  i64toi32_i32$4 = $876$hi;
                  i64toi32_i32$1 = $880$hi;
                  i64toi32_i32$5 = $21$hi;
                  i64toi32_i32$3 = $20$hi;
                  $315(
                    ($7_1 + 688) | 0 | 0,
                    $876_1 | 0,
                    i64toi32_i32$4 | 0,
                    $880_1 | 0,
                    i64toi32_i32$1 | 0,
                    $21_1 | 0,
                    i64toi32_i32$5 | 0,
                    $20_1 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 696) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 700) | 0) >> 2] | 0;
                  $24_1 = i64toi32_i32$3;
                  $24$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 688) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 692) | 0) >> 2] | 0;
                  $23_1 = i64toi32_i32$5;
                  $23$hi = i64toi32_i32$3;
                  $312(($7_1 + 640) | 0 | 0, +(+$1705(+1.0, (113 - $14_1) | 0 | 0)));
                  i64toi32_i32$3 = $21$hi;
                  i64toi32_i32$3 = $20$hi;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 640) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 644) | 0) >> 2] | 0;
                  $897_1 = i64toi32_i32$3;
                  $897$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = ((($7_1 + 640) | 0) + 8) | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $901_1 = i64toi32_i32$5;
                  $901$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $21$hi;
                  i64toi32_i32$5 = $20$hi;
                  i64toi32_i32$1 = $897$hi;
                  i64toi32_i32$4 = $901$hi;
                  $1704(
                    ($7_1 + 672) | 0 | 0,
                    $21_1 | 0,
                    i64toi32_i32$3 | 0,
                    $20_1 | 0,
                    i64toi32_i32$5 | 0,
                    $897_1 | 0,
                    i64toi32_i32$1 | 0,
                    $901_1 | 0,
                    i64toi32_i32$4 | 0
                  );
                  i64toi32_i32$4 = i64toi32_i32$3;
                  i64toi32_i32$4 = i64toi32_i32$5;
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 672) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 676) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$4;
                  $19$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 680) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 684) | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$1;
                  $22$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = i64toi32_i32$3;
                  i64toi32_i32$1 = $20$hi;
                  i64toi32_i32$5 = $19$hi;
                  i64toi32_i32$3 = $22$hi;
                  $317(
                    ($7_1 + 624) | 0 | 0,
                    $21_1 | 0,
                    i64toi32_i32$4 | 0,
                    $20_1 | 0,
                    i64toi32_i32$1 | 0,
                    $19_1 | 0,
                    i64toi32_i32$5 | 0,
                    $22_1 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$3 = $23$hi;
                  i64toi32_i32$3 = $24$hi;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 624) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 628) | 0) >> 2] | 0;
                  $917_1 = i64toi32_i32$3;
                  $917$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = ((($7_1 + 624) | 0) + 8) | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $921_1 = i64toi32_i32$5;
                  $921$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $23$hi;
                  i64toi32_i32$5 = $24$hi;
                  i64toi32_i32$1 = $917$hi;
                  i64toi32_i32$4 = $921$hi;
                  $311(
                    ($7_1 + 608) | 0 | 0,
                    $23_1 | 0,
                    i64toi32_i32$3 | 0,
                    $24_1 | 0,
                    i64toi32_i32$5 | 0,
                    $917_1 | 0,
                    i64toi32_i32$1 | 0,
                    $921_1 | 0,
                    i64toi32_i32$4 | 0
                  );
                  i64toi32_i32$5 = ((($7_1 + 608) | 0) + 8) | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$4;
                  $20$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 608) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 612) | 0) >> 2] | 0;
                  $21_1 = i64toi32_i32$1;
                  $21$hi = i64toi32_i32$4;
                }
                label$63: {
                  $15_1 = ((($11_1 + 4) | 0) & 2047) | 0;
                  if (($15_1 | 0) == ($2_1 | 0)) {
                    break label$63;
                  }
                  label$64: {
                    label$65: {
                      $15_1 = HEAP32[(((($7_1 + 784) | 0) + (($15_1 << 2) | 0)) | 0) >> 2] | 0;
                      if ($15_1 >>> 0 > 499999999 >>> 0) {
                        break label$65;
                      }
                      label$66: {
                        if ($15_1) {
                          break label$66;
                        }
                        if ((((($11_1 + 5) | 0) & 2047) | 0 | 0) == ($2_1 | 0)) {
                          break label$64;
                        }
                      }
                      $312(($7_1 + 496) | 0 | 0, +(+($5_1 | 0) * 0.25));
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$4 = $22$hi;
                      i64toi32_i32$5 = $7_1;
                      i64toi32_i32$4 = HEAP32[(($7_1 + 496) | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(($7_1 + 500) | 0) >> 2] | 0;
                      $958_1 = i64toi32_i32$4;
                      $958$hi = i64toi32_i32$1;
                      i64toi32_i32$5 = ((($7_1 + 496) | 0) + 8) | 0;
                      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                      i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                      $962_1 = i64toi32_i32$1;
                      $962$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$1 = $22$hi;
                      i64toi32_i32$5 = $958$hi;
                      i64toi32_i32$3 = $962$hi;
                      $311(
                        ($7_1 + 480) | 0 | 0,
                        $19_1 | 0,
                        i64toi32_i32$4 | 0,
                        $22_1 | 0,
                        i64toi32_i32$1 | 0,
                        $958_1 | 0,
                        i64toi32_i32$5 | 0,
                        $962_1 | 0,
                        i64toi32_i32$3 | 0
                      );
                      i64toi32_i32$1 = ((($7_1 + 480) | 0) + 8) | 0;
                      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                      $22_1 = i64toi32_i32$3;
                      $22$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = $7_1;
                      i64toi32_i32$5 = HEAP32[(($7_1 + 480) | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[(($7_1 + 484) | 0) >> 2] | 0;
                      $19_1 = i64toi32_i32$5;
                      $19$hi = i64toi32_i32$3;
                      break label$64;
                    }
                    label$67: {
                      if (($15_1 | 0) == (5e8 | 0)) {
                        break label$67;
                      }
                      $312(($7_1 + 592) | 0 | 0, +(+($5_1 | 0) * 0.75));
                      i64toi32_i32$3 = $19$hi;
                      i64toi32_i32$3 = $22$hi;
                      i64toi32_i32$1 = $7_1;
                      i64toi32_i32$3 = HEAP32[(($7_1 + 592) | 0) >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[(($7_1 + 596) | 0) >> 2] | 0;
                      $981_1 = i64toi32_i32$3;
                      $981$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = ((($7_1 + 592) | 0) + 8) | 0;
                      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                      $985_1 = i64toi32_i32$5;
                      $985$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $19$hi;
                      i64toi32_i32$5 = $22$hi;
                      i64toi32_i32$1 = $981$hi;
                      i64toi32_i32$4 = $985$hi;
                      $311(
                        ($7_1 + 576) | 0 | 0,
                        $19_1 | 0,
                        i64toi32_i32$3 | 0,
                        $22_1 | 0,
                        i64toi32_i32$5 | 0,
                        $981_1 | 0,
                        i64toi32_i32$1 | 0,
                        $985_1 | 0,
                        i64toi32_i32$4 | 0
                      );
                      i64toi32_i32$5 = ((($7_1 + 576) | 0) + 8) | 0;
                      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                      $22_1 = i64toi32_i32$4;
                      $22$hi = i64toi32_i32$1;
                      i64toi32_i32$5 = $7_1;
                      i64toi32_i32$1 = HEAP32[(($7_1 + 576) | 0) >> 2] | 0;
                      i64toi32_i32$4 = HEAP32[(($7_1 + 580) | 0) >> 2] | 0;
                      $19_1 = i64toi32_i32$1;
                      $19$hi = i64toi32_i32$4;
                      break label$64;
                    }
                    $25_1 = +($5_1 | 0);
                    label$68: {
                      if ((((($11_1 + 5) | 0) & 2047) | 0 | 0) != ($2_1 | 0)) {
                        break label$68;
                      }
                      $312(($7_1 + 528) | 0 | 0, +($25_1 * 0.5));
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$4 = $22$hi;
                      i64toi32_i32$5 = $7_1;
                      i64toi32_i32$4 = HEAP32[(($7_1 + 528) | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(($7_1 + 532) | 0) >> 2] | 0;
                      $1008_1 = i64toi32_i32$4;
                      $1008$hi = i64toi32_i32$1;
                      i64toi32_i32$5 = ((($7_1 + 528) | 0) + 8) | 0;
                      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                      i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                      $1012_1 = i64toi32_i32$1;
                      $1012$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $19$hi;
                      i64toi32_i32$1 = $22$hi;
                      i64toi32_i32$5 = $1008$hi;
                      i64toi32_i32$3 = $1012$hi;
                      $311(
                        ($7_1 + 512) | 0 | 0,
                        $19_1 | 0,
                        i64toi32_i32$4 | 0,
                        $22_1 | 0,
                        i64toi32_i32$1 | 0,
                        $1008_1 | 0,
                        i64toi32_i32$5 | 0,
                        $1012_1 | 0,
                        i64toi32_i32$3 | 0
                      );
                      i64toi32_i32$1 = ((($7_1 + 512) | 0) + 8) | 0;
                      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                      i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                      $22_1 = i64toi32_i32$3;
                      $22$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = $7_1;
                      i64toi32_i32$5 = HEAP32[(($7_1 + 512) | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[(($7_1 + 516) | 0) >> 2] | 0;
                      $19_1 = i64toi32_i32$5;
                      $19$hi = i64toi32_i32$3;
                      break label$64;
                    }
                    $312(($7_1 + 560) | 0 | 0, +($25_1 * 0.75));
                    i64toi32_i32$3 = $19$hi;
                    i64toi32_i32$3 = $22$hi;
                    i64toi32_i32$1 = $7_1;
                    i64toi32_i32$3 = HEAP32[(($7_1 + 560) | 0) >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[(($7_1 + 564) | 0) >> 2] | 0;
                    $1028_1 = i64toi32_i32$3;
                    $1028$hi = i64toi32_i32$5;
                    i64toi32_i32$1 = ((($7_1 + 560) | 0) + 8) | 0;
                    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                    i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                    $1032_1 = i64toi32_i32$5;
                    $1032$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $19$hi;
                    i64toi32_i32$5 = $22$hi;
                    i64toi32_i32$1 = $1028$hi;
                    i64toi32_i32$4 = $1032$hi;
                    $311(
                      ($7_1 + 544) | 0 | 0,
                      $19_1 | 0,
                      i64toi32_i32$3 | 0,
                      $22_1 | 0,
                      i64toi32_i32$5 | 0,
                      $1028_1 | 0,
                      i64toi32_i32$1 | 0,
                      $1032_1 | 0,
                      i64toi32_i32$4 | 0
                    );
                    i64toi32_i32$5 = ((($7_1 + 544) | 0) + 8) | 0;
                    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                    $22_1 = i64toi32_i32$4;
                    $22$hi = i64toi32_i32$1;
                    i64toi32_i32$5 = $7_1;
                    i64toi32_i32$1 = HEAP32[(($7_1 + 544) | 0) >> 2] | 0;
                    i64toi32_i32$4 = HEAP32[(($7_1 + 548) | 0) >> 2] | 0;
                    $19_1 = i64toi32_i32$1;
                    $19$hi = i64toi32_i32$4;
                  }
                  if (($14_1 | 0) > (111 | 0)) {
                    break label$63;
                  }
                  i64toi32_i32$4 = $19$hi;
                  i64toi32_i32$4 = $22$hi;
                  i64toi32_i32$4 = $19$hi;
                  i64toi32_i32$1 = $22$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$3 = 1073676288;
                  $1704(
                    ($7_1 + 464) | 0 | 0,
                    $19_1 | 0,
                    i64toi32_i32$4 | 0,
                    $22_1 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    0 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 464) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 468) | 0) >> 2] | 0;
                  $1046_1 = i64toi32_i32$3;
                  $1046$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 472) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 476) | 0) >> 2] | 0;
                  $1048_1 = i64toi32_i32$5;
                  $1048$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $1046$hi;
                  i64toi32_i32$5 = $1048$hi;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$4 = 0;
                  if (
                    $313(
                      $1046_1 | 0,
                      i64toi32_i32$3 | 0,
                      $1048_1 | 0,
                      i64toi32_i32$5 | 0,
                      0 | 0,
                      i64toi32_i32$1 | 0,
                      0 | 0,
                      i64toi32_i32$4 | 0
                    ) | 0
                  ) {
                    break label$63;
                  }
                  i64toi32_i32$4 = $19$hi;
                  i64toi32_i32$4 = $22$hi;
                  i64toi32_i32$4 = $19$hi;
                  i64toi32_i32$1 = $22$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$3 = 1073676288;
                  $311(
                    ($7_1 + 448) | 0 | 0,
                    $19_1 | 0,
                    i64toi32_i32$4 | 0,
                    $22_1 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$5 | 0,
                    0 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$1 = ($7_1 + 456) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$3;
                  $22$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$5 = HEAP32[(($7_1 + 448) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(($7_1 + 452) | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$5;
                  $19$hi = i64toi32_i32$3;
                }
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$3 = $20$hi;
                i64toi32_i32$3 = $19$hi;
                i64toi32_i32$3 = $22$hi;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$5 = $20$hi;
                i64toi32_i32$1 = $19$hi;
                i64toi32_i32$4 = $22$hi;
                $311(
                  ($7_1 + 432) | 0 | 0,
                  $21_1 | 0,
                  i64toi32_i32$3 | 0,
                  $20_1 | 0,
                  i64toi32_i32$5 | 0,
                  $19_1 | 0,
                  i64toi32_i32$1 | 0,
                  $22_1 | 0,
                  i64toi32_i32$4 | 0
                );
                i64toi32_i32$5 = $7_1;
                i64toi32_i32$4 = HEAP32[(($7_1 + 432) | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(($7_1 + 436) | 0) >> 2] | 0;
                $1068_1 = i64toi32_i32$4;
                $1068$hi = i64toi32_i32$1;
                i64toi32_i32$5 = ((($7_1 + 432) | 0) + 8) | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[((i64toi32_i32$5 + 4) | 0) >> 2] | 0;
                $1072_1 = i64toi32_i32$1;
                $1072$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $23$hi;
                i64toi32_i32$4 = $24$hi;
                i64toi32_i32$4 = $1068$hi;
                i64toi32_i32$1 = $1072$hi;
                i64toi32_i32$5 = $23$hi;
                i64toi32_i32$3 = $24$hi;
                $317(
                  ($7_1 + 416) | 0 | 0,
                  $1068_1 | 0,
                  i64toi32_i32$4 | 0,
                  $1072_1 | 0,
                  i64toi32_i32$1 | 0,
                  $23_1 | 0,
                  i64toi32_i32$5 | 0,
                  $24_1 | 0,
                  i64toi32_i32$3 | 0
                );
                i64toi32_i32$1 = ((($7_1 + 416) | 0) + 8) | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                $20_1 = i64toi32_i32$3;
                $20$hi = i64toi32_i32$5;
                i64toi32_i32$1 = $7_1;
                i64toi32_i32$5 = HEAP32[(($7_1 + 416) | 0) >> 2] | 0;
                i64toi32_i32$3 = HEAP32[(($7_1 + 420) | 0) >> 2] | 0;
                $21_1 = i64toi32_i32$5;
                $21$hi = i64toi32_i32$3;
                label$69: {
                  if ((($13_1 & 2147483647) | 0 | 0) <= ((-2 - $9_1) | 0 | 0)) {
                    break label$69;
                  }
                  i64toi32_i32$3 = $21$hi;
                  i64toi32_i32$3 = $20$hi;
                  i64toi32_i32$3 = $21$hi;
                  i64toi32_i32$5 = $20$hi;
                  $321(($7_1 + 400) | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
                  i64toi32_i32$5 = i64toi32_i32$3;
                  i64toi32_i32$5 = $20$hi;
                  i64toi32_i32$5 = i64toi32_i32$3;
                  i64toi32_i32$3 = $20$hi;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$4 = 1073610752;
                  $308(
                    ($7_1 + 384) | 0 | 0,
                    $21_1 | 0,
                    i64toi32_i32$5 | 0,
                    $20_1 | 0,
                    i64toi32_i32$3 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$4 | 0
                  );
                  i64toi32_i32$3 = $7_1;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 400) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 404) | 0) >> 2] | 0;
                  $1095_1 = i64toi32_i32$4;
                  $1095$hi = i64toi32_i32$1;
                  i64toi32_i32$3 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 408) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 412) | 0) >> 2] | 0;
                  $1097_1 = i64toi32_i32$1;
                  $1097$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $1095$hi;
                  i64toi32_i32$1 = $1097$hi;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = 1081081856;
                  $2_1 =
                    $314(
                      $1095_1 | 0,
                      i64toi32_i32$4 | 0,
                      $1097_1 | 0,
                      i64toi32_i32$1 | 0,
                      0 | 0,
                      i64toi32_i32$3 | 0,
                      0 | 0,
                      i64toi32_i32$5 | 0
                    ) | 0;
                  i64toi32_i32$5 = $20$hi;
                  i64toi32_i32$1 = ((($7_1 + 384) | 0) + 8) | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $1103_1 = i64toi32_i32$5;
                  $1103$hi = i64toi32_i32$3;
                  $13_1 = ($2_1 | 0) < (0 | 0);
                  i64toi32_i32$0 = $13_1;
                  i64toi32_i32$3 = $20$hi;
                  i64toi32_i32$5 = $1103$hi;
                  i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1103_1;
                  i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
                  $20_1 = i64toi32_i32$4;
                  $20$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $21$hi;
                  i64toi32_i32$0 = $7_1;
                  i64toi32_i32$1 = HEAP32[(($7_1 + 384) | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(($7_1 + 388) | 0) >> 2] | 0;
                  $1110_1 = i64toi32_i32$1;
                  $1110$hi = i64toi32_i32$4;
                  i64toi32_i32$5 = $13_1;
                  i64toi32_i32$4 = $21$hi;
                  i64toi32_i32$1 = $1110$hi;
                  i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1110_1;
                  i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
                  $21_1 = i64toi32_i32$3;
                  $21$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $19$hi;
                  i64toi32_i32$0 = $22$hi;
                  i64toi32_i32$0 = $19$hi;
                  i64toi32_i32$3 = $22$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = 0;
                  $11_1 =
                    $313(
                      $19_1 | 0,
                      $19$hi | 0,
                      $22_1 | 0,
                      i64toi32_i32$3 | 0,
                      0 | 0,
                      i64toi32_i32$5 | 0,
                      0 | 0,
                      i64toi32_i32$4 | 0
                    ) | 0;
                  label$70: {
                    $16_1 = ($16_1 + (($2_1 | 0) > (-1 | 0))) | 0;
                    if ((($16_1 + 110) | 0 | 0) > ($10_1 | 0)) {
                      break label$70;
                    }
                    if (
                      !(
                        ((($11_1 | 0) != (0 | 0)) &
                          (($8_1 & ($13_1 | (($14_1 | 0) != ($1_1 | 0)) | 0)) | 0)) |
                        0
                      )
                    ) {
                      break label$69;
                    }
                  }
                  HEAP32[($305() | 0) >> 2] = 68;
                }
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$5 = $20$hi;
                $318(
                  ($7_1 + 368) | 0 | 0,
                  $21_1 | 0,
                  i64toi32_i32$4 | 0,
                  $20_1 | 0,
                  i64toi32_i32$5 | 0,
                  $16_1 | 0
                );
                i64toi32_i32$3 = $7_1;
                i64toi32_i32$5 = HEAP32[(($7_1 + 376) | 0) >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(($7_1 + 380) | 0) >> 2] | 0;
                $19_1 = i64toi32_i32$5;
                $19$hi = i64toi32_i32$4;
                i64toi32_i32$3 = $7_1;
                i64toi32_i32$4 = HEAP32[(($7_1 + 368) | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(($7_1 + 372) | 0) >> 2] | 0;
                $20_1 = i64toi32_i32$4;
                $20$hi = i64toi32_i32$5;
              }
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$4 = $0_1;
              HEAP32[i64toi32_i32$4 >> 2] = $20_1;
              HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] = i64toi32_i32$5;
              i64toi32_i32$5 = $19$hi;
              HEAP32[((i64toi32_i32$4 + 8) | 0) >> 2] = $19_1;
              HEAP32[((i64toi32_i32$4 + 12) | 0) >> 2] = i64toi32_i32$5;
              global$0 = ($7_1 + 8976) | 0;
            }

            function $325($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                $3_1 = 0,
                i64toi32_i32$3 = 0,
                $6$hi = 0,
                $5_1 = 0,
                $6_1 = 0,
                i64toi32_i32$2 = 0,
                $4_1 = 0,
                $18_1 = 0,
                $19_1 = 0,
                $20_1 = 0,
                $85$hi = 0,
                $87_1 = 0,
                $87$hi = 0,
                $136$hi = 0;
              label$1: {
                label$2: {
                  $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                  if ($2_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                    break label$2;
                  }
                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                  $2_1 = HEAPU8[$2_1 >> 0] | 0;
                  break label$1;
                }
                $2_1 = $300($0_1 | 0) | 0;
              }
              label$3: {
                label$4: {
                  switch (($2_1 + -43) | 0 | 0) {
                    default:
                      $3_1 = ($2_1 + -48) | 0;
                      $4_1 = 0;
                      break label$3;
                    case 0:
                    case 2:
                      break label$4;
                  }
                }
                label$6: {
                  label$7: {
                    $3_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                    if ($3_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                      break label$7;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($3_1 + 1) | 0;
                    $5_1 = HEAPU8[$3_1 >> 0] | 0;
                    break label$6;
                  }
                  $5_1 = $300($0_1 | 0) | 0;
                }
                $4_1 = ($2_1 | 0) == (45 | 0);
                $3_1 = ($5_1 + -48) | 0;
                label$8: {
                  if (!$1_1) {
                    break label$8;
                  }
                  if ($3_1 >>> 0 < 10 >>> 0) {
                    break label$8;
                  }
                  if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                    break label$8;
                  }
                  HEAP32[(($0_1 + 4) | 0) >> 2] = ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                }
                $2_1 = $5_1;
              }
              label$9: {
                label$10: {
                  if ($3_1 >>> 0 >= 10 >>> 0) {
                    break label$10;
                  }
                  $3_1 = 0;
                  label$11: while (1) {
                    $3_1 = ($2_1 + Math_imul($3_1, 10)) | 0;
                    label$12: {
                      label$13: {
                        $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                        if ($2_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                          break label$13;
                        }
                        HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                        $2_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$12;
                      }
                      $2_1 = $300($0_1 | 0) | 0;
                    }
                    $3_1 = ($3_1 + -48) | 0;
                    label$14: {
                      $5_1 = ($2_1 + -48) | 0;
                      if ($5_1 >>> 0 > 9 >>> 0) {
                        break label$14;
                      }
                      if (($3_1 | 0) < (214748364 | 0)) {
                        continue label$11;
                      }
                    }
                    break label$11;
                  }
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                  $6_1 = i64toi32_i32$1;
                  $6$hi = i64toi32_i32$0;
                  label$15: {
                    if ($5_1 >>> 0 >= 10 >>> 0) {
                      break label$15;
                    }
                    label$16: while (1) {
                      i64toi32_i32$0 = 0;
                      $85$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $6$hi;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$1 =
                        __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                      $87_1 = i64toi32_i32$1;
                      $87$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $85$hi;
                      i64toi32_i32$2 = $2_1;
                      i64toi32_i32$1 = $87$hi;
                      i64toi32_i32$3 = $87_1;
                      i64toi32_i32$4 = ($2_1 + i64toi32_i32$3) | 0;
                      i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                      }
                      $6_1 = i64toi32_i32$4;
                      $6$hi = i64toi32_i32$5;
                      label$17: {
                        label$18: {
                          $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                          if ($2_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                            break label$18;
                          }
                          HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                          $2_1 = HEAPU8[$2_1 >> 0] | 0;
                          break label$17;
                        }
                        $2_1 = $300($0_1 | 0) | 0;
                      }
                      i64toi32_i32$5 = $6$hi;
                      i64toi32_i32$0 = $6_1;
                      i64toi32_i32$2 = -1;
                      i64toi32_i32$3 = -48;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $6_1 = i64toi32_i32$1;
                      $6$hi = i64toi32_i32$4;
                      $5_1 = ($2_1 + -48) | 0;
                      if ($5_1 >>> 0 > 9 >>> 0) {
                        break label$15;
                      }
                      i64toi32_i32$4 = $6$hi;
                      i64toi32_i32$5 = $6_1;
                      i64toi32_i32$0 = 21474836;
                      i64toi32_i32$3 = 2061584302;
                      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
                        $18_1 = 1;
                      } else {
                        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
                          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                            $19_1 = 0;
                          } else {
                            $19_1 = 1;
                          }
                          $20_1 = $19_1;
                        } else {
                          $20_1 = 0;
                        }
                        $18_1 = $20_1;
                      }
                      if ($18_1) {
                        continue label$16;
                      }
                      break label$16;
                    }
                  }
                  label$19: {
                    if ($5_1 >>> 0 >= 10 >>> 0) {
                      break label$19;
                    }
                    label$20: while (1) {
                      label$21: {
                        label$22: {
                          $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                          if ($2_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                            break label$22;
                          }
                          HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 + 1) | 0;
                          $2_1 = HEAPU8[$2_1 >> 0] | 0;
                          break label$21;
                        }
                        $2_1 = $300($0_1 | 0) | 0;
                      }
                      if ((($2_1 + -48) | 0) >>> 0 < 10 >>> 0) {
                        continue label$20;
                      }
                      break label$20;
                    }
                  }
                  label$23: {
                    if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                      break label$23;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                  }
                  i64toi32_i32$5 = $6$hi;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = $6$hi;
                  i64toi32_i32$0 = $6_1;
                  i64toi32_i32$2 = (i64toi32_i32$3 - i64toi32_i32$0) | 0;
                  i64toi32_i32$1 = ((i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$5 - i64toi32_i32$1) | 0;
                  $136$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = i64toi32_i32$4;
                  i64toi32_i32$4 = $4_1;
                  i64toi32_i32$1 = $136$hi;
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
                  i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
                  $6_1 = i64toi32_i32$0;
                  $6$hi = i64toi32_i32$5;
                  break label$9;
                }
                i64toi32_i32$5 = -2147483648;
                $6_1 = 0;
                $6$hi = i64toi32_i32$5;
                if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                  break label$9;
                }
                HEAP32[(($0_1 + 4) | 0) >> 2] = ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                i64toi32_i32$5 = -2147483648;
                i64toi32_i32$0 = 0;
                i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
                return i64toi32_i32$0 | 0;
              }
              i64toi32_i32$0 = $6$hi;
              i64toi32_i32$5 = $6_1;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
              return i64toi32_i32$5 | 0;
            }

            function $326($0_1, $1_1, $2_1, $3_1, $3$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              var i64toi32_i32$0 = 0,
                $5_1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$4 = 0,
                $9$hi = 0,
                i64toi32_i32$1 = 0,
                $9_1 = 0,
                $10$hi = 0,
                $11$hi = 0,
                $10_1 = 0,
                $7_1 = 0,
                $11_1 = 0,
                $6_1 = 0,
                $4_1 = 0,
                $12_1 = 0,
                $12$hi = 0,
                $8_1 = 0,
                $32_1 = 0,
                $33_1 = 0,
                $185_1 = 0,
                $185$hi = 0,
                $242_1 = 0,
                $242$hi = 0,
                $324$hi = 0,
                $327_1 = 0,
                $327$hi = 0,
                $406$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          label$7: {
                            if ($1_1 >>> 0 > 36 >>> 0) {
                              break label$7;
                            }
                            label$8: while (1) {
                              label$9: {
                                label$10: {
                                  $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                  if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                    break label$10;
                                  }
                                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                  $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                  break label$9;
                                }
                                $5_1 = $300($0_1 | 0) | 0;
                              }
                              if ($292($5_1 | 0) | 0) {
                                continue label$8;
                              }
                              break label$8;
                            }
                            $6_1 = 0;
                            label$11: {
                              label$12: {
                                switch (($5_1 + -43) | 0 | 0) {
                                  case 0:
                                  case 2:
                                    break label$12;
                                  default:
                                    break label$11;
                                }
                              }
                              $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
                              label$13: {
                                $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                  break label$13;
                                }
                                HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                break label$11;
                              }
                              $5_1 = $300($0_1 | 0) | 0;
                            }
                            label$14: {
                              label$15: {
                                if (($1_1 & -17) | 0) {
                                  break label$15;
                                }
                                if (($5_1 | 0) != (48 | 0)) {
                                  break label$15;
                                }
                                label$16: {
                                  label$17: {
                                    $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                    if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                      break label$17;
                                    }
                                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                    $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                    break label$16;
                                  }
                                  $5_1 = $300($0_1 | 0) | 0;
                                }
                                label$18: {
                                  if ((($5_1 & -33) | 0 | 0) != (88 | 0)) {
                                    break label$18;
                                  }
                                  label$19: {
                                    label$20: {
                                      $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                      if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                        break label$20;
                                      }
                                      HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                      $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                      break label$19;
                                    }
                                    $5_1 = $300($0_1 | 0) | 0;
                                  }
                                  $1_1 = 16;
                                  if ((HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
                                    break label$5;
                                  }
                                  label$21: {
                                    if (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) {
                                      break label$21;
                                    }
                                    i64toi32_i32$0 = 0;
                                    $3_1 = 0;
                                    $3$hi = i64toi32_i32$0;
                                    if ($2_1) {
                                      break label$1;
                                    }
                                    break label$2;
                                  }
                                  $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + -1) | 0;
                                  if (!$2_1) {
                                    break label$2;
                                  }
                                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + -2) | 0;
                                  i64toi32_i32$0 = 0;
                                  $3_1 = 0;
                                  $3$hi = i64toi32_i32$0;
                                  break label$1;
                                }
                                if ($1_1) {
                                  break label$14;
                                }
                                $1_1 = 8;
                                break label$5;
                              }
                              $1_1 = $1_1 ? $1_1 : 10;
                              if ($1_1 >>> 0 > (HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0) >>> 0) {
                                break label$14;
                              }
                              label$22: {
                                if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                                  break label$22;
                                }
                                HEAP32[(($0_1 + 4) | 0) >> 2] =
                                  ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                              }
                              i64toi32_i32$0 = 0;
                              $3_1 = 0;
                              $3$hi = i64toi32_i32$0;
                              i64toi32_i32$0 = 0;
                              $299($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                              HEAP32[($305() | 0) >> 2] = 28;
                              break label$1;
                            }
                            if (($1_1 | 0) != (10 | 0)) {
                              break label$5;
                            }
                            i64toi32_i32$0 = 0;
                            $9_1 = 0;
                            $9$hi = i64toi32_i32$0;
                            label$23: {
                              $2_1 = ($5_1 + -48) | 0;
                              if ($2_1 >>> 0 > 9 >>> 0) {
                                break label$23;
                              }
                              $1_1 = 0;
                              label$24: while (1) {
                                $1_1 = Math_imul($1_1, 10);
                                label$25: {
                                  label$26: {
                                    $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                    if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                      break label$26;
                                    }
                                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                    $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                    break label$25;
                                  }
                                  $5_1 = $300($0_1 | 0) | 0;
                                }
                                $1_1 = ($1_1 + $2_1) | 0;
                                label$27: {
                                  $2_1 = ($5_1 + -48) | 0;
                                  if ($2_1 >>> 0 > 9 >>> 0) {
                                    break label$27;
                                  }
                                  if ($1_1 >>> 0 < 429496729 >>> 0) {
                                    continue label$24;
                                  }
                                }
                                break label$24;
                              }
                              i64toi32_i32$0 = 0;
                              $9_1 = $1_1;
                              $9$hi = i64toi32_i32$0;
                            }
                            if ($2_1 >>> 0 > 9 >>> 0) {
                              break label$6;
                            }
                            i64toi32_i32$0 = $9$hi;
                            i64toi32_i32$1 = 0;
                            i64toi32_i32$1 =
                              __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
                            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                            $10_1 = i64toi32_i32$1;
                            $10$hi = i64toi32_i32$0;
                            i64toi32_i32$0 = 0;
                            $11_1 = $2_1;
                            $11$hi = i64toi32_i32$0;
                            label$28: while (1) {
                              label$29: {
                                label$30: {
                                  $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                  if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                    break label$30;
                                  }
                                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                  $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                  break label$29;
                                }
                                $5_1 = $300($0_1 | 0) | 0;
                              }
                              i64toi32_i32$0 = $10$hi;
                              i64toi32_i32$0 = $11$hi;
                              i64toi32_i32$0 = $10$hi;
                              i64toi32_i32$2 = $10_1;
                              i64toi32_i32$1 = $11$hi;
                              i64toi32_i32$3 = $11_1;
                              i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                              i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$1) | 0;
                              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                              }
                              $9_1 = i64toi32_i32$4;
                              $9$hi = i64toi32_i32$5;
                              $2_1 = ($5_1 + -48) | 0;
                              if ($2_1 >>> 0 > 9 >>> 0) {
                                break label$6;
                              }
                              i64toi32_i32$5 = $9$hi;
                              i64toi32_i32$0 = $9_1;
                              i64toi32_i32$2 = 429496729;
                              i64toi32_i32$3 = -1717986918;
                              if (
                                (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0) |
                                ((((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                                  (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0)) |
                                  0) |
                                0
                              ) {
                                break label$6;
                              }
                              i64toi32_i32$0 = $9$hi;
                              i64toi32_i32$5 = 0;
                              i64toi32_i32$5 =
                                __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
                              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                              $10_1 = i64toi32_i32$5;
                              $10$hi = i64toi32_i32$0;
                              i64toi32_i32$0 = 0;
                              $11_1 = $2_1;
                              $11$hi = i64toi32_i32$0;
                              i64toi32_i32$3 = $2_1;
                              i64toi32_i32$5 = -1;
                              i64toi32_i32$2 = -1;
                              i64toi32_i32$5 = (i64toi32_i32$0 ^ i64toi32_i32$5) | 0;
                              $185_1 = (i64toi32_i32$3 ^ i64toi32_i32$2) | 0;
                              $185$hi = i64toi32_i32$5;
                              i64toi32_i32$5 = $10$hi;
                              i64toi32_i32$0 = $10_1;
                              i64toi32_i32$3 = $185$hi;
                              i64toi32_i32$2 = $185_1;
                              if (
                                (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) |
                                ((((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0)) &
                                  (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0)) |
                                  0) |
                                0
                              ) {
                                continue label$28;
                              }
                              break label$28;
                            }
                            $1_1 = 10;
                            break label$4;
                          }
                          HEAP32[($305() | 0) >> 2] = 28;
                          i64toi32_i32$0 = 0;
                          $3_1 = 0;
                          $3$hi = i64toi32_i32$0;
                          break label$1;
                        }
                        $1_1 = 10;
                        if ($2_1 >>> 0 <= 9 >>> 0) {
                          break label$4;
                        }
                        break label$3;
                      }
                      label$31: {
                        if (!(($1_1 & (($1_1 + -1) | 0)) | 0)) {
                          break label$31;
                        }
                        i64toi32_i32$0 = 0;
                        $9_1 = 0;
                        $9$hi = i64toi32_i32$0;
                        label$32: {
                          $2_1 = HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0;
                          if ($1_1 >>> 0 <= $2_1 >>> 0) {
                            break label$32;
                          }
                          $7_1 = 0;
                          label$33: while (1) {
                            $7_1 = ($2_1 + Math_imul($7_1, $1_1)) | 0;
                            label$34: {
                              label$35: {
                                $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                  break label$35;
                                }
                                HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                                $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                break label$34;
                              }
                              $5_1 = $300($0_1 | 0) | 0;
                            }
                            $2_1 = HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0;
                            label$36: {
                              if ($7_1 >>> 0 > 119304646 >>> 0) {
                                break label$36;
                              }
                              if ($1_1 >>> 0 > $2_1 >>> 0) {
                                continue label$33;
                              }
                            }
                            break label$33;
                          }
                          i64toi32_i32$0 = 0;
                          $9_1 = $7_1;
                          $9$hi = i64toi32_i32$0;
                        }
                        if ($1_1 >>> 0 <= $2_1 >>> 0) {
                          break label$4;
                        }
                        i64toi32_i32$0 = 0;
                        $10_1 = $1_1;
                        $10$hi = i64toi32_i32$0;
                        label$37: while (1) {
                          i64toi32_i32$0 = $9$hi;
                          i64toi32_i32$0 = $10$hi;
                          i64toi32_i32$0 = $9$hi;
                          i64toi32_i32$5 = $10$hi;
                          i64toi32_i32$5 =
                            __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
                          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                          $11_1 = i64toi32_i32$5;
                          $11$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = 0;
                          i64toi32_i32$2 = $2_1;
                          i64toi32_i32$5 = 0;
                          i64toi32_i32$3 = 255;
                          i64toi32_i32$5 = (i64toi32_i32$0 & i64toi32_i32$5) | 0;
                          $12_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                          $12$hi = i64toi32_i32$5;
                          i64toi32_i32$0 = $12_1;
                          i64toi32_i32$2 = -1;
                          i64toi32_i32$3 = -1;
                          i64toi32_i32$2 = (i64toi32_i32$5 ^ i64toi32_i32$2) | 0;
                          $242_1 = (i64toi32_i32$0 ^ i64toi32_i32$3) | 0;
                          $242$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $11$hi;
                          i64toi32_i32$5 = $11_1;
                          i64toi32_i32$0 = $242$hi;
                          i64toi32_i32$3 = $242_1;
                          if (
                            (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) |
                            ((((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                              (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0)) |
                              0) |
                            0
                          ) {
                            break label$4;
                          }
                          label$38: {
                            label$39: {
                              $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                              if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                break label$39;
                              }
                              HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                              $5_1 = HEAPU8[$5_1 >> 0] | 0;
                              break label$38;
                            }
                            $5_1 = $300($0_1 | 0) | 0;
                          }
                          i64toi32_i32$5 = $11$hi;
                          i64toi32_i32$5 = $12$hi;
                          i64toi32_i32$5 = $11$hi;
                          i64toi32_i32$3 = $11_1;
                          i64toi32_i32$2 = $12$hi;
                          i64toi32_i32$0 = $12_1;
                          i64toi32_i32$1 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                          i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                            i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                          }
                          $9_1 = i64toi32_i32$1;
                          $9$hi = i64toi32_i32$4;
                          $2_1 = HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0;
                          if ($1_1 >>> 0 <= $2_1 >>> 0) {
                            break label$4;
                          }
                          i64toi32_i32$4 = $10$hi;
                          i64toi32_i32$4 = $9$hi;
                          i64toi32_i32$4 = $10$hi;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$5 = $9$hi;
                          i64toi32_i32$0 = 0;
                          $319(
                            $4_1 | 0,
                            $10_1 | 0,
                            i64toi32_i32$4 | 0,
                            0 | 0,
                            i64toi32_i32$3 | 0,
                            $9_1 | 0,
                            i64toi32_i32$5 | 0,
                            0 | 0,
                            i64toi32_i32$0 | 0
                          );
                          i64toi32_i32$3 = $4_1;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 8) | 0) >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 12) | 0) >> 2] | 0;
                          i64toi32_i32$3 = i64toi32_i32$0;
                          i64toi32_i32$0 = 0;
                          i64toi32_i32$4 = 0;
                          if (
                            ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0)) |
                            ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0)) |
                            0
                          ) {
                            break label$4;
                          }
                          continue label$37;
                        }
                      }
                      $8_1 = HEAP8[((((((Math_imul($1_1, 23) >>> 5) | 0) & 7) | 0) + 3377) | 0) >> 0] | 0;
                      i64toi32_i32$3 = 0;
                      $9_1 = 0;
                      $9$hi = i64toi32_i32$3;
                      label$40: {
                        $2_1 = HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0;
                        if ($1_1 >>> 0 <= $2_1 >>> 0) {
                          break label$40;
                        }
                        $7_1 = 0;
                        label$41: while (1) {
                          $7_1 = $2_1 | (($7_1 << $8_1) | 0) | 0;
                          label$42: {
                            label$43: {
                              $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                              if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                break label$43;
                              }
                              HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                              $5_1 = HEAPU8[$5_1 >> 0] | 0;
                              break label$42;
                            }
                            $5_1 = $300($0_1 | 0) | 0;
                          }
                          $2_1 = HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0;
                          label$44: {
                            if ($7_1 >>> 0 > 134217727 >>> 0) {
                              break label$44;
                            }
                            if ($1_1 >>> 0 > $2_1 >>> 0) {
                              continue label$41;
                            }
                          }
                          break label$41;
                        }
                        i64toi32_i32$3 = 0;
                        $9_1 = $7_1;
                        $9$hi = i64toi32_i32$3;
                      }
                      i64toi32_i32$3 = 0;
                      $10_1 = $8_1;
                      $10$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$4 = -1;
                      i64toi32_i32$5 = $10$hi;
                      i64toi32_i32$0 = $10_1;
                      i64toi32_i32$2 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$5 = 0;
                        $32_1 = (i64toi32_i32$3 >>> i64toi32_i32$2) | 0;
                      } else {
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> i64toi32_i32$2) | 0;
                        $32_1 =
                          (((((((1 << i64toi32_i32$2) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                            ((32 - i64toi32_i32$2) | 0)) |
                          0 |
                          ((i64toi32_i32$4 >>> i64toi32_i32$2) | 0) |
                          0;
                      }
                      $11_1 = $32_1;
                      $11$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $9$hi;
                      i64toi32_i32$5 = $11$hi;
                      i64toi32_i32$3 = $11_1;
                      i64toi32_i32$4 = $9$hi;
                      i64toi32_i32$0 = $9_1;
                      if (
                        (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) |
                        ((((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0)) &
                          (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0)) |
                          0) |
                        0
                      ) {
                        break label$4;
                      }
                      if ($1_1 >>> 0 <= $2_1 >>> 0) {
                        break label$4;
                      }
                      label$45: while (1) {
                        i64toi32_i32$3 = $9$hi;
                        i64toi32_i32$3 = $10$hi;
                        i64toi32_i32$3 = $9$hi;
                        i64toi32_i32$0 = $9_1;
                        i64toi32_i32$5 = $10$hi;
                        i64toi32_i32$4 = $10_1;
                        i64toi32_i32$2 = (i64toi32_i32$4 & 31) | 0;
                        if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                          i64toi32_i32$5 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                          $33_1 = 0;
                        } else {
                          i64toi32_i32$5 =
                            (((((1 << i64toi32_i32$2) | 0) - 1) | 0) &
                              ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$2) | 0)) | 0)) |
                            0 |
                            ((i64toi32_i32$3 << i64toi32_i32$2) | 0) |
                            0;
                          $33_1 = (i64toi32_i32$0 << i64toi32_i32$2) | 0;
                        }
                        $324$hi = i64toi32_i32$5;
                        i64toi32_i32$5 = 0;
                        i64toi32_i32$3 = $2_1;
                        i64toi32_i32$0 = 0;
                        i64toi32_i32$4 = 255;
                        i64toi32_i32$0 = (i64toi32_i32$5 & i64toi32_i32$0) | 0;
                        $327_1 = (i64toi32_i32$3 & i64toi32_i32$4) | 0;
                        $327$hi = i64toi32_i32$0;
                        i64toi32_i32$0 = $324$hi;
                        i64toi32_i32$5 = $33_1;
                        i64toi32_i32$3 = $327$hi;
                        i64toi32_i32$4 = $327_1;
                        i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                        $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                        $9$hi = i64toi32_i32$3;
                        label$46: {
                          label$47: {
                            $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                            if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                              break label$47;
                            }
                            HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                            $5_1 = HEAPU8[$5_1 >> 0] | 0;
                            break label$46;
                          }
                          $5_1 = $300($0_1 | 0) | 0;
                        }
                        i64toi32_i32$3 = $9$hi;
                        i64toi32_i32$3 = $11$hi;
                        i64toi32_i32$3 = $9$hi;
                        i64toi32_i32$0 = $9_1;
                        i64toi32_i32$5 = $11$hi;
                        i64toi32_i32$4 = $11_1;
                        if (
                          (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0) |
                          ((((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0)) &
                            (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0)) |
                            0) |
                          0
                        ) {
                          break label$4;
                        }
                        $2_1 = HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0;
                        if ($1_1 >>> 0 > $2_1 >>> 0) {
                          continue label$45;
                        }
                        break label$45;
                      }
                    }
                    if ($1_1 >>> 0 <= (HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0) >>> 0) {
                      break label$3;
                    }
                    label$48: while (1) {
                      label$49: {
                        label$50: {
                          $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                          if ($5_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                            break label$50;
                          }
                          HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                          $5_1 = HEAPU8[$5_1 >> 0] | 0;
                          break label$49;
                        }
                        $5_1 = $300($0_1 | 0) | 0;
                      }
                      if ($1_1 >>> 0 > (HEAPU8[(($5_1 + 3121) | 0) >> 0] | 0) >>> 0) {
                        continue label$48;
                      }
                      break label$48;
                    }
                    HEAP32[($305() | 0) >> 2] = 68;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$4 = $3_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$5 = 1;
                    i64toi32_i32$3 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
                    $6_1 = !((i64toi32_i32$4 & i64toi32_i32$5) | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
                    i64toi32_i32$3 = i64toi32_i32$0;
                    i64toi32_i32$3 = i64toi32_i32$0;
                    $9_1 = i64toi32_i32$4;
                    $9$hi = i64toi32_i32$0;
                  }
                  label$51: {
                    if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                      break label$51;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                  }
                  label$52: {
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$0 = $9_1;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$5 = $3_1;
                    if (
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) |
                      ((((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0)) &
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$52;
                    }
                    label$53: {
                      i64toi32_i32$0 = $3$hi;
                      if (($3_1 & 1) | 0) {
                        break label$53;
                      }
                      if ($6_1) {
                        break label$53;
                      }
                      HEAP32[($305() | 0) >> 2] = 68;
                      i64toi32_i32$0 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$4 = -1;
                      i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                      i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                        i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                      }
                      $3_1 = i64toi32_i32$2;
                      $3$hi = i64toi32_i32$1;
                      break label$1;
                    }
                    i64toi32_i32$1 = $9$hi;
                    i64toi32_i32$1 = $3$hi;
                    i64toi32_i32$1 = $9$hi;
                    i64toi32_i32$0 = $9_1;
                    i64toi32_i32$5 = $3$hi;
                    i64toi32_i32$4 = $3_1;
                    if (
                      ($9$hi >>> 0 < i64toi32_i32$5 >>> 0) |
                      (((($9$hi | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$52;
                    }
                    HEAP32[($305() | 0) >> 2] = 68;
                    break label$1;
                  }
                  i64toi32_i32$0 = $9$hi;
                  i64toi32_i32$1 = $6_1;
                  i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                  $3_1 = i64toi32_i32$1;
                  $3$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $9$hi;
                  i64toi32_i32$4 = $9_1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$5 = $3_1;
                  i64toi32_i32$1 = (i64toi32_i32$0 ^ i64toi32_i32$1) | 0;
                  $406$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$1 = $406$hi;
                  i64toi32_i32$0 = (i64toi32_i32$4 ^ i64toi32_i32$5) | 0;
                  i64toi32_i32$4 = $3$hi;
                  i64toi32_i32$3 = (i64toi32_i32$0 - i64toi32_i32$5) | 0;
                  i64toi32_i32$2 = ((i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 - i64toi32_i32$2) | 0;
                  $3_1 = i64toi32_i32$3;
                  $3$hi = i64toi32_i32$2;
                  break label$1;
                }
                i64toi32_i32$2 = 0;
                $3_1 = 0;
                $3$hi = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                $299($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
              }
              global$0 = ($4_1 + 16) | 0;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
              return i64toi32_i32$0 | 0;
            }

            function $327($0_1, $0$hi, $1_1, $1$hi) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $5$hi = 0,
                $4_1 = 0,
                $3_1 = 0,
                $2_1 = 0,
                i64toi32_i32$2 = 0,
                $37_1 = 0,
                $38_1 = 0,
                $39_1 = 0,
                $40_1 = 0,
                $41_1 = 0,
                $12_1 = 0,
                $12$hi = 0,
                $14$hi = 0,
                $20_1 = 0,
                $24_1 = 0,
                $34_1 = 0,
                $34$hi = 0,
                $42_1 = 0,
                $44_1 = 0,
                $81_1 = 0,
                $81$hi = 0,
                $83_1 = 0,
                $83$hi = 0,
                $87_1 = 0,
                $87$hi = 0,
                $89_1 = 0,
                $90$hi = 0,
                $93_1 = 0,
                $97_1 = 0,
                $105_1 = 0,
                $105$hi = 0,
                $114_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$2 = $1_1;
                  i64toi32_i32$1 = 2147483647;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
                  $5_1 = ($1_1 & i64toi32_i32$3) | 0;
                  $5$hi = i64toi32_i32$1;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$2 = -1065418752;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  $12_1 = i64toi32_i32$4;
                  $12$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $5$hi;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$0 = -1082064896;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $14$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $12$hi;
                  i64toi32_i32$5 = $12_1;
                  i64toi32_i32$1 = $14$hi;
                  i64toi32_i32$3 = i64toi32_i32$2;
                  if (
                    (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0)) &
                      (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$2;
                  }
                  i64toi32_i32$5 = $1$hi;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$1 = 25;
                  i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$4 = 0;
                    $37_1 = (i64toi32_i32$5 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$4 = (i64toi32_i32$5 >>> i64toi32_i32$0) | 0;
                    $37_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $3_1 = $37_1;
                  label$3: {
                    i64toi32_i32$4 = $0$hi;
                    $20_1 = !($0_1 | i64toi32_i32$4 | 0);
                    i64toi32_i32$4 = $1$hi;
                    i64toi32_i32$5 = $1_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$1 = 33554431;
                    i64toi32_i32$3 = (i64toi32_i32$4 & i64toi32_i32$3) | 0;
                    $5_1 = (i64toi32_i32$5 & i64toi32_i32$1) | 0;
                    $5$hi = i64toi32_i32$3;
                    i64toi32_i32$4 = $5_1;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$1 = 16777216;
                    $24_1 =
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) |
                      ((((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0)) &
                        (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$4 = i64toi32_i32$3;
                    i64toi32_i32$4 = i64toi32_i32$3;
                    i64toi32_i32$1 = $5_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$5 = 16777216;
                    if (
                      (((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0)) &
                        ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0))) |
                      0
                        ? $20_1
                        : $24_1
                    ) {
                      break label$3;
                    }
                    $4_1 = ($3_1 + 1073741825) | 0;
                    break label$1;
                  }
                  $4_1 = ($3_1 + 1073741824) | 0;
                  i64toi32_i32$1 = $0$hi;
                  i64toi32_i32$1 = $5$hi;
                  i64toi32_i32$5 = $5_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$3 = 16777216;
                  i64toi32_i32$4 = (i64toi32_i32$1 ^ i64toi32_i32$4) | 0;
                  $34_1 = (i64toi32_i32$5 ^ i64toi32_i32$3) | 0;
                  $34$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $0$hi;
                  i64toi32_i32$1 = $0_1;
                  i64toi32_i32$5 = $34$hi;
                  i64toi32_i32$3 = $34_1;
                  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                  i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  if (
                    ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0)) |
                    ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0)) |
                    0
                  ) {
                    break label$1;
                  }
                  $4_1 = ($4_1 + (($3_1 & 1) | 0)) | 0;
                  break label$1;
                }
                label$4: {
                  i64toi32_i32$4 = $0$hi;
                  $42_1 = !($0_1 | i64toi32_i32$4 | 0);
                  i64toi32_i32$4 = $5$hi;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$5 = 2147418112;
                  i64toi32_i32$1 = 0;
                  $44_1 =
                    (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0)) &
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$3 = i64toi32_i32$4;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$4 = 2147418112;
                  i64toi32_i32$5 = 0;
                  if (
                    (((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0)) &
                      ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0))) |
                    0
                      ? $42_1
                      : $44_1
                  ) {
                    break label$4;
                  }
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$5 = $1_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = 25;
                  i64toi32_i32$0 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = 0;
                    $38_1 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$3 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                    $38_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $4_1 = ($38_1 & 4194303) | 0 | 2143289344 | 0;
                  break label$1;
                }
                $4_1 = 2139095040;
                i64toi32_i32$3 = $5$hi;
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$5 = 1082064895;
                i64toi32_i32$4 = -1;
                if (
                  (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0) |
                  ((((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0)) &
                    (i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0)) |
                    0) |
                  0
                ) {
                  break label$1;
                }
                $4_1 = 0;
                i64toi32_i32$1 = $5$hi;
                i64toi32_i32$4 = $5_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 48;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $39_1 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                } else {
                  i64toi32_i32$3 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                  $39_1 =
                    (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                      ((32 - i64toi32_i32$0) | 0)) |
                    0 |
                    ((i64toi32_i32$4 >>> i64toi32_i32$0) | 0) |
                    0;
                }
                $3_1 = $39_1;
                if ($3_1 >>> 0 < 16145 >>> 0) {
                  break label$1;
                }
                i64toi32_i32$3 = $0$hi;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$1 = $1_1;
                i64toi32_i32$4 = 65535;
                i64toi32_i32$5 = -1;
                i64toi32_i32$4 = (i64toi32_i32$3 & i64toi32_i32$4) | 0;
                i64toi32_i32$3 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                i64toi32_i32$1 = 65536;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                $5$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $0$hi;
                i64toi32_i32$3 = $5$hi;
                $303(
                  ($2_1 + 16) | 0 | 0,
                  $0_1 | 0,
                  i64toi32_i32$1 | 0,
                  $5_1 | 0,
                  i64toi32_i32$3 | 0,
                  ($3_1 + -16129) | 0 | 0
                );
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$3 = $5$hi;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$1 = $5$hi;
                $307(
                  $2_1 | 0,
                  $0_1 | 0,
                  i64toi32_i32$3 | 0,
                  $5_1 | 0,
                  i64toi32_i32$1 | 0,
                  (16257 - $3_1) | 0 | 0
                );
                i64toi32_i32$4 = ($2_1 + 8) | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                i64toi32_i32$3 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                $5_1 = i64toi32_i32$1;
                $5$hi = i64toi32_i32$3;
                i64toi32_i32$4 = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$5 = 25;
                i64toi32_i32$0 = (i64toi32_i32$5 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$5 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $40_1 = (i64toi32_i32$3 >>> i64toi32_i32$0) | 0;
                } else {
                  i64toi32_i32$1 = (i64toi32_i32$3 >>> i64toi32_i32$0) | 0;
                  $40_1 =
                    (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                      ((32 - i64toi32_i32$0) | 0)) |
                    0 |
                    ((i64toi32_i32$4 >>> i64toi32_i32$0) | 0) |
                    0;
                }
                $4_1 = $40_1;
                label$5: {
                  i64toi32_i32$3 = $2_1;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                  $81_1 = i64toi32_i32$1;
                  $81$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 16) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 20) | 0) >> 2] | 0;
                  $83_1 = i64toi32_i32$4;
                  $83$hi = i64toi32_i32$1;
                  i64toi32_i32$3 = (((i64toi32_i32$3 + 16) | 0) + 8) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                  $87_1 = i64toi32_i32$1;
                  $87$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $83$hi;
                  i64toi32_i32$3 = $83_1;
                  i64toi32_i32$1 = $87$hi;
                  i64toi32_i32$5 = $87_1;
                  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = 0;
                  $89_1 =
                    ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0)) |
                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0)) |
                    0;
                  i64toi32_i32$4 = 0;
                  $90$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $81$hi;
                  i64toi32_i32$5 = $81_1;
                  i64toi32_i32$1 = $90$hi;
                  i64toi32_i32$3 = $89_1;
                  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                  $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                  $0$hi = i64toi32_i32$1;
                  $93_1 = !($0_1 | i64toi32_i32$1 | 0);
                  i64toi32_i32$1 = $5$hi;
                  i64toi32_i32$4 = $5_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$3 = 33554431;
                  i64toi32_i32$5 = (i64toi32_i32$1 & i64toi32_i32$5) | 0;
                  $5_1 = (i64toi32_i32$4 & i64toi32_i32$3) | 0;
                  $5$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$3 = 16777216;
                  $97_1 =
                    (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) |
                    ((((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0)) &
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$1 = i64toi32_i32$5;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = 16777216;
                  if (
                    (((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0)) &
                      ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0))) |
                    0
                      ? $93_1
                      : $97_1
                  ) {
                    break label$5;
                  }
                  $4_1 = ($4_1 + 1) | 0;
                  break label$1;
                }
                i64toi32_i32$3 = $0$hi;
                i64toi32_i32$3 = $5$hi;
                i64toi32_i32$4 = $5_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$5 = 16777216;
                i64toi32_i32$1 = (i64toi32_i32$3 ^ i64toi32_i32$1) | 0;
                $105_1 = (i64toi32_i32$4 ^ i64toi32_i32$5) | 0;
                $105$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $0$hi;
                i64toi32_i32$3 = $0_1;
                i64toi32_i32$4 = $105$hi;
                i64toi32_i32$5 = $105_1;
                i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 0;
                if (
                  ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0)) |
                  ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0)) |
                  0
                ) {
                  break label$1;
                }
                $4_1 = ((($4_1 & 1) | 0) + $4_1) | 0;
              }
              global$0 = ($2_1 + 32) | 0;
              $114_1 = $4_1;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$5 = $1_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$0 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$4 = 0;
                $41_1 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
              } else {
                i64toi32_i32$4 = (i64toi32_i32$1 >>> i64toi32_i32$0) | 0;
                $41_1 =
                  (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                    ((32 - i64toi32_i32$0) | 0)) |
                  0 |
                  ((i64toi32_i32$5 >>> i64toi32_i32$0) | 0) |
                  0;
              }
              return Math_fround(
                (wasm2js_scratch_store_i32(2, $114_1 | (($41_1 & -2147483648) | 0) | 0),
                wasm2js_scratch_load_f32())
              );
            }

            function $328($0_1, $0$hi, $1_1, $1$hi) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$1 = 0,
                $4_1 = 0,
                $4$hi = 0,
                $5$hi = 0,
                $5_1 = 0,
                $2_1 = 0,
                $3_1 = 0,
                $43_1 = 0,
                $45_1 = 0,
                $46_1 = 0,
                $47_1 = 0,
                $48_1 = 0,
                $49_1 = 0,
                $50_1 = 0,
                $12_1 = 0,
                $12$hi = 0,
                $14$hi = 0,
                $17_1 = 0,
                $17$hi = 0,
                $19$hi = 0,
                $34_1 = 0,
                $34$hi = 0,
                $37_1 = 0,
                $39_1 = 0,
                $44_1 = 0,
                $44$hi = 0,
                $46$hi = 0,
                $74_1 = 0,
                $74$hi = 0,
                $78$hi = 0,
                $81_1 = 0,
                $81$hi = 0,
                $83_1 = 0,
                $83$hi = 0,
                $87_1 = 0,
                $87$hi = 0,
                $89_1 = 0,
                $90$hi = 0,
                $100$hi = 0,
                $107_1 = 0,
                $107$hi = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$2 = $1_1;
                  i64toi32_i32$1 = 2147483647;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
                  $4_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                  $4$hi = i64toi32_i32$1;
                  i64toi32_i32$0 = $4_1;
                  i64toi32_i32$2 = -1006698496;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                  }
                  $12_1 = i64toi32_i32$4;
                  $12$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $4$hi;
                  i64toi32_i32$1 = $4_1;
                  i64toi32_i32$0 = -1140785152;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $14$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $12$hi;
                  i64toi32_i32$5 = $12_1;
                  i64toi32_i32$1 = $14$hi;
                  i64toi32_i32$3 = i64toi32_i32$2;
                  if (
                    (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0)) &
                      (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$2;
                  }
                  i64toi32_i32$5 = $0$hi;
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$1 = 60;
                  i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$4 = 0;
                    $43_1 = (i64toi32_i32$5 >>> i64toi32_i32$0) | 0;
                  } else {
                    i64toi32_i32$4 = (i64toi32_i32$5 >>> i64toi32_i32$0) | 0;
                    $43_1 =
                      (((((((1 << i64toi32_i32$0) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                        ((32 - i64toi32_i32$0) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$0) | 0) |
                      0;
                  }
                  $17_1 = $43_1;
                  $17$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $1$hi;
                  i64toi32_i32$5 = $1_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$1 = 4;
                  i64toi32_i32$0 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$3 = (i64toi32_i32$5 << i64toi32_i32$0) | 0;
                    $45_1 = 0;
                  } else {
                    i64toi32_i32$3 =
                      (((((1 << i64toi32_i32$0) | 0) - 1) | 0) &
                        ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$0) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$4 << i64toi32_i32$0) | 0) |
                      0;
                    $45_1 = (i64toi32_i32$5 << i64toi32_i32$0) | 0;
                  }
                  $19$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $17$hi;
                  i64toi32_i32$4 = $17_1;
                  i64toi32_i32$5 = $19$hi;
                  i64toi32_i32$1 = $45_1;
                  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                  $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                  $4$hi = i64toi32_i32$5;
                  label$3: {
                    i64toi32_i32$5 = $0$hi;
                    i64toi32_i32$3 = $0_1;
                    i64toi32_i32$4 = 268435455;
                    i64toi32_i32$1 = -1;
                    i64toi32_i32$4 = (i64toi32_i32$5 & i64toi32_i32$4) | 0;
                    $0_1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
                    $0$hi = i64toi32_i32$4;
                    i64toi32_i32$5 = $0_1;
                    i64toi32_i32$3 = 134217728;
                    i64toi32_i32$1 = 1;
                    if (
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0)) &
                        (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$3;
                    }
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$1 = $4_1;
                    i64toi32_i32$4 = 1073741824;
                    i64toi32_i32$3 = 1;
                    i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                    i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$4) | 0;
                    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                    }
                    $5_1 = i64toi32_i32$0;
                    $5$hi = i64toi32_i32$2;
                    break label$1;
                  }
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$5 = $4_1;
                  i64toi32_i32$1 = 1073741824;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                  i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$1) | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                    i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                  }
                  $5_1 = i64toi32_i32$4;
                  $5$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $0$hi;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$5 = 134217728;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = (i64toi32_i32$0 ^ i64toi32_i32$5) | 0;
                  i64toi32_i32$0 = (i64toi32_i32$2 ^ i64toi32_i32$3) | 0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 0;
                  if (
                    ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0)) |
                    ((i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0)) |
                    0
                  ) {
                    break label$1;
                  }
                  i64toi32_i32$0 = $5$hi;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$3 = $4_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$5 = (i64toi32_i32$0 & i64toi32_i32$5) | 0;
                  $34_1 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                  $34$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $5$hi;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$3 = $34$hi;
                  i64toi32_i32$2 = $34_1;
                  i64toi32_i32$1 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                    i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                  }
                  $5_1 = i64toi32_i32$1;
                  $5$hi = i64toi32_i32$4;
                  break label$1;
                }
                label$4: {
                  i64toi32_i32$4 = $0$hi;
                  $37_1 = !($0_1 | i64toi32_i32$4 | 0);
                  i64toi32_i32$4 = $4$hi;
                  i64toi32_i32$5 = $4_1;
                  i64toi32_i32$0 = 2147418112;
                  i64toi32_i32$2 = 0;
                  $39_1 =
                    (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) |
                    ((((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0)) &
                      (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$5 = i64toi32_i32$4;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$4 = 2147418112;
                  i64toi32_i32$0 = 0;
                  if (
                    (((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                      ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0))) |
                    0
                      ? $37_1
                      : $39_1
                  ) {
                    break label$4;
                  }
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$0 = $0_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = 60;
                  i64toi32_i32$3 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$5 = 0;
                    $46_1 = (i64toi32_i32$2 >>> i64toi32_i32$3) | 0;
                  } else {
                    i64toi32_i32$5 = (i64toi32_i32$2 >>> i64toi32_i32$3) | 0;
                    $46_1 =
                      (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$3) | 0)) |
                      0 |
                      ((i64toi32_i32$0 >>> i64toi32_i32$3) | 0) |
                      0;
                  }
                  $44_1 = $46_1;
                  $44$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $1$hi;
                  i64toi32_i32$2 = $1_1;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$4 = 4;
                  i64toi32_i32$3 = (i64toi32_i32$4 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$4 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                    $47_1 = 0;
                  } else {
                    i64toi32_i32$0 =
                      (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$5 << i64toi32_i32$3) | 0) |
                      0;
                    $47_1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                  }
                  $46$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $44$hi;
                  i64toi32_i32$5 = $44_1;
                  i64toi32_i32$2 = $46$hi;
                  i64toi32_i32$4 = $47_1;
                  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                  i64toi32_i32$5 = 524287;
                  i64toi32_i32$4 = -1;
                  i64toi32_i32$5 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
                  i64toi32_i32$2 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
                  i64toi32_i32$0 = 2146959360;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                  $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                  $5$hi = i64toi32_i32$0;
                  break label$1;
                }
                i64toi32_i32$0 = 2146435072;
                $5_1 = 0;
                $5$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$5 = $4_1;
                i64toi32_i32$2 = 1140785151;
                i64toi32_i32$4 = -1;
                if (
                  (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0) |
                  ((((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0)) &
                    (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0)) |
                    0) |
                  0
                ) {
                  break label$1;
                }
                i64toi32_i32$5 = 0;
                $5_1 = 0;
                $5$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$4 = $4_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$2 = 48;
                i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                  i64toi32_i32$0 = 0;
                  $48_1 = (i64toi32_i32$5 >>> i64toi32_i32$3) | 0;
                } else {
                  i64toi32_i32$0 = (i64toi32_i32$5 >>> i64toi32_i32$3) | 0;
                  $48_1 =
                    (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$5) | 0) <<
                      ((32 - i64toi32_i32$3) | 0)) |
                    0 |
                    ((i64toi32_i32$4 >>> i64toi32_i32$3) | 0) |
                    0;
                }
                $3_1 = $48_1;
                if ($3_1 >>> 0 < 15249 >>> 0) {
                  break label$1;
                }
                i64toi32_i32$0 = $0$hi;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$5 = $1_1;
                i64toi32_i32$4 = 65535;
                i64toi32_i32$2 = -1;
                i64toi32_i32$4 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
                i64toi32_i32$0 = (i64toi32_i32$5 & i64toi32_i32$2) | 0;
                i64toi32_i32$5 = 65536;
                i64toi32_i32$2 = 0;
                i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                $4$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $0$hi;
                i64toi32_i32$0 = $4$hi;
                $303(
                  ($2_1 + 16) | 0 | 0,
                  $0_1 | 0,
                  i64toi32_i32$5 | 0,
                  $4_1 | 0,
                  i64toi32_i32$0 | 0,
                  ($3_1 + -15233) | 0 | 0
                );
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$5 = $4$hi;
                $307(
                  $2_1 | 0,
                  $0_1 | 0,
                  i64toi32_i32$0 | 0,
                  $4_1 | 0,
                  i64toi32_i32$5 | 0,
                  (15361 - $3_1) | 0 | 0
                );
                i64toi32_i32$4 = $2_1;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] | 0;
                $4_1 = i64toi32_i32$5;
                $4$hi = i64toi32_i32$0;
                i64toi32_i32$4 = i64toi32_i32$5;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = 60;
                i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                  i64toi32_i32$5 = 0;
                  $49_1 = (i64toi32_i32$0 >>> i64toi32_i32$3) | 0;
                } else {
                  i64toi32_i32$5 = (i64toi32_i32$0 >>> i64toi32_i32$3) | 0;
                  $49_1 =
                    (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                      ((32 - i64toi32_i32$3) | 0)) |
                    0 |
                    ((i64toi32_i32$4 >>> i64toi32_i32$3) | 0) |
                    0;
                }
                $74_1 = $49_1;
                $74$hi = i64toi32_i32$5;
                i64toi32_i32$0 = ($2_1 + 8) | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = 4;
                i64toi32_i32$3 = (i64toi32_i32$2 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$0 << i64toi32_i32$3) | 0;
                  $50_1 = 0;
                } else {
                  i64toi32_i32$5 =
                    (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                      ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$4 << i64toi32_i32$3) | 0) |
                    0;
                  $50_1 = (i64toi32_i32$0 << i64toi32_i32$3) | 0;
                }
                $78$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $74$hi;
                i64toi32_i32$4 = $74_1;
                i64toi32_i32$0 = $78$hi;
                i64toi32_i32$2 = $50_1;
                i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                $5$hi = i64toi32_i32$0;
                label$5: {
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$5 = $4_1;
                  i64toi32_i32$4 = 268435455;
                  i64toi32_i32$2 = -1;
                  i64toi32_i32$4 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
                  $81_1 = (i64toi32_i32$5 & i64toi32_i32$2) | 0;
                  $81$hi = i64toi32_i32$4;
                  i64toi32_i32$0 = $2_1;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 16) | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[((i64toi32_i32$0 + 20) | 0) >> 2] | 0;
                  $83_1 = i64toi32_i32$4;
                  $83$hi = i64toi32_i32$5;
                  i64toi32_i32$0 = (((i64toi32_i32$0 + 16) | 0) + 8) | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                  $87_1 = i64toi32_i32$5;
                  $87$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $83$hi;
                  i64toi32_i32$0 = $83_1;
                  i64toi32_i32$5 = $87$hi;
                  i64toi32_i32$2 = $87_1;
                  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                  i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$2 = 0;
                  $89_1 =
                    ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0)) |
                    ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0)) |
                    0;
                  i64toi32_i32$4 = 0;
                  $90$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $81$hi;
                  i64toi32_i32$2 = $81_1;
                  i64toi32_i32$5 = $90$hi;
                  i64toi32_i32$0 = $89_1;
                  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                  $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                  $4$hi = i64toi32_i32$5;
                  i64toi32_i32$4 = $4_1;
                  i64toi32_i32$2 = 134217728;
                  i64toi32_i32$0 = 1;
                  if (
                    (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) |
                    ((((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0)) &
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$5;
                  }
                  i64toi32_i32$4 = $5$hi;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 1;
                  i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                  }
                  $5_1 = i64toi32_i32$3;
                  $5$hi = i64toi32_i32$1;
                  break label$1;
                }
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$4 = $4_1;
                i64toi32_i32$0 = 134217728;
                i64toi32_i32$2 = 0;
                i64toi32_i32$0 = (i64toi32_i32$1 ^ i64toi32_i32$0) | 0;
                i64toi32_i32$1 = (i64toi32_i32$4 ^ i64toi32_i32$2) | 0;
                i64toi32_i32$4 = 0;
                i64toi32_i32$2 = 0;
                if (
                  ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                  ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0)) |
                  0
                ) {
                  break label$1;
                }
                i64toi32_i32$1 = $5$hi;
                i64toi32_i32$2 = $5_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$4 = 1;
                i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                $100$hi = i64toi32_i32$0;
                i64toi32_i32$0 = i64toi32_i32$1;
                i64toi32_i32$0 = $100$hi;
                i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$4) | 0;
                i64toi32_i32$2 = $5$hi;
                i64toi32_i32$4 = $5_1;
                i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                i64toi32_i32$3 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$3 + 1) | 0;
                }
                $5_1 = i64toi32_i32$5;
                $5$hi = i64toi32_i32$3;
              }
              global$0 = ($2_1 + 32) | 0;
              i64toi32_i32$3 = $5$hi;
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$0 = $1_1;
              i64toi32_i32$1 = -2147483648;
              i64toi32_i32$4 = 0;
              i64toi32_i32$1 = (i64toi32_i32$3 & i64toi32_i32$1) | 0;
              $107_1 = (i64toi32_i32$0 & i64toi32_i32$4) | 0;
              $107$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $5$hi;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$0 = $107$hi;
              i64toi32_i32$4 = $107_1;
              i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
              wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
              wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
              return +(+wasm2js_scratch_load_f64());
            }

            function $329() {
              return 16784 | 0;
            }

            function $330($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $6_1 = 0,
                $5_1 = 0,
                $8_1 = 0,
                $4_1 = 0,
                $7_1 = 0,
                $9_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              $5_1 = $3_1 ? $3_1 : 17540;
              $3_1 = HEAP32[$5_1 >> 2] | 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      if ($1_1) {
                        break label$4;
                      }
                      if ($3_1) {
                        break label$3;
                      }
                      $6_1 = 0;
                      break label$1;
                    }
                    $6_1 = -2;
                    if (!$2_1) {
                      break label$1;
                    }
                    $7_1 = $0_1 ? $0_1 : ($4_1 + 12) | 0;
                    label$5: {
                      label$6: {
                        if (!$3_1) {
                          break label$6;
                        }
                        $0_1 = $2_1;
                        break label$5;
                      }
                      label$7: {
                        $3_1 = HEAPU8[$1_1 >> 0] | 0;
                        $0_1 = ((($3_1 << 24) | 0) >> 24) | 0;
                        if (($0_1 | 0) < (0 | 0)) {
                          break label$7;
                        }
                        HEAP32[$7_1 >> 2] = $3_1;
                        $6_1 = ($0_1 | 0) != (0 | 0);
                        break label$1;
                      }
                      $3_1 = HEAP32[(HEAP32[((($329() | 0) + 172) | 0) >> 2] | 0) >> 2] | 0;
                      $0_1 = HEAP8[$1_1 >> 0] | 0;
                      label$8: {
                        if ($3_1) {
                          break label$8;
                        }
                        HEAP32[$7_1 >> 2] = ($0_1 & 57343) | 0;
                        $6_1 = 1;
                        break label$1;
                      }
                      $3_1 = ((($0_1 & 255) | 0) + -194) | 0;
                      if ($3_1 >>> 0 > 50 >>> 0) {
                        break label$3;
                      }
                      $3_1 = HEAP32[((3392 + (($3_1 << 2) | 0)) | 0) >> 2] | 0;
                      $0_1 = ($2_1 + -1) | 0;
                      if (!$0_1) {
                        break label$2;
                      }
                      $1_1 = ($1_1 + 1) | 0;
                    }
                    $8_1 = HEAPU8[$1_1 >> 0] | 0;
                    $9_1 = ($8_1 >>> 3) | 0;
                    if ((($9_1 + -16) | 0 | (((($3_1 >> 26) | 0) + $9_1) | 0) | 0) >>> 0 > 7 >>> 0) {
                      break label$3;
                    }
                    label$9: while (1) {
                      $0_1 = ($0_1 + -1) | 0;
                      label$10: {
                        $3_1 = ((($8_1 & 255) | 0) + -128) | 0 | (($3_1 << 6) | 0) | 0;
                        if (($3_1 | 0) < (0 | 0)) {
                          break label$10;
                        }
                        HEAP32[$5_1 >> 2] = 0;
                        HEAP32[$7_1 >> 2] = $3_1;
                        $6_1 = ($2_1 - $0_1) | 0;
                        break label$1;
                      }
                      if (!$0_1) {
                        break label$2;
                      }
                      $1_1 = ($1_1 + 1) | 0;
                      $8_1 = HEAPU8[$1_1 >> 0] | 0;
                      if ((($8_1 & 192) | 0 | 0) == (128 | 0)) {
                        continue label$9;
                      }
                      break label$9;
                    }
                  }
                  HEAP32[$5_1 >> 2] = 0;
                  HEAP32[($305() | 0) >> 2] = 25;
                  $6_1 = -1;
                  break label$1;
                }
                HEAP32[$5_1 >> 2] = $3_1;
              }
              global$0 = ($4_1 + 16) | 0;
              return $6_1 | 0;
            }

            function $331($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if ($0_1) {
                  break label$1;
                }
                return 1 | 0;
              }
              return !(HEAP32[$0_1 >> 2] | 0) | 0;
            }

            function $332($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $7_1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$0 = 0,
                $6_1 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                $13_1 = 0,
                $3_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $17$hi = 0,
                $15_1 = 0,
                $18$hi = 0,
                $17_1 = 0,
                $18_1 = 0,
                $19$hi = 0,
                $4_1 = 0,
                $8_1 = 0,
                $14_1 = 0,
                $19_1 = 0,
                $16_1 = 0,
                i64toi32_i32$6 = 0,
                $5_1 = 0,
                $58_1 = 0,
                $68$hi = 0,
                $70$hi = 0,
                $75_1 = 0,
                $75$hi = 0,
                $175_1 = 0,
                $185_1 = 0,
                $247$hi = 0,
                $249$hi = 0,
                $254_1 = 0,
                $254$hi = 0,
                $295_1 = 0,
                $295$hi = 0,
                $301_1 = 0,
                $301$hi = 0,
                $302$hi = 0,
                $408_1 = 0,
                $408$hi = 0,
                $414_1 = 0,
                $414$hi = 0,
                $415$hi = 0,
                $616_1 = 0,
                $616$hi = 0,
                $621_1 = 0,
                $621$hi = 0,
                $649$hi = 0,
                $651$hi = 0,
                $657_1 = 0,
                $657$hi = 0;
              $3_1 = (global$0 - 304) | 0;
              global$0 = $3_1;
              $4_1 = 0;
              $5_1 = 0;
              label$1: {
                if ((HEAP32[(($0_1 + 76) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                  break label$1;
                }
                $5_1 = $1713($0_1 | 0) | 0;
              }
              label$2: {
                $6_1 = HEAPU8[$1_1 >> 0] | 0;
                if (!$6_1) {
                  break label$2;
                }
                i64toi32_i32$0 = 0;
                $17_1 = 0;
                $17$hi = i64toi32_i32$0;
                $4_1 = 0;
                label$3: {
                  label$4: {
                    label$5: {
                      label$6: {
                        label$7: while (1) {
                          label$8: {
                            label$9: {
                              if (!($292(($6_1 & 255) | 0 | 0) | 0)) {
                                break label$9;
                              }
                              label$10: while (1) {
                                $6_1 = $1_1;
                                $1_1 = ($1_1 + 1) | 0;
                                if ($292(HEAPU8[(($6_1 + 1) | 0) >> 0] | 0 | 0) | 0) {
                                  continue label$10;
                                }
                                break label$10;
                              }
                              i64toi32_i32$0 = 0;
                              $299($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                              label$11: while (1) {
                                label$12: {
                                  label$13: {
                                    $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                    if ($1_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                      break label$13;
                                    }
                                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($1_1 + 1) | 0;
                                    $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                    break label$12;
                                  }
                                  $1_1 = $300($0_1 | 0) | 0;
                                }
                                if ($292($1_1 | 0) | 0) {
                                  continue label$11;
                                }
                                break label$11;
                              }
                              $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                              label$14: {
                                if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                                  break label$14;
                                }
                                $1_1 = ($1_1 + -1) | 0;
                                HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
                              }
                              i64toi32_i32$2 = $0_1;
                              i64toi32_i32$0 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                              i64toi32_i32$1 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                              $68$hi = i64toi32_i32$1;
                              i64toi32_i32$1 = $17$hi;
                              i64toi32_i32$1 = $68$hi;
                              i64toi32_i32$2 = i64toi32_i32$0;
                              i64toi32_i32$0 = $17$hi;
                              i64toi32_i32$3 = $17_1;
                              i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                              i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                              }
                              $70$hi = i64toi32_i32$5;
                              i64toi32_i32$2 = ($1_1 - (HEAP32[(($0_1 + 8) | 0) >> 2] | 0)) | 0;
                              i64toi32_i32$5 = (i64toi32_i32$2 >> 31) | 0;
                              $75_1 = i64toi32_i32$2;
                              $75$hi = i64toi32_i32$5;
                              i64toi32_i32$5 = $70$hi;
                              i64toi32_i32$1 = i64toi32_i32$4;
                              i64toi32_i32$2 = $75$hi;
                              i64toi32_i32$3 = $75_1;
                              i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                              i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                              }
                              $17_1 = i64toi32_i32$0;
                              $17$hi = i64toi32_i32$4;
                              break label$8;
                            }
                            label$15: {
                              label$16: {
                                label$17: {
                                  label$18: {
                                    $6_1 = HEAPU8[$1_1 >> 0] | 0;
                                    if (($6_1 | 0) != (37 | 0)) {
                                      break label$18;
                                    }
                                    $7_1 = HEAPU8[(($1_1 + 1) | 0) >> 0] | 0;
                                    if (($7_1 | 0) == (42 | 0)) {
                                      break label$17;
                                    }
                                    if (($7_1 | 0) != (37 | 0)) {
                                      break label$16;
                                    }
                                  }
                                  i64toi32_i32$4 = 0;
                                  $299($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                  $6_1 = ($1_1 + (($6_1 | 0) == (37 | 0))) | 0;
                                  label$19: {
                                    label$20: {
                                      $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                      if ($1_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                        break label$20;
                                      }
                                      HEAP32[(($0_1 + 4) | 0) >> 2] = ($1_1 + 1) | 0;
                                      $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                      break label$19;
                                    }
                                    $1_1 = $300($0_1 | 0) | 0;
                                  }
                                  label$21: {
                                    if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
                                      break label$21;
                                    }
                                    label$22: {
                                      if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                                        break label$22;
                                      }
                                      HEAP32[(($0_1 + 4) | 0) >> 2] =
                                        ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                                    }
                                    if ($4_1) {
                                      break label$2;
                                    }
                                    $8_1 = 0;
                                    if (($1_1 | 0) <= (-1 | 0)) {
                                      break label$4;
                                    }
                                    break label$2;
                                  }
                                  i64toi32_i32$4 = $17$hi;
                                  i64toi32_i32$5 = $17_1;
                                  i64toi32_i32$1 = 0;
                                  i64toi32_i32$3 = 1;
                                  i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                                  i64toi32_i32$0 = (i64toi32_i32$4 + i64toi32_i32$1) | 0;
                                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                                    i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                                  }
                                  $17_1 = i64toi32_i32$2;
                                  $17$hi = i64toi32_i32$0;
                                  break label$8;
                                }
                                $6_1 = ($1_1 + 2) | 0;
                                $9_1 = 0;
                                break label$15;
                              }
                              label$23: {
                                if (!($301($7_1 | 0) | 0)) {
                                  break label$23;
                                }
                                if ((HEAPU8[(($1_1 + 2) | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                  break label$23;
                                }
                                $6_1 = ($1_1 + 3) | 0;
                                $9_1 =
                                  $333($2_1 | 0, ((HEAPU8[(($1_1 + 1) | 0) >> 0] | 0) + -48) | 0 | 0) | 0;
                                break label$15;
                              }
                              $6_1 = ($1_1 + 1) | 0;
                              $9_1 = HEAP32[$2_1 >> 2] | 0;
                              $2_1 = ($2_1 + 4) | 0;
                            }
                            $8_1 = 0;
                            $1_1 = 0;
                            label$24: {
                              if (!($301(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
                                break label$24;
                              }
                              label$25: while (1) {
                                $1_1 = (((Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0)) | 0) + -48) | 0;
                                $7_1 = HEAPU8[(($6_1 + 1) | 0) >> 0] | 0;
                                $6_1 = ($6_1 + 1) | 0;
                                if ($301($7_1 | 0) | 0) {
                                  continue label$25;
                                }
                                break label$25;
                              }
                            }
                            label$26: {
                              label$27: {
                                $10_1 = HEAPU8[$6_1 >> 0] | 0;
                                if (($10_1 | 0) == (109 | 0)) {
                                  break label$27;
                                }
                                $7_1 = $6_1;
                                break label$26;
                              }
                              $7_1 = ($6_1 + 1) | 0;
                              $11_1 = 0;
                              $8_1 = ($9_1 | 0) != (0 | 0);
                              $10_1 = HEAPU8[(($6_1 + 1) | 0) >> 0] | 0;
                              $12_1 = 0;
                            }
                            $6_1 = ($7_1 + 1) | 0;
                            $13_1 = 3;
                            label$28: {
                              label$29: {
                                switch (((($10_1 & 255) | 0) + -65) | 0 | 0) {
                                  case 39:
                                    $175_1 = ($7_1 + 2) | 0;
                                    $7_1 = (HEAPU8[(($7_1 + 1) | 0) >> 0] | 0 | 0) == (104 | 0);
                                    $6_1 = $7_1 ? $175_1 : $6_1;
                                    $13_1 = $7_1 ? -2 : -1;
                                    break label$28;
                                  case 43:
                                    $185_1 = ($7_1 + 2) | 0;
                                    $7_1 = (HEAPU8[(($7_1 + 1) | 0) >> 0] | 0 | 0) == (108 | 0);
                                    $6_1 = $7_1 ? $185_1 : $6_1;
                                    $13_1 = $7_1 ? 3 : 1;
                                    break label$28;
                                  case 51:
                                  case 57:
                                    $13_1 = 1;
                                    break label$28;
                                  case 11:
                                    $13_1 = 2;
                                    break label$28;
                                  case 41:
                                    break label$28;
                                  case 0:
                                  case 2:
                                  case 4:
                                  case 5:
                                  case 6:
                                  case 18:
                                  case 23:
                                  case 26:
                                  case 32:
                                  case 34:
                                  case 35:
                                  case 36:
                                  case 37:
                                  case 38:
                                  case 40:
                                  case 45:
                                  case 46:
                                  case 47:
                                  case 50:
                                  case 52:
                                  case 55:
                                    break label$29;
                                  default:
                                    break label$5;
                                }
                              }
                              $13_1 = 0;
                              $6_1 = $7_1;
                            }
                            $7_1 = HEAPU8[$6_1 >> 0] | 0;
                            $10_1 = (($7_1 & 47) | 0 | 0) == (3 | 0);
                            $14_1 = $10_1 ? 1 : $13_1;
                            label$34: {
                              $15_1 = $10_1 ? $7_1 | 32 | 0 : $7_1;
                              if (($15_1 | 0) == (91 | 0)) {
                                break label$34;
                              }
                              label$35: {
                                label$36: {
                                  if (($15_1 | 0) == (110 | 0)) {
                                    break label$36;
                                  }
                                  if (($15_1 | 0) != (99 | 0)) {
                                    break label$35;
                                  }
                                  $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
                                  break label$34;
                                }
                                i64toi32_i32$0 = $17$hi;
                                $334($9_1 | 0, $14_1 | 0, $17_1 | 0, i64toi32_i32$0 | 0);
                                break label$8;
                              }
                              i64toi32_i32$0 = 0;
                              $299($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                              label$37: while (1) {
                                label$38: {
                                  label$39: {
                                    $7_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                    if ($7_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                      break label$39;
                                    }
                                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                                    $7_1 = HEAPU8[$7_1 >> 0] | 0;
                                    break label$38;
                                  }
                                  $7_1 = $300($0_1 | 0) | 0;
                                }
                                if ($292($7_1 | 0) | 0) {
                                  continue label$37;
                                }
                                break label$37;
                              }
                              $7_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                              label$40: {
                                if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                                  break label$40;
                                }
                                $7_1 = ($7_1 + -1) | 0;
                                HEAP32[(($0_1 + 4) | 0) >> 2] = $7_1;
                              }
                              i64toi32_i32$4 = $0_1;
                              i64toi32_i32$0 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                              i64toi32_i32$5 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                              $247$hi = i64toi32_i32$5;
                              i64toi32_i32$5 = $17$hi;
                              i64toi32_i32$5 = $247$hi;
                              i64toi32_i32$4 = i64toi32_i32$0;
                              i64toi32_i32$0 = $17$hi;
                              i64toi32_i32$3 = $17_1;
                              i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$3) | 0;
                              i64toi32_i32$2 = (i64toi32_i32$5 + i64toi32_i32$0) | 0;
                              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$2 = (i64toi32_i32$2 + 1) | 0;
                              }
                              $249$hi = i64toi32_i32$2;
                              i64toi32_i32$4 = ($7_1 - (HEAP32[(($0_1 + 8) | 0) >> 2] | 0)) | 0;
                              i64toi32_i32$2 = (i64toi32_i32$4 >> 31) | 0;
                              $254_1 = i64toi32_i32$4;
                              $254$hi = i64toi32_i32$2;
                              i64toi32_i32$2 = $249$hi;
                              i64toi32_i32$5 = i64toi32_i32$1;
                              i64toi32_i32$4 = $254$hi;
                              i64toi32_i32$3 = $254_1;
                              i64toi32_i32$0 = (i64toi32_i32$5 + i64toi32_i32$3) | 0;
                              i64toi32_i32$1 = (i64toi32_i32$2 + i64toi32_i32$4) | 0;
                              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                              }
                              $17_1 = i64toi32_i32$0;
                              $17$hi = i64toi32_i32$1;
                            }
                            i64toi32_i32$5 = $1_1;
                            i64toi32_i32$1 = (i64toi32_i32$5 >> 31) | 0;
                            $18_1 = i64toi32_i32$5;
                            $18$hi = i64toi32_i32$1;
                            $299($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
                            label$41: {
                              label$42: {
                                $13_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                $7_1 = HEAP32[(($0_1 + 104) | 0) >> 2] | 0;
                                if ($13_1 >>> 0 >= $7_1 >>> 0) {
                                  break label$42;
                                }
                                HEAP32[(($0_1 + 4) | 0) >> 2] = ($13_1 + 1) | 0;
                                break label$41;
                              }
                              if (($300($0_1 | 0) | 0 | 0) < (0 | 0)) {
                                break label$5;
                              }
                              $7_1 = HEAP32[(($0_1 + 104) | 0) >> 2] | 0;
                            }
                            label$43: {
                              if (!$7_1) {
                                break label$43;
                              }
                              HEAP32[(($0_1 + 4) | 0) >> 2] = ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + -1) | 0;
                            }
                            $7_1 = 16;
                            label$44: {
                              label$45: {
                                label$46: {
                                  label$47: {
                                    label$48: {
                                      label$49: {
                                        label$50: {
                                          switch (($15_1 + -88) | 0 | 0) {
                                            default:
                                              $1_1 = ($15_1 + -65) | 0;
                                              if ($1_1 >>> 0 > 6 >>> 0) {
                                                break label$44;
                                              }
                                              if (!((((1 << $1_1) | 0) & 113) | 0)) {
                                                break label$44;
                                              }
                                            case 9:
                                            case 13:
                                            case 14:
                                            case 15:
                                              $322($3_1 | 0, $0_1 | 0, $14_1 | 0, 0 | 0);
                                              i64toi32_i32$2 = $0_1;
                                              i64toi32_i32$1 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                                              i64toi32_i32$5 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                                              $295_1 = i64toi32_i32$1;
                                              $295$hi = i64toi32_i32$5;
                                              i64toi32_i32$1 =
                                                ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) -
                                                  (HEAP32[(($0_1 + 8) | 0) >> 2] | 0)) |
                                                0;
                                              i64toi32_i32$5 = (i64toi32_i32$1 >> 31) | 0;
                                              $301_1 = i64toi32_i32$1;
                                              $301$hi = i64toi32_i32$5;
                                              i64toi32_i32$5 = 0;
                                              i64toi32_i32$2 = 0;
                                              i64toi32_i32$1 = $301$hi;
                                              i64toi32_i32$3 = $301_1;
                                              i64toi32_i32$4 = (i64toi32_i32$2 - i64toi32_i32$3) | 0;
                                              i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                                              i64toi32_i32$0 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                                              i64toi32_i32$0 = (i64toi32_i32$5 - i64toi32_i32$0) | 0;
                                              $302$hi = i64toi32_i32$0;
                                              i64toi32_i32$0 = $295$hi;
                                              i64toi32_i32$5 = $295_1;
                                              i64toi32_i32$2 = $302$hi;
                                              i64toi32_i32$3 = i64toi32_i32$4;
                                              if (
                                                (((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0)) &
                                                  ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0))) |
                                                0
                                              ) {
                                                break label$3;
                                              }
                                              if (!$9_1) {
                                                break label$44;
                                              }
                                              i64toi32_i32$3 = $3_1;
                                              i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 8) | 0) >> 2] | 0;
                                              i64toi32_i32$0 = HEAP32[((i64toi32_i32$3 + 12) | 0) >> 2] | 0;
                                              $18_1 = i64toi32_i32$5;
                                              $18$hi = i64toi32_i32$0;
                                              i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                                              i64toi32_i32$5 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                                              $19_1 = i64toi32_i32$0;
                                              $19$hi = i64toi32_i32$5;
                                              switch ($14_1 | 0) {
                                                case 2:
                                                  break label$46;
                                                case 1:
                                                  break label$47;
                                                case 0:
                                                  break label$48;
                                                default:
                                                  break label$44;
                                              }
                                            case 3:
                                            case 11:
                                            case 27:
                                              label$56: {
                                                if ((($15_1 & 239) | 0 | 0) != (99 | 0)) {
                                                  break label$56;
                                                }
                                                $1708(($3_1 + 32) | 0 | 0, -1 | 0, 257 | 0) | 0;
                                                HEAP8[(($3_1 + 32) | 0) >> 0] = 0;
                                                if (($15_1 | 0) != (115 | 0)) {
                                                  break label$45;
                                                }
                                                HEAP8[(($3_1 + 65) | 0) >> 0] = 0;
                                                HEAP8[(($3_1 + 46) | 0) >> 0] = 0;
                                                $58_1 = 0;
                                                HEAP16[(($3_1 + 42) | 0) >> 1] = $58_1;
                                                HEAP16[(($3_1 + 44) | 0) >> 1] = ($58_1 >>> 16) | 0;
                                                break label$45;
                                              }
                                              $13_1 = HEAPU8[(($6_1 + 1) | 0) >> 0] | 0;
                                              $7_1 = ($13_1 | 0) == (94 | 0);
                                              $1708(($3_1 + 32) | 0 | 0, $7_1 | 0, 257 | 0) | 0;
                                              HEAP8[(($3_1 + 32) | 0) >> 0] = 0;
                                              $10_1 = $7_1 ? ($6_1 + 2) | 0 : ($6_1 + 1) | 0;
                                              label$57: {
                                                label$58: {
                                                  label$59: {
                                                    label$60: {
                                                      $6_1 = HEAPU8[(($6_1 + ($7_1 ? 2 : 1)) | 0) >> 0] | 0;
                                                      if (($6_1 | 0) == (45 | 0)) {
                                                        break label$60;
                                                      }
                                                      if (($6_1 | 0) == (93 | 0)) {
                                                        break label$59;
                                                      }
                                                      $13_1 = ($13_1 | 0) != (94 | 0);
                                                      $6_1 = $10_1;
                                                      break label$57;
                                                    }
                                                    $13_1 = ($13_1 | 0) != (94 | 0);
                                                    HEAP8[(($3_1 + 78) | 0) >> 0] = $13_1;
                                                    break label$58;
                                                  }
                                                  $13_1 = ($13_1 | 0) != (94 | 0);
                                                  HEAP8[(($3_1 + 126) | 0) >> 0] = $13_1;
                                                }
                                                $6_1 = ($10_1 + 1) | 0;
                                              }
                                              label$61: while (1) {
                                                label$62: {
                                                  label$63: {
                                                    $7_1 = HEAPU8[$6_1 >> 0] | 0;
                                                    if (($7_1 | 0) == (45 | 0)) {
                                                      break label$63;
                                                    }
                                                    if (!$7_1) {
                                                      break label$5;
                                                    }
                                                    if (($7_1 | 0) != (93 | 0)) {
                                                      break label$62;
                                                    }
                                                    break label$45;
                                                  }
                                                  $7_1 = 45;
                                                  $16_1 = HEAPU8[(($6_1 + 1) | 0) >> 0] | 0;
                                                  if (!$16_1) {
                                                    break label$62;
                                                  }
                                                  if (($16_1 | 0) == (93 | 0)) {
                                                    break label$62;
                                                  }
                                                  $10_1 = ($6_1 + 1) | 0;
                                                  label$64: {
                                                    label$65: {
                                                      $6_1 = HEAPU8[(($6_1 + -1) | 0) >> 0] | 0;
                                                      if ($6_1 >>> 0 < $16_1 >>> 0) {
                                                        break label$65;
                                                      }
                                                      $7_1 = $16_1;
                                                      break label$64;
                                                    }
                                                    label$66: while (1) {
                                                      $6_1 = ($6_1 + 1) | 0;
                                                      HEAP8[(((($3_1 + 32) | 0) + $6_1) | 0) >> 0] = $13_1;
                                                      $7_1 = HEAPU8[$10_1 >> 0] | 0;
                                                      if ($6_1 >>> 0 < $7_1 >>> 0) {
                                                        continue label$66;
                                                      }
                                                      break label$66;
                                                    }
                                                  }
                                                  $6_1 = $10_1;
                                                }
                                                HEAP8[
                                                  (((($7_1 + (($3_1 + 32) | 0)) | 0) + 1) | 0) >> 0
                                                ] = $13_1;
                                                $6_1 = ($6_1 + 1) | 0;
                                                continue label$61;
                                              }
                                            case 23:
                                              $7_1 = 8;
                                              break label$49;
                                            case 12:
                                            case 29:
                                              $7_1 = 10;
                                              break label$49;
                                            case 1:
                                            case 2:
                                            case 4:
                                            case 5:
                                            case 6:
                                            case 7:
                                            case 8:
                                            case 10:
                                            case 16:
                                            case 18:
                                            case 19:
                                            case 20:
                                            case 21:
                                            case 22:
                                            case 25:
                                            case 26:
                                            case 28:
                                            case 30:
                                            case 31:
                                              break label$44;
                                            case 0:
                                            case 24:
                                            case 32:
                                              break label$49;
                                            case 17:
                                              break label$50;
                                          }
                                        }
                                        $7_1 = 0;
                                      }
                                      i64toi32_i32$5 = -1;
                                      i64toi32_i32$5 =
                                        $326($0_1 | 0, $7_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
                                      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                                      $18_1 = i64toi32_i32$5;
                                      $18$hi = i64toi32_i32$0;
                                      i64toi32_i32$3 = $0_1;
                                      i64toi32_i32$0 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                                      $408_1 = i64toi32_i32$0;
                                      $408$hi = i64toi32_i32$5;
                                      i64toi32_i32$0 =
                                        ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) -
                                          (HEAP32[(($0_1 + 8) | 0) >> 2] | 0)) |
                                        0;
                                      i64toi32_i32$5 = (i64toi32_i32$0 >> 31) | 0;
                                      $414_1 = i64toi32_i32$0;
                                      $414$hi = i64toi32_i32$5;
                                      i64toi32_i32$5 = 0;
                                      i64toi32_i32$3 = 0;
                                      i64toi32_i32$0 = $414$hi;
                                      i64toi32_i32$2 = $414_1;
                                      i64toi32_i32$1 = (i64toi32_i32$3 - i64toi32_i32$2) | 0;
                                      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
                                      i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$0) | 0;
                                      i64toi32_i32$4 = (i64toi32_i32$5 - i64toi32_i32$4) | 0;
                                      $415$hi = i64toi32_i32$4;
                                      i64toi32_i32$4 = $408$hi;
                                      i64toi32_i32$5 = $408_1;
                                      i64toi32_i32$3 = $415$hi;
                                      i64toi32_i32$2 = i64toi32_i32$1;
                                      if (
                                        (((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0)) &
                                          ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0))) |
                                        0
                                      ) {
                                        break label$3;
                                      }
                                      label$67: {
                                        if (!$9_1) {
                                          break label$67;
                                        }
                                        if (($15_1 | 0) != (112 | 0)) {
                                          break label$67;
                                        }
                                        i64toi32_i32$5 = $18$hi;
                                        HEAP32[$9_1 >> 2] = $18_1;
                                        break label$44;
                                      }
                                      i64toi32_i32$5 = $18$hi;
                                      $334($9_1 | 0, $14_1 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
                                      break label$44;
                                    }
                                    i64toi32_i32$5 = $19$hi;
                                    i64toi32_i32$5 = $18$hi;
                                    i64toi32_i32$5 = $19$hi;
                                    i64toi32_i32$4 = $18$hi;
                                    HEAPF32[$9_1 >> 2] = Math_fround(
                                      $327($19_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$4 | 0)
                                    );
                                    break label$44;
                                  }
                                  i64toi32_i32$4 = $19$hi;
                                  i64toi32_i32$4 = $18$hi;
                                  i64toi32_i32$4 = $19$hi;
                                  i64toi32_i32$5 = $18$hi;
                                  HEAPF64[$9_1 >> 3] = +$328(
                                    $19_1 | 0,
                                    i64toi32_i32$4 | 0,
                                    $18_1 | 0,
                                    i64toi32_i32$5 | 0
                                  );
                                  break label$44;
                                }
                                i64toi32_i32$5 = $19$hi;
                                i64toi32_i32$4 = $9_1;
                                HEAP32[i64toi32_i32$4 >> 2] = $19_1;
                                HEAP32[((i64toi32_i32$4 + 4) | 0) >> 2] = i64toi32_i32$5;
                                i64toi32_i32$5 = $18$hi;
                                HEAP32[((i64toi32_i32$4 + 8) | 0) >> 2] = $18_1;
                                HEAP32[((i64toi32_i32$4 + 12) | 0) >> 2] = i64toi32_i32$5;
                                break label$44;
                              }
                              $10_1 = ($15_1 | 0) == (99 | 0);
                              $13_1 = $10_1 ? ($1_1 + 1) | 0 : 31;
                              label$68: {
                                label$69: {
                                  label$70: {
                                    $15_1 = ($14_1 | 0) != (1 | 0);
                                    if ($15_1) {
                                      break label$70;
                                    }
                                    $7_1 = $9_1;
                                    label$71: {
                                      if (!$8_1) {
                                        break label$71;
                                      }
                                      $7_1 = $1698(($13_1 << 2) | 0 | 0) | 0;
                                      if (!$7_1) {
                                        break label$6;
                                      }
                                    }
                                    i64toi32_i32$4 = $3_1;
                                    i64toi32_i32$5 = 0;
                                    HEAP32[((i64toi32_i32$4 + 296) | 0) >> 2] = 0;
                                    HEAP32[((i64toi32_i32$4 + 300) | 0) >> 2] = i64toi32_i32$5;
                                    $1_1 = 0;
                                    label$72: while (1) {
                                      $12_1 = $7_1;
                                      label$73: while (1) {
                                        label$74: {
                                          label$75: {
                                            $7_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                            if ($7_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                              break label$75;
                                            }
                                            HEAP32[(($0_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                                            $7_1 = HEAPU8[$7_1 >> 0] | 0;
                                            break label$74;
                                          }
                                          $7_1 = $300($0_1 | 0) | 0;
                                        }
                                        if (
                                          !(HEAPU8[(((($7_1 + (($3_1 + 32) | 0)) | 0) + 1) | 0) >> 0] | 0)
                                        ) {
                                          break label$69;
                                        }
                                        HEAP8[(($3_1 + 27) | 0) >> 0] = $7_1;
                                        $7_1 =
                                          $330(
                                            ($3_1 + 28) | 0 | 0,
                                            ($3_1 + 27) | 0 | 0,
                                            1 | 0,
                                            ($3_1 + 296) | 0 | 0
                                          ) | 0;
                                        if (($7_1 | 0) == (-2 | 0)) {
                                          continue label$73;
                                        }
                                        $11_1 = 0;
                                        if (($7_1 | 0) == (-1 | 0)) {
                                          break label$5;
                                        }
                                        label$76: {
                                          if (!$12_1) {
                                            break label$76;
                                          }
                                          HEAP32[(($12_1 + (($1_1 << 2) | 0)) | 0) >> 2] =
                                            HEAP32[(($3_1 + 28) | 0) >> 2] | 0;
                                          $1_1 = ($1_1 + 1) | 0;
                                        }
                                        if (!$8_1) {
                                          continue label$73;
                                        }
                                        if (($1_1 | 0) != ($13_1 | 0)) {
                                          continue label$73;
                                        }
                                        break label$73;
                                      }
                                      $13_1 = ($13_1 << 1) | 0 | 1 | 0;
                                      $7_1 = $1700($12_1 | 0, ($13_1 << 2) | 0 | 0) | 0;
                                      if ($7_1) {
                                        continue label$72;
                                      }
                                      break label$5;
                                    }
                                  }
                                  label$77: {
                                    if (!$8_1) {
                                      break label$77;
                                    }
                                    $1_1 = 0;
                                    $7_1 = $1698($13_1 | 0) | 0;
                                    if (!$7_1) {
                                      break label$6;
                                    }
                                    label$78: while (1) {
                                      $11_1 = $7_1;
                                      label$79: while (1) {
                                        label$80: {
                                          label$81: {
                                            $7_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                            if ($7_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                              break label$81;
                                            }
                                            HEAP32[(($0_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                                            $7_1 = HEAPU8[$7_1 >> 0] | 0;
                                            break label$80;
                                          }
                                          $7_1 = $300($0_1 | 0) | 0;
                                        }
                                        label$82: {
                                          if (HEAPU8[(((($7_1 + (($3_1 + 32) | 0)) | 0) + 1) | 0) >> 0] | 0) {
                                            break label$82;
                                          }
                                          $12_1 = 0;
                                          break label$68;
                                        }
                                        HEAP8[(($11_1 + $1_1) | 0) >> 0] = $7_1;
                                        $1_1 = ($1_1 + 1) | 0;
                                        if (($1_1 | 0) != ($13_1 | 0)) {
                                          continue label$79;
                                        }
                                        break label$79;
                                      }
                                      $12_1 = 0;
                                      $13_1 = ($13_1 << 1) | 0 | 1 | 0;
                                      $7_1 = $1700($11_1 | 0, $13_1 | 0) | 0;
                                      if ($7_1) {
                                        continue label$78;
                                      }
                                      break label$5;
                                    }
                                  }
                                  $1_1 = 0;
                                  label$83: {
                                    if (!$9_1) {
                                      break label$83;
                                    }
                                    label$84: while (1) {
                                      label$85: {
                                        label$86: {
                                          $7_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                          if ($7_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                            break label$86;
                                          }
                                          HEAP32[(($0_1 + 4) | 0) >> 2] = ($7_1 + 1) | 0;
                                          $7_1 = HEAPU8[$7_1 >> 0] | 0;
                                          break label$85;
                                        }
                                        $7_1 = $300($0_1 | 0) | 0;
                                      }
                                      label$87: {
                                        if (HEAPU8[(((($7_1 + (($3_1 + 32) | 0)) | 0) + 1) | 0) >> 0] | 0) {
                                          break label$87;
                                        }
                                        $12_1 = 0;
                                        $11_1 = $9_1;
                                        break label$68;
                                      }
                                      HEAP8[(($9_1 + $1_1) | 0) >> 0] = $7_1;
                                      $1_1 = ($1_1 + 1) | 0;
                                      continue label$84;
                                    }
                                  }
                                  label$88: while (1) {
                                    label$89: {
                                      label$90: {
                                        $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                        if ($1_1 >>> 0 >= (HEAP32[(($0_1 + 104) | 0) >> 2] | 0) >>> 0) {
                                          break label$90;
                                        }
                                        HEAP32[(($0_1 + 4) | 0) >> 2] = ($1_1 + 1) | 0;
                                        $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                        break label$89;
                                      }
                                      $1_1 = $300($0_1 | 0) | 0;
                                    }
                                    if (HEAPU8[(((($1_1 + (($3_1 + 32) | 0)) | 0) + 1) | 0) >> 0] | 0) {
                                      continue label$88;
                                    }
                                    break label$88;
                                  }
                                  $11_1 = 0;
                                  $12_1 = 0;
                                  $1_1 = 0;
                                  break label$68;
                                }
                                $11_1 = 0;
                                if (!($331(($3_1 + 296) | 0 | 0) | 0)) {
                                  break label$5;
                                }
                              }
                              $7_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                              label$91: {
                                if (!(HEAP32[(($0_1 + 104) | 0) >> 2] | 0)) {
                                  break label$91;
                                }
                                $7_1 = ($7_1 + -1) | 0;
                                HEAP32[(($0_1 + 4) | 0) >> 2] = $7_1;
                              }
                              i64toi32_i32$2 = $0_1;
                              i64toi32_i32$5 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                              i64toi32_i32$4 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                              $616_1 = i64toi32_i32$5;
                              $616$hi = i64toi32_i32$4;
                              i64toi32_i32$5 = ($7_1 - (HEAP32[(($0_1 + 8) | 0) >> 2] | 0)) | 0;
                              i64toi32_i32$4 = (i64toi32_i32$5 >> 31) | 0;
                              $621_1 = i64toi32_i32$5;
                              $621$hi = i64toi32_i32$4;
                              i64toi32_i32$4 = $616$hi;
                              i64toi32_i32$2 = $616_1;
                              i64toi32_i32$5 = $621$hi;
                              i64toi32_i32$3 = $621_1;
                              i64toi32_i32$0 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                              i64toi32_i32$1 = (i64toi32_i32$4 + i64toi32_i32$5) | 0;
                              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                                i64toi32_i32$1 = (i64toi32_i32$1 + 1) | 0;
                              }
                              $19_1 = i64toi32_i32$0;
                              $19$hi = i64toi32_i32$1;
                              if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                                break label$3;
                              }
                              i64toi32_i32$1 = $19$hi;
                              i64toi32_i32$1 = $18$hi;
                              i64toi32_i32$1 = $19$hi;
                              i64toi32_i32$4 = $19_1;
                              i64toi32_i32$2 = $18$hi;
                              i64toi32_i32$3 = $18_1;
                              if (
                                ($10_1 &
                                  (((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0)) |
                                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                                    0)) |
                                0
                              ) {
                                break label$3;
                              }
                              label$92: {
                                if (!$8_1) {
                                  break label$92;
                                }
                                label$93: {
                                  if ($15_1) {
                                    break label$93;
                                  }
                                  HEAP32[$9_1 >> 2] = $12_1;
                                  break label$92;
                                }
                                HEAP32[$9_1 >> 2] = $11_1;
                              }
                              if ($10_1) {
                                break label$44;
                              }
                              label$94: {
                                if (!$12_1) {
                                  break label$94;
                                }
                                HEAP32[(($12_1 + (($1_1 << 2) | 0)) | 0) >> 2] = 0;
                              }
                              label$95: {
                                if ($11_1) {
                                  break label$95;
                                }
                                $11_1 = 0;
                                break label$44;
                              }
                              HEAP8[(($11_1 + $1_1) | 0) >> 0] = 0;
                            }
                            i64toi32_i32$3 = $0_1;
                            i64toi32_i32$4 = HEAP32[(($0_1 + 120) | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[(($0_1 + 124) | 0) >> 2] | 0;
                            $649$hi = i64toi32_i32$1;
                            i64toi32_i32$1 = $17$hi;
                            i64toi32_i32$1 = $649$hi;
                            i64toi32_i32$3 = i64toi32_i32$4;
                            i64toi32_i32$4 = $17$hi;
                            i64toi32_i32$2 = $17_1;
                            i64toi32_i32$5 = (i64toi32_i32$3 + i64toi32_i32$2) | 0;
                            i64toi32_i32$0 = (i64toi32_i32$1 + i64toi32_i32$4) | 0;
                            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                              i64toi32_i32$0 = (i64toi32_i32$0 + 1) | 0;
                            }
                            $651$hi = i64toi32_i32$0;
                            i64toi32_i32$3 =
                              ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) - (HEAP32[(($0_1 + 8) | 0) >> 2] | 0)) | 0;
                            i64toi32_i32$0 = (i64toi32_i32$3 >> 31) | 0;
                            $657_1 = i64toi32_i32$3;
                            $657$hi = i64toi32_i32$0;
                            i64toi32_i32$0 = $651$hi;
                            i64toi32_i32$1 = i64toi32_i32$5;
                            i64toi32_i32$3 = $657$hi;
                            i64toi32_i32$2 = $657_1;
                            i64toi32_i32$4 = (i64toi32_i32$5 + i64toi32_i32$2) | 0;
                            i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$3) | 0;
                            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                              i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                            }
                            $17_1 = i64toi32_i32$4;
                            $17$hi = i64toi32_i32$5;
                            $4_1 = ($4_1 + (($9_1 | 0) != (0 | 0))) | 0;
                          }
                          $1_1 = ($6_1 + 1) | 0;
                          $6_1 = HEAPU8[(($6_1 + 1) | 0) >> 0] | 0;
                          if ($6_1) {
                            continue label$7;
                          }
                          break label$2;
                        }
                      }
                      $11_1 = 0;
                      $12_1 = 0;
                    }
                    if ($4_1) {
                      break label$3;
                    }
                  }
                  $4_1 = -1;
                }
                if (!$8_1) {
                  break label$2;
                }
                $1699($11_1 | 0);
                $1699($12_1 | 0);
              }
              label$96: {
                if (!$5_1) {
                  break label$96;
                }
                $1714($0_1 | 0);
              }
              global$0 = ($3_1 + 304) | 0;
              return $4_1 | 0;
            }

            function $333($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              HEAP32[(($2_1 + 12) | 0) >> 2] = $0_1;
              $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ((((($1_1 << 2) | 0) + $0_1) | 0) + -4) | 0 : $0_1;
              HEAP32[(($2_1 + 8) | 0) >> 2] = ($0_1 + 4) | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $334($0_1, $1_1, $2_1, $2$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              var i64toi32_i32$0 = 0;
              label$1: {
                if (!$0_1) {
                  break label$1;
                }
                label$2: {
                  switch (($1_1 + 2) | 0 | 0) {
                    case 0:
                      i64toi32_i32$0 = $2$hi;
                      HEAP8[$0_1 >> 0] = $2_1;
                      return;
                    case 1:
                      i64toi32_i32$0 = $2$hi;
                      HEAP16[$0_1 >> 1] = $2_1;
                      return;
                    case 2:
                    case 3:
                      i64toi32_i32$0 = $2$hi;
                      HEAP32[$0_1 >> 2] = $2_1;
                      return;
                    case 5:
                      break label$2;
                    default:
                      break label$1;
                  }
                }
                i64toi32_i32$0 = $2$hi;
                HEAP32[$0_1 >> 2] = $2_1;
                HEAP32[(($0_1 + 4) | 0) >> 2] = i64toi32_i32$0;
              }
            }

            function $335($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = ($2_1 | 0) != (0 | 0);
              label$1: {
                label$2: {
                  label$3: {
                    if (!$2_1) {
                      break label$3;
                    }
                    if (!(($0_1 & 3) | 0)) {
                      break label$3;
                    }
                    $4_1 = ($1_1 & 255) | 0;
                    label$4: while (1) {
                      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
                        break label$2;
                      }
                      $0_1 = ($0_1 + 1) | 0;
                      $2_1 = ($2_1 + -1) | 0;
                      $3_1 = ($2_1 | 0) != (0 | 0);
                      if (!$2_1) {
                        break label$3;
                      }
                      if (($0_1 & 3) | 0) {
                        continue label$4;
                      }
                      break label$4;
                    }
                  }
                  if (!$3_1) {
                    break label$1;
                  }
                }
                label$5: {
                  if ((HEAPU8[$0_1 >> 0] | 0 | 0) == (($1_1 & 255) | 0 | 0)) {
                    break label$5;
                  }
                  if ($2_1 >>> 0 < 4 >>> 0) {
                    break label$5;
                  }
                  $4_1 = Math_imul(($1_1 & 255) | 0, 16843009);
                  label$6: while (1) {
                    $3_1 = ((HEAP32[$0_1 >> 2] | 0) ^ $4_1) | 0;
                    if (((((($3_1 ^ -1) | 0) & (($3_1 + -16843009) | 0)) | 0) & -2139062144) | 0) {
                      break label$5;
                    }
                    $0_1 = ($0_1 + 4) | 0;
                    $2_1 = ($2_1 + -4) | 0;
                    if ($2_1 >>> 0 > 3 >>> 0) {
                      continue label$6;
                    }
                    break label$6;
                  }
                }
                if (!$2_1) {
                  break label$1;
                }
                $3_1 = ($1_1 & 255) | 0;
                label$7: while (1) {
                  label$8: {
                    if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
                      break label$8;
                    }
                    return $0_1 | 0;
                  }
                  $0_1 = ($0_1 + 1) | 0;
                  $2_1 = ($2_1 + -1) | 0;
                  if ($2_1) {
                    continue label$7;
                  }
                  break label$7;
                }
              }
              return 0 | 0;
            }

            function $336($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = HEAP32[(($0_1 + 84) | 0) >> 2] | 0;
              $4_1 = ($2_1 + 256) | 0;
              $5_1 = $335($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
              $4_1 = $5_1 ? ($5_1 - $3_1) | 0 : $4_1;
              $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
              $1707($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
              $4_1 = ($3_1 + $4_1) | 0;
              HEAP32[(($0_1 + 84) | 0) >> 2] = $4_1;
              HEAP32[(($0_1 + 8) | 0) >> 2] = $4_1;
              HEAP32[(($0_1 + 4) | 0) >> 2] = ($3_1 + $2_1) | 0;
              return $2_1 | 0;
            }

            function $337($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 144) | 0;
              global$0 = $3_1;
              $3_1 = $1708($3_1 | 0, 0 | 0, 144 | 0) | 0;
              HEAP32[(($3_1 + 76) | 0) >> 2] = -1;
              HEAP32[(($3_1 + 44) | 0) >> 2] = $0_1;
              HEAP32[(($3_1 + 32) | 0) >> 2] = 24;
              HEAP32[(($3_1 + 84) | 0) >> 2] = $0_1;
              $0_1 = $332($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              global$0 = ($3_1 + 144) | 0;
              return $0_1 | 0;
            }

            function $338($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $336($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $339($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0;
              $2_1 = HEAPU8[$1_1 >> 0] | 0;
              label$1: {
                $3_1 = HEAPU8[$0_1 >> 0] | 0;
                if (!$3_1) {
                  break label$1;
                }
                if (($3_1 | 0) != (($2_1 & 255) | 0 | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $2_1 = HEAPU8[(($1_1 + 1) | 0) >> 0] | 0;
                  $3_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                  if (!$3_1) {
                    break label$1;
                  }
                  $1_1 = ($1_1 + 1) | 0;
                  $0_1 = ($0_1 + 1) | 0;
                  if (($3_1 | 0) == (($2_1 & 255) | 0 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return ($3_1 - (($2_1 & 255) | 0)) | 0 | 0;
            }

            function $340() {
              var $0_1 = 0,
                $1_1 = 0;
              $0_1 = (global$0 - 16) | 0;
              global$0 = $0_1;
              label$1: {
                if (fimport$21(($0_1 + 12) | 0 | 0, ($0_1 + 8) | 0 | 0) | 0) {
                  break label$1;
                }
                $1_1 = $1698(((((HEAP32[(($0_1 + 12) | 0) >> 2] | 0) << 2) | 0) + 4) | 0 | 0) | 0;
                HEAP32[((0 + 17544) | 0) >> 2] = $1_1;
                if (!$1_1) {
                  break label$1;
                }
                label$2: {
                  $1_1 = $1698(HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0) | 0;
                  if ($1_1) {
                    break label$2;
                  }
                  HEAP32[((0 + 17544) | 0) >> 2] = 0;
                  break label$1;
                }
                HEAP32[
                  (((HEAP32[((0 + 17544) | 0) >> 2] | 0) +
                    (((HEAP32[(($0_1 + 12) | 0) >> 2] | 0) << 2) | 0)) |
                    0) >>
                    2
                ] = 0;
                if (!(fimport$22(HEAP32[((0 + 17544) | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
                  break label$1;
                }
                HEAP32[((0 + 17544) | 0) >> 2] = 0;
              }
              global$0 = ($0_1 + 16) | 0;
            }

            function $341($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0;
              label$1: {
                label$2: {
                  $2_1 = ($1_1 & 255) | 0;
                  if (!$2_1) {
                    break label$2;
                  }
                  label$3: {
                    if (!(($0_1 & 3) | 0)) {
                      break label$3;
                    }
                    label$4: while (1) {
                      $3_1 = HEAPU8[$0_1 >> 0] | 0;
                      if (!$3_1) {
                        break label$1;
                      }
                      if (($3_1 | 0) == (($1_1 & 255) | 0 | 0)) {
                        break label$1;
                      }
                      $0_1 = ($0_1 + 1) | 0;
                      if (($0_1 & 3) | 0) {
                        continue label$4;
                      }
                      break label$4;
                    }
                  }
                  label$5: {
                    $3_1 = HEAP32[$0_1 >> 2] | 0;
                    if (((((($3_1 ^ -1) | 0) & (($3_1 + -16843009) | 0)) | 0) & -2139062144) | 0) {
                      break label$5;
                    }
                    $2_1 = Math_imul($2_1, 16843009);
                    label$6: while (1) {
                      $3_1 = ($3_1 ^ $2_1) | 0;
                      if (((((($3_1 ^ -1) | 0) & (($3_1 + -16843009) | 0)) | 0) & -2139062144) | 0) {
                        break label$5;
                      }
                      $3_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                      $0_1 = ($0_1 + 4) | 0;
                      if (!(((((($3_1 ^ -1) | 0) & (($3_1 + -16843009) | 0)) | 0) & -2139062144) | 0)) {
                        continue label$6;
                      }
                      break label$6;
                    }
                  }
                  label$7: {
                    label$8: while (1) {
                      $3_1 = $0_1;
                      $2_1 = HEAPU8[$3_1 >> 0] | 0;
                      if (!$2_1) {
                        break label$7;
                      }
                      $0_1 = ($3_1 + 1) | 0;
                      if (($2_1 | 0) != (($1_1 & 255) | 0 | 0)) {
                        continue label$8;
                      }
                      break label$8;
                    }
                  }
                  return $3_1 | 0;
                }
                return ($0_1 + ($1715($0_1 | 0) | 0)) | 0 | 0;
              }
              return $0_1 | 0;
            }

            function $342($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $0_1 = $341($0_1 | 0, $1_1 | 0) | 0;
              return ((HEAPU8[$0_1 >> 0] | 0 | 0) == (($1_1 & 255) | 0 | 0) ? $0_1 : 0) | 0;
            }

            function $343($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              label$1: {
                if ($2_1) {
                  break label$1;
                }
                return 0 | 0;
              }
              $3_1 = 0;
              label$2: {
                $4_1 = HEAPU8[$0_1 >> 0] | 0;
                if (!$4_1) {
                  break label$2;
                }
                label$3: {
                  label$4: while (1) {
                    $5_1 = HEAPU8[$1_1 >> 0] | 0;
                    if ((($4_1 & 255) | 0 | 0) != ($5_1 | 0)) {
                      break label$3;
                    }
                    $2_1 = ($2_1 + -1) | 0;
                    if (!$2_1) {
                      break label$3;
                    }
                    if (!$5_1) {
                      break label$3;
                    }
                    $1_1 = ($1_1 + 1) | 0;
                    $4_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                    $0_1 = ($0_1 + 1) | 0;
                    if ($4_1) {
                      continue label$4;
                    }
                    break label$2;
                  }
                }
                $3_1 = $4_1;
              }
              return ((($3_1 & 255) | 0) - (HEAPU8[$1_1 >> 0] | 0)) | 0 | 0;
            }

            function $344($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $2_1 = 0;
              $1_1 = 0;
              $2_1 = $1715($0_1 | 0) | 0;
              label$1: {
                if (!(HEAP32[((0 + 17544) | 0) >> 2] | 0)) {
                  break label$1;
                }
                if (!(HEAPU8[$0_1 >> 0] | 0)) {
                  break label$1;
                }
                if ($342($0_1 | 0, 61 | 0) | 0) {
                  break label$1;
                }
                $1_1 = 0;
                $3_1 = HEAP32[(HEAP32[((0 + 17544) | 0) >> 2] | 0) >> 2] | 0;
                if (!$3_1) {
                  break label$1;
                }
                label$2: {
                  label$3: while (1) {
                    $4_1 = $343($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
                    $3_1 = HEAP32[((0 + 17544) | 0) >> 2] | 0;
                    label$4: {
                      if ($4_1) {
                        break label$4;
                      }
                      $4_1 = ((HEAP32[(($3_1 + (($1_1 << 2) | 0)) | 0) >> 2] | 0) + $2_1) | 0;
                      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
                        break label$2;
                      }
                    }
                    $1_1 = ($1_1 + 1) | 0;
                    $3_1 = HEAP32[(($3_1 + (($1_1 << 2) | 0)) | 0) >> 2] | 0;
                    if ($3_1) {
                      continue label$3;
                    }
                    break label$3;
                  }
                  return 0 | 0;
                }
                $1_1 = ($4_1 + 1) | 0;
              }
              return $1_1 | 0;
            }

            function $345($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0;
              label$1: {
                if (HEAPU8[$1_1 >> 0] | 0) {
                  break label$1;
                }
                label$2: {
                  $1_1 = $344(3696 | 0) | 0;
                  if (!$1_1) {
                    break label$2;
                  }
                  if (HEAPU8[$1_1 >> 0] | 0) {
                    break label$1;
                  }
                }
                label$3: {
                  $1_1 = $344((Math_imul($0_1, 12) + 3712) | 0 | 0) | 0;
                  if (!$1_1) {
                    break label$3;
                  }
                  if (HEAPU8[$1_1 >> 0] | 0) {
                    break label$1;
                  }
                }
                label$4: {
                  $1_1 = $344(3784 | 0) | 0;
                  if (!$1_1) {
                    break label$4;
                  }
                  if (HEAPU8[$1_1 >> 0] | 0) {
                    break label$1;
                  }
                }
                $1_1 = 3789;
              }
              $2_1 = 0;
              label$5: {
                label$6: {
                  label$7: while (1) {
                    $3_1 = HEAPU8[(($1_1 + $2_1) | 0) >> 0] | 0;
                    if (!$3_1) {
                      break label$6;
                    }
                    if (($3_1 | 0) == (47 | 0)) {
                      break label$6;
                    }
                    $3_1 = 15;
                    $2_1 = ($2_1 + 1) | 0;
                    if (($2_1 | 0) != (15 | 0)) {
                      continue label$7;
                    }
                    break label$5;
                  }
                }
                $3_1 = $2_1;
              }
              $4_1 = 3789;
              label$8: {
                label$9: {
                  label$10: {
                    label$11: {
                      label$12: {
                        $2_1 = HEAPU8[$1_1 >> 0] | 0;
                        if (($2_1 | 0) == (46 | 0)) {
                          break label$12;
                        }
                        if (HEAPU8[(($1_1 + $3_1) | 0) >> 0] | 0) {
                          break label$12;
                        }
                        $4_1 = $1_1;
                        if (($2_1 | 0) != (67 | 0)) {
                          break label$11;
                        }
                      }
                      if (!(HEAPU8[(($4_1 + 1) | 0) >> 0] | 0)) {
                        break label$10;
                      }
                    }
                    if (!($339($4_1 | 0, 3789 | 0) | 0)) {
                      break label$10;
                    }
                    if ($339($4_1 | 0, 3797 | 0) | 0) {
                      break label$9;
                    }
                  }
                  label$13: {
                    if ($0_1) {
                      break label$13;
                    }
                    $2_1 = 3620;
                    if ((HEAPU8[(($4_1 + 1) | 0) >> 0] | 0 | 0) == (46 | 0)) {
                      break label$8;
                    }
                  }
                  return 0 | 0;
                }
                label$14: {
                  $2_1 = HEAP32[((0 + 17556) | 0) >> 2] | 0;
                  if (!$2_1) {
                    break label$14;
                  }
                  label$15: while (1) {
                    if (!($339($4_1 | 0, ($2_1 + 8) | 0 | 0) | 0)) {
                      break label$8;
                    }
                    $2_1 = HEAP32[(($2_1 + 24) | 0) >> 2] | 0;
                    if ($2_1) {
                      continue label$15;
                    }
                    break label$15;
                  }
                }
                $293(17548 | 0);
                label$16: {
                  $2_1 = HEAP32[((0 + 17556) | 0) >> 2] | 0;
                  if (!$2_1) {
                    break label$16;
                  }
                  label$17: while (1) {
                    label$18: {
                      if ($339($4_1 | 0, ($2_1 + 8) | 0 | 0) | 0) {
                        break label$18;
                      }
                      $294(17548 | 0);
                      return $2_1 | 0;
                    }
                    $2_1 = HEAP32[(($2_1 + 24) | 0) >> 2] | 0;
                    if ($2_1) {
                      continue label$17;
                    }
                    break label$17;
                  }
                }
                label$19: {
                  label$20: {
                    $2_1 = $1698(28 | 0) | 0;
                    if ($2_1) {
                      break label$20;
                    }
                    $2_1 = 0;
                    break label$19;
                  }
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 3624) | 0) >> 2] | 0;
                  HEAP32[$2_1 >> 2] = HEAP32[((i64toi32_i32$2 + 3620) | 0) >> 2] | 0;
                  HEAP32[(($2_1 + 4) | 0) >> 2] = i64toi32_i32$1;
                  $1_1 = ($2_1 + 8) | 0;
                  $1707($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
                  HEAP8[(($1_1 + $3_1) | 0) >> 0] = 0;
                  HEAP32[(($2_1 + 24) | 0) >> 2] = HEAP32[((0 + 17556) | 0) >> 2] | 0;
                  HEAP32[((0 + 17556) | 0) >> 2] = $2_1;
                }
                $294(17548 | 0);
                $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 3620;
              }
              return $2_1 | 0;
            }

            function $346($0_1) {
              $0_1 = $0_1 | 0;
              return (
                ((($0_1 | 0) != (3672 | 0)) & (((($0_1 | 0) != (0 | 0)) & (($0_1 | 0) != (3648 | 0))) | 0)) |
                0 |
                0
              );
            }

            function $347($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $6_1 = 0,
                i64toi32_i32$2 = 0,
                $5_1 = 0,
                $69_1 = 0,
                $75_1 = 0,
                $81_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  if (!($346($2_1 | 0) | 0)) {
                    break label$2;
                  }
                  $4_1 = 0;
                  label$3: while (1) {
                    label$4: {
                      if (!(((($0_1 >>> $4_1) | 0) & 1) | 0)) {
                        break label$4;
                      }
                      HEAP32[(($2_1 + (($4_1 << 2) | 0)) | 0) >> 2] = $345($4_1 | 0, $1_1 | 0) | 0;
                    }
                    $4_1 = ($4_1 + 1) | 0;
                    if (($4_1 | 0) != (6 | 0)) {
                      continue label$3;
                    }
                    break label$1;
                  }
                }
                $5_1 = 0;
                $4_1 = 0;
                label$5: while (1) {
                  $6_1 = (((1 << $4_1) | 0) & $0_1) | 0;
                  label$6: {
                    label$7: {
                      if (!$2_1) {
                        break label$7;
                      }
                      if ($6_1) {
                        break label$7;
                      }
                      $6_1 = HEAP32[(($2_1 + (($4_1 << 2) | 0)) | 0) >> 2] | 0;
                      break label$6;
                    }
                    $6_1 = $345($4_1 | 0, ($6_1 ? $1_1 : 3803) | 0) | 0;
                  }
                  HEAP32[(((($3_1 + 8) | 0) + (($4_1 << 2) | 0)) | 0) >> 2] = $6_1;
                  $5_1 = ($5_1 + (($6_1 | 0) != (0 | 0))) | 0;
                  $4_1 = ($4_1 + 1) | 0;
                  if (($4_1 | 0) != (6 | 0)) {
                    continue label$5;
                  }
                  break label$5;
                }
                $2_1 = 3648;
                label$8: {
                  label$9: {
                    switch ($5_1 | 0) {
                      case 0:
                        break label$1;
                      case 1:
                        break label$9;
                      default:
                        break label$8;
                    }
                  }
                  if ((HEAP32[(($3_1 + 8) | 0) >> 2] | 0 | 0) != (3620 | 0)) {
                    break label$8;
                  }
                  $2_1 = 3672;
                  break label$1;
                }
                $2_1 = $1698(24 | 0) | 0;
                if (!$2_1) {
                  break label$1;
                }
                i64toi32_i32$2 = $3_1;
                i64toi32_i32$0 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
                $69_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $2_1;
                HEAP32[$2_1 >> 2] = $69_1;
                HEAP32[(($2_1 + 4) | 0) >> 2] = i64toi32_i32$1;
                i64toi32_i32$2 = ((($3_1 + 8) | 0) + 16) | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                $75_1 = i64toi32_i32$1;
                i64toi32_i32$1 = ($2_1 + 16) | 0;
                HEAP32[i64toi32_i32$1 >> 2] = $75_1;
                HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$2 = ((($3_1 + 8) | 0) + 8) | 0;
                i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                $81_1 = i64toi32_i32$0;
                i64toi32_i32$0 = ($2_1 + 8) | 0;
                HEAP32[i64toi32_i32$0 >> 2] = $81_1;
                HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              }
              global$0 = ($3_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $348($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = 1;
              label$1: {
                label$2: {
                  if (!$0_1) {
                    break label$2;
                  }
                  if ($1_1 >>> 0 <= 127 >>> 0) {
                    break label$1;
                  }
                  label$3: {
                    label$4: {
                      if (HEAP32[(HEAP32[((($329() | 0) + 172) | 0) >> 2] | 0) >> 2] | 0) {
                        break label$4;
                      }
                      if ((($1_1 & -128) | 0 | 0) == (57216 | 0)) {
                        break label$1;
                      }
                      HEAP32[($305() | 0) >> 2] = 25;
                      break label$3;
                    }
                    label$5: {
                      if ($1_1 >>> 0 > 2047 >>> 0) {
                        break label$5;
                      }
                      HEAP8[(($0_1 + 1) | 0) >> 0] = ($1_1 & 63) | 0 | 128 | 0;
                      HEAP8[$0_1 >> 0] = ($1_1 >>> 6) | 0 | 192 | 0;
                      return 2 | 0;
                    }
                    label$6: {
                      label$7: {
                        if ($1_1 >>> 0 < 55296 >>> 0) {
                          break label$7;
                        }
                        if ((($1_1 & -8192) | 0 | 0) != (57344 | 0)) {
                          break label$6;
                        }
                      }
                      HEAP8[(($0_1 + 2) | 0) >> 0] = ($1_1 & 63) | 0 | 128 | 0;
                      HEAP8[$0_1 >> 0] = ($1_1 >>> 12) | 0 | 224 | 0;
                      HEAP8[(($0_1 + 1) | 0) >> 0] = ((($1_1 >>> 6) | 0) & 63) | 0 | 128 | 0;
                      return 3 | 0;
                    }
                    label$8: {
                      if ((($1_1 + -65536) | 0) >>> 0 > 1048575 >>> 0) {
                        break label$8;
                      }
                      HEAP8[(($0_1 + 3) | 0) >> 0] = ($1_1 & 63) | 0 | 128 | 0;
                      HEAP8[$0_1 >> 0] = ($1_1 >>> 18) | 0 | 240 | 0;
                      HEAP8[(($0_1 + 2) | 0) >> 0] = ((($1_1 >>> 6) | 0) & 63) | 0 | 128 | 0;
                      HEAP8[(($0_1 + 1) | 0) >> 0] = ((($1_1 >>> 12) | 0) & 63) | 0 | 128 | 0;
                      return 4 | 0;
                    }
                    HEAP32[($305() | 0) >> 2] = 25;
                  }
                  $3_1 = -1;
                }
                return $3_1 | 0;
              }
              HEAP8[$0_1 >> 0] = $1_1;
              return 1 | 0;
            }

            function $349($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if ($0_1) {
                  break label$1;
                }
                return 0 | 0;
              }
              return $348($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
            }

            function $350($0_1, $1_1) {
              $0_1 = +$0_1;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                $3_1 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$4 = 0,
                $2_1 = 0,
                $10_1 = 0,
                $2$hi = 0;
              label$1: {
                wasm2js_scratch_store_f64(+$0_1);
                i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
                $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
                $2$hi = i64toi32_i32$0;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 52;
                i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $10_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                } else {
                  i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                  $10_1 =
                    (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                      ((32 - i64toi32_i32$4) | 0)) |
                    0 |
                    ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                    0;
                }
                $3_1 = ($10_1 & 2047) | 0;
                if (($3_1 | 0) == (2047 | 0)) {
                  break label$1;
                }
                label$2: {
                  if ($3_1) {
                    break label$2;
                  }
                  label$3: {
                    label$4: {
                      if ($0_1 != 0.0) {
                        break label$4;
                      }
                      $3_1 = 0;
                      break label$3;
                    }
                    $0_1 = +$350(+($0_1 * 18446744073709551615.0), $1_1 | 0);
                    $3_1 = ((HEAP32[$1_1 >> 2] | 0) + -64) | 0;
                  }
                  HEAP32[$1_1 >> 2] = $3_1;
                  return +$0_1;
                }
                HEAP32[$1_1 >> 2] = ($3_1 + -1022) | 0;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$2 = -2146435073;
                i64toi32_i32$3 = -1;
                i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
                i64toi32_i32$0 = 1071644672;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
                wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
                $0_1 = +wasm2js_scratch_load_f64();
              }
              return +$0_1;
            }

            function $351($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              $5_1 = (global$0 - 208) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 204) | 0) >> 2] = $2_1;
              $2_1 = 0;
              $1708(($5_1 + 160) | 0 | 0, 0 | 0, 40 | 0) | 0;
              HEAP32[(($5_1 + 200) | 0) >> 2] = HEAP32[(($5_1 + 204) | 0) >> 2] | 0;
              label$1: {
                label$2: {
                  if (
                    ($352(
                      0 | 0,
                      $1_1 | 0,
                      ($5_1 + 200) | 0 | 0,
                      ($5_1 + 80) | 0 | 0,
                      ($5_1 + 160) | 0 | 0,
                      $3_1 | 0,
                      $4_1 | 0
                    ) |
                      0 |
                      0) >=
                    (0 | 0)
                  ) {
                    break label$2;
                  }
                  $1_1 = -1;
                  break label$1;
                }
                label$3: {
                  if ((HEAP32[(($0_1 + 76) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                    break label$3;
                  }
                  $2_1 = $1713($0_1 | 0) | 0;
                }
                $6_1 = HEAP32[$0_1 >> 2] | 0;
                label$4: {
                  if ((HEAP8[(($0_1 + 74) | 0) >> 0] | 0 | 0) > (0 | 0)) {
                    break label$4;
                  }
                  HEAP32[$0_1 >> 2] = ($6_1 & -33) | 0;
                }
                $6_1 = ($6_1 & 32) | 0;
                label$5: {
                  label$6: {
                    if (!(HEAP32[(($0_1 + 48) | 0) >> 2] | 0)) {
                      break label$6;
                    }
                    $1_1 =
                      $352(
                        $0_1 | 0,
                        $1_1 | 0,
                        ($5_1 + 200) | 0 | 0,
                        ($5_1 + 80) | 0 | 0,
                        ($5_1 + 160) | 0 | 0,
                        $3_1 | 0,
                        $4_1 | 0
                      ) | 0;
                    break label$5;
                  }
                  HEAP32[(($0_1 + 48) | 0) >> 2] = 80;
                  HEAP32[(($0_1 + 16) | 0) >> 2] = ($5_1 + 80) | 0;
                  HEAP32[(($0_1 + 28) | 0) >> 2] = $5_1;
                  HEAP32[(($0_1 + 20) | 0) >> 2] = $5_1;
                  $7_1 = HEAP32[(($0_1 + 44) | 0) >> 2] | 0;
                  HEAP32[(($0_1 + 44) | 0) >> 2] = $5_1;
                  $1_1 =
                    $352(
                      $0_1 | 0,
                      $1_1 | 0,
                      ($5_1 + 200) | 0 | 0,
                      ($5_1 + 80) | 0 | 0,
                      ($5_1 + 160) | 0 | 0,
                      $3_1 | 0,
                      $4_1 | 0
                    ) | 0;
                  if (!$7_1) {
                    break label$5;
                  }
                  FUNCTION_TABLE[HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
                  HEAP32[(($0_1 + 48) | 0) >> 2] = 0;
                  HEAP32[(($0_1 + 44) | 0) >> 2] = $7_1;
                  HEAP32[(($0_1 + 28) | 0) >> 2] = 0;
                  HEAP32[(($0_1 + 16) | 0) >> 2] = 0;
                  $3_1 = HEAP32[(($0_1 + 20) | 0) >> 2] | 0;
                  HEAP32[(($0_1 + 20) | 0) >> 2] = 0;
                  $1_1 = $3_1 ? $1_1 : -1;
                }
                $3_1 = HEAP32[$0_1 >> 2] | 0;
                HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
                $1_1 = ($3_1 & 32) | 0 ? -1 : $1_1;
                if (!$2_1) {
                  break label$1;
                }
                $1714($0_1 | 0);
              }
              global$0 = ($5_1 + 208) | 0;
              return $1_1 | 0;
            }

            function $352($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $13_1 = 0,
                $14_1 = 0,
                $19_1 = 0,
                i64toi32_i32$1 = 0,
                $15_1 = 0,
                $12_1 = 0,
                $20_1 = 0,
                i64toi32_i32$0 = 0,
                $17_1 = 0,
                $11_1 = 0,
                $18_1 = 0,
                i64toi32_i32$2 = 0,
                $16_1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$5 = 0,
                $9_1 = 0,
                $22_1 = 0,
                $22$hi = 0,
                $10_1 = 0,
                $21_1 = 0,
                $30_1 = 0,
                $31_1 = 0,
                $32_1 = 0,
                $8_1 = 0,
                $275_1 = 0;
              $7_1 = (global$0 - 80) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 76) | 0) >> 2] = $1_1;
              $8_1 = ($7_1 + 55) | 0;
              $9_1 = ($7_1 + 56) | 0;
              $10_1 = 0;
              $11_1 = 0;
              $1_1 = 0;
              label$1: {
                label$2: while (1) {
                  label$3: {
                    if (($11_1 | 0) < (0 | 0)) {
                      break label$3;
                    }
                    label$4: {
                      if (($1_1 | 0) <= ((2147483647 - $11_1) | 0 | 0)) {
                        break label$4;
                      }
                      HEAP32[($305() | 0) >> 2] = 61;
                      $11_1 = -1;
                      break label$3;
                    }
                    $11_1 = ($1_1 + $11_1) | 0;
                  }
                  $12_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                  $1_1 = $12_1;
                  label$5: {
                    label$6: {
                      label$7: {
                        label$8: {
                          label$9: {
                            $13_1 = HEAPU8[$1_1 >> 0] | 0;
                            if (!$13_1) {
                              break label$9;
                            }
                            label$10: while (1) {
                              label$11: {
                                label$12: {
                                  label$13: {
                                    $13_1 = ($13_1 & 255) | 0;
                                    if ($13_1) {
                                      break label$13;
                                    }
                                    $13_1 = $1_1;
                                    break label$12;
                                  }
                                  if (($13_1 | 0) != (37 | 0)) {
                                    break label$11;
                                  }
                                  $13_1 = $1_1;
                                  label$14: while (1) {
                                    if ((HEAPU8[(($1_1 + 1) | 0) >> 0] | 0 | 0) != (37 | 0)) {
                                      break label$12;
                                    }
                                    $14_1 = ($1_1 + 2) | 0;
                                    HEAP32[(($7_1 + 76) | 0) >> 2] = $14_1;
                                    $13_1 = ($13_1 + 1) | 0;
                                    $15_1 = HEAPU8[(($1_1 + 2) | 0) >> 0] | 0;
                                    $1_1 = $14_1;
                                    if (($15_1 | 0) == (37 | 0)) {
                                      continue label$14;
                                    }
                                    break label$14;
                                  }
                                }
                                $1_1 = ($13_1 - $12_1) | 0;
                                label$15: {
                                  if (!$0_1) {
                                    break label$15;
                                  }
                                  $353($0_1 | 0, $12_1 | 0, $1_1 | 0);
                                }
                                if ($1_1) {
                                  continue label$2;
                                }
                                $1_1 =
                                  $301(HEAP8[(((HEAP32[(($7_1 + 76) | 0) >> 2] | 0) + 1) | 0) >> 0] | 0 | 0) |
                                  0;
                                $13_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                                label$16: {
                                  label$17: {
                                    if (!$1_1) {
                                      break label$17;
                                    }
                                    if ((HEAPU8[(($13_1 + 2) | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                      break label$17;
                                    }
                                    $1_1 = ($13_1 + 3) | 0;
                                    $16_1 = ((HEAP8[(($13_1 + 1) | 0) >> 0] | 0) + -48) | 0;
                                    $10_1 = 1;
                                    break label$16;
                                  }
                                  $1_1 = ($13_1 + 1) | 0;
                                  $16_1 = -1;
                                }
                                HEAP32[(($7_1 + 76) | 0) >> 2] = $1_1;
                                $17_1 = 0;
                                label$18: {
                                  label$19: {
                                    $15_1 = HEAP8[$1_1 >> 0] | 0;
                                    $14_1 = ($15_1 + -32) | 0;
                                    if ($14_1 >>> 0 <= 31 >>> 0) {
                                      break label$19;
                                    }
                                    $13_1 = $1_1;
                                    break label$18;
                                  }
                                  $17_1 = 0;
                                  $13_1 = $1_1;
                                  $14_1 = (1 << $14_1) | 0;
                                  if (!(($14_1 & 75913) | 0)) {
                                    break label$18;
                                  }
                                  label$20: while (1) {
                                    $13_1 = ($1_1 + 1) | 0;
                                    HEAP32[(($7_1 + 76) | 0) >> 2] = $13_1;
                                    $17_1 = $14_1 | $17_1 | 0;
                                    $15_1 = HEAP8[(($1_1 + 1) | 0) >> 0] | 0;
                                    $14_1 = ($15_1 + -32) | 0;
                                    if ($14_1 >>> 0 >= 32 >>> 0) {
                                      break label$18;
                                    }
                                    $1_1 = $13_1;
                                    $14_1 = (1 << $14_1) | 0;
                                    if (($14_1 & 75913) | 0) {
                                      continue label$20;
                                    }
                                    break label$20;
                                  }
                                }
                                label$21: {
                                  label$22: {
                                    if (($15_1 | 0) != (42 | 0)) {
                                      break label$22;
                                    }
                                    label$23: {
                                      label$24: {
                                        if (!($301(HEAP8[(($13_1 + 1) | 0) >> 0] | 0 | 0) | 0)) {
                                          break label$24;
                                        }
                                        $13_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                                        if ((HEAPU8[(($13_1 + 2) | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                          break label$24;
                                        }
                                        HEAP32[
                                          (((((((HEAP8[(($13_1 + 1) | 0) >> 0] | 0) << 2) | 0) + $4_1) | 0) +
                                            -192) |
                                            0) >>
                                            2
                                        ] = 10;
                                        $1_1 = ($13_1 + 3) | 0;
                                        $18_1 =
                                          HEAP32[
                                            (((((((HEAP8[(($13_1 + 1) | 0) >> 0] | 0) << 3) | 0) + $3_1) |
                                              0) +
                                              -384) |
                                              0) >>
                                              2
                                          ] | 0;
                                        $10_1 = 1;
                                        break label$23;
                                      }
                                      if ($10_1) {
                                        break label$8;
                                      }
                                      $10_1 = 0;
                                      $18_1 = 0;
                                      label$25: {
                                        if (!$0_1) {
                                          break label$25;
                                        }
                                        $1_1 = HEAP32[$2_1 >> 2] | 0;
                                        HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                                        $18_1 = HEAP32[$1_1 >> 2] | 0;
                                      }
                                      $1_1 = ((HEAP32[(($7_1 + 76) | 0) >> 2] | 0) + 1) | 0;
                                    }
                                    HEAP32[(($7_1 + 76) | 0) >> 2] = $1_1;
                                    if (($18_1 | 0) > (-1 | 0)) {
                                      break label$21;
                                    }
                                    $18_1 = (0 - $18_1) | 0;
                                    $17_1 = $17_1 | 8192 | 0;
                                    break label$21;
                                  }
                                  $18_1 = $354(($7_1 + 76) | 0 | 0) | 0;
                                  if (($18_1 | 0) < (0 | 0)) {
                                    break label$8;
                                  }
                                  $1_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                                }
                                $19_1 = -1;
                                label$26: {
                                  if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
                                    break label$26;
                                  }
                                  label$27: {
                                    if ((HEAPU8[(($1_1 + 1) | 0) >> 0] | 0 | 0) != (42 | 0)) {
                                      break label$27;
                                    }
                                    label$28: {
                                      if (!($301(HEAP8[(($1_1 + 2) | 0) >> 0] | 0 | 0) | 0)) {
                                        break label$28;
                                      }
                                      $1_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                                      if ((HEAPU8[(($1_1 + 3) | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                        break label$28;
                                      }
                                      HEAP32[
                                        (((((((HEAP8[(($1_1 + 2) | 0) >> 0] | 0) << 2) | 0) + $4_1) | 0) +
                                          -192) |
                                          0) >>
                                          2
                                      ] = 10;
                                      $19_1 =
                                        HEAP32[
                                          (((((((HEAP8[(($1_1 + 2) | 0) >> 0] | 0) << 3) | 0) + $3_1) | 0) +
                                            -384) |
                                            0) >>
                                            2
                                        ] | 0;
                                      $1_1 = ($1_1 + 4) | 0;
                                      HEAP32[(($7_1 + 76) | 0) >> 2] = $1_1;
                                      break label$26;
                                    }
                                    if ($10_1) {
                                      break label$8;
                                    }
                                    label$29: {
                                      label$30: {
                                        if ($0_1) {
                                          break label$30;
                                        }
                                        $19_1 = 0;
                                        break label$29;
                                      }
                                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                                      $19_1 = HEAP32[$1_1 >> 2] | 0;
                                    }
                                    $1_1 = ((HEAP32[(($7_1 + 76) | 0) >> 2] | 0) + 2) | 0;
                                    HEAP32[(($7_1 + 76) | 0) >> 2] = $1_1;
                                    break label$26;
                                  }
                                  HEAP32[(($7_1 + 76) | 0) >> 2] = ($1_1 + 1) | 0;
                                  $19_1 = $354(($7_1 + 76) | 0 | 0) | 0;
                                  $1_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                                }
                                $13_1 = 0;
                                label$31: while (1) {
                                  $14_1 = $13_1;
                                  $20_1 = -1;
                                  if ((((HEAP8[$1_1 >> 0] | 0) + -65) | 0) >>> 0 > 57 >>> 0) {
                                    break label$1;
                                  }
                                  $15_1 = ($1_1 + 1) | 0;
                                  HEAP32[(($7_1 + 76) | 0) >> 2] = $15_1;
                                  $13_1 = HEAP8[$1_1 >> 0] | 0;
                                  $1_1 = $15_1;
                                  $13_1 =
                                    HEAPU8[(((($13_1 + Math_imul($14_1, 58)) | 0) + 3759) | 0) >> 0] | 0;
                                  if ((($13_1 + -1) | 0) >>> 0 < 8 >>> 0) {
                                    continue label$31;
                                  }
                                  break label$31;
                                }
                                label$32: {
                                  label$33: {
                                    label$34: {
                                      if (($13_1 | 0) == (19 | 0)) {
                                        break label$34;
                                      }
                                      if (!$13_1) {
                                        break label$1;
                                      }
                                      label$35: {
                                        if (($16_1 | 0) < (0 | 0)) {
                                          break label$35;
                                        }
                                        HEAP32[(($4_1 + (($16_1 << 2) | 0)) | 0) >> 2] = $13_1;
                                        i64toi32_i32$2 = ($3_1 + (($16_1 << 3) | 0)) | 0;
                                        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                                        $275_1 = i64toi32_i32$0;
                                        i64toi32_i32$0 = $7_1;
                                        HEAP32[(($7_1 + 64) | 0) >> 2] = $275_1;
                                        HEAP32[(($7_1 + 68) | 0) >> 2] = i64toi32_i32$1;
                                        break label$33;
                                      }
                                      if (!$0_1) {
                                        break label$5;
                                      }
                                      $355(($7_1 + 64) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                                      $15_1 = HEAP32[(($7_1 + 76) | 0) >> 2] | 0;
                                      break label$32;
                                    }
                                    $20_1 = -1;
                                    if (($16_1 | 0) > (-1 | 0)) {
                                      break label$1;
                                    }
                                  }
                                  $1_1 = 0;
                                  if (!$0_1) {
                                    continue label$2;
                                  }
                                }
                                $21_1 = ($17_1 & -65537) | 0;
                                $13_1 = ($17_1 & 8192) | 0 ? $21_1 : $17_1;
                                $20_1 = 0;
                                $16_1 = 3804;
                                $17_1 = $9_1;
                                label$36: {
                                  label$37: {
                                    label$38: {
                                      label$39: {
                                        label$40: {
                                          label$41: {
                                            label$42: {
                                              label$43: {
                                                label$44: {
                                                  label$45: {
                                                    label$46: {
                                                      label$47: {
                                                        label$48: {
                                                          label$49: {
                                                            label$50: {
                                                              label$51: {
                                                                $1_1 = HEAP8[(($15_1 + -1) | 0) >> 0] | 0;
                                                                $1_1 = $14_1
                                                                  ? (($1_1 & 15) | 0 | 0) == (3 | 0)
                                                                    ? ($1_1 & -33) | 0
                                                                    : $1_1
                                                                  : $1_1;
                                                                switch (($1_1 + -88) | 0 | 0) {
                                                                  case 11:
                                                                    break label$36;
                                                                  case 9:
                                                                  case 13:
                                                                  case 14:
                                                                  case 15:
                                                                    break label$37;
                                                                  case 27:
                                                                    break label$42;
                                                                  case 12:
                                                                  case 17:
                                                                    break label$45;
                                                                  case 23:
                                                                    break label$46;
                                                                  case 0:
                                                                  case 32:
                                                                    break label$47;
                                                                  case 24:
                                                                    break label$48;
                                                                  case 22:
                                                                    break label$49;
                                                                  case 29:
                                                                    break label$50;
                                                                  case 1:
                                                                  case 2:
                                                                  case 3:
                                                                  case 4:
                                                                  case 5:
                                                                  case 6:
                                                                  case 7:
                                                                  case 8:
                                                                  case 10:
                                                                  case 16:
                                                                  case 18:
                                                                  case 19:
                                                                  case 20:
                                                                  case 21:
                                                                  case 25:
                                                                  case 26:
                                                                  case 28:
                                                                  case 30:
                                                                  case 31:
                                                                    break label$6;
                                                                  default:
                                                                    break label$51;
                                                                }
                                                              }
                                                              $17_1 = $9_1;
                                                              label$52: {
                                                                switch (($1_1 + -65) | 0 | 0) {
                                                                  case 0:
                                                                  case 4:
                                                                  case 5:
                                                                  case 6:
                                                                    break label$37;
                                                                  case 2:
                                                                    break label$40;
                                                                  case 1:
                                                                  case 3:
                                                                    break label$6;
                                                                  default:
                                                                    break label$52;
                                                                }
                                                              }
                                                              if (($1_1 | 0) == (83 | 0)) {
                                                                break label$41;
                                                              }
                                                              break label$7;
                                                            }
                                                            $20_1 = 0;
                                                            $16_1 = 3804;
                                                            i64toi32_i32$2 = $7_1;
                                                            i64toi32_i32$1 =
                                                              HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                            i64toi32_i32$0 =
                                                              HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                                            $22_1 = i64toi32_i32$1;
                                                            $22$hi = i64toi32_i32$0;
                                                            break label$44;
                                                          }
                                                          $1_1 = 0;
                                                          label$53: {
                                                            switch (($14_1 & 255) | 0 | 0) {
                                                              case 0:
                                                                HEAP32[
                                                                  (HEAP32[(($7_1 + 64) | 0) >> 2] | 0) >> 2
                                                                ] = $11_1;
                                                                continue label$2;
                                                              case 1:
                                                                HEAP32[
                                                                  (HEAP32[(($7_1 + 64) | 0) >> 2] | 0) >> 2
                                                                ] = $11_1;
                                                                continue label$2;
                                                              case 2:
                                                                i64toi32_i32$1 = $11_1;
                                                                i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                                                                i64toi32_i32$1 =
                                                                  HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                                HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                                                HEAP32[
                                                                  ((i64toi32_i32$1 + 4) | 0) >> 2
                                                                ] = i64toi32_i32$0;
                                                                continue label$2;
                                                              case 3:
                                                                HEAP16[
                                                                  (HEAP32[(($7_1 + 64) | 0) >> 2] | 0) >> 1
                                                                ] = $11_1;
                                                                continue label$2;
                                                              case 4:
                                                                HEAP8[
                                                                  (HEAP32[(($7_1 + 64) | 0) >> 2] | 0) >> 0
                                                                ] = $11_1;
                                                                continue label$2;
                                                              case 6:
                                                                HEAP32[
                                                                  (HEAP32[(($7_1 + 64) | 0) >> 2] | 0) >> 2
                                                                ] = $11_1;
                                                                continue label$2;
                                                              case 7:
                                                                break label$53;
                                                              default:
                                                                continue label$2;
                                                            }
                                                          }
                                                          i64toi32_i32$1 = $11_1;
                                                          i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                                                          i64toi32_i32$1 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                                          HEAP32[
                                                            ((i64toi32_i32$1 + 4) | 0) >> 2
                                                          ] = i64toi32_i32$0;
                                                          continue label$2;
                                                        }
                                                        $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                                                        $13_1 = $13_1 | 8 | 0;
                                                        $1_1 = 120;
                                                      }
                                                      $20_1 = 0;
                                                      $16_1 = 3804;
                                                      i64toi32_i32$2 = $7_1;
                                                      i64toi32_i32$0 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                      i64toi32_i32$1 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                                      $12_1 =
                                                        $356(
                                                          i64toi32_i32$0 | 0,
                                                          i64toi32_i32$1 | 0,
                                                          $9_1 | 0,
                                                          ($1_1 & 32) | 0 | 0
                                                        ) | 0;
                                                      if (!(($13_1 & 8) | 0)) {
                                                        break label$43;
                                                      }
                                                      i64toi32_i32$2 = $7_1;
                                                      i64toi32_i32$1 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                      i64toi32_i32$0 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                                                        break label$43;
                                                      }
                                                      $16_1 = ((($1_1 >>> 4) | 0) + 3804) | 0;
                                                      $20_1 = 2;
                                                      break label$43;
                                                    }
                                                    $20_1 = 0;
                                                    $16_1 = 3804;
                                                    i64toi32_i32$2 = $7_1;
                                                    i64toi32_i32$0 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                    i64toi32_i32$1 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                                    $12_1 =
                                                      $357(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) |
                                                      0;
                                                    if (!(($13_1 & 8) | 0)) {
                                                      break label$43;
                                                    }
                                                    $1_1 = ($9_1 - $12_1) | 0;
                                                    $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : ($1_1 + 1) | 0;
                                                    break label$43;
                                                  }
                                                  label$60: {
                                                    i64toi32_i32$2 = $7_1;
                                                    i64toi32_i32$1 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                                    i64toi32_i32$0 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                                    $22_1 = i64toi32_i32$1;
                                                    $22$hi = i64toi32_i32$0;
                                                    i64toi32_i32$2 = i64toi32_i32$1;
                                                    i64toi32_i32$1 = -1;
                                                    i64toi32_i32$3 = -1;
                                                    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                                                      $30_1 = 1;
                                                    } else {
                                                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                                                        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                                                          $31_1 = 0;
                                                        } else {
                                                          $31_1 = 1;
                                                        }
                                                        $32_1 = $31_1;
                                                      } else {
                                                        $32_1 = 0;
                                                      }
                                                      $30_1 = $32_1;
                                                    }
                                                    if ($30_1) {
                                                      break label$60;
                                                    }
                                                    i64toi32_i32$2 = $22$hi;
                                                    i64toi32_i32$2 = 0;
                                                    i64toi32_i32$3 = 0;
                                                    i64toi32_i32$0 = $22$hi;
                                                    i64toi32_i32$1 = $22_1;
                                                    i64toi32_i32$5 =
                                                      ((i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) +
                                                        i64toi32_i32$0) |
                                                      0;
                                                    i64toi32_i32$5 = (i64toi32_i32$2 - i64toi32_i32$5) | 0;
                                                    $22_1 = (i64toi32_i32$3 - i64toi32_i32$1) | 0;
                                                    $22$hi = i64toi32_i32$5;
                                                    i64toi32_i32$3 = $7_1;
                                                    HEAP32[(($7_1 + 64) | 0) >> 2] = $22_1;
                                                    HEAP32[(($7_1 + 68) | 0) >> 2] = i64toi32_i32$5;
                                                    $20_1 = 1;
                                                    $16_1 = 3804;
                                                    break label$44;
                                                  }
                                                  label$61: {
                                                    if (!(($13_1 & 2048) | 0)) {
                                                      break label$61;
                                                    }
                                                    $20_1 = 1;
                                                    $16_1 = 3805;
                                                    break label$44;
                                                  }
                                                  $20_1 = ($13_1 & 1) | 0;
                                                  $16_1 = $20_1 ? 3806 : 3804;
                                                }
                                                i64toi32_i32$5 = $22$hi;
                                                $12_1 = $358($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                                              }
                                              $13_1 = ($19_1 | 0) > (-1 | 0) ? ($13_1 & -65537) | 0 : $13_1;
                                              i64toi32_i32$2 = $7_1;
                                              i64toi32_i32$5 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                              i64toi32_i32$3 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                              $22_1 = i64toi32_i32$5;
                                              $22$hi = i64toi32_i32$3;
                                              label$62: {
                                                if ($19_1) {
                                                  break label$62;
                                                }
                                                i64toi32_i32$3 = $22$hi;
                                                if (!!($22_1 | i64toi32_i32$3 | 0)) {
                                                  break label$62;
                                                }
                                                $19_1 = 0;
                                                $12_1 = $9_1;
                                                break label$7;
                                              }
                                              i64toi32_i32$3 = $22$hi;
                                              $1_1 =
                                                ((($9_1 - $12_1) | 0) + !($22_1 | i64toi32_i32$3 | 0)) | 0;
                                              $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                                              break label$7;
                                            }
                                            $20_1 = 0;
                                            $1_1 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                            $12_1 = $1_1 ? $1_1 : 3814;
                                            $1_1 = $335($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                                            $17_1 = $1_1 ? $1_1 : ($12_1 + $19_1) | 0;
                                            $13_1 = $21_1;
                                            $19_1 = $1_1 ? ($1_1 - $12_1) | 0 : $19_1;
                                            break label$6;
                                          }
                                          label$63: {
                                            if (!$19_1) {
                                              break label$63;
                                            }
                                            $14_1 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                            break label$39;
                                          }
                                          $1_1 = 0;
                                          $359($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                                          break label$38;
                                        }
                                        HEAP32[(($7_1 + 12) | 0) >> 2] = 0;
                                        i64toi32_i32$2 = $7_1;
                                        i64toi32_i32$3 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                        i64toi32_i32$5 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                        HEAP32[(($7_1 + 8) | 0) >> 2] = i64toi32_i32$3;
                                        HEAP32[(($7_1 + 64) | 0) >> 2] = ($7_1 + 8) | 0;
                                        $19_1 = -1;
                                        $14_1 = ($7_1 + 8) | 0;
                                      }
                                      $1_1 = 0;
                                      label$64: {
                                        label$65: while (1) {
                                          $15_1 = HEAP32[$14_1 >> 2] | 0;
                                          if (!$15_1) {
                                            break label$64;
                                          }
                                          label$66: {
                                            $15_1 = $349(($7_1 + 4) | 0 | 0, $15_1 | 0) | 0;
                                            $12_1 = ($15_1 | 0) < (0 | 0);
                                            if ($12_1) {
                                              break label$66;
                                            }
                                            if ($15_1 >>> 0 > (($19_1 - $1_1) | 0) >>> 0) {
                                              break label$66;
                                            }
                                            $14_1 = ($14_1 + 4) | 0;
                                            $1_1 = ($15_1 + $1_1) | 0;
                                            if ($19_1 >>> 0 > $1_1 >>> 0) {
                                              continue label$65;
                                            }
                                            break label$64;
                                          }
                                          break label$65;
                                        }
                                        $20_1 = -1;
                                        if ($12_1) {
                                          break label$1;
                                        }
                                      }
                                      $359($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
                                      label$67: {
                                        if ($1_1) {
                                          break label$67;
                                        }
                                        $1_1 = 0;
                                        break label$38;
                                      }
                                      $14_1 = 0;
                                      $15_1 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                      label$68: while (1) {
                                        $12_1 = HEAP32[$15_1 >> 2] | 0;
                                        if (!$12_1) {
                                          break label$38;
                                        }
                                        $12_1 = $349(($7_1 + 4) | 0 | 0, $12_1 | 0) | 0;
                                        $14_1 = ($12_1 + $14_1) | 0;
                                        if (($14_1 | 0) > ($1_1 | 0)) {
                                          break label$38;
                                        }
                                        $353($0_1 | 0, ($7_1 + 4) | 0 | 0, $12_1 | 0);
                                        $15_1 = ($15_1 + 4) | 0;
                                        if ($14_1 >>> 0 < $1_1 >>> 0) {
                                          continue label$68;
                                        }
                                        break label$68;
                                      }
                                    }
                                    $359($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, ($13_1 ^ 8192) | 0 | 0);
                                    $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
                                    continue label$2;
                                  }
                                  $1_1 =
                                    FUNCTION_TABLE[$5_1 | 0](
                                      $0_1,
                                      +HEAPF64[(($7_1 + 64) | 0) >> 3],
                                      $18_1,
                                      $19_1,
                                      $13_1,
                                      $1_1
                                    ) | 0;
                                  continue label$2;
                                }
                                i64toi32_i32$2 = $7_1;
                                i64toi32_i32$5 = HEAP32[(($7_1 + 64) | 0) >> 2] | 0;
                                i64toi32_i32$3 = HEAP32[(($7_1 + 68) | 0) >> 2] | 0;
                                HEAP8[(($7_1 + 55) | 0) >> 0] = i64toi32_i32$5;
                                $19_1 = 1;
                                $12_1 = $8_1;
                                $17_1 = $9_1;
                                $13_1 = $21_1;
                                break label$6;
                              }
                              $14_1 = ($1_1 + 1) | 0;
                              HEAP32[(($7_1 + 76) | 0) >> 2] = $14_1;
                              $13_1 = HEAPU8[(($1_1 + 1) | 0) >> 0] | 0;
                              $1_1 = $14_1;
                              continue label$10;
                            }
                          }
                          $20_1 = $11_1;
                          if ($0_1) {
                            break label$1;
                          }
                          if (!$10_1) {
                            break label$5;
                          }
                          $1_1 = 1;
                          label$69: {
                            label$70: while (1) {
                              $13_1 = HEAP32[(($4_1 + (($1_1 << 2) | 0)) | 0) >> 2] | 0;
                              if (!$13_1) {
                                break label$69;
                              }
                              $355(($3_1 + (($1_1 << 3) | 0)) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                              $20_1 = 1;
                              $1_1 = ($1_1 + 1) | 0;
                              if (($1_1 | 0) != (10 | 0)) {
                                continue label$70;
                              }
                              break label$1;
                            }
                          }
                          $20_1 = 1;
                          if ($1_1 >>> 0 >= 10 >>> 0) {
                            break label$1;
                          }
                          label$71: while (1) {
                            if (HEAP32[(($4_1 + (($1_1 << 2) | 0)) | 0) >> 2] | 0) {
                              break label$8;
                            }
                            $20_1 = 1;
                            $1_1 = ($1_1 + 1) | 0;
                            if (($1_1 | 0) == (10 | 0)) {
                              break label$1;
                            }
                            continue label$71;
                          }
                        }
                        $20_1 = -1;
                        break label$1;
                      }
                      $17_1 = $9_1;
                    }
                    $15_1 = ($17_1 - $12_1) | 0;
                    $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
                    $14_1 = ($20_1 + $17_1) | 0;
                    $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
                    $359($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
                    $353($0_1 | 0, $16_1 | 0, $20_1 | 0);
                    $359($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, ($13_1 ^ 65536) | 0 | 0);
                    $359($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
                    $353($0_1 | 0, $12_1 | 0, $15_1 | 0);
                    $359($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, ($13_1 ^ 8192) | 0 | 0);
                    continue label$2;
                  }
                  break label$2;
                }
                $20_1 = 0;
              }
              global$0 = ($7_1 + 80) | 0;
              return $20_1 | 0;
            }

            function $353($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (((HEAPU8[$0_1 >> 0] | 0) & 32) | 0) {
                  break label$1;
                }
                $1711($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
              }
            }

            function $354($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0,
                $3_1 = 0;
              $1_1 = 0;
              label$1: {
                if (!($301(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $2_1 = HEAP32[$0_1 >> 2] | 0;
                  $3_1 = HEAP8[$2_1 >> 0] | 0;
                  HEAP32[$0_1 >> 2] = ($2_1 + 1) | 0;
                  $1_1 = ((($3_1 + Math_imul($1_1, 10)) | 0) + -48) | 0;
                  if ($301(HEAP8[(($2_1 + 1) | 0) >> 0] | 0 | 0) | 0) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return $1_1 | 0;
            }

            function $355($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $23_1 = 0,
                $31_1 = 0,
                $41_1 = 0,
                $49_1 = 0,
                $57_1 = 0,
                $65_1 = 0,
                $73_1 = 0;
              label$1: {
                if ($1_1 >>> 0 > 20 >>> 0) {
                  break label$1;
                }
                label$2: {
                  switch (($1_1 + -9) | 0 | 0) {
                    case 0:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                      return;
                    case 1:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                      i64toi32_i32$1 = (i64toi32_i32$0 >> 31) | 0;
                      $23_1 = i64toi32_i32$0;
                      i64toi32_i32$0 = $0_1;
                      HEAP32[i64toi32_i32$0 >> 2] = $23_1;
                      HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                      return;
                    case 2:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
                      i64toi32_i32$0 = 0;
                      $31_1 = i64toi32_i32$1;
                      i64toi32_i32$1 = $0_1;
                      HEAP32[i64toi32_i32$1 >> 2] = $31_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      return;
                    case 3:
                      $1_1 = ((((HEAP32[$2_1 >> 2] | 0) + 7) | 0) & -8) | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 8) | 0;
                      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      $41_1 = i64toi32_i32$0;
                      i64toi32_i32$0 = $0_1;
                      HEAP32[i64toi32_i32$0 >> 2] = $41_1;
                      HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                      return;
                    case 4:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
                      i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                      $49_1 = i64toi32_i32$1;
                      i64toi32_i32$1 = $0_1;
                      HEAP32[i64toi32_i32$1 >> 2] = $49_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      return;
                    case 5:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
                      i64toi32_i32$1 = 0;
                      $57_1 = i64toi32_i32$0;
                      i64toi32_i32$0 = $0_1;
                      HEAP32[i64toi32_i32$0 >> 2] = $57_1;
                      HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                      return;
                    case 6:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
                      i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                      $65_1 = i64toi32_i32$1;
                      i64toi32_i32$1 = $0_1;
                      HEAP32[i64toi32_i32$1 >> 2] = $65_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      return;
                    case 7:
                      $1_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 4) | 0;
                      i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
                      i64toi32_i32$1 = 0;
                      $73_1 = i64toi32_i32$0;
                      i64toi32_i32$0 = $0_1;
                      HEAP32[i64toi32_i32$0 >> 2] = $73_1;
                      HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                      return;
                    case 8:
                      $1_1 = ((((HEAP32[$2_1 >> 2] | 0) + 7) | 0) & -8) | 0;
                      HEAP32[$2_1 >> 2] = ($1_1 + 8) | 0;
                      HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
                      return;
                    case 9:
                      break label$2;
                    default:
                      break label$1;
                  }
                }
                FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
              }
            }

            function $356($0_1, $0$hi, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                $9_1 = 0;
              label$1: {
                i64toi32_i32$0 = $0$hi;
                if (!($0_1 | i64toi32_i32$0 | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $1_1 = ($1_1 + -1) | 0;
                  i64toi32_i32$0 = $0$hi;
                  HEAP8[$1_1 >> 0] = HEAPU8[(((($0_1 & 15) | 0) + 4288) | 0) >> 0] | 0 | $2_1 | 0;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 4;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $9_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                    $9_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $0_1 = $9_1;
                  $0$hi = i64toi32_i32$1;
                  i64toi32_i32$0 = $0_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 0;
                  if (
                    ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0)) |
                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                    0
                  ) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return $1_1 | 0;
            }

            function $357($0_1, $0$hi, $1_1) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$2 = 0,
                $8_1 = 0;
              label$1: {
                i64toi32_i32$0 = $0$hi;
                if (!($0_1 | i64toi32_i32$0 | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $1_1 = ($1_1 + -1) | 0;
                  i64toi32_i32$0 = $0$hi;
                  HEAP8[$1_1 >> 0] = ($0_1 & 7) | 0 | 48 | 0;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 3;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $8_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                    $8_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $0_1 = $8_1;
                  $0$hi = i64toi32_i32$1;
                  i64toi32_i32$0 = $0_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 0;
                  if (
                    ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0)) |
                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                    0
                  ) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return $1_1 | 0;
            }

            function $358($0_1, $0$hi, $1_1) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $3_1 = 0,
                i64toi32_i32$3 = 0,
                $2_1 = 0,
                i64toi32_i32$5 = 0,
                $2$hi = 0,
                $4_1 = 0,
                $16_1 = 0,
                $16$hi = 0,
                $5_1 = 0;
              label$1: {
                label$2: {
                  i64toi32_i32$0 = $0$hi;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$1 = 1;
                  i64toi32_i32$3 = 0;
                  if (
                    (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0) |
                    ((((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0)) &
                      (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$2;
                  }
                  i64toi32_i32$2 = $0$hi;
                  $2_1 = $0_1;
                  $2$hi = i64toi32_i32$2;
                  break label$1;
                }
                label$3: while (1) {
                  $1_1 = ($1_1 + -1) | 0;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$0 =
                    __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
                  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                  $2_1 = i64toi32_i32$0;
                  $2$hi = i64toi32_i32$2;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$0 =
                    __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
                  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                  $16_1 = i64toi32_i32$0;
                  $16$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$0 = $16$hi;
                  i64toi32_i32$1 = $16_1;
                  i64toi32_i32$5 = (($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0) | 0;
                  i64toi32_i32$5 = (i64toi32_i32$2 - i64toi32_i32$5) | 0;
                  HEAP8[$1_1 >> 0] = ($0_1 - i64toi32_i32$1) | 0 | 48 | 0;
                  i64toi32_i32$5 = i64toi32_i32$2;
                  i64toi32_i32$5 = i64toi32_i32$2;
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$3 = 9;
                  i64toi32_i32$1 = -1;
                  $3_1 =
                    ($0$hi >>> 0 > i64toi32_i32$3 >>> 0) |
                    (((($0$hi | 0) == (i64toi32_i32$3 | 0)) & (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0)) |
                      0) |
                    0;
                  i64toi32_i32$2 = $2$hi;
                  $0_1 = $2_1;
                  $0$hi = i64toi32_i32$2;
                  if ($3_1) {
                    continue label$3;
                  }
                  break label$3;
                }
              }
              label$4: {
                i64toi32_i32$2 = $2$hi;
                $3_1 = $2_1;
                if (!$3_1) {
                  break label$4;
                }
                label$5: while (1) {
                  $1_1 = ($1_1 + -1) | 0;
                  $4_1 = (($3_1 >>> 0) / (10 >>> 0)) | 0;
                  HEAP8[$1_1 >> 0] = ($3_1 - Math_imul($4_1, 10)) | 0 | 48 | 0;
                  $5_1 = $3_1 >>> 0 > 9 >>> 0;
                  $3_1 = $4_1;
                  if ($5_1) {
                    continue label$5;
                  }
                  break label$5;
                }
              }
              return $1_1 | 0;
            }

            function $359($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 256) | 0;
              global$0 = $5_1;
              label$1: {
                if (($2_1 | 0) <= ($3_1 | 0)) {
                  break label$1;
                }
                if (($4_1 & 73728) | 0) {
                  break label$1;
                }
                $2_1 = ($2_1 - $3_1) | 0;
                $3_1 = $2_1 >>> 0 < 256 >>> 0;
                $1708($5_1 | 0, ($1_1 & 255) | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
                label$2: {
                  if ($3_1) {
                    break label$2;
                  }
                  label$3: while (1) {
                    $353($0_1 | 0, $5_1 | 0, 256 | 0);
                    $2_1 = ($2_1 + -256) | 0;
                    if ($2_1 >>> 0 > 255 >>> 0) {
                      continue label$3;
                    }
                    break label$3;
                  }
                }
                $353($0_1 | 0, $5_1 | 0, $2_1 | 0);
              }
              global$0 = ($5_1 + 256) | 0;
            }

            function $360($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $351($0_1 | 0, $1_1 | 0, $2_1 | 0, 25 | 0, 26 | 0) | 0 | 0;
            }

            function $361($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = +$1_1;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $11_1 = 0,
                $18_1 = 0,
                $17_1 = 0,
                $23_1 = 0,
                $6_1 = 0,
                $10_1 = 0,
                i64toi32_i32$1 = 0,
                $14_1 = 0,
                i64toi32_i32$0 = 0,
                $21_1 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$5 = 0,
                $22_1 = 0,
                $16_1 = 0,
                $12_1 = 0,
                $19_1 = 0,
                $26_1 = 0.0,
                $24_1 = 0,
                $9_1 = 0,
                $24$hi = 0,
                $8_1 = 0,
                $13_1 = 0,
                $15_1 = 0,
                $20_1 = 0,
                $7_1 = 0,
                $44_1 = 0,
                $45_1 = 0,
                $46_1 = 0,
                $25$hi = 0,
                $47_1 = 0,
                $25_1 = 0,
                $158_1 = 0,
                $160$hi = 0,
                $162$hi = 0,
                $164_1 = 0,
                $164$hi = 0,
                $166$hi = 0,
                $170_1 = 0,
                $170$hi = 0,
                $818_1 = 0;
              $6_1 = (global$0 - 560) | 0;
              global$0 = $6_1;
              $7_1 = 0;
              HEAP32[(($6_1 + 44) | 0) >> 2] = 0;
              label$1: {
                label$2: {
                  i64toi32_i32$0 = $363(+$1_1) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $24_1 = i64toi32_i32$0;
                  $24$hi = i64toi32_i32$1;
                  i64toi32_i32$2 = i64toi32_i32$0;
                  i64toi32_i32$0 = -1;
                  i64toi32_i32$3 = -1;
                  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                    $44_1 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $45_1 = 0;
                      } else {
                        $45_1 = 1;
                      }
                      $46_1 = $45_1;
                    } else {
                      $46_1 = 0;
                    }
                    $44_1 = $46_1;
                  }
                  if ($44_1) {
                    break label$2;
                  }
                  $8_1 = 1;
                  $9_1 = 4304;
                  $1_1 = -$1_1;
                  i64toi32_i32$2 = $363(+$1_1) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $24_1 = i64toi32_i32$2;
                  $24$hi = i64toi32_i32$1;
                  break label$1;
                }
                $8_1 = 1;
                label$3: {
                  if (!(($4_1 & 2048) | 0)) {
                    break label$3;
                  }
                  $9_1 = 4307;
                  break label$1;
                }
                $9_1 = 4310;
                if (($4_1 & 1) | 0) {
                  break label$1;
                }
                $8_1 = 0;
                $7_1 = 1;
                $9_1 = 4305;
              }
              label$4: {
                label$5: {
                  i64toi32_i32$1 = $24$hi;
                  i64toi32_i32$3 = $24_1;
                  i64toi32_i32$2 = 2146435072;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                  i64toi32_i32$3 = 2146435072;
                  i64toi32_i32$0 = 0;
                  if (
                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0)) |
                    ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0)) |
                    0
                  ) {
                    break label$5;
                  }
                  $10_1 = ($8_1 + 3) | 0;
                  $359($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, ($4_1 & -65537) | 0 | 0);
                  $353($0_1 | 0, $9_1 | 0, $8_1 | 0);
                  $11_1 = ($5_1 & 32) | 0;
                  $353($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 4331 : 4335) : $11_1 ? 4323 : 4327) | 0, 3 | 0);
                  $359($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, ($4_1 ^ 8192) | 0 | 0);
                  break label$4;
                }
                $12_1 = ($6_1 + 16) | 0;
                label$6: {
                  label$7: {
                    label$8: {
                      label$9: {
                        $1_1 = +$350(+$1_1, ($6_1 + 44) | 0 | 0);
                        $1_1 = $1_1 + $1_1;
                        if ($1_1 == 0.0) {
                          break label$9;
                        }
                        $11_1 = HEAP32[(($6_1 + 44) | 0) >> 2] | 0;
                        HEAP32[(($6_1 + 44) | 0) >> 2] = ($11_1 + -1) | 0;
                        $13_1 = $5_1 | 32 | 0;
                        if (($13_1 | 0) != (97 | 0)) {
                          break label$8;
                        }
                        break label$6;
                      }
                      $13_1 = $5_1 | 32 | 0;
                      if (($13_1 | 0) == (97 | 0)) {
                        break label$6;
                      }
                      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
                      $15_1 = HEAP32[(($6_1 + 44) | 0) >> 2] | 0;
                      break label$7;
                    }
                    $15_1 = ($11_1 + -29) | 0;
                    HEAP32[(($6_1 + 44) | 0) >> 2] = $15_1;
                    $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
                    $1_1 = $1_1 * 268435456.0;
                  }
                  $16_1 = ($15_1 | 0) < (0 | 0) ? ($6_1 + 48) | 0 : ($6_1 + 336) | 0;
                  $17_1 = $16_1;
                  label$10: while (1) {
                    label$11: {
                      label$12: {
                        if (!((($1_1 < 4294967296.0) & ($1_1 >= 0.0)) | 0)) {
                          break label$12;
                        }
                        $11_1 = ~~$1_1 >>> 0;
                        break label$11;
                      }
                      $11_1 = 0;
                    }
                    HEAP32[$17_1 >> 2] = $11_1;
                    $17_1 = ($17_1 + 4) | 0;
                    $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
                    if ($1_1 != 0.0) {
                      continue label$10;
                    }
                    break label$10;
                  }
                  label$13: {
                    label$14: {
                      if (($15_1 | 0) >= (1 | 0)) {
                        break label$14;
                      }
                      $3_1 = $15_1;
                      $11_1 = $17_1;
                      $18_1 = $16_1;
                      break label$13;
                    }
                    $18_1 = $16_1;
                    $3_1 = $15_1;
                    label$15: while (1) {
                      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
                      label$16: {
                        $11_1 = ($17_1 + -4) | 0;
                        if ($11_1 >>> 0 < $18_1 >>> 0) {
                          break label$16;
                        }
                        i64toi32_i32$1 = 0;
                        $25_1 = $3_1;
                        $25$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = 0;
                        $24_1 = 0;
                        $24$hi = i64toi32_i32$1;
                        label$17: while (1) {
                          $158_1 = $11_1;
                          i64toi32_i32$0 = $11_1;
                          i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
                          i64toi32_i32$2 = 0;
                          $160$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $25$hi;
                          i64toi32_i32$2 = $160$hi;
                          i64toi32_i32$0 = i64toi32_i32$1;
                          i64toi32_i32$1 = $25$hi;
                          i64toi32_i32$3 = $25_1;
                          i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                            i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                            $47_1 = 0;
                          } else {
                            i64toi32_i32$1 =
                              (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                                ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                              0 |
                              ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                              0;
                            $47_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                          }
                          $162$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $24$hi;
                          i64toi32_i32$2 = $24_1;
                          i64toi32_i32$0 = 0;
                          i64toi32_i32$3 = -1;
                          i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                          $164_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                          $164$hi = i64toi32_i32$0;
                          i64toi32_i32$0 = $162$hi;
                          i64toi32_i32$1 = $47_1;
                          i64toi32_i32$2 = $164$hi;
                          i64toi32_i32$3 = $164_1;
                          i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$3) | 0;
                          i64toi32_i32$5 = (i64toi32_i32$0 + i64toi32_i32$2) | 0;
                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                          }
                          $24_1 = i64toi32_i32$4;
                          $24$hi = i64toi32_i32$5;
                          $166$hi = i64toi32_i32$5;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$1 =
                            __wasm_i64_udiv(
                              i64toi32_i32$4 | 0,
                              i64toi32_i32$5 | 0,
                              1e9 | 0,
                              i64toi32_i32$1 | 0
                            ) | 0;
                          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                          $24_1 = i64toi32_i32$1;
                          $24$hi = i64toi32_i32$5;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$1 =
                            __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
                          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                          $170_1 = i64toi32_i32$1;
                          $170$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $166$hi;
                          i64toi32_i32$0 = i64toi32_i32$4;
                          i64toi32_i32$1 = $170$hi;
                          i64toi32_i32$3 = $170_1;
                          i64toi32_i32$2 = (i64toi32_i32$0 - i64toi32_i32$3) | 0;
                          i64toi32_i32$4 =
                            ((i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1) | 0;
                          i64toi32_i32$4 = (i64toi32_i32$5 - i64toi32_i32$4) | 0;
                          HEAP32[$158_1 >> 2] = i64toi32_i32$2;
                          $11_1 = ($11_1 + -4) | 0;
                          if ($11_1 >>> 0 >= $18_1 >>> 0) {
                            continue label$17;
                          }
                          break label$17;
                        }
                        i64toi32_i32$4 = $24$hi;
                        $11_1 = $24_1;
                        if (!$11_1) {
                          break label$16;
                        }
                        $18_1 = ($18_1 + -4) | 0;
                        HEAP32[$18_1 >> 2] = $11_1;
                      }
                      label$18: {
                        label$19: while (1) {
                          $11_1 = $17_1;
                          if ($11_1 >>> 0 <= $18_1 >>> 0) {
                            break label$18;
                          }
                          $17_1 = ($11_1 + -4) | 0;
                          if (!(HEAP32[$17_1 >> 2] | 0)) {
                            continue label$19;
                          }
                          break label$19;
                        }
                      }
                      $3_1 = ((HEAP32[(($6_1 + 44) | 0) >> 2] | 0) - $3_1) | 0;
                      HEAP32[(($6_1 + 44) | 0) >> 2] = $3_1;
                      $17_1 = $11_1;
                      if (($3_1 | 0) > (0 | 0)) {
                        continue label$15;
                      }
                      break label$15;
                    }
                  }
                  label$20: {
                    if (($3_1 | 0) > (-1 | 0)) {
                      break label$20;
                    }
                    $19_1 = ((((($14_1 + 25) | 0 | 0) / (9 | 0)) | 0) + 1) | 0;
                    $20_1 = ($13_1 | 0) == (102 | 0);
                    label$21: while (1) {
                      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : (0 - $3_1) | 0;
                      label$22: {
                        label$23: {
                          if ($18_1 >>> 0 < $11_1 >>> 0) {
                            break label$23;
                          }
                          $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : ($18_1 + 4) | 0;
                          break label$22;
                        }
                        $21_1 = (1e9 >>> $10_1) | 0;
                        $22_1 = (((-1 << $10_1) | 0) ^ -1) | 0;
                        $3_1 = 0;
                        $17_1 = $18_1;
                        label$24: while (1) {
                          $23_1 = HEAP32[$17_1 >> 2] | 0;
                          HEAP32[$17_1 >> 2] = ((($23_1 >>> $10_1) | 0) + $3_1) | 0;
                          $3_1 = Math_imul(($23_1 & $22_1) | 0, $21_1);
                          $17_1 = ($17_1 + 4) | 0;
                          if ($17_1 >>> 0 < $11_1 >>> 0) {
                            continue label$24;
                          }
                          break label$24;
                        }
                        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : ($18_1 + 4) | 0;
                        if (!$3_1) {
                          break label$22;
                        }
                        HEAP32[$11_1 >> 2] = $3_1;
                        $11_1 = ($11_1 + 4) | 0;
                      }
                      $3_1 = ((HEAP32[(($6_1 + 44) | 0) >> 2] | 0) + $10_1) | 0;
                      HEAP32[(($6_1 + 44) | 0) >> 2] = $3_1;
                      $17_1 = $20_1 ? $16_1 : $18_1;
                      $11_1 =
                        (((($11_1 - $17_1) | 0) >> 2) | 0 | 0) > ($19_1 | 0)
                          ? ($17_1 + (($19_1 << 2) | 0)) | 0
                          : $11_1;
                      if (($3_1 | 0) < (0 | 0)) {
                        continue label$21;
                      }
                      break label$21;
                    }
                  }
                  $17_1 = 0;
                  label$25: {
                    if ($18_1 >>> 0 >= $11_1 >>> 0) {
                      break label$25;
                    }
                    $17_1 = Math_imul(((($16_1 - $18_1) | 0) >> 2) | 0, 9);
                    $3_1 = 10;
                    $23_1 = HEAP32[$18_1 >> 2] | 0;
                    if ($23_1 >>> 0 < 10 >>> 0) {
                      break label$25;
                    }
                    label$26: while (1) {
                      $17_1 = ($17_1 + 1) | 0;
                      $3_1 = Math_imul($3_1, 10);
                      if ($23_1 >>> 0 >= $3_1 >>> 0) {
                        continue label$26;
                      }
                      break label$26;
                    }
                  }
                  label$27: {
                    $3_1 =
                      ((($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1)) | 0) -
                        (((($14_1 | 0) != (0 | 0)) & (($13_1 | 0) == (103 | 0))) | 0)) |
                      0;
                    if (($3_1 | 0) >= ((Math_imul(((($11_1 - $16_1) | 0) >> 2) | 0, 9) + -9) | 0 | 0)) {
                      break label$27;
                    }
                    $23_1 = ($3_1 + 9216) | 0;
                    $21_1 = (($23_1 | 0) / (9 | 0)) | 0;
                    $10_1 =
                      ((((($21_1 << 2) | 0) +
                        (($15_1 | 0) < (0 | 0) ? ($6_1 + 48) | 0 | 4 | 0 : ($6_1 + 340) | 0)) |
                        0) +
                        -4096) |
                      0;
                    $3_1 = 10;
                    label$28: {
                      $23_1 = ($23_1 - Math_imul($21_1, 9)) | 0;
                      if (($23_1 | 0) > (7 | 0)) {
                        break label$28;
                      }
                      label$29: while (1) {
                        $3_1 = Math_imul($3_1, 10);
                        $23_1 = ($23_1 + 1) | 0;
                        if (($23_1 | 0) != (8 | 0)) {
                          continue label$29;
                        }
                        break label$29;
                      }
                    }
                    $21_1 = HEAP32[$10_1 >> 2] | 0;
                    $22_1 = (($21_1 >>> 0) / ($3_1 >>> 0)) | 0;
                    $23_1 = ($21_1 - Math_imul($22_1, $3_1)) | 0;
                    label$30: {
                      label$31: {
                        $19_1 = ($10_1 + 4) | 0;
                        if (($19_1 | 0) != ($11_1 | 0)) {
                          break label$31;
                        }
                        if (!$23_1) {
                          break label$30;
                        }
                      }
                      $20_1 = ($3_1 >>> 1) | 0;
                      $26_1 =
                        $23_1 >>> 0 < $20_1 >>> 0
                          ? 0.5
                          : ($19_1 | 0) == ($11_1 | 0)
                          ? ($23_1 | 0) == ($20_1 | 0)
                            ? 1.0
                            : 1.5
                          : 1.5;
                      $1_1 = ($22_1 & 1) | 0 ? 9007199254740994.0 : 9007199254740992.0;
                      label$32: {
                        if ($7_1) {
                          break label$32;
                        }
                        if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
                          break label$32;
                        }
                        $26_1 = -$26_1;
                        $1_1 = -$1_1;
                      }
                      $23_1 = ($21_1 - $23_1) | 0;
                      HEAP32[$10_1 >> 2] = $23_1;
                      if ($1_1 + $26_1 == $1_1) {
                        break label$30;
                      }
                      $17_1 = ($23_1 + $3_1) | 0;
                      HEAP32[$10_1 >> 2] = $17_1;
                      label$33: {
                        if ($17_1 >>> 0 < 1e9 >>> 0) {
                          break label$33;
                        }
                        label$34: while (1) {
                          HEAP32[$10_1 >> 2] = 0;
                          label$35: {
                            $10_1 = ($10_1 + -4) | 0;
                            if ($10_1 >>> 0 >= $18_1 >>> 0) {
                              break label$35;
                            }
                            $18_1 = ($18_1 + -4) | 0;
                            HEAP32[$18_1 >> 2] = 0;
                          }
                          $17_1 = ((HEAP32[$10_1 >> 2] | 0) + 1) | 0;
                          HEAP32[$10_1 >> 2] = $17_1;
                          if ($17_1 >>> 0 > 999999999 >>> 0) {
                            continue label$34;
                          }
                          break label$34;
                        }
                      }
                      $17_1 = Math_imul(((($16_1 - $18_1) | 0) >> 2) | 0, 9);
                      $3_1 = 10;
                      $23_1 = HEAP32[$18_1 >> 2] | 0;
                      if ($23_1 >>> 0 < 10 >>> 0) {
                        break label$30;
                      }
                      label$36: while (1) {
                        $17_1 = ($17_1 + 1) | 0;
                        $3_1 = Math_imul($3_1, 10);
                        if ($23_1 >>> 0 >= $3_1 >>> 0) {
                          continue label$36;
                        }
                        break label$36;
                      }
                    }
                    $3_1 = ($10_1 + 4) | 0;
                    $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
                  }
                  label$37: {
                    label$38: while (1) {
                      $3_1 = $11_1;
                      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
                      if ($23_1) {
                        break label$37;
                      }
                      $11_1 = ($3_1 + -4) | 0;
                      if (!(HEAP32[$11_1 >> 2] | 0)) {
                        continue label$38;
                      }
                      break label$38;
                    }
                  }
                  label$39: {
                    label$40: {
                      if (($13_1 | 0) == (103 | 0)) {
                        break label$40;
                      }
                      $22_1 = ($4_1 & 8) | 0;
                      break label$39;
                    }
                    $11_1 = $14_1 ? $14_1 : 1;
                    $10_1 = ((($11_1 | 0) > ($17_1 | 0)) & (($17_1 | 0) > (-5 | 0))) | 0;
                    $14_1 = (($10_1 ? ($17_1 ^ -1) | 0 : -1) + $11_1) | 0;
                    $5_1 = (($10_1 ? -1 : -2) + $5_1) | 0;
                    $22_1 = ($4_1 & 8) | 0;
                    if ($22_1) {
                      break label$39;
                    }
                    $11_1 = -9;
                    label$41: {
                      if ($23_1) {
                        break label$41;
                      }
                      $10_1 = HEAP32[(($3_1 + -4) | 0) >> 2] | 0;
                      if (!$10_1) {
                        break label$41;
                      }
                      $23_1 = 10;
                      $11_1 = 0;
                      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
                        break label$41;
                      }
                      label$42: while (1) {
                        $21_1 = $11_1;
                        $11_1 = ($11_1 + 1) | 0;
                        $23_1 = Math_imul($23_1, 10);
                        if (!(($10_1 >>> 0) % ($23_1 >>> 0) | 0)) {
                          continue label$42;
                        }
                        break label$42;
                      }
                      $11_1 = ($21_1 ^ -1) | 0;
                    }
                    $23_1 = Math_imul(((($3_1 - $16_1) | 0) >> 2) | 0, 9);
                    label$43: {
                      if ((($5_1 & -33) | 0 | 0) != (70 | 0)) {
                        break label$43;
                      }
                      $22_1 = 0;
                      $11_1 = ((($23_1 + $11_1) | 0) + -9) | 0;
                      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
                      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
                      break label$39;
                    }
                    $22_1 = 0;
                    $11_1 = ((((($17_1 + $23_1) | 0) + $11_1) | 0) + -9) | 0;
                    $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
                    $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
                  }
                  $20_1 = $14_1 | $22_1 | 0;
                  $23_1 = ($20_1 | 0) != (0 | 0);
                  label$44: {
                    label$45: {
                      $21_1 = ($5_1 & -33) | 0;
                      if (($21_1 | 0) != (70 | 0)) {
                        break label$45;
                      }
                      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
                      break label$44;
                    }
                    label$46: {
                      $11_1 = ($17_1 >> 31) | 0;
                      i64toi32_i32$4 = 0;
                      $11_1 =
                        $358(((($17_1 + $11_1) | 0) ^ $11_1) | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
                      if ((($12_1 - $11_1) | 0 | 0) > (1 | 0)) {
                        break label$46;
                      }
                      label$47: while (1) {
                        $11_1 = ($11_1 + -1) | 0;
                        HEAP8[$11_1 >> 0] = 48;
                        if ((($12_1 - $11_1) | 0 | 0) < (2 | 0)) {
                          continue label$47;
                        }
                        break label$47;
                      }
                    }
                    $19_1 = ($11_1 + -2) | 0;
                    HEAP8[$19_1 >> 0] = $5_1;
                    HEAP8[(($11_1 + -1) | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
                    $11_1 = ($12_1 - $19_1) | 0;
                  }
                  $10_1 = ((((((($8_1 + $14_1) | 0) + $23_1) | 0) + $11_1) | 0) + 1) | 0;
                  $359($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
                  $353($0_1 | 0, $9_1 | 0, $8_1 | 0);
                  $359($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, ($4_1 ^ 65536) | 0 | 0);
                  label$48: {
                    label$49: {
                      label$50: {
                        label$51: {
                          if (($21_1 | 0) != (70 | 0)) {
                            break label$51;
                          }
                          $21_1 = ($6_1 + 16) | 0 | 8 | 0;
                          $17_1 = ($6_1 + 16) | 0 | 9 | 0;
                          $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
                          $18_1 = $23_1;
                          label$52: while (1) {
                            i64toi32_i32$5 = $18_1;
                            i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
                            i64toi32_i32$0 = 0;
                            $11_1 = $358(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $17_1 | 0) | 0;
                            label$53: {
                              label$54: {
                                if (($18_1 | 0) == ($23_1 | 0)) {
                                  break label$54;
                                }
                                if ($11_1 >>> 0 <= (($6_1 + 16) | 0) >>> 0) {
                                  break label$53;
                                }
                                label$55: while (1) {
                                  $11_1 = ($11_1 + -1) | 0;
                                  HEAP8[$11_1 >> 0] = 48;
                                  if ($11_1 >>> 0 > (($6_1 + 16) | 0) >>> 0) {
                                    continue label$55;
                                  }
                                  break label$53;
                                }
                              }
                              if (($11_1 | 0) != ($17_1 | 0)) {
                                break label$53;
                              }
                              HEAP8[(($6_1 + 24) | 0) >> 0] = 48;
                              $11_1 = $21_1;
                            }
                            $353($0_1 | 0, $11_1 | 0, ($17_1 - $11_1) | 0 | 0);
                            $18_1 = ($18_1 + 4) | 0;
                            if ($18_1 >>> 0 <= $16_1 >>> 0) {
                              continue label$52;
                            }
                            break label$52;
                          }
                          label$56: {
                            if (!$20_1) {
                              break label$56;
                            }
                            $353($0_1 | 0, 4339 | 0, 1 | 0);
                          }
                          if ($18_1 >>> 0 >= $3_1 >>> 0) {
                            break label$50;
                          }
                          if (($14_1 | 0) < (1 | 0)) {
                            break label$50;
                          }
                          label$57: while (1) {
                            label$58: {
                              i64toi32_i32$5 = $18_1;
                              i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
                              i64toi32_i32$4 = 0;
                              $11_1 = $358(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $17_1 | 0) | 0;
                              if ($11_1 >>> 0 <= (($6_1 + 16) | 0) >>> 0) {
                                break label$58;
                              }
                              label$59: while (1) {
                                $11_1 = ($11_1 + -1) | 0;
                                HEAP8[$11_1 >> 0] = 48;
                                if ($11_1 >>> 0 > (($6_1 + 16) | 0) >>> 0) {
                                  continue label$59;
                                }
                                break label$59;
                              }
                            }
                            $353($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
                            $11_1 = ($14_1 + -9) | 0;
                            $18_1 = ($18_1 + 4) | 0;
                            if ($18_1 >>> 0 >= $3_1 >>> 0) {
                              break label$49;
                            }
                            $23_1 = ($14_1 | 0) > (9 | 0);
                            $14_1 = $11_1;
                            if ($23_1) {
                              continue label$57;
                            }
                            break label$49;
                          }
                        }
                        label$60: {
                          if (($14_1 | 0) < (0 | 0)) {
                            break label$60;
                          }
                          $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : ($18_1 + 4) | 0;
                          $16_1 = ($6_1 + 16) | 0 | 8 | 0;
                          $3_1 = ($6_1 + 16) | 0 | 9 | 0;
                          $17_1 = $18_1;
                          label$61: while (1) {
                            label$62: {
                              i64toi32_i32$5 = $17_1;
                              i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
                              i64toi32_i32$0 = 0;
                              $11_1 = $358(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
                              if (($11_1 | 0) != ($3_1 | 0)) {
                                break label$62;
                              }
                              HEAP8[(($6_1 + 24) | 0) >> 0] = 48;
                              $11_1 = $16_1;
                            }
                            label$63: {
                              label$64: {
                                if (($17_1 | 0) == ($18_1 | 0)) {
                                  break label$64;
                                }
                                if ($11_1 >>> 0 <= (($6_1 + 16) | 0) >>> 0) {
                                  break label$63;
                                }
                                label$65: while (1) {
                                  $11_1 = ($11_1 + -1) | 0;
                                  HEAP8[$11_1 >> 0] = 48;
                                  if ($11_1 >>> 0 > (($6_1 + 16) | 0) >>> 0) {
                                    continue label$65;
                                  }
                                  break label$63;
                                }
                              }
                              $353($0_1 | 0, $11_1 | 0, 1 | 0);
                              $11_1 = ($11_1 + 1) | 0;
                              label$66: {
                                if ($22_1) {
                                  break label$66;
                                }
                                if (($14_1 | 0) < (1 | 0)) {
                                  break label$63;
                                }
                              }
                              $353($0_1 | 0, 4339 | 0, 1 | 0);
                            }
                            $23_1 = ($3_1 - $11_1) | 0;
                            $353($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
                            $14_1 = ($14_1 - $23_1) | 0;
                            $17_1 = ($17_1 + 4) | 0;
                            if ($17_1 >>> 0 >= $21_1 >>> 0) {
                              break label$60;
                            }
                            if (($14_1 | 0) > (-1 | 0)) {
                              continue label$61;
                            }
                            break label$61;
                          }
                        }
                        $359($0_1 | 0, 48 | 0, ($14_1 + 18) | 0 | 0, 18 | 0, 0 | 0);
                        $353($0_1 | 0, $19_1 | 0, ($12_1 - $19_1) | 0 | 0);
                        break label$48;
                      }
                      $11_1 = $14_1;
                    }
                    $359($0_1 | 0, 48 | 0, ($11_1 + 9) | 0 | 0, 9 | 0, 0 | 0);
                  }
                  $359($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, ($4_1 ^ 8192) | 0 | 0);
                  break label$4;
                }
                $17_1 = ($5_1 & 32) | 0;
                $14_1 = $17_1 ? ($9_1 + 9) | 0 : $9_1;
                label$67: {
                  if ($3_1 >>> 0 > 11 >>> 0) {
                    break label$67;
                  }
                  $11_1 = (12 - $3_1) | 0;
                  if (!$11_1) {
                    break label$67;
                  }
                  $26_1 = 8.0;
                  label$68: while (1) {
                    $26_1 = $26_1 * 16.0;
                    $11_1 = ($11_1 + -1) | 0;
                    if ($11_1) {
                      continue label$68;
                    }
                    break label$68;
                  }
                  label$69: {
                    if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
                      break label$69;
                    }
                    $1_1 = -($26_1 + (-$1_1 - $26_1));
                    break label$67;
                  }
                  $1_1 = $1_1 + $26_1 - $26_1;
                }
                label$70: {
                  $11_1 = HEAP32[(($6_1 + 44) | 0) >> 2] | 0;
                  $818_1 = $11_1;
                  $11_1 = ($11_1 >> 31) | 0;
                  i64toi32_i32$0 = 0;
                  $11_1 = $358(((($818_1 + $11_1) | 0) ^ $11_1) | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
                  if (($11_1 | 0) != ($12_1 | 0)) {
                    break label$70;
                  }
                  HEAP8[(($6_1 + 15) | 0) >> 0] = 48;
                  $11_1 = ($6_1 + 15) | 0;
                }
                $22_1 = $8_1 | 2 | 0;
                $18_1 = HEAP32[(($6_1 + 44) | 0) >> 2] | 0;
                $21_1 = ($11_1 + -2) | 0;
                HEAP8[$21_1 >> 0] = ($5_1 + 15) | 0;
                HEAP8[(($11_1 + -1) | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
                $23_1 = ($4_1 & 8) | 0;
                $18_1 = ($6_1 + 16) | 0;
                label$71: while (1) {
                  $11_1 = $18_1;
                  label$72: {
                    label$73: {
                      if (!(Math_abs($1_1) < 2147483648.0)) {
                        break label$73;
                      }
                      $18_1 = ~~$1_1;
                      break label$72;
                    }
                    $18_1 = -2147483648;
                  }
                  HEAP8[$11_1 >> 0] = HEAPU8[(($18_1 + 4288) | 0) >> 0] | 0 | $17_1 | 0;
                  $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
                  label$74: {
                    $18_1 = ($11_1 + 1) | 0;
                    if ((($18_1 - (($6_1 + 16) | 0)) | 0 | 0) != (1 | 0)) {
                      break label$74;
                    }
                    label$75: {
                      if ($23_1) {
                        break label$75;
                      }
                      if (($3_1 | 0) > (0 | 0)) {
                        break label$75;
                      }
                      if ($1_1 == 0.0) {
                        break label$74;
                      }
                    }
                    HEAP8[(($11_1 + 1) | 0) >> 0] = 46;
                    $18_1 = ($11_1 + 2) | 0;
                  }
                  if ($1_1 != 0.0) {
                    continue label$71;
                  }
                  break label$71;
                }
                label$76: {
                  label$77: {
                    if (!$3_1) {
                      break label$77;
                    }
                    if ((((($18_1 - (($6_1 + 16) | 0)) | 0) + -2) | 0 | 0) >= ($3_1 | 0)) {
                      break label$77;
                    }
                    $11_1 = ((((($3_1 + $12_1) | 0) - $21_1) | 0) + 2) | 0;
                    break label$76;
                  }
                  $11_1 = ((((($12_1 - (($6_1 + 16) | 0)) | 0) - $21_1) | 0) + $18_1) | 0;
                }
                $10_1 = ($11_1 + $22_1) | 0;
                $359($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
                $353($0_1 | 0, $14_1 | 0, $22_1 | 0);
                $359($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, ($4_1 ^ 65536) | 0 | 0);
                $18_1 = ($18_1 - (($6_1 + 16) | 0)) | 0;
                $353($0_1 | 0, ($6_1 + 16) | 0 | 0, $18_1 | 0);
                $17_1 = ($12_1 - $21_1) | 0;
                $359($0_1 | 0, 48 | 0, ($11_1 - (($18_1 + $17_1) | 0)) | 0 | 0, 0 | 0, 0 | 0);
                $353($0_1 | 0, $21_1 | 0, $17_1 | 0);
                $359($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, ($4_1 ^ 8192) | 0 | 0);
              }
              global$0 = ($6_1 + 560) | 0;
              return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
            }

            function $362($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$2 = 0,
                $2_1 = 0,
                $12_1 = 0,
                $12$hi = 0,
                $14_1 = 0,
                $14$hi = 0;
              $2_1 = ((((HEAP32[$1_1 >> 2] | 0) + 15) | 0) & -16) | 0;
              HEAP32[$1_1 >> 2] = ($2_1 + 16) | 0;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
              $12_1 = i64toi32_i32$0;
              $12$hi = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] | 0;
              $14_1 = i64toi32_i32$1;
              $14$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $12$hi;
              i64toi32_i32$1 = $14$hi;
              HEAPF64[$0_1 >> 3] = +$328($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
            }

            function $363($0_1) {
              $0_1 = +$0_1;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              wasm2js_scratch_store_f64(+$0_1);
              i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
              i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
              return i64toi32_i32$1 | 0;
            }

            function $364($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 160) | 0;
              global$0 = $4_1;
              $1707(($4_1 + 8) | 0 | 0, 4344 | 0, 144 | 0) | 0;
              label$1: {
                label$2: {
                  label$3: {
                    if ((($1_1 + -1) | 0) >>> 0 < 2147483647 >>> 0) {
                      break label$3;
                    }
                    if ($1_1) {
                      break label$2;
                    }
                    $0_1 = ($4_1 + 159) | 0;
                    $1_1 = 1;
                  }
                  HEAP32[(($4_1 + 52) | 0) >> 2] = $0_1;
                  HEAP32[(($4_1 + 28) | 0) >> 2] = $0_1;
                  $5_1 = (-2 - $0_1) | 0;
                  $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
                  HEAP32[(($4_1 + 56) | 0) >> 2] = $1_1;
                  $0_1 = ($0_1 + $1_1) | 0;
                  HEAP32[(($4_1 + 36) | 0) >> 2] = $0_1;
                  HEAP32[(($4_1 + 24) | 0) >> 2] = $0_1;
                  $0_1 = $360(($4_1 + 8) | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $1_1 = HEAP32[(($4_1 + 28) | 0) >> 2] | 0;
                  HEAP8[(($1_1 - (($1_1 | 0) == (HEAP32[(($4_1 + 24) | 0) >> 2] | 0 | 0))) | 0) >> 0] = 0;
                  break label$1;
                }
                HEAP32[($305() | 0) >> 2] = 61;
                $0_1 = -1;
              }
              global$0 = ($4_1 + 160) | 0;
              return $0_1 | 0;
            }

            function $365($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $6_1 = 0;
              $3_1 = HEAP32[(($0_1 + 20) | 0) >> 2] | 0;
              $6_1 = $3_1;
              $3_1 = ((HEAP32[(($0_1 + 16) | 0) >> 2] | 0) - $3_1) | 0;
              $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
              $1707($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
              HEAP32[(($0_1 + 20) | 0) >> 2] = ((HEAP32[(($0_1 + 20) | 0) >> 2] | 0) + $3_1) | 0;
              return $2_1 | 0;
            }

            function $366($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $2_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $2_1;
              $4_1 = -1;
              label$1: {
                $2_1 = $364(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                if (($2_1 | 0) < (0 | 0)) {
                  break label$1;
                }
                $5_1 = ($2_1 + 1) | 0;
                $2_1 = $1698($5_1 | 0) | 0;
                HEAP32[$0_1 >> 2] = $2_1;
                if (!$2_1) {
                  break label$1;
                }
                $4_1 = $364($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              }
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $367($0_1) {
              $0_1 = $0_1 | 0;
              return (
                (((($0_1 | 32 | 0) + -97) | 0) >>> 0 < 6 >>> 0) |
                (($301($0_1 | 0) | 0 | 0) != (0 | 0)) |
                0 |
                0
              );
            }

            function $368($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $367($0_1 | 0) | 0 | 0;
            }

            function $369($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $2_1;
              $2_1 = $337($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $2_1 | 0;
            }

            function $370($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
              $3_1 = $364($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $3_1 | 0;
            }

            function $371() {
              global$2 = 5266128;
              global$1 = (((23248 + 15) | 0) & -16) | 0;
            }

            function $372() {
              return (global$0 - global$1) | 0 | 0;
            }

            function $373() {
              return global$1 | 0;
            }

            function $374($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $375($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $376($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return 0 | 0;
            }

            function $377($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $378($0_1) {
              $0_1 = $0_1 | 0;
              return $374($0_1 | 0) | 0 | 0;
            }

            function $379($0_1) {
              $0_1 = $0_1 | 0;
              return $375($0_1 | 0) | 0 | 0;
            }

            function $380($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $378(17560 | 0) | 0;
              label$1: {
                label$2: while (1) {
                  if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
                    break label$1;
                  }
                  $381(17588 | 0, 17560 | 0) | 0;
                  continue label$2;
                }
              }
              label$3: {
                if (HEAP32[$0_1 >> 2] | 0) {
                  break label$3;
                }
                $382($0_1 | 0);
                $379(17560 | 0) | 0;
                FUNCTION_TABLE[$2_1 | 0]($1_1);
                $378(17560 | 0) | 0;
                $383($0_1 | 0);
                $379(17560 | 0) | 0;
                $384(17588 | 0) | 0;
                return;
              }
              $379(17560 | 0) | 0;
            }

            function $381($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $376($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $382($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 1;
            }

            function $383($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = -1;
            }

            function $384($0_1) {
              $0_1 = $0_1 | 0;
              return $377($0_1 | 0) | 0 | 0;
            }

            function $385($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($346($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1699($0_1 | 0);
              }
            }

            function $386($0_1) {
              $0_1 = $0_1 | 0;
              var $2_1 = 0,
                $1_1 = 0;
              $1_1 = $0_1;
              label$1: while (1) {
                $2_1 = $1_1;
                $1_1 = ($2_1 + 4) | 0;
                if (HEAP32[$2_1 >> 2] | 0) {
                  continue label$1;
                }
                break label$1;
              }
              return ((($2_1 - $0_1) | 0) >> 2) | 0 | 0;
            }

            function $387($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $3_1 = $0_1;
                label$2: while (1) {
                  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                  $3_1 = ($3_1 + 4) | 0;
                  $1_1 = ($1_1 + 4) | 0;
                  $2_1 = ($2_1 + -1) | 0;
                  if ($2_1) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return $0_1 | 0;
            }

            function $388() {
              return 4488 | 0;
            }

            function $389() {
              return 5264 | 0;
            }

            function $390() {
              return 6816 | 0;
            }

            function $391($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $6_1 = 0,
                $5_1 = 0,
                $8_1 = 0,
                $7_1 = 0,
                $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (!$0_1) {
                          break label$5;
                        }
                        if ($2_1 >>> 0 >= 4 >>> 0) {
                          break label$4;
                        }
                        $5_1 = $2_1;
                        break label$3;
                      }
                      $6_1 = 0;
                      label$6: {
                        $0_1 = HEAP32[$1_1 >> 2] | 0;
                        $5_1 = HEAP32[$0_1 >> 2] | 0;
                        if ($5_1) {
                          break label$6;
                        }
                        $7_1 = 0;
                        break label$1;
                      }
                      label$7: while (1) {
                        $8_1 = 1;
                        label$8: {
                          if ($5_1 >>> 0 < 128 >>> 0) {
                            break label$8;
                          }
                          $7_1 = -1;
                          $8_1 = $348(($4_1 + 12) | 0 | 0, $5_1 | 0, 0 | 0) | 0;
                          if (($8_1 | 0) == (-1 | 0)) {
                            break label$1;
                          }
                        }
                        $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                        $0_1 = ($0_1 + 4) | 0;
                        $6_1 = ($8_1 + $6_1) | 0;
                        $7_1 = $6_1;
                        if ($5_1) {
                          continue label$7;
                        }
                        break label$1;
                      }
                    }
                    $8_1 = HEAP32[$1_1 >> 2] | 0;
                    $5_1 = $2_1;
                    label$9: while (1) {
                      label$10: {
                        label$11: {
                          $6_1 = HEAP32[$8_1 >> 2] | 0;
                          if ((($6_1 + -1) | 0) >>> 0 < 127 >>> 0) {
                            break label$11;
                          }
                          label$12: {
                            if ($6_1) {
                              break label$12;
                            }
                            HEAP8[$0_1 >> 0] = 0;
                            HEAP32[$1_1 >> 2] = 0;
                            break label$2;
                          }
                          $7_1 = -1;
                          $6_1 = $348($0_1 | 0, $6_1 | 0, 0 | 0) | 0;
                          if (($6_1 | 0) == (-1 | 0)) {
                            break label$1;
                          }
                          $5_1 = ($5_1 - $6_1) | 0;
                          $0_1 = ($0_1 + $6_1) | 0;
                          break label$10;
                        }
                        HEAP8[$0_1 >> 0] = $6_1;
                        $5_1 = ($5_1 + -1) | 0;
                        $0_1 = ($0_1 + 1) | 0;
                        $8_1 = HEAP32[$1_1 >> 2] | 0;
                      }
                      $8_1 = ($8_1 + 4) | 0;
                      HEAP32[$1_1 >> 2] = $8_1;
                      if ($5_1 >>> 0 > 3 >>> 0) {
                        continue label$9;
                      }
                      break label$9;
                    }
                  }
                  label$13: {
                    if (!$5_1) {
                      break label$13;
                    }
                    $8_1 = HEAP32[$1_1 >> 2] | 0;
                    label$14: while (1) {
                      label$15: {
                        label$16: {
                          $6_1 = HEAP32[$8_1 >> 2] | 0;
                          if ((($6_1 + -1) | 0) >>> 0 < 127 >>> 0) {
                            break label$16;
                          }
                          label$17: {
                            if ($6_1) {
                              break label$17;
                            }
                            HEAP8[$0_1 >> 0] = 0;
                            HEAP32[$1_1 >> 2] = 0;
                            break label$2;
                          }
                          $7_1 = -1;
                          $6_1 = $348(($4_1 + 12) | 0 | 0, $6_1 | 0, 0 | 0) | 0;
                          if (($6_1 | 0) == (-1 | 0)) {
                            break label$1;
                          }
                          if ($5_1 >>> 0 < $6_1 >>> 0) {
                            break label$2;
                          }
                          $348($0_1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0) | 0;
                          $5_1 = ($5_1 - $6_1) | 0;
                          $0_1 = ($0_1 + $6_1) | 0;
                          break label$15;
                        }
                        HEAP8[$0_1 >> 0] = $6_1;
                        $5_1 = ($5_1 + -1) | 0;
                        $0_1 = ($0_1 + 1) | 0;
                        $8_1 = HEAP32[$1_1 >> 2] | 0;
                      }
                      $8_1 = ($8_1 + 4) | 0;
                      HEAP32[$1_1 >> 2] = $8_1;
                      if ($5_1) {
                        continue label$14;
                      }
                      break label$14;
                    }
                  }
                  $7_1 = $2_1;
                  break label$1;
                }
                $7_1 = ($2_1 - $5_1) | 0;
              }
              global$0 = ($4_1 + 16) | 0;
              return $7_1 | 0;
            }

            function $392($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $9_1 = 0,
                $5_1 = 0,
                $8_1 = 0,
                $6_1 = 0,
                $7_1 = 0,
                $10_1 = 0;
              $5_1 = (global$0 - 272) | 0;
              global$0 = $5_1;
              $6_1 = HEAP32[$1_1 >> 2] | 0;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $6_1;
              $7_1 = $0_1 ? $0_1 : ($5_1 + 16) | 0;
              $8_1 = 0;
              label$1: {
                label$2: {
                  label$3: {
                    $3_1 = $0_1 ? $3_1 : 256;
                    if (!$3_1) {
                      break label$3;
                    }
                    if (!$6_1) {
                      break label$3;
                    }
                    label$4: {
                      label$5: {
                        $9_1 = $3_1 >>> 0 <= $2_1 >>> 0;
                        if (!$9_1) {
                          break label$5;
                        }
                        $8_1 = 0;
                        break label$4;
                      }
                      $8_1 = 0;
                      if ($2_1 >>> 0 > 32 >>> 0) {
                        break label$4;
                      }
                      $8_1 = 0;
                      break label$2;
                    }
                    label$6: while (1) {
                      $9_1 = ($9_1 & 1) | 0 ? $3_1 : $2_1;
                      $2_1 = ($2_1 - $9_1) | 0;
                      label$7: {
                        $9_1 = $391($7_1 | 0, ($5_1 + 12) | 0 | 0, $9_1 | 0, 0 | 0) | 0;
                        if (($9_1 | 0) != (-1 | 0)) {
                          break label$7;
                        }
                        $3_1 = 0;
                        $6_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
                        $8_1 = -1;
                        break label$3;
                      }
                      $10_1 = ($7_1 | 0) == (($5_1 + 16) | 0 | 0);
                      $7_1 = $10_1 ? $7_1 : ($7_1 + $9_1) | 0;
                      $8_1 = ($9_1 + $8_1) | 0;
                      $6_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
                      $3_1 = ($3_1 - ($10_1 ? 0 : $9_1)) | 0;
                      if (!$3_1) {
                        break label$3;
                      }
                      if (!$6_1) {
                        break label$3;
                      }
                      $9_1 = $2_1 >>> 0 >= $3_1 >>> 0;
                      if ($9_1) {
                        continue label$6;
                      }
                      if ($2_1 >>> 0 < 33 >>> 0) {
                        break label$2;
                      }
                      continue label$6;
                    }
                  }
                  if (!$6_1) {
                    break label$1;
                  }
                }
                if (!$3_1) {
                  break label$1;
                }
                if (!$2_1) {
                  break label$1;
                }
                $10_1 = $8_1;
                label$8: while (1) {
                  label$9: {
                    label$10: {
                      label$11: {
                        $9_1 = $348($7_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
                        if ((($9_1 + 1) | 0) >>> 0 > 1 >>> 0) {
                          break label$11;
                        }
                        $8_1 = -1;
                        if ($9_1) {
                          break label$1;
                        }
                        HEAP32[(($5_1 + 12) | 0) >> 2] = 0;
                        break label$10;
                      }
                      $6_1 = ((HEAP32[(($5_1 + 12) | 0) >> 2] | 0) + 4) | 0;
                      HEAP32[(($5_1 + 12) | 0) >> 2] = $6_1;
                      $10_1 = ($9_1 + $10_1) | 0;
                      $3_1 = ($3_1 - $9_1) | 0;
                      if ($3_1) {
                        break label$9;
                      }
                    }
                    $8_1 = $10_1;
                    break label$1;
                  }
                  $7_1 = ($7_1 + $9_1) | 0;
                  $8_1 = $10_1;
                  $2_1 = ($2_1 + -1) | 0;
                  if ($2_1) {
                    continue label$8;
                  }
                  break label$8;
                }
              }
              label$12: {
                if (!$0_1) {
                  break label$12;
                }
                HEAP32[$1_1 >> 2] = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
              }
              global$0 = ($5_1 + 272) | 0;
              return $8_1 | 0;
            }

            function $393($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $6_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $8_1 = 0;
              $4_1 = HEAP32[$1_1 >> 2] | 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          label$7: {
                            label$8: {
                              label$9: {
                                label$10: {
                                  label$11: {
                                    label$12: {
                                      if (!$3_1) {
                                        break label$12;
                                      }
                                      $5_1 = HEAP32[$3_1 >> 2] | 0;
                                      if (!$5_1) {
                                        break label$12;
                                      }
                                      label$13: {
                                        if ($0_1) {
                                          break label$13;
                                        }
                                        $3_1 = $2_1;
                                        break label$10;
                                      }
                                      HEAP32[$3_1 >> 2] = 0;
                                      $3_1 = $2_1;
                                      break label$11;
                                    }
                                    label$14: {
                                      label$15: {
                                        if (HEAP32[(HEAP32[((($329() | 0) + 172) | 0) >> 2] | 0) >> 2] | 0) {
                                          break label$15;
                                        }
                                        if (!$0_1) {
                                          break label$14;
                                        }
                                        if (!$2_1) {
                                          break label$1;
                                        }
                                        $5_1 = $2_1;
                                        label$16: {
                                          label$17: while (1) {
                                            $3_1 = HEAP8[$4_1 >> 0] | 0;
                                            if (!$3_1) {
                                              break label$16;
                                            }
                                            HEAP32[$0_1 >> 2] = ($3_1 & 57343) | 0;
                                            $0_1 = ($0_1 + 4) | 0;
                                            $4_1 = ($4_1 + 1) | 0;
                                            $5_1 = ($5_1 + -1) | 0;
                                            if ($5_1) {
                                              continue label$17;
                                            }
                                            break label$1;
                                          }
                                        }
                                        HEAP32[$0_1 >> 2] = 0;
                                        HEAP32[$1_1 >> 2] = 0;
                                        return ($2_1 - $5_1) | 0 | 0;
                                      }
                                      $3_1 = $2_1;
                                      if (!$0_1) {
                                        break label$9;
                                      }
                                      $3_1 = $2_1;
                                      $6_1 = 0;
                                      break label$7;
                                    }
                                    return $1715($4_1 | 0) | 0 | 0;
                                  }
                                  $6_1 = 1;
                                  break label$7;
                                }
                                $6_1 = 0;
                                break label$8;
                              }
                              $6_1 = 1;
                            }
                            label$18: while (1) {
                              label$19: {
                                switch ($6_1 | 0) {
                                  case 0:
                                    $6_1 = ((HEAPU8[$4_1 >> 0] | 0) >>> 3) | 0;
                                    if (
                                      (($6_1 + -16) | 0 | (((($5_1 >> 26) | 0) + $6_1) | 0) | 0) >>> 0 >
                                      7 >>> 0
                                    ) {
                                      break label$6;
                                    }
                                    $6_1 = ($4_1 + 1) | 0;
                                    label$21: {
                                      label$22: {
                                        if (($5_1 & 33554432) | 0) {
                                          break label$22;
                                        }
                                        $4_1 = $6_1;
                                        break label$21;
                                      }
                                      if ((((HEAPU8[$6_1 >> 0] | 0) & 192) | 0 | 0) != (128 | 0)) {
                                        break label$6;
                                      }
                                      $6_1 = ($4_1 + 2) | 0;
                                      label$23: {
                                        if (($5_1 & 524288) | 0) {
                                          break label$23;
                                        }
                                        $4_1 = $6_1;
                                        break label$21;
                                      }
                                      if ((((HEAPU8[$6_1 >> 0] | 0) & 192) | 0 | 0) != (128 | 0)) {
                                        break label$6;
                                      }
                                      $4_1 = ($4_1 + 3) | 0;
                                    }
                                    $3_1 = ($3_1 + -1) | 0;
                                    $6_1 = 1;
                                    continue label$18;
                                  default:
                                    break label$19;
                                }
                              }
                              label$24: while (1) {
                                label$25: {
                                  $5_1 = HEAPU8[$4_1 >> 0] | 0;
                                  if ((($5_1 + -1) | 0) >>> 0 > 126 >>> 0) {
                                    break label$25;
                                  }
                                  if (($4_1 & 3) | 0) {
                                    break label$25;
                                  }
                                  $5_1 = HEAP32[$4_1 >> 2] | 0;
                                  if (((($5_1 + -16843009) | 0 | $5_1 | 0) & -2139062144) | 0) {
                                    break label$25;
                                  }
                                  label$26: while (1) {
                                    $3_1 = ($3_1 + -4) | 0;
                                    $5_1 = HEAP32[(($4_1 + 4) | 0) >> 2] | 0;
                                    $6_1 = ($4_1 + 4) | 0;
                                    $4_1 = $6_1;
                                    if (!((($5_1 | (($5_1 + -16843009) | 0) | 0) & -2139062144) | 0)) {
                                      continue label$26;
                                    }
                                    break label$26;
                                  }
                                  $4_1 = $6_1;
                                }
                                label$27: {
                                  $6_1 = ($5_1 & 255) | 0;
                                  if ((($6_1 + -1) | 0) >>> 0 > 126 >>> 0) {
                                    break label$27;
                                  }
                                  $3_1 = ($3_1 + -1) | 0;
                                  $4_1 = ($4_1 + 1) | 0;
                                  continue label$24;
                                }
                                break label$24;
                              }
                              $6_1 = ($6_1 + -194) | 0;
                              if ($6_1 >>> 0 > 50 >>> 0) {
                                break label$5;
                              }
                              $4_1 = ($4_1 + 1) | 0;
                              $5_1 = HEAP32[((3392 + (($6_1 << 2) | 0)) | 0) >> 2] | 0;
                              $6_1 = 0;
                              continue label$18;
                            }
                          }
                          label$28: while (1) {
                            label$29: {
                              switch ($6_1 | 0) {
                                case 0:
                                  if (!$3_1) {
                                    break label$1;
                                  }
                                  label$31: {
                                    label$32: while (1) {
                                      label$33: {
                                        label$34: {
                                          label$35: {
                                            $6_1 = HEAPU8[$4_1 >> 0] | 0;
                                            $7_1 = ($6_1 + -1) | 0;
                                            if ($7_1 >>> 0 <= 126 >>> 0) {
                                              break label$35;
                                            }
                                            $5_1 = $6_1;
                                            break label$34;
                                          }
                                          if ($3_1 >>> 0 < 5 >>> 0) {
                                            break label$33;
                                          }
                                          if (($4_1 & 3) | 0) {
                                            break label$33;
                                          }
                                          label$36: {
                                            label$37: while (1) {
                                              $5_1 = HEAP32[$4_1 >> 2] | 0;
                                              if (((($5_1 + -16843009) | 0 | $5_1 | 0) & -2139062144) | 0) {
                                                break label$36;
                                              }
                                              HEAP32[$0_1 >> 2] = ($5_1 & 255) | 0;
                                              HEAP32[(($0_1 + 4) | 0) >> 2] =
                                                HEAPU8[(($4_1 + 1) | 0) >> 0] | 0;
                                              HEAP32[(($0_1 + 8) | 0) >> 2] =
                                                HEAPU8[(($4_1 + 2) | 0) >> 0] | 0;
                                              HEAP32[(($0_1 + 12) | 0) >> 2] =
                                                HEAPU8[(($4_1 + 3) | 0) >> 0] | 0;
                                              $0_1 = ($0_1 + 16) | 0;
                                              $4_1 = ($4_1 + 4) | 0;
                                              $3_1 = ($3_1 + -4) | 0;
                                              if ($3_1 >>> 0 > 4 >>> 0) {
                                                continue label$37;
                                              }
                                              break label$37;
                                            }
                                            $5_1 = HEAPU8[$4_1 >> 0] | 0;
                                          }
                                          $6_1 = ($5_1 & 255) | 0;
                                          $7_1 = ($6_1 + -1) | 0;
                                        }
                                        if ($7_1 >>> 0 > 126 >>> 0) {
                                          break label$31;
                                        }
                                      }
                                      HEAP32[$0_1 >> 2] = $6_1;
                                      $0_1 = ($0_1 + 4) | 0;
                                      $4_1 = ($4_1 + 1) | 0;
                                      $3_1 = ($3_1 + -1) | 0;
                                      if (!$3_1) {
                                        break label$1;
                                      }
                                      continue label$32;
                                    }
                                  }
                                  $6_1 = ($6_1 + -194) | 0;
                                  if ($6_1 >>> 0 > 50 >>> 0) {
                                    break label$5;
                                  }
                                  $4_1 = ($4_1 + 1) | 0;
                                  $5_1 = HEAP32[((3392 + (($6_1 << 2) | 0)) | 0) >> 2] | 0;
                                  $6_1 = 1;
                                  continue label$28;
                                default:
                                  break label$29;
                              }
                            }
                            $7_1 = HEAPU8[$4_1 >> 0] | 0;
                            $6_1 = ($7_1 >>> 3) | 0;
                            if ((($6_1 + -16) | 0 | (($6_1 + (($5_1 >> 26) | 0)) | 0) | 0) >>> 0 > 7 >>> 0) {
                              break label$6;
                            }
                            $8_1 = ($4_1 + 1) | 0;
                            label$38: {
                              label$39: {
                                label$40: {
                                  label$41: {
                                    $6_1 = ($7_1 + -128) | 0 | (($5_1 << 6) | 0) | 0;
                                    if (($6_1 | 0) <= (-1 | 0)) {
                                      break label$41;
                                    }
                                    $4_1 = $8_1;
                                    break label$40;
                                  }
                                  $7_1 = ((HEAPU8[$8_1 >> 0] | 0) + -128) | 0;
                                  if ($7_1 >>> 0 > 63 >>> 0) {
                                    break label$39;
                                  }
                                  $8_1 = ($4_1 + 2) | 0;
                                  label$42: {
                                    $6_1 = $7_1 | (($6_1 << 6) | 0) | 0;
                                    if (($6_1 | 0) <= (-1 | 0)) {
                                      break label$42;
                                    }
                                    $4_1 = $8_1;
                                    break label$40;
                                  }
                                  $7_1 = ((HEAPU8[$8_1 >> 0] | 0) + -128) | 0;
                                  if ($7_1 >>> 0 > 63 >>> 0) {
                                    break label$39;
                                  }
                                  $4_1 = ($4_1 + 3) | 0;
                                  $6_1 = $7_1 | (($6_1 << 6) | 0) | 0;
                                }
                                HEAP32[$0_1 >> 2] = $6_1;
                                $3_1 = ($3_1 + -1) | 0;
                                $0_1 = ($0_1 + 4) | 0;
                                break label$38;
                              }
                              HEAP32[($305() | 0) >> 2] = 25;
                              $4_1 = ($4_1 + -1) | 0;
                              break label$3;
                            }
                            $6_1 = 0;
                            continue label$28;
                          }
                        }
                        $4_1 = ($4_1 + -1) | 0;
                        if ($5_1) {
                          break label$4;
                        }
                        $5_1 = HEAPU8[$4_1 >> 0] | 0;
                      }
                      if (($5_1 & 255) | 0) {
                        break label$4;
                      }
                      label$43: {
                        if (!$0_1) {
                          break label$43;
                        }
                        HEAP32[$0_1 >> 2] = 0;
                        HEAP32[$1_1 >> 2] = 0;
                      }
                      return ($2_1 - $3_1) | 0 | 0;
                    }
                    HEAP32[($305() | 0) >> 2] = 25;
                    if (!$0_1) {
                      break label$2;
                    }
                  }
                  HEAP32[$1_1 >> 2] = $4_1;
                }
                return -1 | 0;
              }
              HEAP32[$1_1 >> 2] = $4_1;
              return $2_1 | 0;
            }

            function $394($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $9_1 = 0,
                $8_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $7_1 = 0,
                $10_1 = 0;
              $5_1 = (global$0 - 1040) | 0;
              global$0 = $5_1;
              $6_1 = HEAP32[$1_1 >> 2] | 0;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $6_1;
              $7_1 = $0_1 ? $0_1 : ($5_1 + 16) | 0;
              $8_1 = 0;
              label$1: {
                label$2: {
                  label$3: {
                    $3_1 = $0_1 ? $3_1 : 256;
                    if (!$3_1) {
                      break label$3;
                    }
                    if (!$6_1) {
                      break label$3;
                    }
                    $9_1 = ($2_1 >>> 2) | 0;
                    $10_1 = $9_1 >>> 0 >= $3_1 >>> 0;
                    $8_1 = 0;
                    label$4: {
                      if ($2_1 >>> 0 > 131 >>> 0) {
                        break label$4;
                      }
                      if ($9_1 >>> 0 < $3_1 >>> 0) {
                        break label$2;
                      }
                    }
                    label$5: while (1) {
                      $6_1 = ($10_1 & 1) | 0 ? $3_1 : $9_1;
                      $2_1 = ($2_1 - $6_1) | 0;
                      label$6: {
                        $9_1 = $393($7_1 | 0, ($5_1 + 12) | 0 | 0, $6_1 | 0, $4_1 | 0) | 0;
                        if (($9_1 | 0) != (-1 | 0)) {
                          break label$6;
                        }
                        $3_1 = 0;
                        $6_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
                        $8_1 = -1;
                        break label$3;
                      }
                      $10_1 = ($7_1 | 0) == (($5_1 + 16) | 0 | 0);
                      $7_1 = $10_1 ? $7_1 : ($7_1 + (($9_1 << 2) | 0)) | 0;
                      $8_1 = ($9_1 + $8_1) | 0;
                      $6_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
                      $3_1 = ($3_1 - ($10_1 ? 0 : $9_1)) | 0;
                      if (!$3_1) {
                        break label$3;
                      }
                      if (!$6_1) {
                        break label$3;
                      }
                      $9_1 = ($2_1 >>> 2) | 0;
                      $10_1 = $9_1 >>> 0 >= $3_1 >>> 0;
                      if ($2_1 >>> 0 > 131 >>> 0) {
                        continue label$5;
                      }
                      if ($9_1 >>> 0 < $3_1 >>> 0) {
                        break label$2;
                      }
                      continue label$5;
                    }
                  }
                  if (!$6_1) {
                    break label$1;
                  }
                }
                if (!$3_1) {
                  break label$1;
                }
                if (!$2_1) {
                  break label$1;
                }
                $9_1 = $8_1;
                label$7: while (1) {
                  label$8: {
                    label$9: {
                      label$10: {
                        $8_1 = $330($7_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
                        if ((($8_1 + 2) | 0) >>> 0 > 2 >>> 0) {
                          break label$10;
                        }
                        label$11: {
                          switch (($8_1 + 1) | 0 | 0) {
                            case 1:
                              HEAP32[(($5_1 + 12) | 0) >> 2] = 0;
                              break label$9;
                            case 0:
                              break label$1;
                            default:
                              break label$11;
                          }
                        }
                        HEAP32[$4_1 >> 2] = 0;
                        break label$9;
                      }
                      $6_1 = ((HEAP32[(($5_1 + 12) | 0) >> 2] | 0) + $8_1) | 0;
                      HEAP32[(($5_1 + 12) | 0) >> 2] = $6_1;
                      $9_1 = ($9_1 + 1) | 0;
                      $3_1 = ($3_1 + -1) | 0;
                      if ($3_1) {
                        break label$8;
                      }
                    }
                    $8_1 = $9_1;
                    break label$1;
                  }
                  $7_1 = ($7_1 + 4) | 0;
                  $2_1 = ($2_1 - $8_1) | 0;
                  $8_1 = $9_1;
                  if ($2_1) {
                    continue label$7;
                  }
                  break label$7;
                }
              }
              label$13: {
                if (!$0_1) {
                  break label$13;
                }
                HEAP32[$1_1 >> 2] = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
              }
              global$0 = ($5_1 + 1040) | 0;
              return $8_1 | 0;
            }

            function $395($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  if ($1_1) {
                    break label$2;
                  }
                  $1_1 = 0;
                  break label$1;
                }
                label$3: {
                  if (!$2_1) {
                    break label$3;
                  }
                  $0_1 = $0_1 ? $0_1 : ($3_1 + 12) | 0;
                  label$4: {
                    $4_1 = HEAPU8[$1_1 >> 0] | 0;
                    $5_1 = ((($4_1 << 24) | 0) >> 24) | 0;
                    if (($5_1 | 0) < (0 | 0)) {
                      break label$4;
                    }
                    HEAP32[$0_1 >> 2] = $4_1;
                    $1_1 = ($5_1 | 0) != (0 | 0);
                    break label$1;
                  }
                  $4_1 = HEAP32[(HEAP32[((($329() | 0) + 172) | 0) >> 2] | 0) >> 2] | 0;
                  $5_1 = HEAP8[$1_1 >> 0] | 0;
                  label$5: {
                    if ($4_1) {
                      break label$5;
                    }
                    HEAP32[$0_1 >> 2] = ($5_1 & 57343) | 0;
                    $1_1 = 1;
                    break label$1;
                  }
                  $4_1 = ((($5_1 & 255) | 0) + -194) | 0;
                  if ($4_1 >>> 0 > 50 >>> 0) {
                    break label$3;
                  }
                  $4_1 = HEAP32[((3392 + (($4_1 << 2) | 0)) | 0) >> 2] | 0;
                  label$6: {
                    if ($2_1 >>> 0 > 3 >>> 0) {
                      break label$6;
                    }
                    if ((($4_1 << ((Math_imul($2_1, 6) + -6) | 0)) | 0 | 0) < (0 | 0)) {
                      break label$3;
                    }
                  }
                  $5_1 = HEAPU8[(($1_1 + 1) | 0) >> 0] | 0;
                  $2_1 = ($5_1 >>> 3) | 0;
                  if ((($2_1 + -16) | 0 | (($2_1 + (($4_1 >> 26) | 0)) | 0) | 0) >>> 0 > 7 >>> 0) {
                    break label$3;
                  }
                  label$7: {
                    $2_1 = ($5_1 + -128) | 0 | (($4_1 << 6) | 0) | 0;
                    if (($2_1 | 0) < (0 | 0)) {
                      break label$7;
                    }
                    HEAP32[$0_1 >> 2] = $2_1;
                    $1_1 = 2;
                    break label$1;
                  }
                  $4_1 = ((HEAPU8[(($1_1 + 2) | 0) >> 0] | 0) + -128) | 0;
                  if ($4_1 >>> 0 > 63 >>> 0) {
                    break label$3;
                  }
                  label$8: {
                    $2_1 = $4_1 | (($2_1 << 6) | 0) | 0;
                    if (($2_1 | 0) < (0 | 0)) {
                      break label$8;
                    }
                    HEAP32[$0_1 >> 2] = $2_1;
                    $1_1 = 3;
                    break label$1;
                  }
                  $1_1 = ((HEAPU8[(($1_1 + 3) | 0) >> 0] | 0) + -128) | 0;
                  if ($1_1 >>> 0 > 63 >>> 0) {
                    break label$3;
                  }
                  HEAP32[$0_1 >> 2] = $1_1 | (($2_1 << 6) | 0) | 0;
                  $1_1 = 4;
                  break label$1;
                }
                HEAP32[($305() | 0) >> 2] = 25;
                $1_1 = -1;
              }
              global$0 = ($3_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $396() {
              return (HEAP32[(HEAP32[((($329() | 0) + 172) | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
            }

            function $397($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $330(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 17636) | 0) | 0 | 0;
            }

            function $398($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $399($0_1) {
              $0_1 = $0_1 | 0;
              abort();
            }

            function $400($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = $329() | 0;
              $2_1 = HEAP32[(($1_1 + 172) | 0) >> 2] | 0;
              label$1: {
                if (!$0_1) {
                  break label$1;
                }
                HEAP32[(($1_1 + 172) | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? (17476 + 40) | 0 : $0_1;
              }
              return (($2_1 | 0) == ((17476 + 40) | 0 | 0) ? -1 : $2_1) | 0;
            }

            function $401($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              i64toi32_i32$0 = $402($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $402($0_1, $1_1, $2_1, $3_1, $3$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                $6_1 = 0,
                $10$hi = 0,
                $9$hi = 0,
                $9_1 = 0,
                $10_1 = 0,
                $7_1 = 0,
                $5_1 = 0,
                $4_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $12$hi = 0,
                $11$hi = 0,
                $12_1 = 0,
                $98_1 = 0,
                $98$hi = 0,
                $102_1 = 0,
                $102$hi = 0,
                $105$hi = 0,
                $143$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  if (($2_1 | 0) > (36 | 0)) {
                    break label$2;
                  }
                  $5_1 = 0;
                  label$3: {
                    $6_1 = HEAPU8[$0_1 >> 0] | 0;
                    if (!$6_1) {
                      break label$3;
                    }
                    label$4: {
                      label$5: while (1) {
                        if (!($292(((($6_1 << 24) | 0) >> 24) | 0 | 0) | 0)) {
                          break label$4;
                        }
                        $6_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                        $7_1 = ($0_1 + 1) | 0;
                        $0_1 = $7_1;
                        if ($6_1) {
                          continue label$5;
                        }
                        break label$5;
                      }
                      $0_1 = $7_1;
                      break label$3;
                    }
                    label$6: {
                      $6_1 = HEAPU8[$0_1 >> 0] | 0;
                      switch (($6_1 + -43) | 0 | 0) {
                        case 0:
                        case 2:
                          break label$6;
                        default:
                          break label$3;
                      }
                    }
                    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
                    $0_1 = ($0_1 + 1) | 0;
                  }
                  label$7: {
                    label$8: {
                      if (($2_1 & -17) | 0) {
                        break label$8;
                      }
                      if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (48 | 0)) {
                        break label$8;
                      }
                      label$9: {
                        if ((((HEAPU8[(($0_1 + 1) | 0) >> 0] | 0) & 223) | 0 | 0) != (88 | 0)) {
                          break label$9;
                        }
                        $0_1 = ($0_1 + 2) | 0;
                        $8_1 = 16;
                        break label$7;
                      }
                      $0_1 = ($0_1 + 1) | 0;
                      $8_1 = $2_1 ? $2_1 : 8;
                      break label$7;
                    }
                    $8_1 = $2_1 ? $2_1 : 10;
                  }
                  i64toi32_i32$1 = $8_1;
                  i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                  $9_1 = i64toi32_i32$1;
                  $9$hi = i64toi32_i32$0;
                  $2_1 = 0;
                  i64toi32_i32$0 = 0;
                  $10_1 = 0;
                  $10$hi = i64toi32_i32$0;
                  label$10: {
                    label$11: while (1) {
                      $6_1 = -48;
                      label$12: {
                        $7_1 = HEAP8[$0_1 >> 0] | 0;
                        if ((((($7_1 + -48) | 0) & 255) | 0) >>> 0 < 10 >>> 0) {
                          break label$12;
                        }
                        $6_1 = -87;
                        if ((((($7_1 + -97) | 0) & 255) | 0) >>> 0 < 26 >>> 0) {
                          break label$12;
                        }
                        $6_1 = -55;
                        if ((((($7_1 + -65) | 0) & 255) | 0) >>> 0 > 25 >>> 0) {
                          break label$10;
                        }
                      }
                      $6_1 = ($6_1 + $7_1) | 0;
                      if (($6_1 | 0) >= ($8_1 | 0)) {
                        break label$10;
                      }
                      i64toi32_i32$0 = $9$hi;
                      i64toi32_i32$0 = $10$hi;
                      i64toi32_i32$0 = $9$hi;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$2 = $10$hi;
                      i64toi32_i32$3 = 0;
                      $319(
                        $4_1 | 0,
                        $9_1 | 0,
                        i64toi32_i32$0 | 0,
                        0 | 0,
                        i64toi32_i32$1 | 0,
                        $10_1 | 0,
                        i64toi32_i32$2 | 0,
                        0 | 0,
                        i64toi32_i32$3 | 0
                      );
                      label$13: {
                        label$14: {
                          i64toi32_i32$1 = $4_1;
                          i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] | 0;
                          i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] | 0;
                          i64toi32_i32$1 = i64toi32_i32$3;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 0;
                          if (
                            (((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) &
                              ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0))) |
                            0
                          ) {
                            break label$14;
                          }
                          $2_1 = 1;
                          break label$13;
                        }
                        i64toi32_i32$1 = $10$hi;
                        i64toi32_i32$1 = $9$hi;
                        i64toi32_i32$1 = $10$hi;
                        i64toi32_i32$2 = $9$hi;
                        i64toi32_i32$2 =
                          __wasm_i64_mul($10_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$2 | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                        $11_1 = i64toi32_i32$2;
                        $11$hi = i64toi32_i32$1;
                        i64toi32_i32$2 = $6_1;
                        i64toi32_i32$1 = (i64toi32_i32$2 >> 31) | 0;
                        $12_1 = i64toi32_i32$2;
                        $12$hi = i64toi32_i32$1;
                        i64toi32_i32$0 = i64toi32_i32$2;
                        i64toi32_i32$2 = -1;
                        i64toi32_i32$3 = -1;
                        i64toi32_i32$2 = (i64toi32_i32$1 ^ i64toi32_i32$2) | 0;
                        $98_1 = (i64toi32_i32$0 ^ i64toi32_i32$3) | 0;
                        $98$hi = i64toi32_i32$2;
                        i64toi32_i32$2 = $11$hi;
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = $98$hi;
                        i64toi32_i32$3 = $98_1;
                        $6_1 =
                          (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) |
                          ((((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                            (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0)) |
                            0) |
                          0;
                        $2_1 = $6_1 ? 1 : $2_1;
                        i64toi32_i32$1 = $10$hi;
                        $102_1 = $10_1;
                        $102$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = i64toi32_i32$2;
                        i64toi32_i32$1 = $12$hi;
                        i64toi32_i32$1 = i64toi32_i32$2;
                        i64toi32_i32$3 = $11_1;
                        i64toi32_i32$2 = $12$hi;
                        i64toi32_i32$0 = $12_1;
                        i64toi32_i32$4 = (i64toi32_i32$3 + i64toi32_i32$0) | 0;
                        i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$2) | 0;
                        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                          i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                        }
                        $105$hi = i64toi32_i32$5;
                        i64toi32_i32$2 = $6_1;
                        i64toi32_i32$5 = $102$hi;
                        i64toi32_i32$3 = $105$hi;
                        i64toi32_i32$0 = i64toi32_i32$2 ? $102_1 : i64toi32_i32$4;
                        i64toi32_i32$1 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$3;
                        $10_1 = i64toi32_i32$0;
                        $10$hi = i64toi32_i32$1;
                      }
                      $0_1 = ($0_1 + 1) | 0;
                      continue label$11;
                    }
                  }
                  label$15: {
                    if (!$1_1) {
                      break label$15;
                    }
                    HEAP32[$1_1 >> 2] = $0_1;
                  }
                  label$16: {
                    label$17: {
                      label$18: {
                        if (!$2_1) {
                          break label$18;
                        }
                        HEAP32[($305() | 0) >> 2] = 68;
                        i64toi32_i32$1 = $3$hi;
                        i64toi32_i32$2 = $3_1;
                        i64toi32_i32$0 = 0;
                        i64toi32_i32$5 = 1;
                        i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                        $9_1 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
                        $9$hi = i64toi32_i32$0;
                        $5_1 = !($9_1 | i64toi32_i32$0 | 0) ? $5_1 : 0;
                        i64toi32_i32$0 = i64toi32_i32$1;
                        i64toi32_i32$0 = i64toi32_i32$1;
                        $10_1 = i64toi32_i32$2;
                        $10$hi = i64toi32_i32$1;
                        break label$17;
                      }
                      i64toi32_i32$0 = $10$hi;
                      i64toi32_i32$0 = $3$hi;
                      i64toi32_i32$0 = $10$hi;
                      i64toi32_i32$1 = $10_1;
                      i64toi32_i32$2 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      if (
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) |
                        ((((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0)) &
                          (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0)) |
                          0) |
                        0
                      ) {
                        break label$16;
                      }
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$5 = $3_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = 1;
                      i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                      $9_1 = (i64toi32_i32$5 & i64toi32_i32$2) | 0;
                      $9$hi = i64toi32_i32$0;
                    }
                    label$19: {
                      i64toi32_i32$0 = $9$hi;
                      i64toi32_i32$1 = $9_1;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$2 = 0;
                      if (
                        ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                        ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0)) |
                        0
                      ) {
                        break label$19;
                      }
                      if ($5_1) {
                        break label$19;
                      }
                      HEAP32[($305() | 0) >> 2] = 68;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$2 = $3_1;
                      i64toi32_i32$0 = -1;
                      i64toi32_i32$5 = -1;
                      i64toi32_i32$3 = (i64toi32_i32$2 + i64toi32_i32$5) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                        i64toi32_i32$4 = (i64toi32_i32$4 + 1) | 0;
                      }
                      $3_1 = i64toi32_i32$3;
                      $3$hi = i64toi32_i32$4;
                      break label$1;
                    }
                    i64toi32_i32$4 = $10$hi;
                    i64toi32_i32$4 = $3$hi;
                    i64toi32_i32$4 = $10$hi;
                    i64toi32_i32$1 = $10_1;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$5 = $3_1;
                    if (
                      (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) |
                      ((((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0)) &
                        (i64toi32_i32$1 >>> 0 <= i64toi32_i32$5 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$16;
                    }
                    HEAP32[($305() | 0) >> 2] = 68;
                    break label$1;
                  }
                  i64toi32_i32$1 = $10$hi;
                  i64toi32_i32$4 = $5_1;
                  i64toi32_i32$1 = (i64toi32_i32$4 >> 31) | 0;
                  $9_1 = i64toi32_i32$4;
                  $9$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $10$hi;
                  i64toi32_i32$5 = $10_1;
                  i64toi32_i32$4 = $9$hi;
                  i64toi32_i32$2 = $9_1;
                  i64toi32_i32$4 = (i64toi32_i32$1 ^ i64toi32_i32$4) | 0;
                  $143$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = $9$hi;
                  i64toi32_i32$4 = $143$hi;
                  i64toi32_i32$1 = (i64toi32_i32$5 ^ i64toi32_i32$2) | 0;
                  i64toi32_i32$5 = $9$hi;
                  i64toi32_i32$0 = (i64toi32_i32$1 - i64toi32_i32$2) | 0;
                  i64toi32_i32$3 = ((i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$5) | 0;
                  i64toi32_i32$3 = (i64toi32_i32$4 - i64toi32_i32$3) | 0;
                  $3_1 = i64toi32_i32$0;
                  $3$hi = i64toi32_i32$3;
                  break label$1;
                }
                HEAP32[($305() | 0) >> 2] = 28;
                i64toi32_i32$3 = 0;
                $3_1 = 0;
                $3$hi = i64toi32_i32$3;
              }
              global$0 = ($4_1 + 16) | 0;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$1 = $3_1;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
              return i64toi32_i32$1 | 0;
            }

            function $403($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -2147483648;
              i64toi32_i32$0 = $402($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $404($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = $401($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $405($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = $403($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $406($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $11_1 = 0,
                $11$hi = 0,
                $13_1 = 0,
                $13$hi = 0,
                $3_1 = Math_fround(0);
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $407($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
              i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($2_1 + 4) | 0) >> 2] | 0;
              $11_1 = i64toi32_i32$0;
              $11$hi = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
              $13_1 = i64toi32_i32$1;
              $13$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $11$hi;
              i64toi32_i32$1 = $13$hi;
              $3_1 = Math_fround($327($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
              global$0 = ($2_1 + 16) | 0;
              return Math_fround($3_1);
            }

            function $407($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$5 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $5_1 = 0,
                $5$hi = 0,
                $6_1 = 0,
                $6$hi = 0,
                $32_1 = 0,
                $33_1 = 0,
                $34_1 = 0,
                $36_1 = 0,
                $36$hi = 0,
                $42_1 = 0,
                $42$hi = 0;
              $4_1 = (global$0 - 160) | 0;
              global$0 = $4_1;
              $1708(($4_1 + 16) | 0 | 0, 0 | 0, 144 | 0) | 0;
              HEAP32[(($4_1 + 92) | 0) >> 2] = -1;
              HEAP32[(($4_1 + 60) | 0) >> 2] = $1_1;
              HEAP32[(($4_1 + 24) | 0) >> 2] = -1;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $1_1;
              i64toi32_i32$0 = 0;
              $299(($4_1 + 16) | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
              $322($4_1 | 0, ($4_1 + 16) | 0 | 0, $3_1 | 0, 1 | 0);
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$0 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $5_1 = i64toi32_i32$0;
              $5$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($4_1 + 4) | 0) >> 2] | 0;
              $6_1 = i64toi32_i32$1;
              $6$hi = i64toi32_i32$0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $32_1 = $2_1;
                $33_1 = $1_1;
                $34_1 = $1_1;
                i64toi32_i32$2 = $4_1;
                i64toi32_i32$0 = HEAP32[(($4_1 + 136) | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(($4_1 + 140) | 0) >> 2] | 0;
                $36_1 = i64toi32_i32$0;
                $36$hi = i64toi32_i32$1;
                i64toi32_i32$0 =
                  ((HEAP32[(($4_1 + 20) | 0) >> 2] | 0) - (HEAP32[(($4_1 + 24) | 0) >> 2] | 0)) | 0;
                i64toi32_i32$1 = (i64toi32_i32$0 >> 31) | 0;
                $42_1 = i64toi32_i32$0;
                $42$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $36$hi;
                i64toi32_i32$2 = $36_1;
                i64toi32_i32$0 = $42$hi;
                i64toi32_i32$3 = $42_1;
                i64toi32_i32$4 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                i64toi32_i32$5 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                }
                HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0)
                  ? $33_1
                  : ($34_1 + i64toi32_i32$4) | 0;
              }
              i64toi32_i32$5 = $6$hi;
              i64toi32_i32$2 = $0_1;
              HEAP32[i64toi32_i32$2 >> 2] = $6_1;
              HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] = i64toi32_i32$5;
              i64toi32_i32$5 = $5$hi;
              HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] = $5_1;
              HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] = i64toi32_i32$5;
              global$0 = ($4_1 + 160) | 0;
            }

            function $408($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $11_1 = 0,
                $11$hi = 0,
                $13_1 = 0,
                $13$hi = 0,
                $3_1 = 0.0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $407($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
              i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($2_1 + 4) | 0) >> 2] | 0;
              $11_1 = i64toi32_i32$0;
              $11$hi = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
              $13_1 = i64toi32_i32$1;
              $13$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $11$hi;
              i64toi32_i32$1 = $13$hi;
              $3_1 = +$328($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
              global$0 = ($2_1 + 16) | 0;
              return +$3_1;
            }

            function $409($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $12_1 = 0,
                $15_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $407($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
              i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
              $12_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $0_1;
              HEAP32[i64toi32_i32$0 >> 2] = $12_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $15_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $0_1;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $15_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($3_1 + 16) | 0;
            }

            function $410($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return Math_fround(Math_fround($406($0_1 | 0, $1_1 | 0)));
            }

            function $411($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return +(+$408($0_1 | 0, $1_1 | 0));
            }

            function $412($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $13_1 = 0,
                $16_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              $409($4_1 | 0, $1_1 | 0, $2_1 | 0);
              i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($4_1 + 4) | 0) >> 2] | 0;
              $13_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $0_1;
              HEAP32[i64toi32_i32$0 >> 2] = $13_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
              $16_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $0_1;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $16_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($4_1 + 16) | 0;
            }

            function $413($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $414($0_1) {
              $0_1 = $0_1 | 0;
              $398($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $415($0_1) {
              $0_1 = $0_1 | 0;
              $1572($413($0_1 | 0) | 0 | 0);
            }

            function $416($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              label$1: {
                label$2: {
                  label$3: while (1) {
                    if (($3_1 | 0) == ($4_1 | 0)) {
                      break label$2;
                    }
                    $5_1 = -1;
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$1;
                    }
                    $6_1 = HEAP8[$1_1 >> 0] | 0;
                    $7_1 = HEAP8[$3_1 >> 0] | 0;
                    if (($6_1 | 0) < ($7_1 | 0)) {
                      break label$1;
                    }
                    label$4: {
                      if (($7_1 | 0) >= ($6_1 | 0)) {
                        break label$4;
                      }
                      return 1 | 0;
                    }
                    $3_1 = ($3_1 + 1) | 0;
                    $1_1 = ($1_1 + 1) | 0;
                    continue label$3;
                  }
                }
                $5_1 = ($1_1 | 0) != ($2_1 | 0);
              }
              return $5_1 | 0;
            }

            function $417($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $418($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
            }

            function $418($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $97($0_1 | 0, ($3_1 + 8) | 0 | 0, $3_1 | 0) | 0;
              $419($0_1 | 0, $1_1 | 0, $2_1 | 0);
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $419($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                $4_1 = $1333($1_1 | 0, $2_1 | 0) | 0;
                if ($4_1 >>> 0 > ($1265($0_1 | 0) | 0) >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($4_1 >>> 0 > 10 >>> 0) {
                      break label$3;
                    }
                    $774($0_1 | 0, $4_1 | 0);
                    $5_1 = $773($0_1 | 0) | 0;
                    break label$2;
                  }
                  $5_1 = $1269($4_1 | 0) | 0;
                  $6_1 = ($5_1 + 1) | 0;
                  $5_1 = $1271($1211($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
                  $1273($0_1 | 0, $5_1 | 0);
                  $1274($0_1 | 0, $6_1 | 0);
                  $772($0_1 | 0, $4_1 | 0);
                }
                label$4: {
                  label$5: while (1) {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    $771($5_1 | 0, $1_1 | 0);
                    $5_1 = ($5_1 + 1) | 0;
                    $1_1 = ($1_1 + 1) | 0;
                    continue label$5;
                  }
                }
                HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                $771($5_1 | 0, ($3_1 + 15) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $420($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = 0;
              label$1: while (1) {
                label$2: {
                  if (($1_1 | 0) != ($2_1 | 0)) {
                    break label$2;
                  }
                  return $3_1 | 0;
                }
                $3_1 = ((($3_1 << 4) | 0) + (HEAP8[$1_1 >> 0] | 0)) | 0;
                $4_1 = ($3_1 & -268435456) | 0;
                $3_1 = ((($4_1 >>> 24) | 0 | $4_1 | 0) ^ $3_1) | 0;
                $1_1 = ($1_1 + 1) | 0;
                continue label$1;
              }
            }

            function $421($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $422($0_1) {
              $0_1 = $0_1 | 0;
              $1572($421($0_1 | 0) | 0 | 0);
            }

            function $423($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              label$1: {
                label$2: {
                  label$3: while (1) {
                    if (($3_1 | 0) == ($4_1 | 0)) {
                      break label$2;
                    }
                    $5_1 = -1;
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$1;
                    }
                    $6_1 = HEAP32[$1_1 >> 2] | 0;
                    $7_1 = HEAP32[$3_1 >> 2] | 0;
                    if (($6_1 | 0) < ($7_1 | 0)) {
                      break label$1;
                    }
                    label$4: {
                      if (($7_1 | 0) >= ($6_1 | 0)) {
                        break label$4;
                      }
                      return 1 | 0;
                    }
                    $3_1 = ($3_1 + 4) | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    continue label$3;
                  }
                }
                $5_1 = ($1_1 | 0) != ($2_1 | 0);
              }
              return $5_1 | 0;
            }

            function $424($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $425($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
            }

            function $425($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $426($0_1 | 0, ($3_1 + 8) | 0 | 0, $3_1 | 0) | 0;
              $427($0_1 | 0, $1_1 | 0, $2_1 | 0);
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $426($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $100($1_1 | 0) | 0;
              $1336($0_1 | 0) | 0;
              $100($2_1 | 0) | 0;
              $1337($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $427($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                $4_1 = $1338($1_1 | 0, $2_1 | 0) | 0;
                if ($4_1 >>> 0 > ($1339($0_1 | 0) | 0) >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($4_1 >>> 0 > 1 >>> 0) {
                      break label$3;
                    }
                    $836($0_1 | 0, $4_1 | 0);
                    $5_1 = $835($0_1 | 0) | 0;
                    break label$2;
                  }
                  $5_1 = $1340($4_1 | 0) | 0;
                  $6_1 = ($5_1 + 1) | 0;
                  $5_1 = $1341($1223($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
                  $1342($0_1 | 0, $5_1 | 0);
                  $1343($0_1 | 0, $6_1 | 0);
                  $834($0_1 | 0, $4_1 | 0);
                }
                label$4: {
                  label$5: while (1) {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    $833($5_1 | 0, $1_1 | 0);
                    $5_1 = ($5_1 + 4) | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    continue label$5;
                  }
                }
                HEAP32[(($3_1 + 12) | 0) >> 2] = 0;
                $833($5_1 | 0, ($3_1 + 12) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $428($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = 0;
              label$1: while (1) {
                label$2: {
                  if (($1_1 | 0) != ($2_1 | 0)) {
                    break label$2;
                  }
                  return $3_1 | 0;
                }
                $3_1 = ((HEAP32[$1_1 >> 2] | 0) + (($3_1 << 4) | 0)) | 0;
                $4_1 = ($3_1 & -268435456) | 0;
                $3_1 = ((($4_1 >>> 24) | 0 | $4_1 | 0) ^ $3_1) | 0;
                $1_1 = ($1_1 + 4) | 0;
                continue label$1;
              }
            }

            function $429($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 32) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  if ((($83($3_1 | 0) | 0) & 1) | 0) {
                    break label$2;
                  }
                  HEAP32[$6_1 >> 2] = -1;
                  $1_1 =
                    FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0](
                      $0_1,
                      $1_1,
                      $2_1,
                      $3_1,
                      $4_1,
                      $6_1
                    ) | 0;
                  HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
                  label$3: {
                    switch (HEAP32[$6_1 >> 2] | 0 | 0) {
                      case 0:
                        HEAP8[$5_1 >> 0] = 0;
                        break label$1;
                      case 1:
                        HEAP8[$5_1 >> 0] = 1;
                        break label$1;
                      default:
                        break label$3;
                    }
                  }
                  HEAP8[$5_1 >> 0] = 1;
                  HEAP32[$4_1 >> 2] = 4;
                  break label$1;
                }
                $1487($6_1 | 0, $3_1 | 0);
                $1_1 = $112($6_1 | 0) | 0;
                $430($6_1 | 0) | 0;
                $1487($6_1 | 0, $3_1 | 0);
                $3_1 = $431($6_1 | 0) | 0;
                $430($6_1 | 0) | 0;
                $432($6_1 | 0, $3_1 | 0);
                $433($6_1 | 12 | 0 | 0, $3_1 | 0);
                $3_1 = ($6_1 + 24) | 0;
                HEAP8[$5_1 >> 0] =
                  ($434(($6_1 + 24) | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) |
                    0 |
                    0) ==
                  ($6_1 | 0);
                $1_1 = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
                label$6: while (1) {
                  $3_1 = $1540(($3_1 + -12) | 0 | 0) | 0;
                  if (($3_1 | 0) != ($6_1 | 0)) {
                    continue label$6;
                  }
                  break label$6;
                }
              }
              global$0 = ($6_1 + 32) | 0;
              return $1_1 | 0;
            }

            function $430($0_1) {
              $0_1 = $0_1 | 0;
              $1018(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $431($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17884 | 0) | 0 | 0;
            }

            function $432($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $433($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $434($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $12_1 = 0,
                $7_1 = 0,
                $11_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $15_1 = 0,
                $14_1 = 0,
                $16_1 = 0,
                $17_1 = 0,
                $10_1 = 0;
              $7_1 = (global$0 - 128) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 120) | 0) >> 2] = $1_1;
              $8_1 = $436($2_1 | 0, $3_1 | 0) | 0;
              HEAP32[(($7_1 + 16) | 0) >> 2] = 31;
              $9_1 = 0;
              $10_1 = $437(($7_1 + 8) | 0 | 0, 0 | 0, ($7_1 + 16) | 0 | 0) | 0;
              $11_1 = ($7_1 + 16) | 0;
              label$1: {
                label$2: {
                  if ($8_1 >>> 0 < 101 >>> 0) {
                    break label$2;
                  }
                  $11_1 = $1698($8_1 | 0) | 0;
                  if (!$11_1) {
                    break label$1;
                  }
                  $438($10_1 | 0, $11_1 | 0);
                }
                $12_1 = $11_1;
                $1_1 = $2_1;
                label$3: while (1) {
                  label$4: {
                    if (($1_1 | 0) != ($3_1 | 0)) {
                      break label$4;
                    }
                    $13_1 = 0;
                    label$5: {
                      label$6: while (1) {
                        $1_1 = $439($0_1 | 0, ($7_1 + 120) | 0 | 0) | 0;
                        label$7: {
                          label$8: {
                            if (!$8_1) {
                              break label$8;
                            }
                            if ($1_1) {
                              break label$7;
                            }
                          }
                          label$9: {
                            if (!($440($0_1 | 0, ($7_1 + 120) | 0 | 0) | 0)) {
                              break label$9;
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
                          }
                          break label$5;
                        }
                        $14_1 = $441($0_1 | 0) | 0;
                        label$10: {
                          if ($6_1) {
                            break label$10;
                          }
                          $14_1 = $442($4_1 | 0, $14_1 | 0) | 0;
                        }
                        $15_1 = ($13_1 + 1) | 0;
                        $16_1 = 0;
                        $12_1 = $11_1;
                        $1_1 = $2_1;
                        label$11: while (1) {
                          label$12: {
                            if (($1_1 | 0) != ($3_1 | 0)) {
                              break label$12;
                            }
                            $13_1 = $15_1;
                            if (!(($16_1 & 1) | 0)) {
                              continue label$6;
                            }
                            $443($0_1 | 0) | 0;
                            $13_1 = $15_1;
                            $12_1 = $11_1;
                            $1_1 = $2_1;
                            if ((($9_1 + $8_1) | 0) >>> 0 < 2 >>> 0) {
                              continue label$6;
                            }
                            label$13: while (1) {
                              label$14: {
                                if (($1_1 | 0) != ($3_1 | 0)) {
                                  break label$14;
                                }
                                $13_1 = $15_1;
                                continue label$6;
                              }
                              label$15: {
                                if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
                                  break label$15;
                                }
                                if (($444($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
                                  break label$15;
                                }
                                HEAP8[$12_1 >> 0] = 0;
                                $9_1 = ($9_1 + -1) | 0;
                              }
                              $12_1 = ($12_1 + 1) | 0;
                              $1_1 = ($1_1 + 12) | 0;
                              continue label$13;
                            }
                          }
                          label$16: {
                            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
                              break label$16;
                            }
                            $17_1 = HEAPU8[($445($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
                            label$17: {
                              if ($6_1) {
                                break label$17;
                              }
                              $17_1 = $442($4_1 | 0, ((($17_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                            }
                            label$18: {
                              label$19: {
                                if ((($14_1 & 255) | 0 | 0) != (($17_1 & 255) | 0 | 0)) {
                                  break label$19;
                                }
                                $16_1 = 1;
                                if (($444($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
                                  break label$16;
                                }
                                HEAP8[$12_1 >> 0] = 2;
                                $16_1 = 1;
                                $9_1 = ($9_1 + 1) | 0;
                                break label$18;
                              }
                              HEAP8[$12_1 >> 0] = 0;
                            }
                            $8_1 = ($8_1 + -1) | 0;
                          }
                          $12_1 = ($12_1 + 1) | 0;
                          $1_1 = ($1_1 + 12) | 0;
                          continue label$11;
                        }
                      }
                    }
                    label$20: {
                      label$21: {
                        label$22: while (1) {
                          if (($2_1 | 0) == ($3_1 | 0)) {
                            break label$21;
                          }
                          label$23: {
                            if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
                              break label$23;
                            }
                            $11_1 = ($11_1 + 1) | 0;
                            $2_1 = ($2_1 + 12) | 0;
                            continue label$22;
                          }
                          break label$22;
                        }
                        $3_1 = $2_1;
                        break label$20;
                      }
                      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                    }
                    $446($10_1 | 0) | 0;
                    global$0 = ($7_1 + 128) | 0;
                    return $3_1 | 0;
                  }
                  label$24: {
                    label$25: {
                      if ($447($1_1 | 0) | 0) {
                        break label$25;
                      }
                      HEAP8[$12_1 >> 0] = 1;
                      break label$24;
                    }
                    HEAP8[$12_1 >> 0] = 2;
                    $9_1 = ($9_1 + 1) | 0;
                    $8_1 = ($8_1 + -1) | 0;
                  }
                  $12_1 = ($12_1 + 1) | 0;
                  $1_1 = ($1_1 + 12) | 0;
                  continue label$3;
                }
              }
              $1570();
              abort();
            }

            function $435($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1013(HEAP32[$0_1 >> 2] | 0 | 0, $976($1_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $436($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1379($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $437($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $1_1;
              $1360($0_1 | 0, ($3_1 + 12) | 0 | 0, $586($2_1 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $438($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[($1361($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($1361($0_1 | 0) | 0) >> 2] = $1_1;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[($1362($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
              }
            }

            function $439($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($494($0_1 | 0, $1_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $440($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $494($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $441($0_1) {
              $0_1 = $0_1 | 0;
              return (((($498(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24) | 0) >> 24) | 0 | 0;
            }

            function $442($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0
              );
            }

            function $443($0_1) {
              $0_1 = $0_1 | 0;
              $499(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $444($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($104($0_1 | 0) | 0)) {
                  break label$1;
                }
                return $495($0_1 | 0) | 0 | 0;
              }
              return $496($0_1 | 0) | 0 | 0;
            }

            function $445($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($91($0_1 | 0) | 0) + $1_1) | 0 | 0;
            }

            function $446($0_1) {
              $0_1 = $0_1 | 0;
              $438($0_1 | 0, 0 | 0);
              return $0_1 | 0;
            }

            function $447($0_1) {
              $0_1 = $0_1 | 0;
              return !($444($0_1 | 0) | 0) | 0;
            }

            function $448($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $449($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $449($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $451($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $452(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 255) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP8[(($6_1 + 255) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP32[$5_1 >> 2] =
                $458($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $0_1 | 0;
            }

            function $450($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                label$2: {
                  $0_1 = (($83($0_1 | 0) | 0) & 74) | 0;
                  if (!$0_1) {
                    break label$2;
                  }
                  label$3: {
                    if (($0_1 | 0) != (64 | 0)) {
                      break label$3;
                    }
                    return 8 | 0;
                  }
                  if (($0_1 | 0) != (8 | 0)) {
                    break label$1;
                  }
                  return 16 | 0;
                }
                return 0 | 0;
              }
              return 10 | 0;
            }

            function $451($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $550($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $452($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $1487(($3_1 + 8) | 0 | 0, $1_1 | 0);
              $1_1 = $431(($3_1 + 8) | 0 | 0) | 0;
              HEAP8[$2_1 >> 0] = $547($1_1 | 0) | 0;
              $548($0_1 | 0, $1_1 | 0);
              $430(($3_1 + 8) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
            }

            function $453($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $97($0_1 | 0, ($1_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $491($0_1 | 0);
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $454($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 10;
              label$1: {
                if (!($104($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1_1 = (($492($0_1 | 0) | 0) + -1) | 0;
              }
              return $1_1 | 0;
            }

            function $455($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1544($0_1 | 0, $1_1 | 0, 0 | 0);
            }

            function $456($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($493($0_1 | 0) | 0) + $1_1) | 0 | 0;
            }

            function $457($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0;
              $10_1 = (global$0 - 16) | 0;
              global$0 = $10_1;
              HEAP8[(($10_1 + 15) | 0) >> 0] = $0_1;
              label$1: {
                label$2: {
                  label$3: {
                    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                      break label$3;
                    }
                    $11_1 = 43;
                    label$4: {
                      $12_1 = ($0_1 & 255) | 0;
                      if ((HEAPU8[(($9_1 + 24) | 0) >> 0] | 0 | 0) == ($12_1 | 0)) {
                        break label$4;
                      }
                      $11_1 = 45;
                      if ((HEAPU8[(($9_1 + 25) | 0) >> 0] | 0 | 0) != ($12_1 | 0)) {
                        break label$3;
                      }
                    }
                    HEAP32[$3_1 >> 2] = ($2_1 + 1) | 0;
                    HEAP8[$2_1 >> 0] = $11_1;
                    break label$2;
                  }
                  label$5: {
                    if (!($444($6_1 | 0) | 0)) {
                      break label$5;
                    }
                    if (($0_1 | 0) != ($5_1 | 0)) {
                      break label$5;
                    }
                    $0_1 = 0;
                    $9_1 = HEAP32[$8_1 >> 2] | 0;
                    if ((($9_1 - $7_1) | 0 | 0) > (159 | 0)) {
                      break label$1;
                    }
                    $0_1 = HEAP32[$4_1 >> 2] | 0;
                    HEAP32[$8_1 >> 2] = ($9_1 + 4) | 0;
                    HEAP32[$9_1 >> 2] = $0_1;
                    break label$2;
                  }
                  $0_1 = -1;
                  $9_1 = (($497($9_1 | 0, ($9_1 + 26) | 0 | 0, ($10_1 + 15) | 0 | 0) | 0) - $9_1) | 0;
                  if (($9_1 | 0) > (23 | 0)) {
                    break label$1;
                  }
                  label$6: {
                    label$7: {
                      switch (($1_1 + -8) | 0 | 0) {
                        case 0:
                        case 2:
                          if (($9_1 | 0) < ($1_1 | 0)) {
                            break label$6;
                          }
                          break label$1;
                        case 1:
                          break label$6;
                        default:
                          break label$7;
                      }
                    }
                    if (($1_1 | 0) != (16 | 0)) {
                      break label$6;
                    }
                    if (($9_1 | 0) < (22 | 0)) {
                      break label$6;
                    }
                    $6_1 = HEAP32[$3_1 >> 2] | 0;
                    if (($6_1 | 0) == ($2_1 | 0)) {
                      break label$1;
                    }
                    if ((($6_1 - $2_1) | 0 | 0) > (2 | 0)) {
                      break label$1;
                    }
                    $0_1 = -1;
                    if ((HEAPU8[(($6_1 + -1) | 0) >> 0] | 0 | 0) != (48 | 0)) {
                      break label$1;
                    }
                    $0_1 = 0;
                    HEAP32[$4_1 >> 2] = 0;
                    HEAP32[$3_1 >> 2] = ($6_1 + 1) | 0;
                    HEAP8[$6_1 >> 0] = HEAPU8[(($9_1 + 8432) | 0) >> 0] | 0;
                    break label$1;
                  }
                  $0_1 = HEAP32[$3_1 >> 2] | 0;
                  HEAP32[$3_1 >> 2] = ($0_1 + 1) | 0;
                  HEAP8[$0_1 >> 0] = HEAPU8[(($9_1 + 8432) | 0) >> 0] | 0;
                  HEAP32[$4_1 >> 2] = ((HEAP32[$4_1 >> 2] | 0) + 1) | 0;
                  $0_1 = 0;
                  break label$1;
                }
                $0_1 = 0;
                HEAP32[$4_1 >> 2] = 0;
              }
              global$0 = ($10_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $458($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                $6$hi = 0,
                i64toi32_i32$3 = 0,
                $4_1 = 0,
                $6_1 = 0,
                $16_1 = 0,
                $17_1 = 0,
                $18_1 = 0,
                $19_1 = 0,
                $20_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $23_1 = 0,
                $24_1 = 0,
                $5_1 = 0,
                $42_1 = 0,
                $42$hi = 0,
                $46_1 = 0,
                $46$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (($0_1 | 0) == ($1_1 | 0)) {
                          break label$5;
                        }
                        $5_1 = HEAP32[($305() | 0) >> 2] | 0;
                        HEAP32[($305() | 0) >> 2] = 0;
                        i64toi32_i32$0 = $405($0_1 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0, $489() | 0 | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                        $6_1 = i64toi32_i32$0;
                        $6$hi = i64toi32_i32$1;
                        label$6: {
                          label$7: {
                            $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                            if (!$0_1) {
                              break label$7;
                            }
                            if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                              break label$6;
                            }
                            if (($0_1 | 0) == (68 | 0)) {
                              break label$2;
                            }
                            break label$3;
                          }
                          HEAP32[($305() | 0) >> 2] = $5_1;
                          if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                            break label$3;
                          }
                        }
                        HEAP32[$2_1 >> 2] = 4;
                        break label$4;
                      }
                      HEAP32[$2_1 >> 2] = 4;
                    }
                    $0_1 = 0;
                    break label$1;
                  }
                  i64toi32_i32$1 = $6$hi;
                  i64toi32_i32$0 = $214() | 0;
                  i64toi32_i32$1 = (i64toi32_i32$0 >> 31) | 0;
                  $42_1 = i64toi32_i32$0;
                  $42$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $6$hi;
                  i64toi32_i32$2 = $6_1;
                  i64toi32_i32$0 = $42$hi;
                  i64toi32_i32$3 = $42_1;
                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                    $16_1 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                        $17_1 = 0;
                      } else {
                        $17_1 = 1;
                      }
                      $18_1 = $17_1;
                    } else {
                      $18_1 = 0;
                    }
                    $16_1 = $18_1;
                  }
                  if ($16_1) {
                    break label$2;
                  }
                  i64toi32_i32$2 = $6$hi;
                  i64toi32_i32$1 = $215() | 0;
                  i64toi32_i32$2 = (i64toi32_i32$1 >> 31) | 0;
                  $46_1 = i64toi32_i32$1;
                  $46$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $6$hi;
                  i64toi32_i32$3 = $6_1;
                  i64toi32_i32$1 = $46$hi;
                  i64toi32_i32$0 = $46_1;
                  if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
                    $19_1 = 1;
                  } else {
                    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
                      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
                        $20_1 = 0;
                      } else {
                        $20_1 = 1;
                      }
                      $21_1 = $20_1;
                    } else {
                      $21_1 = 0;
                    }
                    $19_1 = $21_1;
                  }
                  if ($19_1) {
                    break label$2;
                  }
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$3 = $6$hi;
                  $0_1 = $6_1;
                  break label$1;
                }
                HEAP32[$2_1 >> 2] = 4;
                label$8: {
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$0 = $6_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 1;
                  if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
                    $22_1 = 1;
                  } else {
                    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
                      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
                        $23_1 = 0;
                      } else {
                        $23_1 = 1;
                      }
                      $24_1 = $23_1;
                    } else {
                      $24_1 = 0;
                    }
                    $22_1 = $24_1;
                  }
                  if ($22_1) {
                    break label$8;
                  }
                  $0_1 = $215() | 0;
                  break label$1;
                }
                $0_1 = $214() | 0;
              }
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $459($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              label$1: {
                if (!($444($0_1 | 0) | 0)) {
                  break label$1;
                }
                if ((($2_1 - $1_1) | 0 | 0) < (5 | 0)) {
                  break label$1;
                }
                $809($1_1 | 0, $2_1 | 0);
                $4_1 = ($2_1 + -4) | 0;
                $2_1 = $91($0_1 | 0) | 0;
                $5_1 = ($2_1 + ($444($0_1 | 0) | 0)) | 0;
                label$2: {
                  label$3: while (1) {
                    $0_1 = HEAP8[$2_1 >> 0] | 0;
                    if ($1_1 >>> 0 >= $4_1 >>> 0) {
                      break label$2;
                    }
                    label$4: {
                      if (($0_1 | 0) < (1 | 0)) {
                        break label$4;
                      }
                      if (($0_1 | 0) >= ($195() | 0 | 0)) {
                        break label$4;
                      }
                      if ((HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP8[$2_1 >> 0] | 0 | 0)) {
                        break label$4;
                      }
                      HEAP32[$3_1 >> 2] = 4;
                      return;
                    }
                    $2_1 = (($5_1 - $2_1) | 0 | 0) > (1 | 0) ? ($2_1 + 1) | 0 : $2_1;
                    $1_1 = ($1_1 + 4) | 0;
                    continue label$3;
                  }
                }
                if (($0_1 | 0) < (1 | 0)) {
                  break label$1;
                }
                if (($0_1 | 0) >= ($195() | 0 | 0)) {
                  break label$1;
                }
                if ((((HEAP32[$4_1 >> 2] | 0) + -1) | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
                  break label$1;
                }
                HEAP32[$3_1 >> 2] = 4;
              }
            }

            function $460($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $461($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $461($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                i64toi32_i32$0 = 0,
                $7_1 = 0,
                i64toi32_i32$1 = 0,
                $114_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $451($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $452(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 255) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP8[(($6_1 + 255) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              i64toi32_i32$0 =
                $462($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $114_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $114_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $0_1 | 0;
            }

            function $462($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$3 = 0,
                $6$hi = 0,
                $6_1 = 0,
                i64toi32_i32$2 = 0,
                $4_1 = 0,
                $15_1 = 0,
                $16_1 = 0,
                $17_1 = 0,
                $18_1 = 0,
                $19_1 = 0,
                $20_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $23_1 = 0,
                $5_1 = 0,
                $41_1 = 0,
                $41$hi = 0,
                $43$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (($0_1 | 0) == ($1_1 | 0)) {
                          break label$5;
                        }
                        $5_1 = HEAP32[($305() | 0) >> 2] | 0;
                        HEAP32[($305() | 0) >> 2] = 0;
                        i64toi32_i32$0 = $405($0_1 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0, $489() | 0 | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                        $6_1 = i64toi32_i32$0;
                        $6$hi = i64toi32_i32$1;
                        label$6: {
                          label$7: {
                            $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                            if (!$0_1) {
                              break label$7;
                            }
                            if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                              break label$6;
                            }
                            if (($0_1 | 0) == (68 | 0)) {
                              break label$2;
                            }
                            break label$3;
                          }
                          HEAP32[($305() | 0) >> 2] = $5_1;
                          if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                            break label$3;
                          }
                        }
                        HEAP32[$2_1 >> 2] = 4;
                        break label$4;
                      }
                      HEAP32[$2_1 >> 2] = 4;
                    }
                    i64toi32_i32$1 = 0;
                    $6_1 = 0;
                    $6$hi = i64toi32_i32$1;
                    break label$1;
                  }
                  i64toi32_i32$1 = $6$hi;
                  i64toi32_i32$1 = $1380() | 0;
                  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                  $41_1 = i64toi32_i32$1;
                  $41$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $6$hi;
                  i64toi32_i32$2 = $6_1;
                  i64toi32_i32$1 = $41$hi;
                  i64toi32_i32$3 = $41_1;
                  if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
                    $15_1 = 1;
                  } else {
                    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
                      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                        $16_1 = 0;
                      } else {
                        $16_1 = 1;
                      }
                      $17_1 = $16_1;
                    } else {
                      $17_1 = 0;
                    }
                    $15_1 = $17_1;
                  }
                  if ($15_1) {
                    break label$2;
                  }
                  i64toi32_i32$2 = $1381() | 0;
                  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                  $43$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $6$hi;
                  i64toi32_i32$0 = $43$hi;
                  i64toi32_i32$3 = i64toi32_i32$2;
                  i64toi32_i32$2 = $6$hi;
                  i64toi32_i32$1 = $6_1;
                  if ((i64toi32_i32$0 | 0) > ($6$hi | 0)) {
                    $18_1 = 1;
                  } else {
                    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                        $19_1 = 0;
                      } else {
                        $19_1 = 1;
                      }
                      $20_1 = $19_1;
                    } else {
                      $20_1 = 0;
                    }
                    $18_1 = $20_1;
                  }
                  if ($18_1) {
                    break label$1;
                  }
                }
                HEAP32[$2_1 >> 2] = 4;
                label$8: {
                  i64toi32_i32$3 = $6$hi;
                  i64toi32_i32$1 = $6_1;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$2 = 1;
                  if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
                    $21_1 = 1;
                  } else {
                    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
                      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
                        $22_1 = 0;
                      } else {
                        $22_1 = 1;
                      }
                      $23_1 = $22_1;
                    } else {
                      $23_1 = 0;
                    }
                    $21_1 = $23_1;
                  }
                  if ($21_1) {
                    break label$8;
                  }
                  i64toi32_i32$1 = $1381() | 0;
                  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                  $6_1 = i64toi32_i32$1;
                  $6$hi = i64toi32_i32$3;
                  break label$1;
                }
                i64toi32_i32$3 = $1380() | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $6_1 = i64toi32_i32$3;
                $6$hi = i64toi32_i32$1;
              }
              global$0 = ($4_1 + 16) | 0;
              i64toi32_i32$1 = $6$hi;
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$3 | 0;
            }

            function $463($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $464($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $464($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $451($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $452(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 255) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP8[(($6_1 + 255) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP16[$5_1 >> 1] =
                $465($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $0_1 | 0;
            }

            function $465($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$1 = 0,
                $4_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $7$hi = 0,
                $6_1 = 0,
                $53$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          if (($0_1 | 0) == ($1_1 | 0)) {
                            break label$6;
                          }
                          label$7: {
                            $5_1 = HEAPU8[$0_1 >> 0] | 0;
                            if (($5_1 | 0) != (45 | 0)) {
                              break label$7;
                            }
                            $0_1 = ($0_1 + 1) | 0;
                            if (($0_1 | 0) != ($1_1 | 0)) {
                              break label$7;
                            }
                            HEAP32[$2_1 >> 2] = 4;
                            break label$5;
                          }
                          $6_1 = HEAP32[($305() | 0) >> 2] | 0;
                          HEAP32[($305() | 0) >> 2] = 0;
                          i64toi32_i32$0 = $404($0_1 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0, $489() | 0 | 0) | 0;
                          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                          $7_1 = i64toi32_i32$0;
                          $7$hi = i64toi32_i32$1;
                          label$8: {
                            label$9: {
                              $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                              if (!$0_1) {
                                break label$9;
                              }
                              if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                                break label$8;
                              }
                              if (($0_1 | 0) == (68 | 0)) {
                                break label$3;
                              }
                              break label$4;
                            }
                            HEAP32[($305() | 0) >> 2] = $6_1;
                            if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                              break label$4;
                            }
                          }
                          HEAP32[$2_1 >> 2] = 4;
                          break label$5;
                        }
                        HEAP32[$2_1 >> 2] = 4;
                      }
                      $0_1 = 0;
                      break label$1;
                    }
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$1 = 0;
                    $53$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$0 = $53$hi;
                    if (
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) & ($7_1 >>> 0 <= ($207() | 0) >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$2;
                    }
                  }
                  HEAP32[$2_1 >> 2] = 4;
                  $0_1 = $207() | 0;
                  break label$1;
                }
                $0_1 = $7_1;
                $0_1 = ($5_1 | 0) == (45 | 0) ? (0 - $0_1) | 0 : $0_1;
              }
              global$0 = ($4_1 + 16) | 0;
              return ($0_1 & 65535) | 0 | 0;
            }

            function $466($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $467($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $467($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $451($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $452(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 255) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP8[(($6_1 + 255) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP32[$5_1 >> 2] =
                $468($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $0_1 | 0;
            }

            function $468($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$1 = 0,
                $4_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $7$hi = 0,
                $6_1 = 0,
                $53$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          if (($0_1 | 0) == ($1_1 | 0)) {
                            break label$6;
                          }
                          label$7: {
                            $5_1 = HEAPU8[$0_1 >> 0] | 0;
                            if (($5_1 | 0) != (45 | 0)) {
                              break label$7;
                            }
                            $0_1 = ($0_1 + 1) | 0;
                            if (($0_1 | 0) != ($1_1 | 0)) {
                              break label$7;
                            }
                            HEAP32[$2_1 >> 2] = 4;
                            break label$5;
                          }
                          $6_1 = HEAP32[($305() | 0) >> 2] | 0;
                          HEAP32[($305() | 0) >> 2] = 0;
                          i64toi32_i32$0 = $404($0_1 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0, $489() | 0 | 0) | 0;
                          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                          $7_1 = i64toi32_i32$0;
                          $7$hi = i64toi32_i32$1;
                          label$8: {
                            label$9: {
                              $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                              if (!$0_1) {
                                break label$9;
                              }
                              if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                                break label$8;
                              }
                              if (($0_1 | 0) == (68 | 0)) {
                                break label$3;
                              }
                              break label$4;
                            }
                            HEAP32[($305() | 0) >> 2] = $6_1;
                            if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                              break label$4;
                            }
                          }
                          HEAP32[$2_1 >> 2] = 4;
                          break label$5;
                        }
                        HEAP32[$2_1 >> 2] = 4;
                      }
                      $0_1 = 0;
                      break label$1;
                    }
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$1 = 0;
                    $53$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$0 = $53$hi;
                    if (
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) & ($7_1 >>> 0 <= ($212() | 0) >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$2;
                    }
                  }
                  HEAP32[$2_1 >> 2] = 4;
                  $0_1 = $212() | 0;
                  break label$1;
                }
                $0_1 = $7_1;
                $0_1 = ($5_1 | 0) == (45 | 0) ? (0 - $0_1) | 0 : $0_1;
              }
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $469($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $470($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $470($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $451($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $452(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 255) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP8[(($6_1 + 255) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP32[$5_1 >> 2] =
                $471($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $0_1 | 0;
            }

            function $471($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$1 = 0,
                $4_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $7$hi = 0,
                $6_1 = 0,
                $53$hi = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          if (($0_1 | 0) == ($1_1 | 0)) {
                            break label$6;
                          }
                          label$7: {
                            $5_1 = HEAPU8[$0_1 >> 0] | 0;
                            if (($5_1 | 0) != (45 | 0)) {
                              break label$7;
                            }
                            $0_1 = ($0_1 + 1) | 0;
                            if (($0_1 | 0) != ($1_1 | 0)) {
                              break label$7;
                            }
                            HEAP32[$2_1 >> 2] = 4;
                            break label$5;
                          }
                          $6_1 = HEAP32[($305() | 0) >> 2] | 0;
                          HEAP32[($305() | 0) >> 2] = 0;
                          i64toi32_i32$0 = $404($0_1 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0, $489() | 0 | 0) | 0;
                          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                          $7_1 = i64toi32_i32$0;
                          $7$hi = i64toi32_i32$1;
                          label$8: {
                            label$9: {
                              $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                              if (!$0_1) {
                                break label$9;
                              }
                              if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                                break label$8;
                              }
                              if (($0_1 | 0) == (68 | 0)) {
                                break label$3;
                              }
                              break label$4;
                            }
                            HEAP32[($305() | 0) >> 2] = $6_1;
                            if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                              break label$4;
                            }
                          }
                          HEAP32[$2_1 >> 2] = 4;
                          break label$5;
                        }
                        HEAP32[$2_1 >> 2] = 4;
                      }
                      $0_1 = 0;
                      break label$1;
                    }
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$1 = 0;
                    $53$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$0 = $53$hi;
                    if (
                      (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) |
                      ((((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0)) & ($7_1 >>> 0 <= ($218() | 0) >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$2;
                    }
                  }
                  HEAP32[$2_1 >> 2] = 4;
                  $0_1 = $218() | 0;
                  break label$1;
                }
                $0_1 = $7_1;
                $0_1 = ($5_1 | 0) == (45 | 0) ? (0 - $0_1) | 0 : $0_1;
              }
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $472($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $473($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $473($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                i64toi32_i32$0 = 0,
                $7_1 = 0,
                i64toi32_i32$1 = 0,
                $114_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $451($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $452(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 255) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP8[(($6_1 + 255) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              i64toi32_i32$0 =
                $474($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $114_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $114_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $0_1 | 0;
            }

            function $474($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $7$hi = 0,
                $7_1 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$5 = 0,
                $4_1 = 0,
                i64toi32_i32$3 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $51$hi = 0,
                $57$hi = 0,
                $16_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          if (($0_1 | 0) == ($1_1 | 0)) {
                            break label$6;
                          }
                          label$7: {
                            $5_1 = HEAPU8[$0_1 >> 0] | 0;
                            if (($5_1 | 0) != (45 | 0)) {
                              break label$7;
                            }
                            $0_1 = ($0_1 + 1) | 0;
                            if (($0_1 | 0) != ($1_1 | 0)) {
                              break label$7;
                            }
                            HEAP32[$2_1 >> 2] = 4;
                            break label$5;
                          }
                          $6_1 = HEAP32[($305() | 0) >> 2] | 0;
                          HEAP32[($305() | 0) >> 2] = 0;
                          i64toi32_i32$0 = $404($0_1 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0, $489() | 0 | 0) | 0;
                          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                          $7_1 = i64toi32_i32$0;
                          $7$hi = i64toi32_i32$1;
                          label$8: {
                            label$9: {
                              $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                              if (!$0_1) {
                                break label$9;
                              }
                              if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                                break label$8;
                              }
                              if (($0_1 | 0) == (68 | 0)) {
                                break label$3;
                              }
                              break label$4;
                            }
                            HEAP32[($305() | 0) >> 2] = $6_1;
                            if ((HEAP32[(($4_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                              break label$4;
                            }
                          }
                          HEAP32[$2_1 >> 2] = 4;
                          break label$5;
                        }
                        HEAP32[$2_1 >> 2] = 4;
                      }
                      i64toi32_i32$1 = 0;
                      $7_1 = 0;
                      $7$hi = i64toi32_i32$1;
                      break label$1;
                    }
                    i64toi32_i32$1 = $1384() | 0;
                    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                    $51$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $7$hi;
                    i64toi32_i32$0 = $51$hi;
                    i64toi32_i32$2 = i64toi32_i32$1;
                    i64toi32_i32$1 = $7$hi;
                    i64toi32_i32$3 = $7_1;
                    if (
                      (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0) |
                      ((((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0)) &
                        (i64toi32_i32$2 >>> 0 >= $7_1 >>> 0)) |
                        0) |
                      0
                    ) {
                      break label$2;
                    }
                  }
                  HEAP32[$2_1 >> 2] = 4;
                  i64toi32_i32$2 = $1384() | 0;
                  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                  $7_1 = i64toi32_i32$2;
                  $7$hi = i64toi32_i32$0;
                  break label$1;
                }
                i64toi32_i32$0 = $7$hi;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$2 = $7$hi;
                i64toi32_i32$1 = $7_1;
                i64toi32_i32$5 = ((i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $7$hi) | 0;
                i64toi32_i32$5 = (i64toi32_i32$0 - i64toi32_i32$5) | 0;
                $57$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $7$hi;
                i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
                i64toi32_i32$5 = $57$hi;
                $16_1 = (i64toi32_i32$3 - i64toi32_i32$1) | 0;
                i64toi32_i32$3 = $7$hi;
                i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : i64toi32_i32$1;
                i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $7$hi;
                $7_1 = i64toi32_i32$1;
                $7$hi = i64toi32_i32$0;
              }
              global$0 = ($4_1 + 16) | 0;
              i64toi32_i32$0 = $7$hi;
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
              return i64toi32_i32$1 | 0;
            }

            function $475($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $476($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $476($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $477(
                ($6_1 + 208) | 0 | 0,
                $3_1 | 0,
                ($6_1 + 224) | 0 | 0,
                ($6_1 + 223) | 0 | 0,
                ($6_1 + 222) | 0 | 0
              );
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              HEAP8[(($6_1 + 7) | 0) >> 0] = 1;
              HEAP8[(($6_1 + 6) | 0) >> 0] = 69;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $2_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($2_1 + $1_1) | 0;
                  }
                  if (
                    $478(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      ($6_1 + 7) | 0 | 0,
                      ($6_1 + 6) | 0 | 0,
                      $1_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      HEAP8[(($6_1 + 223) | 0) >> 0] | 0 | 0,
                      HEAP8[(($6_1 + 222) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      ($6_1 + 224) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                if (!(((HEAPU8[(($6_1 + 7) | 0) >> 0] | 0) & 255) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAPF32[$5_1 >> 2] = Math_fround(
                $479($1_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0)
              );
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $1_1 | 0;
            }

            function $477($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              $1487(($5_1 + 8) | 0 | 0, $1_1 | 0);
              $487($112(($5_1 + 8) | 0 | 0) | 0 | 0, 8432 | 0, 8464 | 0, $2_1 | 0) | 0;
              $2_1 = $431(($5_1 + 8) | 0 | 0) | 0;
              HEAP8[$3_1 >> 0] = $546($2_1 | 0) | 0;
              HEAP8[$4_1 >> 0] = $547($2_1 | 0) | 0;
              $548($0_1 | 0, $2_1 | 0);
              $430(($5_1 + 8) | 0 | 0) | 0;
              global$0 = ($5_1 + 16) | 0;
            }

            function $478($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              $10_1 = $10_1 | 0;
              $11_1 = $11_1 | 0;
              var $12_1 = 0;
              $12_1 = (global$0 - 16) | 0;
              global$0 = $12_1;
              HEAP8[(($12_1 + 15) | 0) >> 0] = $0_1;
              label$1: {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) != ($5_1 | 0)) {
                      break label$3;
                    }
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break label$2;
                    }
                    $0_1 = 0;
                    HEAP8[$1_1 >> 0] = 0;
                    $11_1 = HEAP32[$4_1 >> 2] | 0;
                    HEAP32[$4_1 >> 2] = ($11_1 + 1) | 0;
                    HEAP8[$11_1 >> 0] = 46;
                    if (!($444($7_1 | 0) | 0)) {
                      break label$1;
                    }
                    $11_1 = HEAP32[$9_1 >> 2] | 0;
                    if ((($11_1 - $8_1) | 0 | 0) > (159 | 0)) {
                      break label$1;
                    }
                    $5_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP32[$9_1 >> 2] = ($11_1 + 4) | 0;
                    HEAP32[$11_1 >> 2] = $5_1;
                    break label$1;
                  }
                  label$4: {
                    if (($0_1 | 0) != ($6_1 | 0)) {
                      break label$4;
                    }
                    if (!($444($7_1 | 0) | 0)) {
                      break label$4;
                    }
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break label$2;
                    }
                    $0_1 = 0;
                    $11_1 = HEAP32[$9_1 >> 2] | 0;
                    if ((($11_1 - $8_1) | 0 | 0) > (159 | 0)) {
                      break label$1;
                    }
                    $0_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP32[$9_1 >> 2] = ($11_1 + 4) | 0;
                    HEAP32[$11_1 >> 2] = $0_1;
                    $0_1 = 0;
                    HEAP32[$10_1 >> 2] = 0;
                    break label$1;
                  }
                  $0_1 = -1;
                  $11_1 = (($549($11_1 | 0, ($11_1 + 32) | 0 | 0, ($12_1 + 15) | 0 | 0) | 0) - $11_1) | 0;
                  if (($11_1 | 0) > (31 | 0)) {
                    break label$1;
                  }
                  $5_1 = HEAPU8[(($11_1 + 8432) | 0) >> 0] | 0;
                  label$5: {
                    label$6: {
                      switch (($11_1 + -22) | 0 | 0) {
                        case 2:
                        case 3:
                          label$9: {
                            $11_1 = HEAP32[$4_1 >> 2] | 0;
                            if (($11_1 | 0) == ($3_1 | 0)) {
                              break label$9;
                            }
                            $0_1 = -1;
                            if (
                              (((HEAPU8[(($11_1 + -1) | 0) >> 0] | 0) & 95) | 0 | 0) !=
                              (((HEAPU8[$2_1 >> 0] | 0) & 127) | 0 | 0)
                            ) {
                              break label$1;
                            }
                          }
                          HEAP32[$4_1 >> 2] = ($11_1 + 1) | 0;
                          HEAP8[$11_1 >> 0] = $5_1;
                          $0_1 = 0;
                          break label$1;
                        case 0:
                        case 1:
                          HEAP8[$2_1 >> 0] = 80;
                          break label$5;
                        default:
                          break label$6;
                      }
                    }
                    $0_1 = HEAP8[$2_1 >> 0] | 0;
                    if ((($5_1 & 95) | 0 | 0) != ($0_1 | 0)) {
                      break label$5;
                    }
                    HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break label$5;
                    }
                    HEAP8[$1_1 >> 0] = 0;
                    if (!($444($7_1 | 0) | 0)) {
                      break label$5;
                    }
                    $0_1 = HEAP32[$9_1 >> 2] | 0;
                    if ((($0_1 - $8_1) | 0 | 0) > (159 | 0)) {
                      break label$5;
                    }
                    $1_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP32[$9_1 >> 2] = ($0_1 + 4) | 0;
                    HEAP32[$0_1 >> 2] = $1_1;
                  }
                  $0_1 = HEAP32[$4_1 >> 2] | 0;
                  HEAP32[$4_1 >> 2] = ($0_1 + 1) | 0;
                  HEAP8[$0_1 >> 0] = $5_1;
                  $0_1 = 0;
                  if (($11_1 | 0) > (21 | 0)) {
                    break label$1;
                  }
                  HEAP32[$10_1 >> 2] = ((HEAP32[$10_1 >> 2] | 0) + 1) | 0;
                  break label$1;
                }
                $0_1 = -1;
              }
              global$0 = ($12_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $479($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $5_1 = Math_fround(0),
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    $4_1 = HEAP32[($305() | 0) >> 2] | 0;
                    HEAP32[($305() | 0) >> 2] = 0;
                    $5_1 = Math_fround($1386($0_1 | 0, ($3_1 + 12) | 0 | 0));
                    label$4: {
                      label$5: {
                        $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                        if (!$0_1) {
                          break label$5;
                        }
                        if ((HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                          break label$4;
                        }
                        if (($0_1 | 0) != (68 | 0)) {
                          break label$1;
                        }
                        HEAP32[$2_1 >> 2] = 4;
                        break label$1;
                      }
                      HEAP32[($305() | 0) >> 2] = $4_1;
                      if ((HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                        break label$1;
                      }
                    }
                    HEAP32[$2_1 >> 2] = 4;
                    break label$2;
                  }
                  HEAP32[$2_1 >> 2] = 4;
                }
                $5_1 = Math_fround(0.0);
              }
              global$0 = ($3_1 + 16) | 0;
              return Math_fround($5_1);
            }

            function $480($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $481($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $481($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $477(
                ($6_1 + 208) | 0 | 0,
                $3_1 | 0,
                ($6_1 + 224) | 0 | 0,
                ($6_1 + 223) | 0 | 0,
                ($6_1 + 222) | 0 | 0
              );
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              HEAP8[(($6_1 + 7) | 0) >> 0] = 1;
              HEAP8[(($6_1 + 6) | 0) >> 0] = 69;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $2_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($2_1 + $1_1) | 0;
                  }
                  if (
                    $478(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      ($6_1 + 7) | 0 | 0,
                      ($6_1 + 6) | 0 | 0,
                      $1_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      HEAP8[(($6_1 + 223) | 0) >> 0] | 0 | 0,
                      HEAP8[(($6_1 + 222) | 0) >> 0] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      ($6_1 + 224) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                if (!(((HEAPU8[(($6_1 + 7) | 0) >> 0] | 0) & 255) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAPF64[$5_1 >> 3] = +$482($1_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0);
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $1_1 | 0;
            }

            function $482($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $5_1 = 0.0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    $4_1 = HEAP32[($305() | 0) >> 2] | 0;
                    HEAP32[($305() | 0) >> 2] = 0;
                    $5_1 = +$1387($0_1 | 0, ($3_1 + 12) | 0 | 0);
                    label$4: {
                      label$5: {
                        $0_1 = HEAP32[($305() | 0) >> 2] | 0;
                        if (!$0_1) {
                          break label$5;
                        }
                        if ((HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
                          break label$4;
                        }
                        if (($0_1 | 0) != (68 | 0)) {
                          break label$1;
                        }
                        HEAP32[$2_1 >> 2] = 4;
                        break label$1;
                      }
                      HEAP32[($305() | 0) >> 2] = $4_1;
                      if ((HEAP32[(($3_1 + 12) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                        break label$1;
                      }
                    }
                    HEAP32[$2_1 >> 2] = 4;
                    break label$2;
                  }
                  HEAP32[$2_1 >> 2] = 4;
                }
                $5_1 = 0.0;
              }
              global$0 = ($3_1 + 16) | 0;
              return +$5_1;
            }

            function $483($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $484($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $484($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $123_1 = 0,
                $126_1 = 0;
              $6_1 = (global$0 - 288) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 272) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 280) | 0) >> 2] = $1_1;
              $477(
                ($6_1 + 224) | 0 | 0,
                $3_1 | 0,
                ($6_1 + 240) | 0 | 0,
                ($6_1 + 239) | 0 | 0,
                ($6_1 + 238) | 0 | 0
              );
              $3_1 = $453(($6_1 + 208) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 204) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 28) | 0) >> 2] = ($6_1 + 32) | 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] = 0;
              HEAP8[(($6_1 + 23) | 0) >> 0] = 1;
              HEAP8[(($6_1 + 22) | 0) >> 0] = 69;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 280) | 0 | 0, ($6_1 + 272) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 204) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $2_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 204) | 0) >> 2] = ($2_1 + $1_1) | 0;
                  }
                  if (
                    $478(
                      $441(($6_1 + 280) | 0 | 0) | 0 | 0,
                      ($6_1 + 23) | 0 | 0,
                      ($6_1 + 22) | 0 | 0,
                      $1_1 | 0,
                      ($6_1 + 204) | 0 | 0,
                      HEAP8[(($6_1 + 239) | 0) >> 0] | 0 | 0,
                      HEAP8[(($6_1 + 238) | 0) >> 0] | 0 | 0,
                      ($6_1 + 224) | 0 | 0,
                      ($6_1 + 32) | 0 | 0,
                      ($6_1 + 28) | 0 | 0,
                      ($6_1 + 24) | 0 | 0,
                      ($6_1 + 240) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 280) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 224) | 0 | 0) | 0)) {
                  break label$4;
                }
                if (!(((HEAPU8[(($6_1 + 23) | 0) >> 0] | 0) & 255) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 28) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 32) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 28) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
              }
              $485($6_1 | 0, $1_1 | 0, HEAP32[(($6_1 + 204) | 0) >> 2] | 0 | 0, $4_1 | 0);
              i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($6_1 + 4) | 0) >> 2] | 0;
              $123_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $123_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
              $126_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $5_1;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $126_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              $459(
                ($6_1 + 224) | 0 | 0,
                ($6_1 + 32) | 0 | 0,
                HEAP32[(($6_1 + 28) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($440(($6_1 + 280) | 0 | 0, ($6_1 + 272) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 280) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 224) | 0 | 0) | 0;
              global$0 = ($6_1 + 288) | 0;
              return $1_1 | 0;
            }

            function $485($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                $4_1 = 0,
                i64toi32_i32$1 = 0,
                $6_1 = 0,
                $6$hi = 0,
                $7_1 = 0,
                $7$hi = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 32) | 0;
              global$0 = $4_1;
              label$1: {
                label$2: {
                  label$3: {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$3;
                    }
                    $5_1 = HEAP32[($305() | 0) >> 2] | 0;
                    HEAP32[($305() | 0) >> 2] = 0;
                    $1388($4_1 | 0, $1_1 | 0, ($4_1 + 28) | 0 | 0);
                    i64toi32_i32$0 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(($4_1 + 12) | 0) >> 2] | 0;
                    $6_1 = i64toi32_i32$0;
                    $6$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(($4_1 + 4) | 0) >> 2] | 0;
                    $7_1 = i64toi32_i32$1;
                    $7$hi = i64toi32_i32$0;
                    label$4: {
                      label$5: {
                        $1_1 = HEAP32[($305() | 0) >> 2] | 0;
                        if (!$1_1) {
                          break label$5;
                        }
                        if ((HEAP32[(($4_1 + 28) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                          break label$4;
                        }
                        if (($1_1 | 0) != (68 | 0)) {
                          break label$1;
                        }
                        HEAP32[$3_1 >> 2] = 4;
                        break label$1;
                      }
                      HEAP32[($305() | 0) >> 2] = $5_1;
                      if ((HEAP32[(($4_1 + 28) | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
                        break label$1;
                      }
                    }
                    HEAP32[$3_1 >> 2] = 4;
                    break label$2;
                  }
                  HEAP32[$3_1 >> 2] = 4;
                }
                i64toi32_i32$0 = 0;
                $7_1 = 0;
                $7$hi = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                $6_1 = 0;
                $6$hi = i64toi32_i32$0;
              }
              i64toi32_i32$0 = $7$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[i64toi32_i32$1 >> 2] = $7_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $6$hi;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $6_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($4_1 + 32) | 0;
            }

            function $486($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 272) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 256) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 264) | 0) >> 2] = $1_1;
              $2_1 = $453(($6_1 + 208) | 0 | 0) | 0;
              $1487(($6_1 + 16) | 0 | 0, $3_1 | 0);
              $487($112(($6_1 + 16) | 0 | 0) | 0 | 0, 8432 | 0, 8458 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $430(($6_1 + 16) | 0 | 0) | 0;
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($439(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $1_1) | 0;
                  }
                  if (
                    $457(
                      $441(($6_1 + 264) | 0 | 0) | 0 | 0,
                      16 | 0,
                      $1_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      0 | 0,
                      $2_1 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      ($6_1 + 224) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $443(($6_1 + 264) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              $455($3_1 | 0, ((HEAP32[(($6_1 + 188) | 0) >> 2] | 0) - $1_1) | 0 | 0);
              $1_1 = $488($3_1 | 0) | 0;
              $7_1 = $489() | 0;
              HEAP32[$6_1 >> 2] = $5_1;
              label$4: {
                if (($490($1_1 | 0, $7_1 | 0, 8465 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
                  break label$4;
                }
                HEAP32[$4_1 >> 2] = 4;
              }
              label$5: {
                if (!($440(($6_1 + 264) | 0 | 0, ($6_1 + 256) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 264) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540($2_1 | 0) | 0;
              global$0 = ($6_1 + 272) | 0;
              return $1_1 | 0;
            }

            function $487($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 32) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1
                ) |
                0 |
                0
              );
            }

            function $488($0_1) {
              $0_1 = $0_1 | 0;
              return $91($0_1 | 0) | 0 | 0;
            }

            function $489() {
              label$1: {
                if (((HEAPU8[((0 + 17804) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17804 | 0) | 0)) {
                  break label$1;
                }
                HEAP32[((0 + 17800) | 0) >> 2] = $347(2147483647 | 0, 8709 | 0, 0 | 0) | 0;
                $1656(17804 | 0);
              }
              return HEAP32[((0 + 17800) | 0) >> 2] | 0 | 0;
            }

            function $490($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $1_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $3_1;
              $1_1 = $500($4_1 | 0, ($4_1 + 12) | 0 | 0) | 0;
              $0_1 = $337($0_1 | 0, $2_1 | 0, HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $501($1_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $491($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = $1213($0_1 | 0) | 0;
              $0_1 = 0;
              label$1: while (1) {
                label$2: {
                  if (($0_1 | 0) != (3 | 0)) {
                    break label$2;
                  }
                  return;
                }
                HEAP32[(($1_1 + (($0_1 << 2) | 0)) | 0) >> 2] = 0;
                $0_1 = ($0_1 + 1) | 0;
                continue label$1;
              }
            }

            function $492($0_1) {
              $0_1 = $0_1 | 0;
              return ((HEAP32[((($107($0_1 | 0) | 0) + 8) | 0) >> 2] | 0) & 2147483647) | 0 | 0;
            }

            function $493($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($104($0_1 | 0) | 0)) {
                  break label$1;
                }
                return $770($0_1 | 0) | 0 | 0;
              }
              return $773($0_1 | 0) | 0 | 0;
            }

            function $494($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (((($1389($0_1 | 0) | 0) ^ ($1389($1_1 | 0) | 0)) | 0) ^ 1) | 0 | 0;
            }

            function $495($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[((($107($0_1 | 0) | 0) + 4) | 0) >> 2] | 0 | 0;
            }

            function $496($0_1) {
              $0_1 = $0_1 | 0;
              return HEAPU8[((($107($0_1 | 0) | 0) + 11) | 0) >> 0] | 0 | 0;
            }

            function $497($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2_1 = ((HEAPU8[$2_1 >> 0] | 0) & 255) | 0;
              label$1: while (1) {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
                      break label$2;
                    }
                    $1_1 = $0_1;
                  }
                  return $1_1 | 0;
                }
                $0_1 = ($0_1 + 1) | 0;
                continue label$1;
              }
            }

            function $498($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                if (($1_1 | 0) != (HEAP32[(($0_1 + 16) | 0) >> 2] | 0 | 0)) {
                  break label$1;
                }
                return (
                  FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0
                );
              }
              return $1335(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
            }

            function $499($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                if (($1_1 | 0) != (HEAP32[(($0_1 + 16) | 0) >> 2] | 0 | 0)) {
                  break label$1;
                }
                return (
                  FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0
                );
              }
              HEAP32[(($0_1 + 12) | 0) >> 2] = ($1_1 + 1) | 0;
              return $1335(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
            }

            function $500($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $400(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $501($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$1_1) {
                  break label$1;
                }
                $400($1_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $502($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 32) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  if ((($83($3_1 | 0) | 0) & 1) | 0) {
                    break label$2;
                  }
                  HEAP32[$6_1 >> 2] = -1;
                  $1_1 =
                    FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0](
                      $0_1,
                      $1_1,
                      $2_1,
                      $3_1,
                      $4_1,
                      $6_1
                    ) | 0;
                  HEAP32[(($6_1 + 24) | 0) >> 2] = $1_1;
                  label$3: {
                    switch (HEAP32[$6_1 >> 2] | 0 | 0) {
                      case 0:
                        HEAP8[$5_1 >> 0] = 0;
                        break label$1;
                      case 1:
                        HEAP8[$5_1 >> 0] = 1;
                        break label$1;
                      default:
                        break label$3;
                    }
                  }
                  HEAP8[$5_1 >> 0] = 1;
                  HEAP32[$4_1 >> 2] = 4;
                  break label$1;
                }
                $1487($6_1 | 0, $3_1 | 0);
                $1_1 = $503($6_1 | 0) | 0;
                $430($6_1 | 0) | 0;
                $1487($6_1 | 0, $3_1 | 0);
                $3_1 = $504($6_1 | 0) | 0;
                $430($6_1 | 0) | 0;
                $505($6_1 | 0, $3_1 | 0);
                $506($6_1 | 12 | 0 | 0, $3_1 | 0);
                $3_1 = ($6_1 + 24) | 0;
                HEAP8[$5_1 >> 0] =
                  ($507(($6_1 + 24) | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) |
                    0 |
                    0) ==
                  ($6_1 | 0);
                $1_1 = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
                label$6: while (1) {
                  $3_1 = $1560(($3_1 + -12) | 0 | 0) | 0;
                  if (($3_1 | 0) != ($6_1 | 0)) {
                    continue label$6;
                  }
                  break label$6;
                }
              }
              global$0 = ($6_1 + 32) | 0;
              return $1_1 | 0;
            }

            function $503($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17836 | 0) | 0 | 0;
            }

            function $504($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17892 | 0) | 0 | 0;
            }

            function $505($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $506($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $507($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $12_1 = 0,
                $7_1 = 0,
                $11_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                $15_1 = 0,
                $14_1 = 0,
                $16_1 = 0,
                $17_1 = 0,
                $10_1 = 0;
              $7_1 = (global$0 - 128) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 120) | 0) >> 2] = $1_1;
              $8_1 = $508($2_1 | 0, $3_1 | 0) | 0;
              HEAP32[(($7_1 + 16) | 0) >> 2] = 31;
              $9_1 = 0;
              $10_1 = $437(($7_1 + 8) | 0 | 0, 0 | 0, ($7_1 + 16) | 0 | 0) | 0;
              $11_1 = ($7_1 + 16) | 0;
              label$1: {
                label$2: {
                  if ($8_1 >>> 0 < 101 >>> 0) {
                    break label$2;
                  }
                  $11_1 = $1698($8_1 | 0) | 0;
                  if (!$11_1) {
                    break label$1;
                  }
                  $438($10_1 | 0, $11_1 | 0);
                }
                $12_1 = $11_1;
                $1_1 = $2_1;
                label$3: while (1) {
                  label$4: {
                    if (($1_1 | 0) != ($3_1 | 0)) {
                      break label$4;
                    }
                    $13_1 = 0;
                    label$5: {
                      label$6: while (1) {
                        $1_1 = $509($0_1 | 0, ($7_1 + 120) | 0 | 0) | 0;
                        label$7: {
                          label$8: {
                            if (!$8_1) {
                              break label$8;
                            }
                            if ($1_1) {
                              break label$7;
                            }
                          }
                          label$9: {
                            if (!($510($0_1 | 0, ($7_1 + 120) | 0 | 0) | 0)) {
                              break label$9;
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
                          }
                          break label$5;
                        }
                        $14_1 = $511($0_1 | 0) | 0;
                        label$10: {
                          if ($6_1) {
                            break label$10;
                          }
                          $14_1 = $512($4_1 | 0, $14_1 | 0) | 0;
                        }
                        $15_1 = ($13_1 + 1) | 0;
                        $16_1 = 0;
                        $12_1 = $11_1;
                        $1_1 = $2_1;
                        label$11: while (1) {
                          label$12: {
                            if (($1_1 | 0) != ($3_1 | 0)) {
                              break label$12;
                            }
                            $13_1 = $15_1;
                            if (!(($16_1 & 1) | 0)) {
                              continue label$6;
                            }
                            $513($0_1 | 0) | 0;
                            $13_1 = $15_1;
                            $12_1 = $11_1;
                            $1_1 = $2_1;
                            if ((($9_1 + $8_1) | 0) >>> 0 < 2 >>> 0) {
                              continue label$6;
                            }
                            label$13: while (1) {
                              label$14: {
                                if (($1_1 | 0) != ($3_1 | 0)) {
                                  break label$14;
                                }
                                $13_1 = $15_1;
                                continue label$6;
                              }
                              label$15: {
                                if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
                                  break label$15;
                                }
                                if (($514($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
                                  break label$15;
                                }
                                HEAP8[$12_1 >> 0] = 0;
                                $9_1 = ($9_1 + -1) | 0;
                              }
                              $12_1 = ($12_1 + 1) | 0;
                              $1_1 = ($1_1 + 12) | 0;
                              continue label$13;
                            }
                          }
                          label$16: {
                            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
                              break label$16;
                            }
                            $17_1 = HEAP32[($515($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
                            label$17: {
                              if ($6_1) {
                                break label$17;
                              }
                              $17_1 = $512($4_1 | 0, $17_1 | 0) | 0;
                            }
                            label$18: {
                              label$19: {
                                if (($14_1 | 0) != ($17_1 | 0)) {
                                  break label$19;
                                }
                                $16_1 = 1;
                                if (($514($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
                                  break label$16;
                                }
                                HEAP8[$12_1 >> 0] = 2;
                                $16_1 = 1;
                                $9_1 = ($9_1 + 1) | 0;
                                break label$18;
                              }
                              HEAP8[$12_1 >> 0] = 0;
                            }
                            $8_1 = ($8_1 + -1) | 0;
                          }
                          $12_1 = ($12_1 + 1) | 0;
                          $1_1 = ($1_1 + 12) | 0;
                          continue label$11;
                        }
                      }
                    }
                    label$20: {
                      label$21: {
                        label$22: while (1) {
                          if (($2_1 | 0) == ($3_1 | 0)) {
                            break label$21;
                          }
                          label$23: {
                            if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
                              break label$23;
                            }
                            $11_1 = ($11_1 + 1) | 0;
                            $2_1 = ($2_1 + 12) | 0;
                            continue label$22;
                          }
                          break label$22;
                        }
                        $3_1 = $2_1;
                        break label$20;
                      }
                      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                    }
                    $446($10_1 | 0) | 0;
                    global$0 = ($7_1 + 128) | 0;
                    return $3_1 | 0;
                  }
                  label$24: {
                    label$25: {
                      if ($516($1_1 | 0) | 0) {
                        break label$25;
                      }
                      HEAP8[$12_1 >> 0] = 1;
                      break label$24;
                    }
                    HEAP8[$12_1 >> 0] = 2;
                    $9_1 = ($9_1 + 1) | 0;
                    $8_1 = ($8_1 + -1) | 0;
                  }
                  $12_1 = ($12_1 + 1) | 0;
                  $1_1 = ($1_1 + 12) | 0;
                  continue label$3;
                }
              }
              $1570();
              abort();
            }

            function $508($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1390($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $509($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($542($0_1 | 0, $1_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $510($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $542($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $511($0_1) {
              $0_1 = $0_1 | 0;
              return $544(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
            }

            function $512($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0
              );
            }

            function $513($0_1) {
              $0_1 = $0_1 | 0;
              $545(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $514($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                return $666($0_1 | 0) | 0 | 0;
              }
              return $667($0_1 | 0) | 0 | 0;
            }

            function $515($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($662($0_1 | 0) | 0) + (($1_1 << 2) | 0)) | 0 | 0;
            }

            function $516($0_1) {
              $0_1 = $0_1 | 0;
              return !($514($0_1 | 0) | 0) | 0;
            }

            function $517($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $518($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $518($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $519($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $520(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 332) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP32[(($6_1 + 332) | 0) >> 2] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP32[$5_1 >> 2] =
                $458($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $0_1 | 0;
            }

            function $519($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $555($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $520($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $1487(($3_1 + 8) | 0 | 0, $1_1 | 0);
              $1_1 = $504(($3_1 + 8) | 0 | 0) | 0;
              HEAP32[$2_1 >> 2] = $552($1_1 | 0) | 0;
              $553($0_1 | 0, $1_1 | 0);
              $430(($3_1 + 8) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
            }

            function $521($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var $10_1 = 0,
                $11_1 = 0;
              $10_1 = (global$0 - 16) | 0;
              global$0 = $10_1;
              HEAP32[(($10_1 + 12) | 0) >> 2] = $0_1;
              label$1: {
                label$2: {
                  label$3: {
                    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                      break label$3;
                    }
                    $11_1 = 43;
                    label$4: {
                      if ((HEAP32[(($9_1 + 96) | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
                        break label$4;
                      }
                      $11_1 = 45;
                      if ((HEAP32[(($9_1 + 100) | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
                        break label$3;
                      }
                    }
                    HEAP32[$3_1 >> 2] = ($2_1 + 1) | 0;
                    HEAP8[$2_1 >> 0] = $11_1;
                    break label$2;
                  }
                  label$5: {
                    if (!($444($6_1 | 0) | 0)) {
                      break label$5;
                    }
                    if (($0_1 | 0) != ($5_1 | 0)) {
                      break label$5;
                    }
                    $0_1 = 0;
                    $9_1 = HEAP32[$8_1 >> 2] | 0;
                    if ((($9_1 - $7_1) | 0 | 0) > (159 | 0)) {
                      break label$1;
                    }
                    $0_1 = HEAP32[$4_1 >> 2] | 0;
                    HEAP32[$8_1 >> 2] = ($9_1 + 4) | 0;
                    HEAP32[$9_1 >> 2] = $0_1;
                    break label$2;
                  }
                  $0_1 = -1;
                  $9_1 = (($543($9_1 | 0, ($9_1 + 104) | 0 | 0, ($10_1 + 12) | 0 | 0) | 0) - $9_1) | 0;
                  if (($9_1 | 0) > (92 | 0)) {
                    break label$1;
                  }
                  $6_1 = ($9_1 >> 2) | 0;
                  label$6: {
                    label$7: {
                      switch (($1_1 + -8) | 0 | 0) {
                        case 0:
                        case 2:
                          if (($6_1 | 0) < ($1_1 | 0)) {
                            break label$6;
                          }
                          break label$1;
                        case 1:
                          break label$6;
                        default:
                          break label$7;
                      }
                    }
                    if (($1_1 | 0) != (16 | 0)) {
                      break label$6;
                    }
                    if (($9_1 | 0) < (88 | 0)) {
                      break label$6;
                    }
                    $9_1 = HEAP32[$3_1 >> 2] | 0;
                    if (($9_1 | 0) == ($2_1 | 0)) {
                      break label$1;
                    }
                    if ((($9_1 - $2_1) | 0 | 0) > (2 | 0)) {
                      break label$1;
                    }
                    $0_1 = -1;
                    if ((HEAPU8[(($9_1 + -1) | 0) >> 0] | 0 | 0) != (48 | 0)) {
                      break label$1;
                    }
                    $0_1 = 0;
                    HEAP32[$4_1 >> 2] = 0;
                    HEAP32[$3_1 >> 2] = ($9_1 + 1) | 0;
                    HEAP8[$9_1 >> 0] = HEAPU8[(($6_1 + 8432) | 0) >> 0] | 0;
                    break label$1;
                  }
                  $0_1 = HEAP32[$3_1 >> 2] | 0;
                  HEAP32[$3_1 >> 2] = ($0_1 + 1) | 0;
                  HEAP8[$0_1 >> 0] = HEAPU8[(($6_1 + 8432) | 0) >> 0] | 0;
                  HEAP32[$4_1 >> 2] = ((HEAP32[$4_1 >> 2] | 0) + 1) | 0;
                  $0_1 = 0;
                  break label$1;
                }
                $0_1 = 0;
                HEAP32[$4_1 >> 2] = 0;
              }
              global$0 = ($10_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $522($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $523($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $523($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                i64toi32_i32$0 = 0,
                $7_1 = 0,
                i64toi32_i32$1 = 0,
                $114_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $519($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $520(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 332) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP32[(($6_1 + 332) | 0) >> 2] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              i64toi32_i32$0 =
                $462($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $114_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $114_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $0_1 | 0;
            }

            function $524($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $525($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $525($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $519($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $520(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 332) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP32[(($6_1 + 332) | 0) >> 2] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP16[$5_1 >> 1] =
                $465($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $0_1 | 0;
            }

            function $526($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $527($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $527($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $519($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $520(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 332) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP32[(($6_1 + 332) | 0) >> 2] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP32[$5_1 >> 2] =
                $468($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $0_1 | 0;
            }

            function $528($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $529($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $529($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $519($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $520(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 332) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP32[(($6_1 + 332) | 0) >> 2] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAP32[$5_1 >> 2] =
                $471($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $0_1 | 0;
            }

            function $530($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $531($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $531($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                i64toi32_i32$0 = 0,
                $7_1 = 0,
                i64toi32_i32$1 = 0,
                $114_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $1_1 = $450($3_1 | 0) | 0;
              $2_1 = $519($0_1 | 0, $3_1 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $520(($6_1 + 208) | 0 | 0, $3_1 | 0, ($6_1 + 332) | 0 | 0);
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $0_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $0_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($0_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $0_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $0_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      $1_1 | 0,
                      $0_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      HEAP32[(($6_1 + 332) | 0) >> 2] | 0 | 0,
                      ($6_1 + 208) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      $2_1 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 208) | 0 | 0) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              i64toi32_i32$0 =
                $474($0_1 | 0, HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $114_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $114_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              $459(
                ($6_1 + 208) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $0_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 208) | 0 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $0_1 | 0;
            }

            function $532($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $533($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $533($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 368) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 352) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 360) | 0) >> 2] = $1_1;
              $534(
                ($6_1 + 200) | 0 | 0,
                $3_1 | 0,
                ($6_1 + 224) | 0 | 0,
                ($6_1 + 220) | 0 | 0,
                ($6_1 + 216) | 0 | 0
              );
              $3_1 = $453(($6_1 + 184) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 180) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              HEAP8[(($6_1 + 7) | 0) >> 0] = 1;
              HEAP8[(($6_1 + 6) | 0) >> 0] = 69;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 360) | 0 | 0, ($6_1 + 352) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 180) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $2_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 180) | 0) >> 2] = ($2_1 + $1_1) | 0;
                  }
                  if (
                    $535(
                      $511(($6_1 + 360) | 0 | 0) | 0 | 0,
                      ($6_1 + 7) | 0 | 0,
                      ($6_1 + 6) | 0 | 0,
                      $1_1 | 0,
                      ($6_1 + 180) | 0 | 0,
                      HEAP32[(($6_1 + 220) | 0) >> 2] | 0 | 0,
                      HEAP32[(($6_1 + 216) | 0) >> 2] | 0 | 0,
                      ($6_1 + 200) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      ($6_1 + 224) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 360) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 200) | 0 | 0) | 0)) {
                  break label$4;
                }
                if (!(((HEAPU8[(($6_1 + 7) | 0) >> 0] | 0) & 255) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAPF32[$5_1 >> 2] = Math_fround(
                $479($1_1 | 0, HEAP32[(($6_1 + 180) | 0) >> 2] | 0 | 0, $4_1 | 0)
              );
              $459(
                ($6_1 + 200) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 360) | 0 | 0, ($6_1 + 352) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 360) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 200) | 0 | 0) | 0;
              global$0 = ($6_1 + 368) | 0;
              return $1_1 | 0;
            }

            function $534($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              $1487(($5_1 + 8) | 0 | 0, $1_1 | 0);
              $541($503(($5_1 + 8) | 0 | 0) | 0 | 0, 8432 | 0, 8464 | 0, $2_1 | 0) | 0;
              $2_1 = $504(($5_1 + 8) | 0 | 0) | 0;
              HEAP32[$3_1 >> 2] = $551($2_1 | 0) | 0;
              HEAP32[$4_1 >> 2] = $552($2_1 | 0) | 0;
              $553($0_1 | 0, $2_1 | 0);
              $430(($5_1 + 8) | 0 | 0) | 0;
              global$0 = ($5_1 + 16) | 0;
            }

            function $535($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              $10_1 = $10_1 | 0;
              $11_1 = $11_1 | 0;
              var $12_1 = 0;
              $12_1 = (global$0 - 16) | 0;
              global$0 = $12_1;
              HEAP32[(($12_1 + 12) | 0) >> 2] = $0_1;
              label$1: {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) != ($5_1 | 0)) {
                      break label$3;
                    }
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break label$2;
                    }
                    $0_1 = 0;
                    HEAP8[$1_1 >> 0] = 0;
                    $11_1 = HEAP32[$4_1 >> 2] | 0;
                    HEAP32[$4_1 >> 2] = ($11_1 + 1) | 0;
                    HEAP8[$11_1 >> 0] = 46;
                    if (!($444($7_1 | 0) | 0)) {
                      break label$1;
                    }
                    $11_1 = HEAP32[$9_1 >> 2] | 0;
                    if ((($11_1 - $8_1) | 0 | 0) > (159 | 0)) {
                      break label$1;
                    }
                    $5_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP32[$9_1 >> 2] = ($11_1 + 4) | 0;
                    HEAP32[$11_1 >> 2] = $5_1;
                    break label$1;
                  }
                  label$4: {
                    if (($0_1 | 0) != ($6_1 | 0)) {
                      break label$4;
                    }
                    if (!($444($7_1 | 0) | 0)) {
                      break label$4;
                    }
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break label$2;
                    }
                    $0_1 = 0;
                    $11_1 = HEAP32[$9_1 >> 2] | 0;
                    if ((($11_1 - $8_1) | 0 | 0) > (159 | 0)) {
                      break label$1;
                    }
                    $0_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP32[$9_1 >> 2] = ($11_1 + 4) | 0;
                    HEAP32[$11_1 >> 2] = $0_1;
                    $0_1 = 0;
                    HEAP32[$10_1 >> 2] = 0;
                    break label$1;
                  }
                  $0_1 = -1;
                  $11_1 = (($554($11_1 | 0, ($11_1 + 128) | 0 | 0, ($12_1 + 12) | 0 | 0) | 0) - $11_1) | 0;
                  if (($11_1 | 0) > (124 | 0)) {
                    break label$1;
                  }
                  $5_1 = HEAPU8[(((($11_1 >> 2) | 0) + 8432) | 0) >> 0] | 0;
                  label$5: {
                    label$6: {
                      switch (__wasm_rotl_i32(($11_1 + -88) | 0 | 0, 30 | 0) | 0 | 0) {
                        case 2:
                        case 3:
                          label$9: {
                            $11_1 = HEAP32[$4_1 >> 2] | 0;
                            if (($11_1 | 0) == ($3_1 | 0)) {
                              break label$9;
                            }
                            $0_1 = -1;
                            if (
                              (((HEAPU8[(($11_1 + -1) | 0) >> 0] | 0) & 95) | 0 | 0) !=
                              (((HEAPU8[$2_1 >> 0] | 0) & 127) | 0 | 0)
                            ) {
                              break label$1;
                            }
                          }
                          HEAP32[$4_1 >> 2] = ($11_1 + 1) | 0;
                          HEAP8[$11_1 >> 0] = $5_1;
                          $0_1 = 0;
                          break label$1;
                        case 0:
                        case 1:
                          HEAP8[$2_1 >> 0] = 80;
                          break label$5;
                        default:
                          break label$6;
                      }
                    }
                    $0_1 = HEAP8[$2_1 >> 0] | 0;
                    if ((($5_1 & 95) | 0 | 0) != ($0_1 | 0)) {
                      break label$5;
                    }
                    HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break label$5;
                    }
                    HEAP8[$1_1 >> 0] = 0;
                    if (!($444($7_1 | 0) | 0)) {
                      break label$5;
                    }
                    $0_1 = HEAP32[$9_1 >> 2] | 0;
                    if ((($0_1 - $8_1) | 0 | 0) > (159 | 0)) {
                      break label$5;
                    }
                    $1_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP32[$9_1 >> 2] = ($0_1 + 4) | 0;
                    HEAP32[$0_1 >> 2] = $1_1;
                  }
                  $0_1 = HEAP32[$4_1 >> 2] | 0;
                  HEAP32[$4_1 >> 2] = ($0_1 + 1) | 0;
                  HEAP8[$0_1 >> 0] = $5_1;
                  $0_1 = 0;
                  if (($11_1 | 0) > (84 | 0)) {
                    break label$1;
                  }
                  HEAP32[$10_1 >> 2] = ((HEAP32[$10_1 >> 2] | 0) + 1) | 0;
                  break label$1;
                }
                $0_1 = -1;
              }
              global$0 = ($12_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $536($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $537($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $537($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 368) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 352) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 360) | 0) >> 2] = $1_1;
              $534(
                ($6_1 + 200) | 0 | 0,
                $3_1 | 0,
                ($6_1 + 224) | 0 | 0,
                ($6_1 + 220) | 0 | 0,
                ($6_1 + 216) | 0 | 0
              );
              $3_1 = $453(($6_1 + 184) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 180) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              HEAP8[(($6_1 + 7) | 0) >> 0] = 1;
              HEAP8[(($6_1 + 6) | 0) >> 0] = 69;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 360) | 0 | 0, ($6_1 + 352) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 180) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $2_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 180) | 0) >> 2] = ($2_1 + $1_1) | 0;
                  }
                  if (
                    $535(
                      $511(($6_1 + 360) | 0 | 0) | 0 | 0,
                      ($6_1 + 7) | 0 | 0,
                      ($6_1 + 6) | 0 | 0,
                      $1_1 | 0,
                      ($6_1 + 180) | 0 | 0,
                      HEAP32[(($6_1 + 220) | 0) >> 2] | 0 | 0,
                      HEAP32[(($6_1 + 216) | 0) >> 2] | 0 | 0,
                      ($6_1 + 200) | 0 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      ($6_1 + 224) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 360) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 200) | 0 | 0) | 0)) {
                  break label$4;
                }
                if (!(((HEAPU8[(($6_1 + 7) | 0) >> 0] | 0) & 255) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 16) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 12) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              }
              HEAPF64[$5_1 >> 3] = +$482($1_1 | 0, HEAP32[(($6_1 + 180) | 0) >> 2] | 0 | 0, $4_1 | 0);
              $459(
                ($6_1 + 200) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                HEAP32[(($6_1 + 12) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 360) | 0 | 0, ($6_1 + 352) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 360) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 200) | 0 | 0) | 0;
              global$0 = ($6_1 + 368) | 0;
              return $1_1 | 0;
            }

            function $538($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              return $539($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
            }

            function $539($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $123_1 = 0,
                $126_1 = 0;
              $6_1 = (global$0 - 384) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 368) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 376) | 0) >> 2] = $1_1;
              $534(
                ($6_1 + 216) | 0 | 0,
                $3_1 | 0,
                ($6_1 + 240) | 0 | 0,
                ($6_1 + 236) | 0 | 0,
                ($6_1 + 232) | 0 | 0
              );
              $3_1 = $453(($6_1 + 200) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 196) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 28) | 0) >> 2] = ($6_1 + 32) | 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] = 0;
              HEAP8[(($6_1 + 23) | 0) >> 0] = 1;
              HEAP8[(($6_1 + 22) | 0) >> 0] = 69;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 376) | 0 | 0, ($6_1 + 368) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 196) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $2_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 196) | 0) >> 2] = ($2_1 + $1_1) | 0;
                  }
                  if (
                    $535(
                      $511(($6_1 + 376) | 0 | 0) | 0 | 0,
                      ($6_1 + 23) | 0 | 0,
                      ($6_1 + 22) | 0 | 0,
                      $1_1 | 0,
                      ($6_1 + 196) | 0 | 0,
                      HEAP32[(($6_1 + 236) | 0) >> 2] | 0 | 0,
                      HEAP32[(($6_1 + 232) | 0) >> 2] | 0 | 0,
                      ($6_1 + 216) | 0 | 0,
                      ($6_1 + 32) | 0 | 0,
                      ($6_1 + 28) | 0 | 0,
                      ($6_1 + 24) | 0 | 0,
                      ($6_1 + 240) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 376) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              label$4: {
                if (!($444(($6_1 + 216) | 0 | 0) | 0)) {
                  break label$4;
                }
                if (!(((HEAPU8[(($6_1 + 23) | 0) >> 0] | 0) & 255) | 0)) {
                  break label$4;
                }
                $2_1 = HEAP32[(($6_1 + 28) | 0) >> 2] | 0;
                if ((($2_1 - (($6_1 + 32) | 0)) | 0 | 0) > (159 | 0)) {
                  break label$4;
                }
                HEAP32[(($6_1 + 28) | 0) >> 2] = ($2_1 + 4) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
              }
              $485($6_1 | 0, $1_1 | 0, HEAP32[(($6_1 + 196) | 0) >> 2] | 0 | 0, $4_1 | 0);
              i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($6_1 + 4) | 0) >> 2] | 0;
              $123_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $5_1;
              HEAP32[i64toi32_i32$0 >> 2] = $123_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
              $126_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $5_1;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $126_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              $459(
                ($6_1 + 216) | 0 | 0,
                ($6_1 + 32) | 0 | 0,
                HEAP32[(($6_1 + 28) | 0) >> 2] | 0 | 0,
                $4_1 | 0
              );
              label$5: {
                if (!($510(($6_1 + 376) | 0 | 0, ($6_1 + 368) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 376) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540(($6_1 + 216) | 0 | 0) | 0;
              global$0 = ($6_1 + 384) | 0;
              return $1_1 | 0;
            }

            function $540($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 352) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 336) | 0) >> 2] = $2_1;
              HEAP32[(($6_1 + 344) | 0) >> 2] = $1_1;
              $2_1 = $453(($6_1 + 208) | 0 | 0) | 0;
              $1487(($6_1 + 16) | 0 | 0, $3_1 | 0);
              $541($503(($6_1 + 16) | 0 | 0) | 0 | 0, 8432 | 0, 8458 | 0, ($6_1 + 224) | 0 | 0) | 0;
              $430(($6_1 + 16) | 0 | 0) | 0;
              $3_1 = $453(($6_1 + 192) | 0 | 0) | 0;
              $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
              $1_1 = $456($3_1 | 0, 0 | 0) | 0;
              HEAP32[(($6_1 + 188) | 0) >> 2] = $1_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 16) | 0;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 0;
              label$1: {
                label$2: while (1) {
                  if (!($509(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if (
                      (HEAP32[(($6_1 + 188) | 0) >> 2] | 0 | 0) !=
                      (($1_1 + ($444($3_1 | 0) | 0)) | 0 | 0)
                    ) {
                      break label$3;
                    }
                    $7_1 = $444($3_1 | 0) | 0;
                    $455($3_1 | 0, (($444($3_1 | 0) | 0) << 1) | 0 | 0);
                    $455($3_1 | 0, $454($3_1 | 0) | 0 | 0);
                    $1_1 = $456($3_1 | 0, 0 | 0) | 0;
                    HEAP32[(($6_1 + 188) | 0) >> 2] = ($7_1 + $1_1) | 0;
                  }
                  if (
                    $521(
                      $511(($6_1 + 344) | 0 | 0) | 0 | 0,
                      16 | 0,
                      $1_1 | 0,
                      ($6_1 + 188) | 0 | 0,
                      ($6_1 + 8) | 0 | 0,
                      0 | 0,
                      $2_1 | 0,
                      ($6_1 + 16) | 0 | 0,
                      ($6_1 + 12) | 0 | 0,
                      ($6_1 + 224) | 0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  $513(($6_1 + 344) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              $455($3_1 | 0, ((HEAP32[(($6_1 + 188) | 0) >> 2] | 0) - $1_1) | 0 | 0);
              $1_1 = $488($3_1 | 0) | 0;
              $7_1 = $489() | 0;
              HEAP32[$6_1 >> 2] = $5_1;
              label$4: {
                if (($490($1_1 | 0, $7_1 | 0, 8465 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
                  break label$4;
                }
                HEAP32[$4_1 >> 2] = 4;
              }
              label$5: {
                if (!($510(($6_1 + 344) | 0 | 0, ($6_1 + 336) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $1_1 = HEAP32[(($6_1 + 344) | 0) >> 2] | 0;
              $1540($3_1 | 0) | 0;
              $1540($2_1 | 0) | 0;
              global$0 = ($6_1 + 352) | 0;
              return $1_1 | 0;
            }

            function $541($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 48) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1
                ) |
                0 |
                0
              );
            }

            function $542($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (((($1391($0_1 | 0) | 0) ^ ($1391($1_1 | 0) | 0)) | 0) ^ 1) | 0 | 0;
            }

            function $543($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2_1 = HEAP32[$2_1 >> 2] | 0;
              label$1: while (1) {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                      break label$2;
                    }
                    $1_1 = $0_1;
                  }
                  return $1_1 | 0;
                }
                $0_1 = ($0_1 + 4) | 0;
                continue label$1;
              }
            }

            function $544($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                if (($1_1 | 0) != (HEAP32[(($0_1 + 16) | 0) >> 2] | 0 | 0)) {
                  break label$1;
                }
                return (
                  FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0
                );
              }
              return $1392(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
            }

            function $545($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                if (($1_1 | 0) != (HEAP32[(($0_1 + 16) | 0) >> 2] | 0 | 0)) {
                  break label$1;
                }
                return (
                  FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0
                );
              }
              HEAP32[(($0_1 + 12) | 0) >> 2] = ($1_1 + 4) | 0;
              return $1392(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
            }

            function $546($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $547($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $548($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $549($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2_1 = ((HEAPU8[$2_1 >> 0] | 0) & 255) | 0;
              label$1: while (1) {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
                      break label$2;
                    }
                    $1_1 = $0_1;
                  }
                  return $1_1 | 0;
                }
                $0_1 = ($0_1 + 1) | 0;
                continue label$1;
              }
            }

            function $550($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return 8432 | 0;
            }

            function $551($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $552($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $553($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $554($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2_1 = HEAP32[$2_1 >> 2] | 0;
              label$1: while (1) {
                label$2: {
                  label$3: {
                    if (($0_1 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                      break label$2;
                    }
                    $1_1 = $0_1;
                  }
                  return $1_1 | 0;
                }
                $0_1 = ($0_1 + 4) | 0;
                continue label$1;
              }
            }

            function $555($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $1487(($3_1 + 8) | 0 | 0, $1_1 | 0);
              $541($503(($3_1 + 8) | 0 | 0) | 0 | 0, 8432 | 0, 8458 | 0, $2_1 | 0) | 0;
              $430(($3_1 + 8) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $2_1 | 0;
            }

            function $556($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 48) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 40) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  if ((($83($2_1 | 0) | 0) & 1) | 0) {
                    break label$2;
                  }
                  $2_1 =
                    FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0](
                      $0_1,
                      $1_1,
                      $2_1,
                      $3_1,
                      $4_1
                    ) | 0;
                  break label$1;
                }
                $1487(($5_1 + 24) | 0 | 0, $2_1 | 0);
                $2_1 = $431(($5_1 + 24) | 0 | 0) | 0;
                $430(($5_1 + 24) | 0 | 0) | 0;
                label$3: {
                  label$4: {
                    if (!$4_1) {
                      break label$4;
                    }
                    $432(($5_1 + 24) | 0 | 0, $2_1 | 0);
                    break label$3;
                  }
                  $433(($5_1 + 24) | 0 | 0, $2_1 | 0);
                }
                HEAP32[(($5_1 + 16) | 0) >> 2] = $557(($5_1 + 24) | 0 | 0) | 0;
                label$5: while (1) {
                  HEAP32[(($5_1 + 8) | 0) >> 2] = $558(($5_1 + 24) | 0 | 0) | 0;
                  label$6: {
                    if ($559(($5_1 + 16) | 0 | 0, ($5_1 + 8) | 0 | 0) | 0) {
                      break label$6;
                    }
                    $2_1 = HEAP32[(($5_1 + 40) | 0) >> 2] | 0;
                    $1540(($5_1 + 24) | 0 | 0) | 0;
                    break label$1;
                  }
                  $2_1 = HEAP8[($560(($5_1 + 16) | 0 | 0) | 0) >> 0] | 0;
                  $562($561(($5_1 + 40) | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
                  $563(($5_1 + 16) | 0 | 0) | 0;
                  $564(($5_1 + 40) | 0 | 0) | 0;
                  continue label$5;
                }
              }
              global$0 = ($5_1 + 48) | 0;
              return $2_1 | 0;
            }

            function $557($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 = HEAP32[($565(($1_1 + 8) | 0 | 0, $493($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $558($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 =
                HEAP32[
                  ($565(($1_1 + 8) | 0 | 0, (($493($0_1 | 0) | 0) + ($444($0_1 | 0) | 0)) | 0 | 0) | 0) >> 2
                ] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $559($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($566($0_1 | 0, $1_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $560($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $561($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $562($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              label$1: {
                $2_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$2_1) {
                  break label$1;
                }
                if (!($95($567($2_1 | 0, $1_1 | 0) | 0 | 0, $94() | 0 | 0) | 0)) {
                  break label$1;
                }
                HEAP32[$0_1 >> 2] = 0;
              }
              return $0_1 | 0;
            }

            function $563($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + 1) | 0;
              return $0_1 | 0;
            }

            function $564($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $565($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $566($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($798($0_1 | 0) | 0 | 0) == ($798($1_1 | 0) | 0 | 0)) | 0;
            }

            function $567($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0;
              label$1: {
                $2_1 = HEAP32[(($0_1 + 24) | 0) >> 2] | 0;
                if (($2_1 | 0) != (HEAP32[(($0_1 + 28) | 0) >> 2] | 0 | 0)) {
                  break label$1;
                }
                return (
                  ((((wasm2js_i32$1 = $0_1), (wasm2js_i32$2 = $1335($1_1 | 0) | 0)),
                  (wasm2js_i32$0 = HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0)),
                  FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0
                );
              }
              HEAP32[(($0_1 + 24) | 0) >> 2] = ($2_1 + 1) | 0;
              HEAP8[$2_1 >> 0] = $1_1;
              return $1335($1_1 | 0) | 0 | 0;
            }

            function $568($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $6_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $7_1 = 0,
                $10_1 = 0,
                $5_1 = 0,
                $12_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              $12_1 = 0;
              HEAP16[(($6_1 + 28) | 0) >> 1] =
                HEAPU8[(($12_1 + 8480) | 0) >> 0] |
                0 |
                (((HEAPU8[(($12_1 + 8481) | 0) >> 0] | 0) << 8) | 0) |
                0;
              $11_1 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] =
                HEAPU8[(($11_1 + 8476) | 0) >> 0] |
                0 |
                (((HEAPU8[(($11_1 + 8477) | 0) >> 0] | 0) << 8) | 0) |
                0 |
                (((HEAPU8[(($11_1 + 8478) | 0) >> 0] | 0) << 16) |
                  0 |
                  (((HEAPU8[(($11_1 + 8479) | 0) >> 0] | 0) << 24) | 0) |
                  0) |
                0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8468 | 0, 1 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -16) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              HEAP32[$6_1 >> 2] = $4_1;
              $7_1 =
                ($8_1 +
                  ($570(
                    $8_1 | 0,
                    ((((($7_1 >>> 9) | 0) & 1) | 0) + 13) | 0 | 0,
                    $10_1 | 0,
                    ($6_1 + 24) | 0 | 0,
                    $6_1 | 0
                  ) |
                    0)) |
                0;
              $10_1 = $571($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
              $4_1 = ($8_1 + -32) | 0;
              global$0 = $4_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $572(
                $8_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                $4_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $85(
                  $1_1 | 0,
                  $4_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $569($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              label$1: {
                if (!(($3_1 & 2048) | 0)) {
                  break label$1;
                }
                HEAP8[$0_1 >> 0] = 43;
                $0_1 = ($0_1 + 1) | 0;
              }
              label$2: {
                if (!(($3_1 & 512) | 0)) {
                  break label$2;
                }
                HEAP8[$0_1 >> 0] = 35;
                $0_1 = ($0_1 + 1) | 0;
              }
              label$3: {
                label$4: while (1) {
                  $4_1 = HEAPU8[$1_1 >> 0] | 0;
                  if (!$4_1) {
                    break label$3;
                  }
                  HEAP8[$0_1 >> 0] = $4_1;
                  $0_1 = ($0_1 + 1) | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$4;
                }
              }
              label$5: {
                label$6: {
                  $1_1 = ($3_1 & 74) | 0;
                  if (($1_1 | 0) != (64 | 0)) {
                    break label$6;
                  }
                  $1_1 = 111;
                  break label$5;
                }
                label$7: {
                  if (($1_1 | 0) != (8 | 0)) {
                    break label$7;
                  }
                  $1_1 = ($3_1 & 16384) | 0 ? 88 : 120;
                  break label$5;
                }
                $1_1 = $2_1 ? 100 : 117;
              }
              HEAP8[$0_1 >> 0] = $1_1;
            }

            function $570($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $2_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $4_1;
              $2_1 = $500($5_1 | 0, ($5_1 + 12) | 0 | 0) | 0;
              $0_1 = $364($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[(($5_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $501($2_1 | 0) | 0;
              global$0 = ($5_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $571($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                $2_1 = (($83($2_1 | 0) | 0) & 176) | 0;
                if (($2_1 | 0) != (32 | 0)) {
                  break label$1;
                }
                return $1_1 | 0;
              }
              label$2: {
                if (($2_1 | 0) != (16 | 0)) {
                  break label$2;
                }
                label$3: {
                  label$4: {
                    $2_1 = HEAPU8[$0_1 >> 0] | 0;
                    switch (($2_1 + -43) | 0 | 0) {
                      case 0:
                      case 2:
                        break label$4;
                      default:
                        break label$3;
                    }
                  }
                  return ($0_1 + 1) | 0 | 0;
                }
                if ((($1_1 - $0_1) | 0 | 0) < (2 | 0)) {
                  break label$2;
                }
                if (($2_1 | 0) != (48 | 0)) {
                  break label$2;
                }
                if ((HEAPU8[(($0_1 + 1) | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
                  break label$2;
                }
                $0_1 = ($0_1 + 2) | 0;
              }
              return $0_1 | 0;
            }

            function $572($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $9_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $14_1 = 0,
                $12_1 = 0,
                $13_1 = 0;
              $7_1 = (global$0 - 16) | 0;
              global$0 = $7_1;
              $8_1 = $112($6_1 | 0) | 0;
              $6_1 = $431($6_1 | 0) | 0;
              $548($7_1 | 0, $6_1 | 0);
              label$1: {
                label$2: {
                  if (!($447($7_1 | 0) | 0)) {
                    break label$2;
                  }
                  $487($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
                  $6_1 = ($3_1 + (($2_1 - $0_1) | 0)) | 0;
                  HEAP32[$5_1 >> 2] = $6_1;
                  break label$1;
                }
                HEAP32[$5_1 >> 2] = $3_1;
                $9_1 = $0_1;
                label$3: {
                  label$4: {
                    $10_1 = HEAPU8[$9_1 >> 0] | 0;
                    switch (($10_1 + -43) | 0 | 0) {
                      case 0:
                      case 2:
                        break label$4;
                      default:
                        break label$3;
                    }
                  }
                  $10_1 = $113($8_1 | 0, ((($10_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 1) | 0;
                  HEAP8[$11_1 >> 0] = $10_1;
                  $9_1 = ($0_1 + 1) | 0;
                }
                label$5: {
                  if ((($2_1 - $9_1) | 0 | 0) < (2 | 0)) {
                    break label$5;
                  }
                  if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
                    break label$5;
                  }
                  if ((HEAPU8[(($9_1 + 1) | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
                    break label$5;
                  }
                  $10_1 = $113($8_1 | 0, 48 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 1) | 0;
                  HEAP8[$11_1 >> 0] = $10_1;
                  $10_1 = $113($8_1 | 0, HEAP8[(($9_1 + 1) | 0) >> 0] | 0 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 1) | 0;
                  HEAP8[$11_1 >> 0] = $10_1;
                  $9_1 = ($9_1 + 2) | 0;
                }
                $573($9_1 | 0, $2_1 | 0);
                $10_1 = 0;
                $12_1 = $547($6_1 | 0) | 0;
                $11_1 = 0;
                $6_1 = $9_1;
                label$6: while (1) {
                  label$7: {
                    if ($6_1 >>> 0 < $2_1 >>> 0) {
                      break label$7;
                    }
                    $573(($3_1 + (($9_1 - $0_1) | 0)) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
                    $6_1 = HEAP32[$5_1 >> 2] | 0;
                    break label$1;
                  }
                  label$8: {
                    if (!(HEAPU8[($456($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
                      break label$8;
                    }
                    if (($10_1 | 0) != (HEAP8[($456($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
                      break label$8;
                    }
                    $10_1 = HEAP32[$5_1 >> 2] | 0;
                    HEAP32[$5_1 >> 2] = ($10_1 + 1) | 0;
                    HEAP8[$10_1 >> 0] = $12_1;
                    $11_1 = ($11_1 + ($11_1 >>> 0 < ((($444($7_1 | 0) | 0) + -1) | 0) >>> 0)) | 0;
                    $10_1 = 0;
                  }
                  $13_1 = $113($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
                  $14_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($14_1 + 1) | 0;
                  HEAP8[$14_1 >> 0] = $13_1;
                  $6_1 = ($6_1 + 1) | 0;
                  $10_1 = ($10_1 + 1) | 0;
                  continue label$6;
                }
              }
              HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : ($3_1 + (($1_1 - $0_1) | 0)) | 0;
              $1540($7_1 | 0) | 0;
              global$0 = ($7_1 + 16) | 0;
            }

            function $573($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $628($0_1 | 0, $1_1 | 0);
            }

            function $574($0_1) {
              $0_1 = $0_1 | 0;
              return $1275($493($0_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $575($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var $6_1 = 0,
                $8_1 = 0,
                $7_1 = 0,
                $10_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $11_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] = 37;
              HEAP32[(($6_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8470 | 0, 1 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -32) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              i64toi32_i32$0 = $4$hi;
              HEAP32[$6_1 >> 2] = $4_1;
              HEAP32[(($6_1 + 4) | 0) >> 2] = i64toi32_i32$0;
              $10_1 =
                ($8_1 +
                  ($570(
                    $8_1 | 0,
                    ((((($7_1 >>> 9) | 0) & 1) | 0) + 23) | 0 | 0,
                    $10_1 | 0,
                    ($6_1 + 24) | 0 | 0,
                    $6_1 | 0
                  ) |
                    0)) |
                0;
              $11_1 = $571($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
              $7_1 = ($8_1 + -48) | 0;
              global$0 = $7_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $572(
                $8_1 | 0,
                $11_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $85(
                  $1_1 | 0,
                  $7_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $576($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $6_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $7_1 = 0,
                $10_1 = 0,
                $5_1 = 0,
                $12_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              $12_1 = 0;
              HEAP16[(($6_1 + 28) | 0) >> 1] =
                HEAPU8[(($12_1 + 8480) | 0) >> 0] |
                0 |
                (((HEAPU8[(($12_1 + 8481) | 0) >> 0] | 0) << 8) | 0) |
                0;
              $11_1 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] =
                HEAPU8[(($11_1 + 8476) | 0) >> 0] |
                0 |
                (((HEAPU8[(($11_1 + 8477) | 0) >> 0] | 0) << 8) | 0) |
                0 |
                (((HEAPU8[(($11_1 + 8478) | 0) >> 0] | 0) << 16) |
                  0 |
                  (((HEAPU8[(($11_1 + 8479) | 0) >> 0] | 0) << 24) | 0) |
                  0) |
                0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8468 | 0, 0 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -16) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              HEAP32[$6_1 >> 2] = $4_1;
              $7_1 =
                ($8_1 +
                  ($570(
                    $8_1 | 0,
                    ((($7_1 >>> 9) | 0) & 1) | 0 | 12 | 0 | 0,
                    $10_1 | 0,
                    ($6_1 + 24) | 0 | 0,
                    $6_1 | 0
                  ) |
                    0)) |
                0;
              $10_1 = $571($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
              $4_1 = ($8_1 + -32) | 0;
              global$0 = $4_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $572(
                $8_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                $4_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $85(
                  $1_1 | 0,
                  $4_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $577($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var $6_1 = 0,
                $8_1 = 0,
                $7_1 = 0,
                $10_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $11_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] = 37;
              HEAP32[(($6_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8470 | 0, 0 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -32) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              i64toi32_i32$0 = $4$hi;
              HEAP32[$6_1 >> 2] = $4_1;
              HEAP32[(($6_1 + 4) | 0) >> 2] = i64toi32_i32$0;
              $10_1 =
                ($8_1 +
                  ($570(
                    $8_1 | 0,
                    ((((($7_1 >>> 9) | 0) & 1) | 0) + 23) | 0 | 0,
                    $10_1 | 0,
                    ($6_1 + 24) | 0 | 0,
                    $6_1 | 0
                  ) |
                    0)) |
                0;
              $11_1 = $571($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
              $7_1 = ($8_1 + -48) | 0;
              global$0 = $7_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $572(
                $8_1 | 0,
                $11_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $85(
                  $1_1 | 0,
                  $7_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $578($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = +$4_1;
              var $5_1 = 0,
                $7_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $11_1 = 0,
                $10_1 = 0;
              $5_1 = (global$0 - 208) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 200) | 0) >> 2] = 37;
              HEAP32[(($5_1 + 204) | 0) >> 2] = 0;
              $6_1 = $579(($5_1 + 200) | 0 | 1 | 0 | 0, 8473 | 0, $83($2_1 | 0) | 0 | 0) | 0;
              HEAP32[(($5_1 + 156) | 0) >> 2] = ($5_1 + 160) | 0;
              $7_1 = $489() | 0;
              label$1: {
                label$2: {
                  if (!$6_1) {
                    break label$2;
                  }
                  $8_1 = $580($2_1 | 0) | 0;
                  HEAPF64[(($5_1 + 40) | 0) >> 3] = $4_1;
                  HEAP32[(($5_1 + 32) | 0) >> 2] = $8_1;
                  $7_1 =
                    $570(($5_1 + 160) | 0 | 0, 30 | 0, $7_1 | 0, ($5_1 + 200) | 0 | 0, ($5_1 + 32) | 0 | 0) |
                    0;
                  break label$1;
                }
                HEAPF64[(($5_1 + 48) | 0) >> 3] = $4_1;
                $7_1 =
                  $570(($5_1 + 160) | 0 | 0, 30 | 0, $7_1 | 0, ($5_1 + 200) | 0 | 0, ($5_1 + 48) | 0 | 0) | 0;
              }
              HEAP32[(($5_1 + 80) | 0) >> 2] = 31;
              $8_1 = $581(($5_1 + 144) | 0 | 0, 0 | 0, ($5_1 + 80) | 0 | 0) | 0;
              label$3: {
                label$4: {
                  if (($7_1 | 0) < (30 | 0)) {
                    break label$4;
                  }
                  $7_1 = $489() | 0;
                  label$5: {
                    label$6: {
                      if (!$6_1) {
                        break label$6;
                      }
                      $6_1 = $580($2_1 | 0) | 0;
                      HEAPF64[(($5_1 + 8) | 0) >> 3] = $4_1;
                      HEAP32[$5_1 >> 2] = $6_1;
                      $7_1 = $582(($5_1 + 156) | 0 | 0, $7_1 | 0, ($5_1 + 200) | 0 | 0, $5_1 | 0) | 0;
                      break label$5;
                    }
                    HEAPF64[(($5_1 + 16) | 0) >> 3] = $4_1;
                    $7_1 =
                      $582(($5_1 + 156) | 0 | 0, $7_1 | 0, ($5_1 + 200) | 0 | 0, ($5_1 + 16) | 0 | 0) | 0;
                  }
                  $6_1 = HEAP32[(($5_1 + 156) | 0) >> 2] | 0;
                  if (!$6_1) {
                    break label$3;
                  }
                  $583($8_1 | 0, $6_1 | 0);
                }
                $6_1 = HEAP32[(($5_1 + 156) | 0) >> 2] | 0;
                $9_1 = ($6_1 + $7_1) | 0;
                $10_1 = $571($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
                HEAP32[(($5_1 + 80) | 0) >> 2] = 31;
                $6_1 = $581(($5_1 + 72) | 0 | 0, 0 | 0, ($5_1 + 80) | 0 | 0) | 0;
                label$7: {
                  label$8: {
                    if ((HEAP32[(($5_1 + 156) | 0) >> 2] | 0 | 0) != (($5_1 + 160) | 0 | 0)) {
                      break label$8;
                    }
                    $7_1 = ($5_1 + 80) | 0;
                    $11_1 = ($5_1 + 160) | 0;
                    break label$7;
                  }
                  $7_1 = $1698(($7_1 << 1) | 0 | 0) | 0;
                  if (!$7_1) {
                    break label$3;
                  }
                  $583($6_1 | 0, $7_1 | 0);
                  $11_1 = HEAP32[(($5_1 + 156) | 0) >> 2] | 0;
                }
                $1487(($5_1 + 56) | 0 | 0, $2_1 | 0);
                $584(
                  $11_1 | 0,
                  $10_1 | 0,
                  $9_1 | 0,
                  $7_1 | 0,
                  ($5_1 + 68) | 0 | 0,
                  ($5_1 + 64) | 0 | 0,
                  ($5_1 + 56) | 0 | 0
                );
                $430(($5_1 + 56) | 0 | 0) | 0;
                $2_1 =
                  $85(
                    $1_1 | 0,
                    $7_1 | 0,
                    HEAP32[(($5_1 + 68) | 0) >> 2] | 0 | 0,
                    HEAP32[(($5_1 + 64) | 0) >> 2] | 0 | 0,
                    $2_1 | 0,
                    $3_1 | 0
                  ) | 0;
                $585($6_1 | 0) | 0;
                $585($8_1 | 0) | 0;
                global$0 = ($5_1 + 208) | 0;
                return $2_1 | 0;
              }
              $1570();
              abort();
            }

            function $579($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $5_1 = 0;
              label$1: {
                if (!(($2_1 & 2048) | 0)) {
                  break label$1;
                }
                HEAP8[$0_1 >> 0] = 43;
                $0_1 = ($0_1 + 1) | 0;
              }
              label$2: {
                if (!(($2_1 & 1024) | 0)) {
                  break label$2;
                }
                HEAP8[$0_1 >> 0] = 35;
                $0_1 = ($0_1 + 1) | 0;
              }
              label$3: {
                $3_1 = ($2_1 & 260) | 0;
                if (($3_1 | 0) == (260 | 0)) {
                  break label$3;
                }
                $5_1 = 10798;
                HEAP8[$0_1 >> 0] = $5_1;
                HEAP8[(($0_1 + 1) | 0) >> 0] = ($5_1 >>> 8) | 0;
                $0_1 = ($0_1 + 2) | 0;
              }
              $4_1 = ($2_1 & 16384) | 0;
              label$4: {
                label$5: while (1) {
                  $2_1 = HEAPU8[$1_1 >> 0] | 0;
                  if (!$2_1) {
                    break label$4;
                  }
                  HEAP8[$0_1 >> 0] = $2_1;
                  $0_1 = ($0_1 + 1) | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$5;
                }
              }
              label$6: {
                label$7: {
                  label$8: {
                    if (($3_1 | 0) == (256 | 0)) {
                      break label$8;
                    }
                    if (($3_1 | 0) != (4 | 0)) {
                      break label$7;
                    }
                    $1_1 = $4_1 ? 70 : 102;
                    break label$6;
                  }
                  $1_1 = $4_1 ? 69 : 101;
                  break label$6;
                }
                label$9: {
                  if (($3_1 | 0) != (260 | 0)) {
                    break label$9;
                  }
                  $1_1 = $4_1 ? 65 : 97;
                  break label$6;
                }
                $1_1 = $4_1 ? 71 : 103;
              }
              HEAP8[$0_1 >> 0] = $1_1;
              return (($3_1 | 0) != (260 | 0)) | 0;
            }

            function $580($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0;
            }

            function $581($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $1_1;
              $587($0_1 | 0, ($3_1 + 12) | 0 | 0, $586($2_1 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $582($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $1_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $3_1;
              $1_1 = $500($4_1 | 0, ($4_1 + 12) | 0 | 0) | 0;
              $0_1 = $366($0_1 | 0, $2_1 | 0, HEAP32[(($4_1 + 8) | 0) >> 2] | 0 | 0) | 0;
              $501($1_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $583($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[($588($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($588($0_1 | 0) | 0) >> 2] = $1_1;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[($589($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
              }
            }

            function $584($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $11_1 = 0,
                $10_1 = 0,
                $12_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $14_1 = 0,
                $9_1 = 0,
                $16_1 = 0,
                $13_1 = 0,
                $15_1 = 0;
              $7_1 = (global$0 - 16) | 0;
              global$0 = $7_1;
              $8_1 = $112($6_1 | 0) | 0;
              $9_1 = $431($6_1 | 0) | 0;
              $548($7_1 | 0, $9_1 | 0);
              HEAP32[$5_1 >> 2] = $3_1;
              $10_1 = $0_1;
              label$1: {
                label$2: {
                  $6_1 = HEAPU8[$10_1 >> 0] | 0;
                  switch (($6_1 + -43) | 0 | 0) {
                    case 0:
                    case 2:
                      break label$2;
                    default:
                      break label$1;
                  }
                }
                $6_1 = $113($8_1 | 0, ((($6_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                $11_1 = HEAP32[$5_1 >> 2] | 0;
                HEAP32[$5_1 >> 2] = ($11_1 + 1) | 0;
                HEAP8[$11_1 >> 0] = $6_1;
                $10_1 = ($0_1 + 1) | 0;
              }
              $6_1 = $10_1;
              label$3: {
                label$4: {
                  if ((($2_1 - $6_1) | 0 | 0) <= (1 | 0)) {
                    break label$4;
                  }
                  $6_1 = $10_1;
                  if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
                    break label$4;
                  }
                  $6_1 = $10_1;
                  if ((HEAPU8[(($6_1 + 1) | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
                    break label$4;
                  }
                  $6_1 = $113($8_1 | 0, 48 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 1) | 0;
                  HEAP8[$11_1 >> 0] = $6_1;
                  $6_1 = $113($8_1 | 0, HEAP8[(($10_1 + 1) | 0) >> 0] | 0 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 1) | 0;
                  HEAP8[$11_1 >> 0] = $6_1;
                  $10_1 = ($10_1 + 2) | 0;
                  $6_1 = $10_1;
                  label$5: while (1) {
                    if ($6_1 >>> 0 >= $2_1 >>> 0) {
                      break label$3;
                    }
                    if (!($368(HEAP8[$6_1 >> 0] | 0 | 0, $489() | 0 | 0) | 0)) {
                      break label$3;
                    }
                    $6_1 = ($6_1 + 1) | 0;
                    continue label$5;
                  }
                }
                label$6: while (1) {
                  if ($6_1 >>> 0 >= $2_1 >>> 0) {
                    break label$3;
                  }
                  if (!($302(HEAP8[$6_1 >> 0] | 0 | 0, $489() | 0 | 0) | 0)) {
                    break label$3;
                  }
                  $6_1 = ($6_1 + 1) | 0;
                  continue label$6;
                }
              }
              label$7: {
                label$8: {
                  if (!($447($7_1 | 0) | 0)) {
                    break label$8;
                  }
                  $487($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
                  HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1) | 0)) | 0;
                  break label$7;
                }
                $573($10_1 | 0, $6_1 | 0);
                $12_1 = 0;
                $13_1 = $547($9_1 | 0) | 0;
                $14_1 = 0;
                $11_1 = $10_1;
                label$9: while (1) {
                  label$10: {
                    if ($11_1 >>> 0 < $6_1 >>> 0) {
                      break label$10;
                    }
                    $573(($3_1 + (($10_1 - $0_1) | 0)) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
                    break label$7;
                  }
                  label$11: {
                    if ((HEAP8[($456($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
                      break label$11;
                    }
                    if (($12_1 | 0) != (HEAP8[($456($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
                      break label$11;
                    }
                    $12_1 = HEAP32[$5_1 >> 2] | 0;
                    HEAP32[$5_1 >> 2] = ($12_1 + 1) | 0;
                    HEAP8[$12_1 >> 0] = $13_1;
                    $14_1 = ($14_1 + ($14_1 >>> 0 < ((($444($7_1 | 0) | 0) + -1) | 0) >>> 0)) | 0;
                    $12_1 = 0;
                  }
                  $15_1 = $113($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
                  $16_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($16_1 + 1) | 0;
                  HEAP8[$16_1 >> 0] = $15_1;
                  $11_1 = ($11_1 + 1) | 0;
                  $12_1 = ($12_1 + 1) | 0;
                  continue label$9;
                }
              }
              label$12: while (1) {
                label$13: {
                  label$14: {
                    if ($6_1 >>> 0 >= $2_1 >>> 0) {
                      break label$14;
                    }
                    $11_1 = HEAPU8[$6_1 >> 0] | 0;
                    if (($11_1 | 0) != (46 | 0)) {
                      break label$13;
                    }
                    $11_1 = $546($9_1 | 0) | 0;
                    $12_1 = HEAP32[$5_1 >> 2] | 0;
                    HEAP32[$5_1 >> 2] = ($12_1 + 1) | 0;
                    HEAP8[$12_1 >> 0] = $11_1;
                    $6_1 = ($6_1 + 1) | 0;
                  }
                  $487($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
                  $6_1 = ((HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1) | 0)) | 0;
                  HEAP32[$5_1 >> 2] = $6_1;
                  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : ($3_1 + (($1_1 - $0_1) | 0)) | 0;
                  $1540($7_1 | 0) | 0;
                  global$0 = ($7_1 + 16) | 0;
                  return;
                }
                $11_1 = $113($8_1 | 0, ((($11_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                $12_1 = HEAP32[$5_1 >> 2] | 0;
                HEAP32[$5_1 >> 2] = ($12_1 + 1) | 0;
                HEAP8[$12_1 >> 0] = $11_1;
                $6_1 = ($6_1 + 1) | 0;
                continue label$12;
              }
            }

            function $585($0_1) {
              $0_1 = $0_1 | 0;
              $583($0_1 | 0, 0 | 0);
              return $0_1 | 0;
            }

            function $586($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $587($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1394($0_1 | 0, $1393($1_1 | 0) | 0 | 0) | 0;
              $1366(($0_1 + 4) | 0 | 0, $1365($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $588($0_1) {
              $0_1 = $0_1 | 0;
              return $1395($0_1 | 0) | 0 | 0;
            }

            function $589($0_1) {
              $0_1 = $0_1 | 0;
              return $1368(($0_1 + 4) | 0 | 0) | 0 | 0;
            }

            function $590($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              $5_1 = $5_1 | 0;
              $5$hi = $5$hi | 0;
              var $6_1 = 0,
                $8_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $12_1 = 0,
                $11_1 = 0;
              $6_1 = (global$0 - 256) | 0;
              global$0 = $6_1;
              i64toi32_i32$1 = $6_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($6_1 + 248) | 0) >> 2] = 37;
              HEAP32[(($6_1 + 252) | 0) >> 2] = i64toi32_i32$0;
              $7_1 = $579(($6_1 + 248) | 0 | 1 | 0 | 0, 8474 | 0, $83($2_1 | 0) | 0 | 0) | 0;
              HEAP32[(($6_1 + 204) | 0) >> 2] = ($6_1 + 208) | 0;
              $8_1 = $489() | 0;
              label$1: {
                label$2: {
                  if (!$7_1) {
                    break label$2;
                  }
                  $9_1 = $580($2_1 | 0) | 0;
                  i64toi32_i32$0 = $5$hi;
                  i64toi32_i32$1 = ($6_1 + 72) | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
                  HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$1 = ($6_1 + 64) | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
                  HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  HEAP32[(($6_1 + 48) | 0) >> 2] = $9_1;
                  $8_1 =
                    $570(($6_1 + 208) | 0 | 0, 30 | 0, $8_1 | 0, ($6_1 + 248) | 0 | 0, ($6_1 + 48) | 0 | 0) |
                    0;
                  break label$1;
                }
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$1 = $6_1;
                HEAP32[(($6_1 + 80) | 0) >> 2] = $4_1;
                HEAP32[(($6_1 + 84) | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$0 = $5$hi;
                i64toi32_i32$1 = $6_1;
                HEAP32[(($6_1 + 88) | 0) >> 2] = $5_1;
                HEAP32[(($6_1 + 92) | 0) >> 2] = i64toi32_i32$0;
                $8_1 =
                  $570(($6_1 + 208) | 0 | 0, 30 | 0, $8_1 | 0, ($6_1 + 248) | 0 | 0, ($6_1 + 80) | 0 | 0) | 0;
              }
              HEAP32[(($6_1 + 128) | 0) >> 2] = 31;
              $9_1 = $581(($6_1 + 192) | 0 | 0, 0 | 0, ($6_1 + 128) | 0 | 0) | 0;
              label$3: {
                label$4: {
                  if (($8_1 | 0) < (30 | 0)) {
                    break label$4;
                  }
                  $8_1 = $489() | 0;
                  label$5: {
                    label$6: {
                      if (!$7_1) {
                        break label$6;
                      }
                      $7_1 = $580($2_1 | 0) | 0;
                      i64toi32_i32$0 = $5$hi;
                      i64toi32_i32$1 = ($6_1 + 24) | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$1 = ($6_1 + 16) | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[$6_1 >> 2] = $7_1;
                      $8_1 = $582(($6_1 + 204) | 0 | 0, $8_1 | 0, ($6_1 + 248) | 0 | 0, $6_1 | 0) | 0;
                      break label$5;
                    }
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$1 = $6_1;
                    HEAP32[(($6_1 + 32) | 0) >> 2] = $4_1;
                    HEAP32[(($6_1 + 36) | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$0 = $5$hi;
                    i64toi32_i32$1 = $6_1;
                    HEAP32[(($6_1 + 40) | 0) >> 2] = $5_1;
                    HEAP32[(($6_1 + 44) | 0) >> 2] = i64toi32_i32$0;
                    $8_1 =
                      $582(($6_1 + 204) | 0 | 0, $8_1 | 0, ($6_1 + 248) | 0 | 0, ($6_1 + 32) | 0 | 0) | 0;
                  }
                  $7_1 = HEAP32[(($6_1 + 204) | 0) >> 2] | 0;
                  if (!$7_1) {
                    break label$3;
                  }
                  $583($9_1 | 0, $7_1 | 0);
                }
                $7_1 = HEAP32[(($6_1 + 204) | 0) >> 2] | 0;
                $10_1 = ($7_1 + $8_1) | 0;
                $11_1 = $571($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
                HEAP32[(($6_1 + 128) | 0) >> 2] = 31;
                $7_1 = $581(($6_1 + 120) | 0 | 0, 0 | 0, ($6_1 + 128) | 0 | 0) | 0;
                label$7: {
                  label$8: {
                    if ((HEAP32[(($6_1 + 204) | 0) >> 2] | 0 | 0) != (($6_1 + 208) | 0 | 0)) {
                      break label$8;
                    }
                    $8_1 = ($6_1 + 128) | 0;
                    $12_1 = ($6_1 + 208) | 0;
                    break label$7;
                  }
                  $8_1 = $1698(($8_1 << 1) | 0 | 0) | 0;
                  if (!$8_1) {
                    break label$3;
                  }
                  $583($7_1 | 0, $8_1 | 0);
                  $12_1 = HEAP32[(($6_1 + 204) | 0) >> 2] | 0;
                }
                $1487(($6_1 + 104) | 0 | 0, $2_1 | 0);
                $584(
                  $12_1 | 0,
                  $11_1 | 0,
                  $10_1 | 0,
                  $8_1 | 0,
                  ($6_1 + 116) | 0 | 0,
                  ($6_1 + 112) | 0 | 0,
                  ($6_1 + 104) | 0 | 0
                );
                $430(($6_1 + 104) | 0 | 0) | 0;
                $2_1 =
                  $85(
                    $1_1 | 0,
                    $8_1 | 0,
                    HEAP32[(($6_1 + 116) | 0) >> 2] | 0 | 0,
                    HEAP32[(($6_1 + 112) | 0) >> 2] | 0 | 0,
                    $2_1 | 0,
                    $3_1 | 0
                  ) | 0;
                $585($7_1 | 0) | 0;
                $585($9_1 | 0) | 0;
                global$0 = ($6_1 + 256) | 0;
                return $2_1 | 0;
              }
              $1570();
              abort();
            }

            function $591($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $6_1 = 0,
                $10_1 = 0,
                $8_1 = 0;
              $5_1 = (global$0 - 96) | 0;
              global$0 = $5_1;
              $10_1 = 0;
              HEAP16[(($5_1 + 92) | 0) >> 1] =
                HEAPU8[(($10_1 + 8486) | 0) >> 0] |
                0 |
                (((HEAPU8[(($10_1 + 8487) | 0) >> 0] | 0) << 8) | 0) |
                0;
              $9_1 = 0;
              HEAP32[(($5_1 + 88) | 0) >> 2] =
                HEAPU8[(($9_1 + 8482) | 0) >> 0] |
                0 |
                (((HEAPU8[(($9_1 + 8483) | 0) >> 0] | 0) << 8) | 0) |
                0 |
                (((HEAPU8[(($9_1 + 8484) | 0) >> 0] | 0) << 16) |
                  0 |
                  (((HEAPU8[(($9_1 + 8485) | 0) >> 0] | 0) << 24) | 0) |
                  0) |
                0;
              $6_1 = $489() | 0;
              HEAP32[$5_1 >> 2] = $4_1;
              $7_1 = $570(($5_1 + 64) | 0 | 0, 20 | 0, $6_1 | 0, ($5_1 + 88) | 0 | 0, $5_1 | 0) | 0;
              $4_1 = ((($5_1 + 64) | 0) + $7_1) | 0;
              $6_1 = $571(($5_1 + 64) | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
              $1487(($5_1 + 16) | 0 | 0, $2_1 | 0);
              $8_1 = $112(($5_1 + 16) | 0 | 0) | 0;
              $430(($5_1 + 16) | 0 | 0) | 0;
              $487($8_1 | 0, ($5_1 + 64) | 0 | 0, $4_1 | 0, ($5_1 + 16) | 0 | 0) | 0;
              $7_1 = ($7_1 + (($5_1 + 16) | 0)) | 0;
              $2_1 =
                $85(
                  $1_1 | 0,
                  ($5_1 + 16) | 0 | 0,
                  (($6_1 | 0) == ($4_1 | 0)
                    ? $7_1
                    : ((($5_1 + 16) | 0) + (($6_1 - (($5_1 + 64) | 0)) | 0)) | 0) | 0,
                  $7_1 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($5_1 + 96) | 0;
              return $2_1 | 0;
            }

            function $592($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 48) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 40) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  if ((($83($2_1 | 0) | 0) & 1) | 0) {
                    break label$2;
                  }
                  $2_1 =
                    FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0](
                      $0_1,
                      $1_1,
                      $2_1,
                      $3_1,
                      $4_1
                    ) | 0;
                  break label$1;
                }
                $1487(($5_1 + 24) | 0 | 0, $2_1 | 0);
                $2_1 = $504(($5_1 + 24) | 0 | 0) | 0;
                $430(($5_1 + 24) | 0 | 0) | 0;
                label$3: {
                  label$4: {
                    if (!$4_1) {
                      break label$4;
                    }
                    $505(($5_1 + 24) | 0 | 0, $2_1 | 0);
                    break label$3;
                  }
                  $506(($5_1 + 24) | 0 | 0, $2_1 | 0);
                }
                HEAP32[(($5_1 + 16) | 0) >> 2] = $593(($5_1 + 24) | 0 | 0) | 0;
                label$5: while (1) {
                  HEAP32[(($5_1 + 8) | 0) >> 2] = $594(($5_1 + 24) | 0 | 0) | 0;
                  label$6: {
                    if ($595(($5_1 + 16) | 0 | 0, ($5_1 + 8) | 0 | 0) | 0) {
                      break label$6;
                    }
                    $2_1 = HEAP32[(($5_1 + 40) | 0) >> 2] | 0;
                    $1560(($5_1 + 24) | 0 | 0) | 0;
                    break label$1;
                  }
                  $2_1 = HEAP32[($596(($5_1 + 16) | 0 | 0) | 0) >> 2] | 0;
                  $598($597(($5_1 + 40) | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
                  $599(($5_1 + 16) | 0 | 0) | 0;
                  $600(($5_1 + 40) | 0 | 0) | 0;
                  continue label$5;
                }
              }
              global$0 = ($5_1 + 48) | 0;
              return $2_1 | 0;
            }

            function $593($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 = HEAP32[($602(($1_1 + 8) | 0 | 0, $601($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $594($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 =
                HEAP32[
                  ($602(
                    ($1_1 + 8) | 0 | 0,
                    (($601($0_1 | 0) | 0) + ((($514($0_1 | 0) | 0) << 2) | 0)) | 0 | 0
                  ) |
                    0) >>
                    2
                ] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $595($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($603($0_1 | 0, $1_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $596($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $597($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $598($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              label$1: {
                $2_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$2_1) {
                  break label$1;
                }
                if (!($606($604($2_1 | 0, $1_1 | 0) | 0 | 0, $605() | 0 | 0) | 0)) {
                  break label$1;
                }
                HEAP32[$0_1 >> 2] = 0;
              }
              return $0_1 | 0;
            }

            function $599($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + 4) | 0;
              return $0_1 | 0;
            }

            function $600($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $601($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                return $832($0_1 | 0) | 0 | 0;
              }
              return $835($0_1 | 0) | 0 | 0;
            }

            function $602($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $603($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($858($0_1 | 0) | 0 | 0) == ($858($1_1 | 0) | 0 | 0)) | 0;
            }

            function $604($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0;
              label$1: {
                $2_1 = HEAP32[(($0_1 + 24) | 0) >> 2] | 0;
                if (($2_1 | 0) != (HEAP32[(($0_1 + 28) | 0) >> 2] | 0 | 0)) {
                  break label$1;
                }
                return (
                  ((((wasm2js_i32$1 = $0_1), (wasm2js_i32$2 = $1392($1_1 | 0) | 0)),
                  (wasm2js_i32$0 = HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0)),
                  FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0
                );
              }
              HEAP32[(($0_1 + 24) | 0) >> 2] = ($2_1 + 4) | 0;
              HEAP32[$2_1 >> 2] = $1_1;
              return $1392($1_1 | 0) | 0 | 0;
            }

            function $605() {
              return -1 | 0;
            }

            function $606($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($0_1 | 0) == ($1_1 | 0)) | 0;
            }

            function $607($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $6_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $7_1 = 0,
                $10_1 = 0,
                $5_1 = 0,
                $12_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              $12_1 = 0;
              HEAP16[(($6_1 + 28) | 0) >> 1] =
                HEAPU8[(($12_1 + 8480) | 0) >> 0] |
                0 |
                (((HEAPU8[(($12_1 + 8481) | 0) >> 0] | 0) << 8) | 0) |
                0;
              $11_1 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] =
                HEAPU8[(($11_1 + 8476) | 0) >> 0] |
                0 |
                (((HEAPU8[(($11_1 + 8477) | 0) >> 0] | 0) << 8) | 0) |
                0 |
                (((HEAPU8[(($11_1 + 8478) | 0) >> 0] | 0) << 16) |
                  0 |
                  (((HEAPU8[(($11_1 + 8479) | 0) >> 0] | 0) << 24) | 0) |
                  0) |
                0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8468 | 0, 1 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -16) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              HEAP32[$6_1 >> 2] = $4_1;
              $4_1 = ((($7_1 >>> 9) | 0) & 1) | 0;
              $7_1 =
                ($8_1 + ($570($8_1 | 0, ($4_1 + 13) | 0 | 0, $10_1 | 0, ($6_1 + 24) | 0 | 0, $6_1 | 0) | 0)) |
                0;
              $10_1 = $571($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
              $4_1 = ($8_1 - (((((($4_1 << 3) | 0) + 107) | 0) & 112) | 0)) | 0;
              global$0 = $4_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $608(
                $8_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                $4_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $609(
                  $1_1 | 0,
                  $4_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $608($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $9_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $14_1 = 0,
                $12_1 = 0,
                $13_1 = 0;
              $7_1 = (global$0 - 16) | 0;
              global$0 = $7_1;
              $8_1 = $503($6_1 | 0) | 0;
              $6_1 = $504($6_1 | 0) | 0;
              $553($7_1 | 0, $6_1 | 0);
              label$1: {
                label$2: {
                  if (!($447($7_1 | 0) | 0)) {
                    break label$2;
                  }
                  $541($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
                  $6_1 = ($3_1 + (((($2_1 - $0_1) | 0) << 2) | 0)) | 0;
                  HEAP32[$5_1 >> 2] = $6_1;
                  break label$1;
                }
                HEAP32[$5_1 >> 2] = $3_1;
                $9_1 = $0_1;
                label$3: {
                  label$4: {
                    $10_1 = HEAPU8[$9_1 >> 0] | 0;
                    switch (($10_1 + -43) | 0 | 0) {
                      case 0:
                      case 2:
                        break label$4;
                      default:
                        break label$3;
                    }
                  }
                  $10_1 = $610($8_1 | 0, ((($10_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 4) | 0;
                  HEAP32[$11_1 >> 2] = $10_1;
                  $9_1 = ($0_1 + 1) | 0;
                }
                label$5: {
                  if ((($2_1 - $9_1) | 0 | 0) < (2 | 0)) {
                    break label$5;
                  }
                  if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
                    break label$5;
                  }
                  if ((HEAPU8[(($9_1 + 1) | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
                    break label$5;
                  }
                  $10_1 = $610($8_1 | 0, 48 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 4) | 0;
                  HEAP32[$11_1 >> 2] = $10_1;
                  $10_1 = $610($8_1 | 0, HEAP8[(($9_1 + 1) | 0) >> 0] | 0 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 4) | 0;
                  HEAP32[$11_1 >> 2] = $10_1;
                  $9_1 = ($9_1 + 2) | 0;
                }
                $573($9_1 | 0, $2_1 | 0);
                $10_1 = 0;
                $12_1 = $552($6_1 | 0) | 0;
                $11_1 = 0;
                $6_1 = $9_1;
                label$6: while (1) {
                  label$7: {
                    if ($6_1 >>> 0 < $2_1 >>> 0) {
                      break label$7;
                    }
                    $611(($3_1 + (((($9_1 - $0_1) | 0) << 2) | 0)) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
                    $6_1 = HEAP32[$5_1 >> 2] | 0;
                    break label$1;
                  }
                  label$8: {
                    if (!(HEAPU8[($456($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
                      break label$8;
                    }
                    if (($10_1 | 0) != (HEAP8[($456($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
                      break label$8;
                    }
                    $10_1 = HEAP32[$5_1 >> 2] | 0;
                    HEAP32[$5_1 >> 2] = ($10_1 + 4) | 0;
                    HEAP32[$10_1 >> 2] = $12_1;
                    $11_1 = ($11_1 + ($11_1 >>> 0 < ((($444($7_1 | 0) | 0) + -1) | 0) >>> 0)) | 0;
                    $10_1 = 0;
                  }
                  $13_1 = $610($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
                  $14_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($14_1 + 4) | 0;
                  HEAP32[$14_1 >> 2] = $13_1;
                  $6_1 = ($6_1 + 1) | 0;
                  $10_1 = ($10_1 + 1) | 0;
                  continue label$6;
                }
              }
              HEAP32[$4_1 >> 2] =
                ($1_1 | 0) == ($2_1 | 0) ? $6_1 : ($3_1 + (((($1_1 - $0_1) | 0) << 2) | 0)) | 0;
              $1540($7_1 | 0) | 0;
              global$0 = ($7_1 + 16) | 0;
            }

            function $609($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $7_1 = 0,
                $9_1 = 0,
                $8_1 = 0,
                $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              label$1: {
                label$2: {
                  if ($0_1) {
                    break label$2;
                  }
                  $7_1 = 0;
                  break label$1;
                }
                $8_1 = $88($4_1 | 0) | 0;
                $7_1 = 0;
                label$3: {
                  $9_1 = ($2_1 - $1_1) | 0;
                  if (($9_1 | 0) < (1 | 0)) {
                    break label$3;
                  }
                  $9_1 = ($9_1 >> 2) | 0;
                  if (($612($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
                    break label$1;
                  }
                }
                label$4: {
                  $7_1 = ((($3_1 - $1_1) | 0) >> 2) | 0;
                  $1_1 = ($8_1 | 0) > ($7_1 | 0) ? ($8_1 - $7_1) | 0 : 0;
                  if (($1_1 | 0) < (1 | 0)) {
                    break label$4;
                  }
                  $7_1 = $613($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
                  $8_1 = $612($0_1 | 0, $614($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
                  $1560($7_1 | 0) | 0;
                  $7_1 = 0;
                  if (($8_1 | 0) != ($1_1 | 0)) {
                    break label$1;
                  }
                }
                label$5: {
                  $1_1 = ($3_1 - $2_1) | 0;
                  if (($1_1 | 0) < (1 | 0)) {
                    break label$5;
                  }
                  $7_1 = 0;
                  $1_1 = ($1_1 >> 2) | 0;
                  if (($612($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
                    break label$1;
                  }
                }
                $92($4_1 | 0, 0 | 0) | 0;
                $7_1 = $0_1;
              }
              global$0 = ($6_1 + 16) | 0;
              return $7_1 | 0;
            }

            function $610($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 44) | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0
              );
            }

            function $611($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $629($0_1 | 0, $1_1 | 0);
            }

            function $612($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 48) | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) |
                0 |
                0
              );
            }

            function $613($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $426($0_1 | 0, ($3_1 + 8) | 0 | 0, $3_1 | 0) | 0;
              $1569($0_1 | 0, $1_1 | 0, $2_1 | 0);
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $614($0_1) {
              $0_1 = $0_1 | 0;
              return $1356($601($0_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $615($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var $6_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $10_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $11_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] = 37;
              HEAP32[(($6_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8470 | 0, 1 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -32) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              i64toi32_i32$0 = $4$hi;
              HEAP32[$6_1 >> 2] = $4_1;
              HEAP32[(($6_1 + 4) | 0) >> 2] = i64toi32_i32$0;
              $7_1 = ((($7_1 >>> 9) | 0) & 1) | 0;
              $10_1 =
                ($8_1 + ($570($8_1 | 0, ($7_1 + 23) | 0 | 0, $10_1 | 0, ($6_1 + 24) | 0 | 0, $6_1 | 0) | 0)) |
                0;
              $11_1 = $571($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
              $7_1 = ($8_1 - (((((($7_1 << 3) | 0) + 187) | 0) & 240) | 0)) | 0;
              global$0 = $7_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $608(
                $8_1 | 0,
                $11_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $609(
                  $1_1 | 0,
                  $7_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $616($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $6_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $7_1 = 0,
                $10_1 = 0,
                $5_1 = 0,
                $12_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              $12_1 = 0;
              HEAP16[(($6_1 + 28) | 0) >> 1] =
                HEAPU8[(($12_1 + 8480) | 0) >> 0] |
                0 |
                (((HEAPU8[(($12_1 + 8481) | 0) >> 0] | 0) << 8) | 0) |
                0;
              $11_1 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] =
                HEAPU8[(($11_1 + 8476) | 0) >> 0] |
                0 |
                (((HEAPU8[(($11_1 + 8477) | 0) >> 0] | 0) << 8) | 0) |
                0 |
                (((HEAPU8[(($11_1 + 8478) | 0) >> 0] | 0) << 16) |
                  0 |
                  (((HEAPU8[(($11_1 + 8479) | 0) >> 0] | 0) << 24) | 0) |
                  0) |
                0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8468 | 0, 0 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -16) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              HEAP32[$6_1 >> 2] = $4_1;
              $7_1 =
                ($8_1 +
                  ($570(
                    $8_1 | 0,
                    ((($7_1 >>> 9) | 0) & 1) | 0 | 12 | 0 | 0,
                    $10_1 | 0,
                    ($6_1 + 24) | 0 | 0,
                    $6_1 | 0
                  ) |
                    0)) |
                0;
              $10_1 = $571($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
              $4_1 = ($8_1 + -96) | 0;
              global$0 = $4_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $608(
                $8_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                $4_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $609(
                  $1_1 | 0,
                  $4_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $617($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var $6_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $10_1 = 0,
                i64toi32_i32$0 = 0,
                $5_1 = 0,
                $11_1 = 0;
              $5_1 = (global$0 - 32) | 0;
              global$0 = $5_1;
              $6_1 = $5_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($6_1 + 24) | 0) >> 2] = 37;
              HEAP32[(($6_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              $569(($6_1 + 24) | 0 | 1 | 0 | 0, 8470 | 0, 0 | 0, $83($2_1 | 0) | 0 | 0);
              $7_1 = $83($2_1 | 0) | 0;
              $8_1 = ($6_1 + -32) | 0;
              global$0 = $8_1;
              $10_1 = $489() | 0;
              i64toi32_i32$0 = $4$hi;
              HEAP32[$6_1 >> 2] = $4_1;
              HEAP32[(($6_1 + 4) | 0) >> 2] = i64toi32_i32$0;
              $7_1 = ((($7_1 >>> 9) | 0) & 1) | 0;
              $10_1 =
                ($8_1 + ($570($8_1 | 0, ($7_1 + 23) | 0 | 0, $10_1 | 0, ($6_1 + 24) | 0 | 0, $6_1 | 0) | 0)) |
                0;
              $11_1 = $571($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
              $7_1 = ($8_1 - (((((($7_1 << 3) | 0) + 187) | 0) & 240) | 0)) | 0;
              global$0 = $7_1;
              $1487(($6_1 + 8) | 0 | 0, $2_1 | 0);
              $608(
                $8_1 | 0,
                $11_1 | 0,
                $10_1 | 0,
                $7_1 | 0,
                ($6_1 + 20) | 0 | 0,
                ($6_1 + 16) | 0 | 0,
                ($6_1 + 8) | 0 | 0
              );
              $430(($6_1 + 8) | 0 | 0) | 0;
              $2_1 =
                $609(
                  $1_1 | 0,
                  $7_1 | 0,
                  HEAP32[(($6_1 + 20) | 0) >> 2] | 0 | 0,
                  HEAP32[(($6_1 + 16) | 0) >> 2] | 0 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($6_1 + 32) | 0;
              return $2_1 | 0;
            }

            function $618($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = +$4_1;
              var $5_1 = 0,
                $7_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $11_1 = 0,
                $10_1 = 0;
              $5_1 = (global$0 - 384) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 376) | 0) >> 2] = 37;
              HEAP32[(($5_1 + 380) | 0) >> 2] = 0;
              $6_1 = $579(($5_1 + 376) | 0 | 1 | 0 | 0, 8473 | 0, $83($2_1 | 0) | 0 | 0) | 0;
              HEAP32[(($5_1 + 332) | 0) >> 2] = ($5_1 + 336) | 0;
              $7_1 = $489() | 0;
              label$1: {
                label$2: {
                  if (!$6_1) {
                    break label$2;
                  }
                  $8_1 = $580($2_1 | 0) | 0;
                  HEAPF64[(($5_1 + 40) | 0) >> 3] = $4_1;
                  HEAP32[(($5_1 + 32) | 0) >> 2] = $8_1;
                  $7_1 =
                    $570(($5_1 + 336) | 0 | 0, 30 | 0, $7_1 | 0, ($5_1 + 376) | 0 | 0, ($5_1 + 32) | 0 | 0) |
                    0;
                  break label$1;
                }
                HEAPF64[(($5_1 + 48) | 0) >> 3] = $4_1;
                $7_1 =
                  $570(($5_1 + 336) | 0 | 0, 30 | 0, $7_1 | 0, ($5_1 + 376) | 0 | 0, ($5_1 + 48) | 0 | 0) | 0;
              }
              HEAP32[(($5_1 + 80) | 0) >> 2] = 31;
              $8_1 = $581(($5_1 + 320) | 0 | 0, 0 | 0, ($5_1 + 80) | 0 | 0) | 0;
              label$3: {
                label$4: {
                  if (($7_1 | 0) < (30 | 0)) {
                    break label$4;
                  }
                  $7_1 = $489() | 0;
                  label$5: {
                    label$6: {
                      if (!$6_1) {
                        break label$6;
                      }
                      $6_1 = $580($2_1 | 0) | 0;
                      HEAPF64[(($5_1 + 8) | 0) >> 3] = $4_1;
                      HEAP32[$5_1 >> 2] = $6_1;
                      $7_1 = $582(($5_1 + 332) | 0 | 0, $7_1 | 0, ($5_1 + 376) | 0 | 0, $5_1 | 0) | 0;
                      break label$5;
                    }
                    HEAPF64[(($5_1 + 16) | 0) >> 3] = $4_1;
                    $7_1 =
                      $582(($5_1 + 332) | 0 | 0, $7_1 | 0, ($5_1 + 376) | 0 | 0, ($5_1 + 16) | 0 | 0) | 0;
                  }
                  $6_1 = HEAP32[(($5_1 + 332) | 0) >> 2] | 0;
                  if (!$6_1) {
                    break label$3;
                  }
                  $583($8_1 | 0, $6_1 | 0);
                }
                $6_1 = HEAP32[(($5_1 + 332) | 0) >> 2] | 0;
                $9_1 = ($6_1 + $7_1) | 0;
                $10_1 = $571($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
                HEAP32[(($5_1 + 80) | 0) >> 2] = 31;
                $6_1 = $619(($5_1 + 72) | 0 | 0, 0 | 0, ($5_1 + 80) | 0 | 0) | 0;
                label$7: {
                  label$8: {
                    if ((HEAP32[(($5_1 + 332) | 0) >> 2] | 0 | 0) != (($5_1 + 336) | 0 | 0)) {
                      break label$8;
                    }
                    $7_1 = ($5_1 + 80) | 0;
                    $11_1 = ($5_1 + 336) | 0;
                    break label$7;
                  }
                  $7_1 = $1698(($7_1 << 3) | 0 | 0) | 0;
                  if (!$7_1) {
                    break label$3;
                  }
                  $620($6_1 | 0, $7_1 | 0);
                  $11_1 = HEAP32[(($5_1 + 332) | 0) >> 2] | 0;
                }
                $1487(($5_1 + 56) | 0 | 0, $2_1 | 0);
                $621(
                  $11_1 | 0,
                  $10_1 | 0,
                  $9_1 | 0,
                  $7_1 | 0,
                  ($5_1 + 68) | 0 | 0,
                  ($5_1 + 64) | 0 | 0,
                  ($5_1 + 56) | 0 | 0
                );
                $430(($5_1 + 56) | 0 | 0) | 0;
                $2_1 =
                  $609(
                    $1_1 | 0,
                    $7_1 | 0,
                    HEAP32[(($5_1 + 68) | 0) >> 2] | 0 | 0,
                    HEAP32[(($5_1 + 64) | 0) >> 2] | 0 | 0,
                    $2_1 | 0,
                    $3_1 | 0
                  ) | 0;
                $622($6_1 | 0) | 0;
                $585($8_1 | 0) | 0;
                global$0 = ($5_1 + 384) | 0;
                return $2_1 | 0;
              }
              $1570();
              abort();
            }

            function $619($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $1_1;
              $623($0_1 | 0, ($3_1 + 12) | 0 | 0, $586($2_1 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $620($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[($624($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($624($0_1 | 0) | 0) >> 2] = $1_1;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[($625($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
              }
            }

            function $621($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $11_1 = 0,
                $10_1 = 0,
                $12_1 = 0,
                $7_1 = 0,
                $14_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $16_1 = 0,
                $13_1 = 0,
                $15_1 = 0;
              $7_1 = (global$0 - 16) | 0;
              global$0 = $7_1;
              $8_1 = $503($6_1 | 0) | 0;
              $9_1 = $504($6_1 | 0) | 0;
              $553($7_1 | 0, $9_1 | 0);
              HEAP32[$5_1 >> 2] = $3_1;
              $10_1 = $0_1;
              label$1: {
                label$2: {
                  $6_1 = HEAPU8[$10_1 >> 0] | 0;
                  switch (($6_1 + -43) | 0 | 0) {
                    case 0:
                    case 2:
                      break label$2;
                    default:
                      break label$1;
                  }
                }
                $6_1 = $610($8_1 | 0, ((($6_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                $11_1 = HEAP32[$5_1 >> 2] | 0;
                HEAP32[$5_1 >> 2] = ($11_1 + 4) | 0;
                HEAP32[$11_1 >> 2] = $6_1;
                $10_1 = ($0_1 + 1) | 0;
              }
              $6_1 = $10_1;
              label$3: {
                label$4: {
                  if ((($2_1 - $6_1) | 0 | 0) <= (1 | 0)) {
                    break label$4;
                  }
                  $6_1 = $10_1;
                  if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
                    break label$4;
                  }
                  $6_1 = $10_1;
                  if ((HEAPU8[(($6_1 + 1) | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
                    break label$4;
                  }
                  $6_1 = $610($8_1 | 0, 48 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 4) | 0;
                  HEAP32[$11_1 >> 2] = $6_1;
                  $6_1 = $610($8_1 | 0, HEAP8[(($10_1 + 1) | 0) >> 0] | 0 | 0) | 0;
                  $11_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($11_1 + 4) | 0;
                  HEAP32[$11_1 >> 2] = $6_1;
                  $10_1 = ($10_1 + 2) | 0;
                  $6_1 = $10_1;
                  label$5: while (1) {
                    if ($6_1 >>> 0 >= $2_1 >>> 0) {
                      break label$3;
                    }
                    if (!($368(HEAP8[$6_1 >> 0] | 0 | 0, $489() | 0 | 0) | 0)) {
                      break label$3;
                    }
                    $6_1 = ($6_1 + 1) | 0;
                    continue label$5;
                  }
                }
                label$6: while (1) {
                  if ($6_1 >>> 0 >= $2_1 >>> 0) {
                    break label$3;
                  }
                  if (!($302(HEAP8[$6_1 >> 0] | 0 | 0, $489() | 0 | 0) | 0)) {
                    break label$3;
                  }
                  $6_1 = ($6_1 + 1) | 0;
                  continue label$6;
                }
              }
              label$7: {
                label$8: {
                  if (!($447($7_1 | 0) | 0)) {
                    break label$8;
                  }
                  $541($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
                  HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) + (((($6_1 - $10_1) | 0) << 2) | 0)) | 0;
                  break label$7;
                }
                $573($10_1 | 0, $6_1 | 0);
                $12_1 = 0;
                $13_1 = $552($9_1 | 0) | 0;
                $14_1 = 0;
                $11_1 = $10_1;
                label$9: while (1) {
                  label$10: {
                    if ($11_1 >>> 0 < $6_1 >>> 0) {
                      break label$10;
                    }
                    $611(($3_1 + (((($10_1 - $0_1) | 0) << 2) | 0)) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
                    break label$7;
                  }
                  label$11: {
                    if ((HEAP8[($456($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
                      break label$11;
                    }
                    if (($12_1 | 0) != (HEAP8[($456($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
                      break label$11;
                    }
                    $12_1 = HEAP32[$5_1 >> 2] | 0;
                    HEAP32[$5_1 >> 2] = ($12_1 + 4) | 0;
                    HEAP32[$12_1 >> 2] = $13_1;
                    $14_1 = ($14_1 + ($14_1 >>> 0 < ((($444($7_1 | 0) | 0) + -1) | 0) >>> 0)) | 0;
                    $12_1 = 0;
                  }
                  $15_1 = $610($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
                  $16_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($16_1 + 4) | 0;
                  HEAP32[$16_1 >> 2] = $15_1;
                  $11_1 = ($11_1 + 1) | 0;
                  $12_1 = ($12_1 + 1) | 0;
                  continue label$9;
                }
              }
              label$12: {
                label$13: {
                  label$14: while (1) {
                    if ($6_1 >>> 0 >= $2_1 >>> 0) {
                      break label$13;
                    }
                    label$15: {
                      $11_1 = HEAPU8[$6_1 >> 0] | 0;
                      if (($11_1 | 0) == (46 | 0)) {
                        break label$15;
                      }
                      $11_1 = $610($8_1 | 0, ((($11_1 << 24) | 0) >> 24) | 0 | 0) | 0;
                      $12_1 = HEAP32[$5_1 >> 2] | 0;
                      HEAP32[$5_1 >> 2] = ($12_1 + 4) | 0;
                      HEAP32[$12_1 >> 2] = $11_1;
                      $6_1 = ($6_1 + 1) | 0;
                      continue label$14;
                    }
                    break label$14;
                  }
                  $12_1 = $551($9_1 | 0) | 0;
                  $14_1 = HEAP32[$5_1 >> 2] | 0;
                  $11_1 = ($14_1 + 4) | 0;
                  HEAP32[$5_1 >> 2] = $11_1;
                  HEAP32[$14_1 >> 2] = $12_1;
                  $6_1 = ($6_1 + 1) | 0;
                  break label$12;
                }
                $11_1 = HEAP32[$5_1 >> 2] | 0;
              }
              $541($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
              $6_1 = ((HEAP32[$5_1 >> 2] | 0) + (((($2_1 - $6_1) | 0) << 2) | 0)) | 0;
              HEAP32[$5_1 >> 2] = $6_1;
              HEAP32[$4_1 >> 2] =
                ($1_1 | 0) == ($2_1 | 0) ? $6_1 : ($3_1 + (((($1_1 - $0_1) | 0) << 2) | 0)) | 0;
              $1540($7_1 | 0) | 0;
              global$0 = ($7_1 + 16) | 0;
            }

            function $622($0_1) {
              $0_1 = $0_1 | 0;
              $620($0_1 | 0, 0 | 0);
              return $0_1 | 0;
            }

            function $623($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1397($0_1 | 0, $1396($1_1 | 0) | 0 | 0) | 0;
              $1366(($0_1 + 4) | 0 | 0, $1365($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $624($0_1) {
              $0_1 = $0_1 | 0;
              return $1398($0_1 | 0) | 0 | 0;
            }

            function $625($0_1) {
              $0_1 = $0_1 | 0;
              return $1368(($0_1 + 4) | 0 | 0) | 0 | 0;
            }

            function $626($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              $5_1 = $5_1 | 0;
              $5$hi = $5$hi | 0;
              var $6_1 = 0,
                $8_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $12_1 = 0,
                $11_1 = 0;
              $6_1 = (global$0 - 432) | 0;
              global$0 = $6_1;
              i64toi32_i32$1 = $6_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($6_1 + 424) | 0) >> 2] = 37;
              HEAP32[(($6_1 + 428) | 0) >> 2] = i64toi32_i32$0;
              $7_1 = $579(($6_1 + 424) | 0 | 1 | 0 | 0, 8474 | 0, $83($2_1 | 0) | 0 | 0) | 0;
              HEAP32[(($6_1 + 380) | 0) >> 2] = ($6_1 + 384) | 0;
              $8_1 = $489() | 0;
              label$1: {
                label$2: {
                  if (!$7_1) {
                    break label$2;
                  }
                  $9_1 = $580($2_1 | 0) | 0;
                  i64toi32_i32$0 = $5$hi;
                  i64toi32_i32$1 = ($6_1 + 72) | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
                  HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$1 = ($6_1 + 64) | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
                  HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  HEAP32[(($6_1 + 48) | 0) >> 2] = $9_1;
                  $8_1 =
                    $570(($6_1 + 384) | 0 | 0, 30 | 0, $8_1 | 0, ($6_1 + 424) | 0 | 0, ($6_1 + 48) | 0 | 0) |
                    0;
                  break label$1;
                }
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$1 = $6_1;
                HEAP32[(($6_1 + 80) | 0) >> 2] = $4_1;
                HEAP32[(($6_1 + 84) | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$0 = $5$hi;
                i64toi32_i32$1 = $6_1;
                HEAP32[(($6_1 + 88) | 0) >> 2] = $5_1;
                HEAP32[(($6_1 + 92) | 0) >> 2] = i64toi32_i32$0;
                $8_1 =
                  $570(($6_1 + 384) | 0 | 0, 30 | 0, $8_1 | 0, ($6_1 + 424) | 0 | 0, ($6_1 + 80) | 0 | 0) | 0;
              }
              HEAP32[(($6_1 + 128) | 0) >> 2] = 31;
              $9_1 = $581(($6_1 + 368) | 0 | 0, 0 | 0, ($6_1 + 128) | 0 | 0) | 0;
              label$3: {
                label$4: {
                  if (($8_1 | 0) < (30 | 0)) {
                    break label$4;
                  }
                  $8_1 = $489() | 0;
                  label$5: {
                    label$6: {
                      if (!$7_1) {
                        break label$6;
                      }
                      $7_1 = $580($2_1 | 0) | 0;
                      i64toi32_i32$0 = $5$hi;
                      i64toi32_i32$1 = ($6_1 + 24) | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$0 = $4$hi;
                      i64toi32_i32$1 = ($6_1 + 16) | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
                      HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[$6_1 >> 2] = $7_1;
                      $8_1 = $582(($6_1 + 380) | 0 | 0, $8_1 | 0, ($6_1 + 424) | 0 | 0, $6_1 | 0) | 0;
                      break label$5;
                    }
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$1 = $6_1;
                    HEAP32[(($6_1 + 32) | 0) >> 2] = $4_1;
                    HEAP32[(($6_1 + 36) | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$0 = $5$hi;
                    i64toi32_i32$1 = $6_1;
                    HEAP32[(($6_1 + 40) | 0) >> 2] = $5_1;
                    HEAP32[(($6_1 + 44) | 0) >> 2] = i64toi32_i32$0;
                    $8_1 =
                      $582(($6_1 + 380) | 0 | 0, $8_1 | 0, ($6_1 + 424) | 0 | 0, ($6_1 + 32) | 0 | 0) | 0;
                  }
                  $7_1 = HEAP32[(($6_1 + 380) | 0) >> 2] | 0;
                  if (!$7_1) {
                    break label$3;
                  }
                  $583($9_1 | 0, $7_1 | 0);
                }
                $7_1 = HEAP32[(($6_1 + 380) | 0) >> 2] | 0;
                $10_1 = ($7_1 + $8_1) | 0;
                $11_1 = $571($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
                HEAP32[(($6_1 + 128) | 0) >> 2] = 31;
                $7_1 = $619(($6_1 + 120) | 0 | 0, 0 | 0, ($6_1 + 128) | 0 | 0) | 0;
                label$7: {
                  label$8: {
                    if ((HEAP32[(($6_1 + 380) | 0) >> 2] | 0 | 0) != (($6_1 + 384) | 0 | 0)) {
                      break label$8;
                    }
                    $8_1 = ($6_1 + 128) | 0;
                    $12_1 = ($6_1 + 384) | 0;
                    break label$7;
                  }
                  $8_1 = $1698(($8_1 << 3) | 0 | 0) | 0;
                  if (!$8_1) {
                    break label$3;
                  }
                  $620($7_1 | 0, $8_1 | 0);
                  $12_1 = HEAP32[(($6_1 + 380) | 0) >> 2] | 0;
                }
                $1487(($6_1 + 104) | 0 | 0, $2_1 | 0);
                $621(
                  $12_1 | 0,
                  $11_1 | 0,
                  $10_1 | 0,
                  $8_1 | 0,
                  ($6_1 + 116) | 0 | 0,
                  ($6_1 + 112) | 0 | 0,
                  ($6_1 + 104) | 0 | 0
                );
                $430(($6_1 + 104) | 0 | 0) | 0;
                $2_1 =
                  $609(
                    $1_1 | 0,
                    $8_1 | 0,
                    HEAP32[(($6_1 + 116) | 0) >> 2] | 0 | 0,
                    HEAP32[(($6_1 + 112) | 0) >> 2] | 0 | 0,
                    $2_1 | 0,
                    $3_1 | 0
                  ) | 0;
                $622($7_1 | 0) | 0;
                $585($9_1 | 0) | 0;
                global$0 = ($6_1 + 432) | 0;
                return $2_1 | 0;
              }
              $1570();
              abort();
            }

            function $627($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $6_1 = 0,
                $10_1 = 0,
                $8_1 = 0;
              $5_1 = (global$0 - 208) | 0;
              global$0 = $5_1;
              $10_1 = 0;
              HEAP16[(($5_1 + 204) | 0) >> 1] =
                HEAPU8[(($10_1 + 8486) | 0) >> 0] |
                0 |
                (((HEAPU8[(($10_1 + 8487) | 0) >> 0] | 0) << 8) | 0) |
                0;
              $9_1 = 0;
              HEAP32[(($5_1 + 200) | 0) >> 2] =
                HEAPU8[(($9_1 + 8482) | 0) >> 0] |
                0 |
                (((HEAPU8[(($9_1 + 8483) | 0) >> 0] | 0) << 8) | 0) |
                0 |
                (((HEAPU8[(($9_1 + 8484) | 0) >> 0] | 0) << 16) |
                  0 |
                  (((HEAPU8[(($9_1 + 8485) | 0) >> 0] | 0) << 24) | 0) |
                  0) |
                0;
              $6_1 = $489() | 0;
              HEAP32[$5_1 >> 2] = $4_1;
              $7_1 = $570(($5_1 + 176) | 0 | 0, 20 | 0, $6_1 | 0, ($5_1 + 200) | 0 | 0, $5_1 | 0) | 0;
              $4_1 = ((($5_1 + 176) | 0) + $7_1) | 0;
              $6_1 = $571(($5_1 + 176) | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
              $1487(($5_1 + 16) | 0 | 0, $2_1 | 0);
              $8_1 = $503(($5_1 + 16) | 0 | 0) | 0;
              $430(($5_1 + 16) | 0 | 0) | 0;
              $541($8_1 | 0, ($5_1 + 176) | 0 | 0, $4_1 | 0, ($5_1 + 16) | 0 | 0) | 0;
              $7_1 = ((($5_1 + 16) | 0) + (($7_1 << 2) | 0)) | 0;
              $2_1 =
                $609(
                  $1_1 | 0,
                  ($5_1 + 16) | 0 | 0,
                  (($6_1 | 0) == ($4_1 | 0)
                    ? $7_1
                    : ((($5_1 + 16) | 0) + (((($6_1 - (($5_1 + 176) | 0)) | 0) << 2) | 0)) | 0) | 0,
                  $7_1 | 0,
                  $2_1 | 0,
                  $3_1 | 0
                ) | 0;
              global$0 = ($5_1 + 208) | 0;
              return $2_1 | 0;
            }

            function $628($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (($0_1 | 0) == ($1_1 | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $1_1 = ($1_1 + -1) | 0;
                  if ($0_1 >>> 0 >= $1_1 >>> 0) {
                    break label$1;
                  }
                  $1399($0_1 | 0, $1_1 | 0);
                  $0_1 = ($0_1 + 1) | 0;
                  continue label$2;
                }
              }
            }

            function $629($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (($0_1 | 0) == ($1_1 | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $1_1 = ($1_1 + -4) | 0;
                  if ($0_1 >>> 0 >= $1_1 >>> 0) {
                    break label$1;
                  }
                  $1400($0_1 | 0, $1_1 | 0);
                  $0_1 = ($0_1 + 4) | 0;
                  continue label$2;
                }
              }
            }

            function $630($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0,
                $10_1 = 0,
                $9_1 = 0,
                $11_1 = 0;
              $8_1 = (global$0 - 32) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 16) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 24) | 0) >> 2] = $1_1;
              $1487(($8_1 + 8) | 0 | 0, $3_1 | 0);
              $1_1 = $112(($8_1 + 8) | 0 | 0) | 0;
              $430(($8_1 + 8) | 0 | 0) | 0;
              HEAP32[$4_1 >> 2] = 0;
              $2_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($6_1 | 0) == ($7_1 | 0)) {
                    break label$1;
                  }
                  if ($2_1) {
                    break label$1;
                  }
                  label$3: {
                    if ($440(($8_1 + 24) | 0 | 0, ($8_1 + 16) | 0 | 0) | 0) {
                      break label$3;
                    }
                    label$4: {
                      label$5: {
                        if (($631($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
                          break label$5;
                        }
                        $2_1 = ($6_1 + 1) | 0;
                        if (($2_1 | 0) == ($7_1 | 0)) {
                          break label$3;
                        }
                        $9_1 = 0;
                        label$6: {
                          label$7: {
                            $10_1 = $631($1_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, 0 | 0) | 0;
                            if (($10_1 | 0) == (69 | 0)) {
                              break label$7;
                            }
                            if ((($10_1 & 255) | 0 | 0) == (48 | 0)) {
                              break label$7;
                            }
                            $11_1 = $10_1;
                            $2_1 = $6_1;
                            break label$6;
                          }
                          $6_1 = ($6_1 + 2) | 0;
                          if (($6_1 | 0) == ($7_1 | 0)) {
                            break label$3;
                          }
                          $11_1 = $631($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
                          $9_1 = $10_1;
                        }
                        HEAP32[(($8_1 + 24) | 0) >> 2] =
                          FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0](
                            $0_1,
                            HEAP32[(($8_1 + 24) | 0) >> 2] | 0,
                            HEAP32[(($8_1 + 16) | 0) >> 2] | 0,
                            $3_1,
                            $4_1,
                            $5_1,
                            $11_1,
                            $9_1
                          ) | 0;
                        $6_1 = ($2_1 + 2) | 0;
                        break label$4;
                      }
                      label$8: {
                        if (!($632($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
                          break label$8;
                        }
                        label$9: {
                          label$10: while (1) {
                            label$11: {
                              $6_1 = ($6_1 + 1) | 0;
                              if (($6_1 | 0) != ($7_1 | 0)) {
                                break label$11;
                              }
                              $6_1 = $7_1;
                              break label$9;
                            }
                            if ($632($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
                              continue label$10;
                            }
                            break label$10;
                          }
                        }
                        label$12: while (1) {
                          if (!($439(($8_1 + 24) | 0 | 0, ($8_1 + 16) | 0 | 0) | 0)) {
                            break label$4;
                          }
                          if (!($632($1_1 | 0, 8192 | 0, $441(($8_1 + 24) | 0 | 0) | 0 | 0) | 0)) {
                            break label$4;
                          }
                          $443(($8_1 + 24) | 0 | 0) | 0;
                          continue label$12;
                        }
                      }
                      label$13: {
                        if (
                          ($442($1_1 | 0, $441(($8_1 + 24) | 0 | 0) | 0 | 0) | 0 | 0) !=
                          ($442($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)
                        ) {
                          break label$13;
                        }
                        $6_1 = ($6_1 + 1) | 0;
                        $443(($8_1 + 24) | 0 | 0) | 0;
                        break label$4;
                      }
                      HEAP32[$4_1 >> 2] = 4;
                    }
                    $2_1 = HEAP32[$4_1 >> 2] | 0;
                    continue label$2;
                  }
                  break label$2;
                }
                HEAP32[$4_1 >> 2] = 4;
              }
              label$14: {
                if (!($440(($8_1 + 24) | 0 | 0, ($8_1 + 16) | 0 | 0) | 0)) {
                  break label$14;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $6_1 = HEAP32[(($8_1 + 24) | 0) >> 2] | 0;
              global$0 = ($8_1 + 32) | 0;
              return $6_1 | 0;
            }

            function $631($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) |
                0 |
                0
              );
            }

            function $632($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = 0;
              label$1: {
                if (($2_1 | 0) < (0 | 0)) {
                  break label$1;
                }
                $3_1 =
                  (((HEAPU16[
                    (((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + (((($2_1 & 255) | 0) << 1) | 0)) | 0) >> 1
                  ] |
                    0) &
                    $1_1) |
                    0 |
                    0) !=
                  (0 | 0);
              }
              return $3_1 | 0;
            }

            function $633($0_1) {
              $0_1 = $0_1 | 0;
              return 2 | 0;
            }

            function $634($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = 624576549;
              HEAP32[(($6_1 + 12) | 0) >> 2] = 1394948685;
              $0_1 =
                $630(
                  $0_1 | 0,
                  $1_1 | 0,
                  $2_1 | 0,
                  $3_1 | 0,
                  $4_1 | 0,
                  $5_1 | 0,
                  ($6_1 + 8) | 0 | 0,
                  ($6_1 + 16) | 0 | 0
                ) | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $635($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 =
                FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                  ($0_1 + 8) | 0
                ) | 0;
              return (
                $630(
                  $0_1 | 0,
                  $1_1 | 0,
                  $2_1 | 0,
                  $3_1 | 0,
                  $4_1 | 0,
                  $5_1 | 0,
                  $91($6_1 | 0) | 0 | 0,
                  (($91($6_1 | 0) | 0) + ($444($6_1 | 0) | 0)) | 0 | 0
                ) |
                0 |
                0
              );
            }

            function $636($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = $1_1;
              $1487($6_1 | 0, $3_1 | 0);
              $3_1 = $112($6_1 | 0) | 0;
              $430($6_1 | 0) | 0;
              $637($0_1 | 0, ($5_1 + 24) | 0 | 0, ($6_1 + 8) | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
              $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $637($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                $0_1 =
                  FUNCTION_TABLE[HEAP32[(HEAP32[(($0_1 + 8) | 0) >> 2] | 0) >> 2] | 0 | 0](($0_1 + 8) | 0) |
                  0;
                $0_1 =
                  (($434($2_1 | 0, $3_1 | 0, $0_1 | 0, ($0_1 + 168) | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) -
                    $0_1) |
                  0;
                if (($0_1 | 0) > (167 | 0)) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ((($0_1 | 0) / (12 | 0)) | 0 | 0) % (7 | 0) | 0;
              }
            }

            function $638($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = $1_1;
              $1487($6_1 | 0, $3_1 | 0);
              $3_1 = $112($6_1 | 0) | 0;
              $430($6_1 | 0) | 0;
              $639($0_1 | 0, ($5_1 + 16) | 0 | 0, ($6_1 + 8) | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
              $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $639($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                $0_1 =
                  FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 4) | 0) >> 2] | 0 | 0](
                    ($0_1 + 8) | 0
                  ) | 0;
                $0_1 =
                  (($434($2_1 | 0, $3_1 | 0, $0_1 | 0, ($0_1 + 288) | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) -
                    $0_1) |
                  0;
                if (($0_1 | 0) > (287 | 0)) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ((($0_1 | 0) / (12 | 0)) | 0 | 0) % (12 | 0) | 0;
              }
            }

            function $640($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = $1_1;
              $1487($6_1 | 0, $3_1 | 0);
              $3_1 = $112($6_1 | 0) | 0;
              $430($6_1 | 0) | 0;
              $641($0_1 | 0, ($5_1 + 20) | 0 | 0, ($6_1 + 8) | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
              $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $641($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
              label$1: {
                if (((HEAPU8[$4_1 >> 0] | 0) & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] =
                  ((($2_1 | 0) < (69 | 0)
                    ? ($2_1 + 2e3) | 0
                    : ($2_1 | 0) < (100 | 0)
                    ? ($2_1 + 1900) | 0
                    : $2_1) +
                    -1900) |
                  0;
              }
            }

            function $642($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  if (!($440($0_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                    break label$2;
                  }
                  HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
                  $1_1 = 0;
                  break label$1;
                }
                label$3: {
                  $1_1 = $441($0_1 | 0) | 0;
                  if ($632($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
                    break label$3;
                  }
                  HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
                  $1_1 = 0;
                  break label$1;
                }
                $1_1 = $631($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
                label$4: {
                  label$5: while (1) {
                    $443($0_1 | 0) | 0;
                    $1_1 = ($1_1 + -48) | 0;
                    $6_1 = $439($0_1 | 0, ($5_1 + 8) | 0 | 0) | 0;
                    if (($4_1 | 0) < (2 | 0)) {
                      break label$4;
                    }
                    if (!$6_1) {
                      break label$4;
                    }
                    $6_1 = $441($0_1 | 0) | 0;
                    if (!($632($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
                      break label$1;
                    }
                    $4_1 = ($4_1 + -1) | 0;
                    $1_1 = (Math_imul($1_1, 10) + ($631($3_1 | 0, $6_1 | 0, 0 | 0) | 0)) | 0;
                    continue label$5;
                  }
                }
                if (!($440($0_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                  break label$1;
                }
                HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
              }
              global$0 = ($5_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $643($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0,
                $9_1 = 0,
                $13_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $14_1 = 0,
                $15_1 = 0,
                $16_1 = 0,
                $156_1 = 0;
              $8_1 = (global$0 - 32) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[$4_1 >> 2] = 0;
              $1487(($8_1 + 8) | 0 | 0, $3_1 | 0);
              $9_1 = $112(($8_1 + 8) | 0 | 0) | 0;
              $430(($8_1 + 8) | 0 | 0) | 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      switch (($6_1 + -65) | 0 | 0) {
                        case 0:
                        case 32:
                          $637(
                            $0_1 | 0,
                            ($5_1 + 24) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 1:
                        case 33:
                        case 39:
                          $639(
                            $0_1 | 0,
                            ($5_1 + 16) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 34:
                          $1_1 =
                            FUNCTION_TABLE[
                              HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 12) | 0) >> 2] | 0 | 0
                            ](($0_1 + 8) | 0) | 0;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              HEAP32[(($8_1 + 24) | 0) >> 2] | 0 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $91($1_1 | 0) | 0 | 0,
                              (($91($1_1 | 0) | 0) + ($444($1_1 | 0) | 0)) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 35:
                        case 36:
                          $644(
                            $0_1 | 0,
                            ($5_1 + 12) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 3:
                          i64toi32_i32$1 = $8_1;
                          i64toi32_i32$0 = 2032480100;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = 623865125;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              ($8_1 + 8) | 0 | 0,
                              ($8_1 + 16) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 5:
                          i64toi32_i32$1 = $8_1;
                          i64toi32_i32$0 = 1680158061;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = 623728933;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              ($8_1 + 8) | 0 | 0,
                              ($8_1 + 16) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 7:
                          $645(
                            $0_1 | 0,
                            ($5_1 + 8) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 8:
                          $646(
                            $0_1 | 0,
                            ($5_1 + 8) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 41:
                          $647(
                            $0_1 | 0,
                            ($5_1 + 28) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 44:
                          $648(
                            $0_1 | 0,
                            ($5_1 + 16) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 12:
                          $649(
                            $0_1 | 0,
                            ($5_1 + 4) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 45:
                        case 51:
                          $650($0_1 | 0, ($8_1 + 24) | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
                          break label$2;
                        case 47:
                          $651(
                            $0_1 | 0,
                            ($5_1 + 8) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 49:
                          $14_1 = 0;
                          $15_1 =
                            HEAPU8[(($14_1 + 8495) | 0) >> 0] |
                            0 |
                            (((HEAPU8[(($14_1 + 8496) | 0) >> 0] | 0) << 8) | 0) |
                            0 |
                            (((HEAPU8[(($14_1 + 8497) | 0) >> 0] | 0) << 16) |
                              0 |
                              (((HEAPU8[(($14_1 + 8498) | 0) >> 0] | 0) << 24) | 0) |
                              0) |
                            0;
                          HEAP8[(($8_1 + 15) | 0) >> 0] = $15_1;
                          HEAP8[(($8_1 + 16) | 0) >> 0] = ($15_1 >>> 8) | 0;
                          HEAP8[(($8_1 + 17) | 0) >> 0] = ($15_1 >>> 16) | 0;
                          HEAP8[(($8_1 + 18) | 0) >> 0] = ($15_1 >>> 24) | 0;
                          $13_1 = 0;
                          i64toi32_i32$0 =
                            HEAPU8[(($13_1 + 8488) | 0) >> 0] |
                            0 |
                            (((HEAPU8[(($13_1 + 8489) | 0) >> 0] | 0) << 8) | 0) |
                            0 |
                            (((HEAPU8[(($13_1 + 8490) | 0) >> 0] | 0) << 16) |
                              0 |
                              (((HEAPU8[(($13_1 + 8491) | 0) >> 0] | 0) << 24) | 0) |
                              0) |
                            0;
                          i64toi32_i32$1 =
                            HEAPU8[(($13_1 + 8492) | 0) >> 0] |
                            0 |
                            (((HEAPU8[(($13_1 + 8493) | 0) >> 0] | 0) << 8) | 0) |
                            0 |
                            (((HEAPU8[(($13_1 + 8494) | 0) >> 0] | 0) << 16) |
                              0 |
                              (((HEAPU8[(($13_1 + 8495) | 0) >> 0] | 0) << 24) | 0) |
                              0) |
                            0;
                          $156_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = $8_1;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = $156_1;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              ($8_1 + 8) | 0 | 0,
                              ($8_1 + 19) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 17:
                          HEAP8[(($8_1 + 12) | 0) >> 0] = HEAPU8[((0 + 8503) | 0) >> 0] | 0;
                          $16_1 = 0;
                          HEAP32[(($8_1 + 8) | 0) >> 2] =
                            HEAPU8[(($16_1 + 8499) | 0) >> 0] |
                            0 |
                            (((HEAPU8[(($16_1 + 8500) | 0) >> 0] | 0) << 8) | 0) |
                            0 |
                            (((HEAPU8[(($16_1 + 8501) | 0) >> 0] | 0) << 16) |
                              0 |
                              (((HEAPU8[(($16_1 + 8502) | 0) >> 0] | 0) << 24) | 0) |
                              0) |
                            0;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              ($8_1 + 8) | 0 | 0,
                              ($8_1 + 13) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 18:
                          $652($0_1 | 0, $5_1 | 0, ($8_1 + 24) | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
                          break label$2;
                        case 19:
                          i64toi32_i32$0 = $8_1;
                          i64toi32_i32$1 = 1394948685;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = 624576549;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              ($8_1 + 8) | 0 | 0,
                              ($8_1 + 16) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 54:
                          $653(
                            $0_1 | 0,
                            ($5_1 + 24) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 55:
                          $4_1 =
                            FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                              $0_1,
                              $1_1,
                              $2_1,
                              $3_1,
                              $4_1,
                              $5_1
                            ) | 0;
                          break label$1;
                        case 23:
                          $1_1 =
                            FUNCTION_TABLE[
                              HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 24) | 0) >> 2] | 0 | 0
                            ](($0_1 + 8) | 0) | 0;
                          HEAP32[(($8_1 + 24) | 0) >> 2] =
                            $630(
                              $0_1 | 0,
                              HEAP32[(($8_1 + 24) | 0) >> 2] | 0 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $91($1_1 | 0) | 0 | 0,
                              (($91($1_1 | 0) | 0) + ($444($1_1 | 0) | 0)) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 56:
                          $641(
                            $0_1 | 0,
                            ($5_1 + 20) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 24:
                          $654(
                            $0_1 | 0,
                            ($5_1 + 20) | 0 | 0,
                            ($8_1 + 24) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        default:
                          if (($6_1 | 0) == (37 | 0)) {
                            break label$3;
                          }
                          break;
                        case 2:
                        case 4:
                        case 6:
                        case 9:
                        case 10:
                        case 11:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 20:
                        case 21:
                        case 22:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 37:
                        case 38:
                        case 40:
                        case 42:
                        case 43:
                        case 46:
                        case 48:
                        case 50:
                        case 52:
                        case 53:
                          break label$4;
                      }
                    }
                    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
                    break label$2;
                  }
                  $655($0_1 | 0, ($8_1 + 24) | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
                }
                $4_1 = HEAP32[(($8_1 + 24) | 0) >> 2] | 0;
              }
              global$0 = ($8_1 + 32) | 0;
              return $4_1 | 0;
            }

            function $644($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if ((($2_1 + -1) | 0) >>> 0 > 30 >>> 0) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $645($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (23 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $646($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if ((($2_1 + -1) | 0) >>> 0 > 11 >>> 0) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $647($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (365 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $648($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (12 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ($2_1 + -1) | 0;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $649($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (59 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $650($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $2_1;
              label$1: {
                label$2: while (1) {
                  if (!($439($1_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  if (!($632($4_1 | 0, 8192 | 0, $441($1_1 | 0) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  $443($1_1 | 0) | 0;
                  continue label$2;
                }
              }
              label$3: {
                if (!($440($1_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                  break label$3;
                }
                HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
              }
              global$0 = ($5_1 + 16) | 0;
            }

            function $651($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                $0_1 =
                  FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 8) | 0) >> 2] | 0 | 0](
                    ($0_1 + 8) | 0
                  ) | 0;
                if (($444($0_1 | 0) | 0 | 0) != ((0 - ($444(($0_1 + 12) | 0 | 0) | 0)) | 0 | 0)) {
                  break label$1;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
                return;
              }
              $0_1 =
                (($434($2_1 | 0, $3_1 | 0, $0_1 | 0, ($0_1 + 24) | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) -
                  $0_1) |
                0;
              label$2: {
                $4_1 = HEAP32[$1_1 >> 2] | 0;
                if (($4_1 | 0) != (12 | 0)) {
                  break label$2;
                }
                if ($0_1) {
                  break label$2;
                }
                HEAP32[$1_1 >> 2] = 0;
                return;
              }
              label$3: {
                if (($4_1 | 0) > (11 | 0)) {
                  break label$3;
                }
                if (($0_1 | 0) != (12 | 0)) {
                  break label$3;
                }
                HEAP32[$1_1 >> 2] = ($4_1 + 12) | 0;
              }
            }

            function $652($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (60 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $653($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (6 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $654($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $642($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
              label$1: {
                if (((HEAPU8[$4_1 >> 0] | 0) & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ($2_1 + -1900) | 0;
              }
            }

            function $655($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $2_1;
              $2_1 = 6;
              label$1: {
                label$2: {
                  if ($440($1_1 | 0, ($5_1 + 8) | 0 | 0) | 0) {
                    break label$2;
                  }
                  $2_1 = 4;
                  if (($631($4_1 | 0, $441($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
                    break label$2;
                  }
                  $2_1 = 2;
                  if (!($440($443($1_1 | 0) | 0 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                    break label$1;
                  }
                }
                HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
              }
              global$0 = ($5_1 + 16) | 0;
            }

            function $656($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0,
                $10_1 = 0,
                $9_1 = 0,
                $11_1 = 0;
              $8_1 = (global$0 - 32) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 16) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 24) | 0) >> 2] = $1_1;
              $1487(($8_1 + 8) | 0 | 0, $3_1 | 0);
              $1_1 = $503(($8_1 + 8) | 0 | 0) | 0;
              $430(($8_1 + 8) | 0 | 0) | 0;
              HEAP32[$4_1 >> 2] = 0;
              $2_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($6_1 | 0) == ($7_1 | 0)) {
                    break label$1;
                  }
                  if ($2_1) {
                    break label$1;
                  }
                  label$3: {
                    if ($510(($8_1 + 24) | 0 | 0, ($8_1 + 16) | 0 | 0) | 0) {
                      break label$3;
                    }
                    label$4: {
                      label$5: {
                        if (($657($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
                          break label$5;
                        }
                        $2_1 = ($6_1 + 4) | 0;
                        if (($2_1 | 0) == ($7_1 | 0)) {
                          break label$3;
                        }
                        $9_1 = 0;
                        label$6: {
                          label$7: {
                            $10_1 = $657($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0) | 0;
                            if (($10_1 | 0) == (69 | 0)) {
                              break label$7;
                            }
                            if ((($10_1 & 255) | 0 | 0) == (48 | 0)) {
                              break label$7;
                            }
                            $11_1 = $10_1;
                            $2_1 = $6_1;
                            break label$6;
                          }
                          $6_1 = ($6_1 + 8) | 0;
                          if (($6_1 | 0) == ($7_1 | 0)) {
                            break label$3;
                          }
                          $11_1 = $657($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
                          $9_1 = $10_1;
                        }
                        HEAP32[(($8_1 + 24) | 0) >> 2] =
                          FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0](
                            $0_1,
                            HEAP32[(($8_1 + 24) | 0) >> 2] | 0,
                            HEAP32[(($8_1 + 16) | 0) >> 2] | 0,
                            $3_1,
                            $4_1,
                            $5_1,
                            $11_1,
                            $9_1
                          ) | 0;
                        $6_1 = ($2_1 + 8) | 0;
                        break label$4;
                      }
                      label$8: {
                        if (!($658($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
                          break label$8;
                        }
                        label$9: {
                          label$10: while (1) {
                            label$11: {
                              $6_1 = ($6_1 + 4) | 0;
                              if (($6_1 | 0) != ($7_1 | 0)) {
                                break label$11;
                              }
                              $6_1 = $7_1;
                              break label$9;
                            }
                            if ($658($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
                              continue label$10;
                            }
                            break label$10;
                          }
                        }
                        label$12: while (1) {
                          if (!($509(($8_1 + 24) | 0 | 0, ($8_1 + 16) | 0 | 0) | 0)) {
                            break label$4;
                          }
                          if (!($658($1_1 | 0, 8192 | 0, $511(($8_1 + 24) | 0 | 0) | 0 | 0) | 0)) {
                            break label$4;
                          }
                          $513(($8_1 + 24) | 0 | 0) | 0;
                          continue label$12;
                        }
                      }
                      label$13: {
                        if (
                          ($512($1_1 | 0, $511(($8_1 + 24) | 0 | 0) | 0 | 0) | 0 | 0) !=
                          ($512($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)
                        ) {
                          break label$13;
                        }
                        $6_1 = ($6_1 + 4) | 0;
                        $513(($8_1 + 24) | 0 | 0) | 0;
                        break label$4;
                      }
                      HEAP32[$4_1 >> 2] = 4;
                    }
                    $2_1 = HEAP32[$4_1 >> 2] | 0;
                    continue label$2;
                  }
                  break label$2;
                }
                HEAP32[$4_1 >> 2] = 4;
              }
              label$14: {
                if (!($510(($8_1 + 24) | 0 | 0, ($8_1 + 16) | 0 | 0) | 0)) {
                  break label$14;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
              }
              $6_1 = HEAP32[(($8_1 + 24) | 0) >> 2] | 0;
              global$0 = ($8_1 + 32) | 0;
              return $6_1 | 0;
            }

            function $657($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) |
                0 |
                0
              );
            }

            function $658($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) |
                0 |
                0
              );
            }

            function $659($0_1) {
              $0_1 = $0_1 | 0;
              return 2 | 0;
            }

            function $660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                $6_1 = 0,
                $12_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $19_1 = 0;
              $6_1 = (global$0 - 32) | 0;
              global$0 = $6_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8680) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8684) | 0) >> 2] | 0;
              $12_1 = i64toi32_i32$0;
              i64toi32_i32$0 = ($6_1 + 24) | 0;
              HEAP32[i64toi32_i32$0 >> 2] = $12_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8672) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8676) | 0) >> 2] | 0;
              $15_1 = i64toi32_i32$1;
              i64toi32_i32$1 = ($6_1 + 16) | 0;
              HEAP32[i64toi32_i32$1 >> 2] = $15_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8664) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8668) | 0) >> 2] | 0;
              $17_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $6_1;
              HEAP32[((i64toi32_i32$0 + 8) | 0) >> 2] = $17_1;
              HEAP32[((i64toi32_i32$0 + 12) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8656) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8660) | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $6_1;
              HEAP32[i64toi32_i32$1 >> 2] = $19_1;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              $0_1 =
                $656(
                  $0_1 | 0,
                  $1_1 | 0,
                  $2_1 | 0,
                  $3_1 | 0,
                  $4_1 | 0,
                  $5_1 | 0,
                  i64toi32_i32$1 | 0,
                  (i64toi32_i32$1 + 32) | 0 | 0
                ) | 0;
              global$0 = (i64toi32_i32$1 + 32) | 0;
              return $0_1 | 0;
            }

            function $661($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 =
                FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                  ($0_1 + 8) | 0
                ) | 0;
              return (
                $656(
                  $0_1 | 0,
                  $1_1 | 0,
                  $2_1 | 0,
                  $3_1 | 0,
                  $4_1 | 0,
                  $5_1 | 0,
                  $662($6_1 | 0) | 0 | 0,
                  (($662($6_1 | 0) | 0) + ((($514($6_1 | 0) | 0) << 2) | 0)) | 0 | 0
                ) |
                0 |
                0
              );
            }

            function $662($0_1) {
              $0_1 = $0_1 | 0;
              return $664($663($0_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $663($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                return $1401($0_1 | 0) | 0 | 0;
              }
              return $1402($0_1 | 0) | 0 | 0;
            }

            function $664($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $665($0_1) {
              $0_1 = $0_1 | 0;
              return ((HEAPU8[((($1220($0_1 | 0) | 0) + 11) | 0) >> 0] | 0) >>> 7) | 0 | 0;
            }

            function $666($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[((($1220($0_1 | 0) | 0) + 4) | 0) >> 2] | 0 | 0;
            }

            function $667($0_1) {
              $0_1 = $0_1 | 0;
              return HEAPU8[((($1220($0_1 | 0) | 0) + 11) | 0) >> 0] | 0 | 0;
            }

            function $668($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = $1_1;
              $1487($6_1 | 0, $3_1 | 0);
              $3_1 = $503($6_1 | 0) | 0;
              $430($6_1 | 0) | 0;
              $669($0_1 | 0, ($5_1 + 24) | 0 | 0, ($6_1 + 8) | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
              $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $669($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                $0_1 =
                  FUNCTION_TABLE[HEAP32[(HEAP32[(($0_1 + 8) | 0) >> 2] | 0) >> 2] | 0 | 0](($0_1 + 8) | 0) |
                  0;
                $0_1 =
                  (($507($2_1 | 0, $3_1 | 0, $0_1 | 0, ($0_1 + 168) | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) -
                    $0_1) |
                  0;
                if (($0_1 | 0) > (167 | 0)) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ((($0_1 | 0) / (12 | 0)) | 0 | 0) % (7 | 0) | 0;
              }
            }

            function $670($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = $1_1;
              $1487($6_1 | 0, $3_1 | 0);
              $3_1 = $503($6_1 | 0) | 0;
              $430($6_1 | 0) | 0;
              $671($0_1 | 0, ($5_1 + 16) | 0 | 0, ($6_1 + 8) | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
              $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $671($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                $0_1 =
                  FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 4) | 0) >> 2] | 0 | 0](
                    ($0_1 + 8) | 0
                  ) | 0;
                $0_1 =
                  (($507($2_1 | 0, $3_1 | 0, $0_1 | 0, ($0_1 + 288) | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) -
                    $0_1) |
                  0;
                if (($0_1 | 0) > (287 | 0)) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ((($0_1 | 0) / (12 | 0)) | 0 | 0) % (12 | 0) | 0;
              }
            }

            function $672($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 8) | 0) >> 2] = $1_1;
              $1487($6_1 | 0, $3_1 | 0);
              $3_1 = $503($6_1 | 0) | 0;
              $430($6_1 | 0) | 0;
              $673($0_1 | 0, ($5_1 + 20) | 0 | 0, ($6_1 + 8) | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
              $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $673($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
              label$1: {
                if (((HEAPU8[$4_1 >> 0] | 0) & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] =
                  ((($2_1 | 0) < (69 | 0)
                    ? ($2_1 + 2e3) | 0
                    : ($2_1 | 0) < (100 | 0)
                    ? ($2_1 + 1900) | 0
                    : $2_1) +
                    -1900) |
                  0;
              }
            }

            function $674($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  if (!($510($0_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                    break label$2;
                  }
                  HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
                  $1_1 = 0;
                  break label$1;
                }
                label$3: {
                  $1_1 = $511($0_1 | 0) | 0;
                  if ($658($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
                    break label$3;
                  }
                  HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
                  $1_1 = 0;
                  break label$1;
                }
                $1_1 = $657($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
                label$4: {
                  label$5: while (1) {
                    $513($0_1 | 0) | 0;
                    $1_1 = ($1_1 + -48) | 0;
                    $6_1 = $509($0_1 | 0, ($5_1 + 8) | 0 | 0) | 0;
                    if (($4_1 | 0) < (2 | 0)) {
                      break label$4;
                    }
                    if (!$6_1) {
                      break label$4;
                    }
                    $6_1 = $511($0_1 | 0) | 0;
                    if (!($658($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
                      break label$1;
                    }
                    $4_1 = ($4_1 + -1) | 0;
                    $1_1 = (Math_imul($1_1, 10) + ($657($3_1 | 0, $6_1 | 0, 0 | 0) | 0)) | 0;
                    continue label$5;
                  }
                }
                if (!($510($0_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                  break label$1;
                }
                HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
              }
              global$0 = ($5_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $675($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $9_1 = 0,
                $73_1 = 0,
                $76_1 = 0,
                $78_1 = 0,
                $80_1 = 0,
                $94_1 = 0,
                $97_1 = 0,
                $99_1 = 0,
                $101_1 = 0,
                $184_1 = 0,
                $186_1 = 0,
                $207_1 = 0,
                $210_1 = 0,
                $212_1 = 0,
                $214_1 = 0;
              $8_1 = (global$0 - 64) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 56) | 0) >> 2] = $1_1;
              HEAP32[$4_1 >> 2] = 0;
              $1487($8_1 | 0, $3_1 | 0);
              $9_1 = $503($8_1 | 0) | 0;
              $430($8_1 | 0) | 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      switch (($6_1 + -65) | 0 | 0) {
                        case 0:
                        case 32:
                          $669(
                            $0_1 | 0,
                            ($5_1 + 24) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 1:
                        case 33:
                        case 39:
                          $671(
                            $0_1 | 0,
                            ($5_1 + 16) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 34:
                          $1_1 =
                            FUNCTION_TABLE[
                              HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 12) | 0) >> 2] | 0 | 0
                            ](($0_1 + 8) | 0) | 0;
                          HEAP32[(($8_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              HEAP32[(($8_1 + 56) | 0) >> 2] | 0 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $662($1_1 | 0) | 0 | 0,
                              (($662($1_1 | 0) | 0) + ((($514($1_1 | 0) | 0) << 2) | 0)) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 35:
                        case 36:
                          $676(
                            $0_1 | 0,
                            ($5_1 + 12) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 3:
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8536) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8540) | 0) >> 2] | 0;
                          $73_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = ($8_1 + 24) | 0;
                          HEAP32[i64toi32_i32$0 >> 2] = $73_1;
                          HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8528) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8532) | 0) >> 2] | 0;
                          $76_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = ($8_1 + 16) | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $76_1;
                          HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8520) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8524) | 0) >> 2] | 0;
                          $78_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = $8_1;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = $78_1;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8512) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8516) | 0) >> 2] | 0;
                          $80_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = $8_1;
                          HEAP32[$8_1 >> 2] = $80_1;
                          HEAP32[(($8_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[(($8_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $8_1 | 0,
                              ($8_1 + 32) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 5:
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8568) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8572) | 0) >> 2] | 0;
                          $94_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = ($8_1 + 24) | 0;
                          HEAP32[i64toi32_i32$0 >> 2] = $94_1;
                          HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8560) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8564) | 0) >> 2] | 0;
                          $97_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = ($8_1 + 16) | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $97_1;
                          HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8552) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8556) | 0) >> 2] | 0;
                          $99_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = $8_1;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = $99_1;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8544) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8548) | 0) >> 2] | 0;
                          $101_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = $8_1;
                          HEAP32[$8_1 >> 2] = $101_1;
                          HEAP32[(($8_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[(($8_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $8_1 | 0,
                              ($8_1 + 32) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 7:
                          $677(
                            $0_1 | 0,
                            ($5_1 + 8) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 8:
                          $678(
                            $0_1 | 0,
                            ($5_1 + 8) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 41:
                          $679(
                            $0_1 | 0,
                            ($5_1 + 28) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 44:
                          $680(
                            $0_1 | 0,
                            ($5_1 + 16) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 12:
                          $681(
                            $0_1 | 0,
                            ($5_1 + 4) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 45:
                        case 51:
                          $682($0_1 | 0, ($8_1 + 56) | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
                          break label$2;
                        case 47:
                          $683(
                            $0_1 | 0,
                            ($5_1 + 8) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 49:
                          $6_1 = $1707($8_1 | 0, 8576 | 0, 44 | 0) | 0;
                          HEAP32[(($6_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $6_1 | 0,
                              ($6_1 + 44) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 17:
                          HEAP32[(($8_1 + 16) | 0) >> 2] = HEAP32[((0 + 8640) | 0) >> 2] | 0;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8632) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8636) | 0) >> 2] | 0;
                          $184_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = $8_1;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = $184_1;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8624) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8628) | 0) >> 2] | 0;
                          $186_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = $8_1;
                          HEAP32[$8_1 >> 2] = $186_1;
                          HEAP32[(($8_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[(($8_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $8_1 | 0,
                              ($8_1 + 20) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 18:
                          $684($0_1 | 0, $5_1 | 0, ($8_1 + 56) | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
                          break label$2;
                        case 19:
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8680) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8684) | 0) >> 2] | 0;
                          $207_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = ($8_1 + 24) | 0;
                          HEAP32[i64toi32_i32$0 >> 2] = $207_1;
                          HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8672) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8676) | 0) >> 2] | 0;
                          $210_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = ($8_1 + 16) | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $210_1;
                          HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8664) | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8668) | 0) >> 2] | 0;
                          $212_1 = i64toi32_i32$0;
                          i64toi32_i32$0 = $8_1;
                          HEAP32[(($8_1 + 8) | 0) >> 2] = $212_1;
                          HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 8656) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8660) | 0) >> 2] | 0;
                          $214_1 = i64toi32_i32$1;
                          i64toi32_i32$1 = $8_1;
                          HEAP32[$8_1 >> 2] = $214_1;
                          HEAP32[(($8_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[(($8_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              $1_1 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $8_1 | 0,
                              ($8_1 + 32) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 54:
                          $685(
                            $0_1 | 0,
                            ($5_1 + 24) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 55:
                          $4_1 =
                            FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                              $0_1,
                              $1_1,
                              $2_1,
                              $3_1,
                              $4_1,
                              $5_1
                            ) | 0;
                          break label$1;
                        case 23:
                          $1_1 =
                            FUNCTION_TABLE[
                              HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 24) | 0) >> 2] | 0 | 0
                            ](($0_1 + 8) | 0) | 0;
                          HEAP32[(($8_1 + 56) | 0) >> 2] =
                            $656(
                              $0_1 | 0,
                              HEAP32[(($8_1 + 56) | 0) >> 2] | 0 | 0,
                              $2_1 | 0,
                              $3_1 | 0,
                              $4_1 | 0,
                              $5_1 | 0,
                              $662($1_1 | 0) | 0 | 0,
                              (($662($1_1 | 0) | 0) + ((($514($1_1 | 0) | 0) << 2) | 0)) | 0 | 0
                            ) | 0;
                          break label$2;
                        case 56:
                          $673(
                            $0_1 | 0,
                            ($5_1 + 20) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        case 24:
                          $686(
                            $0_1 | 0,
                            ($5_1 + 20) | 0 | 0,
                            ($8_1 + 56) | 0 | 0,
                            $2_1 | 0,
                            $4_1 | 0,
                            $9_1 | 0
                          );
                          break label$2;
                        default:
                          if (($6_1 | 0) == (37 | 0)) {
                            break label$3;
                          }
                          break;
                        case 2:
                        case 4:
                        case 6:
                        case 9:
                        case 10:
                        case 11:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 20:
                        case 21:
                        case 22:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 37:
                        case 38:
                        case 40:
                        case 42:
                        case 43:
                        case 46:
                        case 48:
                        case 50:
                        case 52:
                        case 53:
                          break label$4;
                      }
                    }
                    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
                    break label$2;
                  }
                  $687($0_1 | 0, ($8_1 + 56) | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
                }
                $4_1 = HEAP32[(($8_1 + 56) | 0) >> 2] | 0;
              }
              global$0 = ($8_1 + 64) | 0;
              return $4_1 | 0;
            }

            function $676($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if ((($2_1 + -1) | 0) >>> 0 > 30 >>> 0) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $677($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (23 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $678($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if ((($2_1 + -1) | 0) >>> 0 > 11 >>> 0) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $679($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (365 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $680($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (12 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ($2_1 + -1) | 0;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $681($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (59 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $682($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $2_1;
              label$1: {
                label$2: while (1) {
                  if (!($509($1_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  if (!($658($4_1 | 0, 8192 | 0, $511($1_1 | 0) | 0 | 0) | 0)) {
                    break label$1;
                  }
                  $513($1_1 | 0) | 0;
                  continue label$2;
                }
              }
              label$3: {
                if (!($510($1_1 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                  break label$3;
                }
                HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
              }
              global$0 = ($5_1 + 16) | 0;
            }

            function $683($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                $0_1 =
                  FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + 8) | 0) >> 2] | 0 | 0](
                    ($0_1 + 8) | 0
                  ) | 0;
                if (($514($0_1 | 0) | 0 | 0) != ((0 - ($514(($0_1 + 12) | 0 | 0) | 0)) | 0 | 0)) {
                  break label$1;
                }
                HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
                return;
              }
              $0_1 =
                (($507($2_1 | 0, $3_1 | 0, $0_1 | 0, ($0_1 + 24) | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) -
                  $0_1) |
                0;
              label$2: {
                $4_1 = HEAP32[$1_1 >> 2] | 0;
                if (($4_1 | 0) != (12 | 0)) {
                  break label$2;
                }
                if ($0_1) {
                  break label$2;
                }
                HEAP32[$1_1 >> 2] = 0;
                return;
              }
              label$3: {
                if (($4_1 | 0) > (11 | 0)) {
                  break label$3;
                }
                if (($0_1 | 0) != (12 | 0)) {
                  break label$3;
                }
                HEAP32[$1_1 >> 2] = ($4_1 + 12) | 0;
              }
            }

            function $684($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (60 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $685($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
              $3_1 = HEAP32[$4_1 >> 2] | 0;
              label$1: {
                if (($2_1 | 0) > (6 | 0)) {
                  break label$1;
                }
                if (($3_1 & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = $2_1;
                return;
              }
              HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
            }

            function $686($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $2_1 = $674($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
              label$1: {
                if (((HEAPU8[$4_1 >> 0] | 0) & 4) | 0) {
                  break label$1;
                }
                HEAP32[$1_1 >> 2] = ($2_1 + -1900) | 0;
              }
            }

            function $687($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = $2_1;
              $2_1 = 6;
              label$1: {
                label$2: {
                  if ($510($1_1 | 0, ($5_1 + 8) | 0 | 0) | 0) {
                    break label$2;
                  }
                  $2_1 = 4;
                  if (($657($4_1 | 0, $511($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
                    break label$2;
                  }
                  $2_1 = 2;
                  if (!($510($513($1_1 | 0) | 0 | 0, ($5_1 + 8) | 0 | 0) | 0)) {
                    break label$1;
                  }
                }
                HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
              }
              global$0 = ($5_1 + 16) | 0;
            }

            function $688($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0;
              $7_1 = (global$0 - 128) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 12) | 0) >> 2] = ($7_1 + 116) | 0;
              $689(
                ($0_1 + 8) | 0 | 0,
                ($7_1 + 16) | 0 | 0,
                ($7_1 + 12) | 0 | 0,
                $4_1 | 0,
                $5_1 | 0,
                $6_1 | 0
              );
              $1_1 = $690(($7_1 + 16) | 0 | 0, HEAP32[(($7_1 + 12) | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
              global$0 = ($7_1 + 128) | 0;
              return $1_1 | 0;
            }

            function $689($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP8[(($6_1 + 15) | 0) >> 0] = 0;
              HEAP8[(($6_1 + 14) | 0) >> 0] = $5_1;
              HEAP8[(($6_1 + 13) | 0) >> 0] = $4_1;
              HEAP8[(($6_1 + 12) | 0) >> 0] = 37;
              label$1: {
                if (!$5_1) {
                  break label$1;
                }
                $691(($6_1 + 13) | 0 | 0, ($6_1 + 14) | 0 | 0);
              }
              HEAP32[$2_1 >> 2] =
                ($1_1 +
                  (fimport$23(
                    $1_1 | 0,
                    $692($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0,
                    ($6_1 + 12) | 0 | 0,
                    $3_1 | 0,
                    HEAP32[$0_1 >> 2] | 0 | 0
                  ) |
                    0)) |
                0;
              global$0 = ($6_1 + 16) | 0;
            }

            function $690($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $695($693($0_1 | 0) | 0 | 0, $693($1_1 | 0) | 0 | 0, $694($2_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $691($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP8[(($2_1 + 15) | 0) >> 0] = HEAPU8[($1181($0_1 | 0) | 0) >> 0] | 0;
              HEAP8[$0_1 >> 0] = HEAPU8[($1181($1_1 | 0) | 0) >> 0] | 0;
              HEAP8[$1_1 >> 0] = HEAPU8[($1181(($2_1 + 15) | 0 | 0) | 0) >> 0] | 0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $692($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ($1_1 - $0_1) | 0 | 0;
            }

            function $693($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $694($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $695($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $1405($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $696($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0;
              $7_1 = (global$0 - 416) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 12) | 0) >> 2] = ($7_1 + 416) | 0;
              $697(
                ($0_1 + 8) | 0 | 0,
                ($7_1 + 16) | 0 | 0,
                ($7_1 + 12) | 0 | 0,
                $4_1 | 0,
                $5_1 | 0,
                $6_1 | 0
              );
              $1_1 = $698(($7_1 + 16) | 0 | 0, HEAP32[(($7_1 + 12) | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
              global$0 = ($7_1 + 416) | 0;
              return $1_1 | 0;
            }

            function $697($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 144) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 28) | 0) >> 2] = ($6_1 + 132) | 0;
              $689($0_1 | 0, ($6_1 + 32) | 0 | 0, ($6_1 + 28) | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
              HEAP32[(($6_1 + 16) | 0) >> 2] = 0;
              HEAP32[(($6_1 + 20) | 0) >> 2] = 0;
              HEAP32[(($6_1 + 12) | 0) >> 2] = ($6_1 + 32) | 0;
              label$1: {
                $0_1 =
                  $700(
                    $1_1 | 0,
                    ($6_1 + 12) | 0 | 0,
                    $699($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0,
                    ($6_1 + 16) | 0 | 0,
                    HEAP32[$0_1 >> 2] | 0 | 0
                  ) | 0;
                if (($0_1 | 0) != (-1 | 0)) {
                  break label$1;
                }
                $701($6_1 | 0);
                abort();
              }
              HEAP32[$2_1 >> 2] = ($1_1 + (($0_1 << 2) | 0)) | 0;
              global$0 = ($6_1 + 144) | 0;
            }

            function $698($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $704($702($0_1 | 0) | 0 | 0, $702($1_1 | 0) | 0 | 0, $703($2_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $699($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((($1_1 - $0_1) | 0) >> 2) | 0 | 0;
            }

            function $700($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $4_1;
              $4_1 = $500(($5_1 + 8) | 0 | 0, ($5_1 + 12) | 0 | 0) | 0;
              $0_1 = $393($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
              $501($4_1 | 0) | 0;
              global$0 = ($5_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $701($0_1) {
              $0_1 = $0_1 | 0;
              fimport$24();
              abort();
            }

            function $702($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $703($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $704($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $1406($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $705($0_1) {
              $0_1 = $0_1 | 0;
              return $195() | 0 | 0;
            }

            function $706($0_1) {
              $0_1 = $0_1 | 0;
              return $195() | 0 | 0;
            }

            function $707($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $708($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $709($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $710($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $90($0_1 | 0, 1 | 0, 45 | 0) | 0;
            }

            function $711($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $712($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $713($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $714($0_1) {
              $0_1 = $0_1 | 0;
              return $195() | 0 | 0;
            }

            function $715($0_1) {
              $0_1 = $0_1 | 0;
              return $195() | 0 | 0;
            }

            function $716($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $717($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $718($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $719($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $90($0_1 | 0, 1 | 0, 45 | 0) | 0;
            }

            function $720($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $721($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $722($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $723($0_1) {
              $0_1 = $0_1 | 0;
              return $724() | 0 | 0;
            }

            function $724() {
              return $725() | 0 | 0;
            }

            function $725() {
              return 2147483647 | 0;
            }

            function $726($0_1) {
              $0_1 = $0_1 | 0;
              return $724() | 0 | 0;
            }

            function $727($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $728($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $729($0_1 | 0) | 0;
            }

            function $729($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $426($0_1 | 0, ($1_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $730($0_1 | 0);
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $730($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = $1225($0_1 | 0) | 0;
              $0_1 = 0;
              label$1: while (1) {
                label$2: {
                  if (($0_1 | 0) != (3 | 0)) {
                    break label$2;
                  }
                  return;
                }
                HEAP32[(($1_1 + (($0_1 << 2) | 0)) | 0) >> 2] = 0;
                $0_1 = ($0_1 + 1) | 0;
                continue label$1;
              }
            }

            function $731($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $729($0_1 | 0) | 0;
            }

            function $732($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $613($0_1 | 0, 1 | 0, 45 | 0) | 0;
            }

            function $733($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $734($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $735($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $736($0_1) {
              $0_1 = $0_1 | 0;
              return $724() | 0 | 0;
            }

            function $737($0_1) {
              $0_1 = $0_1 | 0;
              return $724() | 0 | 0;
            }

            function $738($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $453($0_1 | 0) | 0;
            }

            function $739($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $729($0_1 | 0) | 0;
            }

            function $740($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $729($0_1 | 0) | 0;
            }

            function $741($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $613($0_1 | 0, 1 | 0, 45 | 0) | 0;
            }

            function $742($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $743($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $744($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = $0_1;
              $3_1 = 67109634;
              HEAP8[$2_1 >> 0] = $3_1;
              HEAP8[(($2_1 + 1) | 0) >> 0] = ($3_1 >>> 8) | 0;
              HEAP8[(($2_1 + 2) | 0) >> 0] = ($3_1 >>> 16) | 0;
              HEAP8[(($2_1 + 3) | 0) >> 0] = ($3_1 >>> 24) | 0;
            }

            function $745($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $10_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                i64toi32_i32$1 = 0;
              $7_1 = (global$0 - 288) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 272) | 0) >> 2] = $2_1;
              HEAP32[(($7_1 + 280) | 0) >> 2] = $1_1;
              HEAP32[(($7_1 + 16) | 0) >> 2] = 32;
              $1_1 = $581(($7_1 + 152) | 0 | 0, ($7_1 + 160) | 0 | 0, ($7_1 + 16) | 0 | 0) | 0;
              $1487(($7_1 + 144) | 0 | 0, $4_1 | 0);
              $8_1 = $112(($7_1 + 144) | 0 | 0) | 0;
              HEAP8[(($7_1 + 143) | 0) >> 0] = 0;
              label$1: {
                if (
                  !(
                    $747(
                      ($7_1 + 280) | 0 | 0,
                      $2_1 | 0,
                      $3_1 | 0,
                      ($7_1 + 144) | 0 | 0,
                      $83($4_1 | 0) | 0 | 0,
                      $5_1 | 0,
                      ($7_1 + 143) | 0 | 0,
                      $8_1 | 0,
                      $1_1 | 0,
                      ($7_1 + 148) | 0 | 0,
                      ($7_1 + 260) | 0 | 0
                    ) | 0
                  )
                ) {
                  break label$1;
                }
                $11_1 = 0;
                $12_1 =
                  HEAPU8[(($11_1 + 8699) | 0) >> 0] |
                  0 |
                  (((HEAPU8[(($11_1 + 8700) | 0) >> 0] | 0) << 8) | 0) |
                  0 |
                  (((HEAPU8[(($11_1 + 8701) | 0) >> 0] | 0) << 16) |
                    0 |
                    (((HEAPU8[(($11_1 + 8702) | 0) >> 0] | 0) << 24) | 0) |
                    0) |
                  0;
                HEAP8[(($7_1 + 135) | 0) >> 0] = $12_1;
                HEAP8[(($7_1 + 136) | 0) >> 0] = ($12_1 >>> 8) | 0;
                HEAP8[(($7_1 + 137) | 0) >> 0] = ($12_1 >>> 16) | 0;
                HEAP8[(($7_1 + 138) | 0) >> 0] = ($12_1 >>> 24) | 0;
                $10_1 = 0;
                i64toi32_i32$1 =
                  HEAPU8[(($10_1 + 8696) | 0) >> 0] |
                  0 |
                  (((HEAPU8[(($10_1 + 8697) | 0) >> 0] | 0) << 8) | 0) |
                  0 |
                  (((HEAPU8[(($10_1 + 8698) | 0) >> 0] | 0) << 16) |
                    0 |
                    (((HEAPU8[(($10_1 + 8699) | 0) >> 0] | 0) << 24) | 0) |
                    0) |
                  0;
                HEAP32[(($7_1 + 128) | 0) >> 2] =
                  HEAPU8[(($10_1 + 8692) | 0) >> 0] |
                  0 |
                  (((HEAPU8[(($10_1 + 8693) | 0) >> 0] | 0) << 8) | 0) |
                  0 |
                  (((HEAPU8[(($10_1 + 8694) | 0) >> 0] | 0) << 16) |
                    0 |
                    (((HEAPU8[(($10_1 + 8695) | 0) >> 0] | 0) << 24) | 0) |
                    0) |
                  0;
                HEAP32[(($7_1 + 132) | 0) >> 2] = i64toi32_i32$1;
                $487($8_1 | 0, ($7_1 + 128) | 0 | 0, ($7_1 + 138) | 0 | 0, ($7_1 + 118) | 0 | 0) | 0;
                HEAP32[(($7_1 + 16) | 0) >> 2] = 31;
                $8_1 = $581(($7_1 + 8) | 0 | 0, 0 | 0, ($7_1 + 16) | 0 | 0) | 0;
                $2_1 = ($7_1 + 16) | 0;
                label$2: {
                  label$3: {
                    if ((((HEAP32[(($7_1 + 148) | 0) >> 2] | 0) - ($748($1_1 | 0) | 0)) | 0 | 0) < (99 | 0)) {
                      break label$3;
                    }
                    $583(
                      $8_1 | 0,
                      $1698(
                        ((((HEAP32[(($7_1 + 148) | 0) >> 2] | 0) - ($748($1_1 | 0) | 0)) | 0) + 2) | 0 | 0
                      ) |
                        0 |
                        0
                    );
                    if (!($748($8_1 | 0) | 0)) {
                      break label$2;
                    }
                    $2_1 = $748($8_1 | 0) | 0;
                  }
                  label$4: {
                    if (!(HEAPU8[(($7_1 + 143) | 0) >> 0] | 0)) {
                      break label$4;
                    }
                    HEAP8[$2_1 >> 0] = 45;
                    $2_1 = ($2_1 + 1) | 0;
                  }
                  $4_1 = $748($1_1 | 0) | 0;
                  label$5: {
                    label$6: while (1) {
                      label$7: {
                        if ($4_1 >>> 0 < (HEAP32[(($7_1 + 148) | 0) >> 2] | 0) >>> 0) {
                          break label$7;
                        }
                        HEAP8[$2_1 >> 0] = 0;
                        HEAP32[$7_1 >> 2] = $6_1;
                        if (($369(($7_1 + 16) | 0 | 0, 8688 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
                          break label$5;
                        }
                        $585($8_1 | 0) | 0;
                        break label$1;
                      }
                      HEAP8[$2_1 >> 0] =
                        HEAPU8[
                          (((($7_1 + 128) | 0) +
                            ((($549(($7_1 + 118) | 0 | 0, $749(($7_1 + 118) | 0 | 0) | 0 | 0, $4_1 | 0) | 0) -
                              (($7_1 + 118) | 0)) |
                              0)) |
                            0) >>
                            0
                        ] | 0;
                      $2_1 = ($2_1 + 1) | 0;
                      $4_1 = ($4_1 + 1) | 0;
                      continue label$6;
                    }
                  }
                  $701($7_1 | 0);
                  abort();
                }
                $1570();
                abort();
              }
              label$8: {
                if (!($440(($7_1 + 280) | 0 | 0, ($7_1 + 272) | 0 | 0) | 0)) {
                  break label$8;
                }
                HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
              }
              $4_1 = HEAP32[(($7_1 + 280) | 0) >> 2] | 0;
              $430(($7_1 + 144) | 0 | 0) | 0;
              $585($1_1 | 0) | 0;
              global$0 = ($7_1 + 288) | 0;
              return $4_1 | 0;
            }

            function $746($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $747($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              $10_1 = $10_1 | 0;
              var $11_1 = 0,
                $15_1 = 0,
                $16_1 = 0,
                $14_1 = 0,
                $12_1 = 0,
                $17_1 = 0,
                $13_1 = 0,
                $18_1 = 0,
                $19_1 = 0;
              $11_1 = (global$0 - 560) | 0;
              global$0 = $11_1;
              HEAP32[(($11_1 + 548) | 0) >> 2] = $10_1;
              HEAP32[(($11_1 + 552) | 0) >> 2] = $1_1;
              HEAP32[(($11_1 + 104) | 0) >> 2] = 32;
              $12_1 = $750(($11_1 + 136) | 0 | 0, ($11_1 + 144) | 0 | 0, ($11_1 + 104) | 0 | 0) | 0;
              $1_1 = $751($12_1 | 0) | 0;
              HEAP32[(($11_1 + 132) | 0) >> 2] = $1_1;
              HEAP32[(($11_1 + 128) | 0) >> 2] = ($1_1 + 400) | 0;
              $13_1 = $453(($11_1 + 104) | 0 | 0) | 0;
              $14_1 = $453(($11_1 + 88) | 0 | 0) | 0;
              $15_1 = $453(($11_1 + 72) | 0 | 0) | 0;
              $16_1 = $453(($11_1 + 56) | 0 | 0) | 0;
              $17_1 = $453(($11_1 + 40) | 0 | 0) | 0;
              $752(
                $2_1 | 0,
                $3_1 | 0,
                ($11_1 + 120) | 0 | 0,
                ($11_1 + 119) | 0 | 0,
                ($11_1 + 118) | 0 | 0,
                $13_1 | 0,
                $14_1 | 0,
                $15_1 | 0,
                $16_1 | 0,
                ($11_1 + 36) | 0 | 0
              );
              HEAP32[$9_1 >> 2] = $748($8_1 | 0) | 0;
              $18_1 = ($4_1 & 512) | 0;
              $19_1 = ($18_1 >>> 9) | 0;
              $1_1 = 0;
              $2_1 = 0;
              label$1: while (1) {
                $10_1 = $2_1;
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (($1_1 | 0) == (4 | 0)) {
                          break label$5;
                        }
                        if (!($439($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                          break label$5;
                        }
                        $4_1 = 0;
                        $2_1 = $10_1;
                        label$6: {
                          label$7: {
                            label$8: {
                              label$9: {
                                label$10: {
                                  switch (HEAP8[(((($11_1 + 120) | 0) + $1_1) | 0) >> 0] | 0 | 0) {
                                    case 1:
                                      if (($1_1 | 0) == (3 | 0)) {
                                        break label$3;
                                      }
                                      label$12: {
                                        if (!($632($7_1 | 0, 8192 | 0, $441($0_1 | 0) | 0 | 0) | 0)) {
                                          break label$12;
                                        }
                                        $753(($11_1 + 24) | 0 | 0, $0_1 | 0, 0 | 0);
                                        $1550($17_1 | 0, $754(($11_1 + 24) | 0 | 0) | 0 | 0);
                                        break label$9;
                                      }
                                      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                                      $0_1 = 0;
                                      break label$4;
                                    case 0:
                                      break label$10;
                                    case 4:
                                      break label$6;
                                    case 2:
                                      break label$7;
                                    case 3:
                                      break label$8;
                                    default:
                                      break label$2;
                                  }
                                }
                                if (($1_1 | 0) == (3 | 0)) {
                                  break label$3;
                                }
                              }
                              label$13: while (1) {
                                if (!($439($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                                  break label$3;
                                }
                                if (!($632($7_1 | 0, 8192 | 0, $441($0_1 | 0) | 0 | 0) | 0)) {
                                  break label$3;
                                }
                                $753(($11_1 + 24) | 0 | 0, $0_1 | 0, 0 | 0);
                                $1550($17_1 | 0, $754(($11_1 + 24) | 0 | 0) | 0 | 0);
                                continue label$13;
                              }
                            }
                            if (($444($15_1 | 0) | 0 | 0) == ((0 - ($444($16_1 | 0) | 0)) | 0 | 0)) {
                              break label$3;
                            }
                            label$14: {
                              label$15: {
                                if (!($444($15_1 | 0) | 0)) {
                                  break label$15;
                                }
                                if ($444($16_1 | 0) | 0) {
                                  break label$14;
                                }
                              }
                              $4_1 = $444($15_1 | 0) | 0;
                              $2_1 = $441($0_1 | 0) | 0;
                              label$16: {
                                if (!$4_1) {
                                  break label$16;
                                }
                                label$17: {
                                  if (
                                    (($2_1 & 255) | 0 | 0) !=
                                    (HEAPU8[($456($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)
                                  ) {
                                    break label$17;
                                  }
                                  $443($0_1 | 0) | 0;
                                  $2_1 = ($444($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
                                  break label$2;
                                }
                                HEAP8[$6_1 >> 0] = 1;
                                break label$3;
                              }
                              if (
                                (($2_1 & 255) | 0 | 0) !=
                                (HEAPU8[($456($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)
                              ) {
                                break label$3;
                              }
                              $443($0_1 | 0) | 0;
                              HEAP8[$6_1 >> 0] = 1;
                              $2_1 = ($444($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
                              break label$2;
                            }
                            label$18: {
                              if (
                                ((($441($0_1 | 0) | 0) & 255) | 0 | 0) !=
                                (HEAPU8[($456($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)
                              ) {
                                break label$18;
                              }
                              $443($0_1 | 0) | 0;
                              $2_1 = ($444($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
                              break label$2;
                            }
                            label$19: {
                              if (
                                ((($441($0_1 | 0) | 0) & 255) | 0 | 0) !=
                                (HEAPU8[($456($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)
                              ) {
                                break label$19;
                              }
                              $443($0_1 | 0) | 0;
                              HEAP8[$6_1 >> 0] = 1;
                              $2_1 = ($444($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
                              break label$2;
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                            $0_1 = 0;
                            break label$4;
                          }
                          label$20: {
                            if ($1_1 >>> 0 < 2 >>> 0) {
                              break label$20;
                            }
                            if ($10_1) {
                              break label$20;
                            }
                            $2_1 = 0;
                            if (
                              (((($1_1 | 0) == (2 | 0)) &
                                ((HEAPU8[(($11_1 + 123) | 0) >> 0] | 0 | 0) != (0 | 0))) |
                                0 |
                                $19_1 |
                                0 |
                                0) !=
                              (1 | 0)
                            ) {
                              break label$2;
                            }
                          }
                          HEAP32[(($11_1 + 16) | 0) >> 2] = $557($14_1 | 0) | 0;
                          $4_1 = $755(($11_1 + 24) | 0 | 0, ($11_1 + 16) | 0 | 0, 0 | 0) | 0;
                          label$21: {
                            if (!$1_1) {
                              break label$21;
                            }
                            if (
                              (HEAPU8[(((($1_1 + (($11_1 + 120) | 0)) | 0) + -1) | 0) >> 0] | 0) >>> 0 >
                              1 >>> 0
                            ) {
                              break label$21;
                            }
                            label$22: {
                              label$23: while (1) {
                                HEAP32[(($11_1 + 16) | 0) >> 2] = $558($14_1 | 0) | 0;
                                if (!($756($4_1 | 0, ($11_1 + 16) | 0 | 0) | 0)) {
                                  break label$22;
                                }
                                if (
                                  !($632($7_1 | 0, 8192 | 0, HEAP8[($757($4_1 | 0) | 0) >> 0] | 0 | 0) | 0)
                                ) {
                                  break label$22;
                                }
                                $758($4_1 | 0) | 0;
                                continue label$23;
                              }
                            }
                            HEAP32[(($11_1 + 16) | 0) >> 2] = $557($14_1 | 0) | 0;
                            label$24: {
                              $4_1 = $759($4_1 | 0, ($11_1 + 16) | 0 | 0) | 0;
                              if ($4_1 >>> 0 > ($444($17_1 | 0) | 0) >>> 0) {
                                break label$24;
                              }
                              HEAP32[(($11_1 + 16) | 0) >> 2] = $558($17_1 | 0) | 0;
                              if (
                                $761(
                                  $760(($11_1 + 16) | 0 | 0, $4_1 | 0) | 0 | 0,
                                  $558($17_1 | 0) | 0 | 0,
                                  $557($14_1 | 0) | 0 | 0
                                ) | 0
                              ) {
                                break label$21;
                              }
                            }
                            HEAP32[(($11_1 + 8) | 0) >> 2] = $557($14_1 | 0) | 0;
                            $755(($11_1 + 16) | 0 | 0, ($11_1 + 8) | 0 | 0, 0 | 0) | 0;
                            HEAP32[(($11_1 + 24) | 0) >> 2] = HEAP32[(($11_1 + 16) | 0) >> 2] | 0;
                          }
                          HEAP32[(($11_1 + 16) | 0) >> 2] = HEAP32[(($11_1 + 24) | 0) >> 2] | 0;
                          label$25: {
                            label$26: while (1) {
                              HEAP32[(($11_1 + 8) | 0) >> 2] = $558($14_1 | 0) | 0;
                              if (!($756(($11_1 + 16) | 0 | 0, ($11_1 + 8) | 0 | 0) | 0)) {
                                break label$25;
                              }
                              if (!($439($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                                break label$25;
                              }
                              if (
                                ((($441($0_1 | 0) | 0) & 255) | 0 | 0) !=
                                (HEAPU8[($757(($11_1 + 16) | 0 | 0) | 0) >> 0] | 0 | 0)
                              ) {
                                break label$25;
                              }
                              $443($0_1 | 0) | 0;
                              $758(($11_1 + 16) | 0 | 0) | 0;
                              continue label$26;
                            }
                          }
                          if (!$18_1) {
                            break label$3;
                          }
                          HEAP32[(($11_1 + 8) | 0) >> 2] = $558($14_1 | 0) | 0;
                          if (!($756(($11_1 + 16) | 0 | 0, ($11_1 + 8) | 0 | 0) | 0)) {
                            break label$3;
                          }
                          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                          $0_1 = 0;
                          break label$4;
                        }
                        label$27: {
                          label$28: while (1) {
                            if (!($439($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                              break label$27;
                            }
                            label$29: {
                              label$30: {
                                $2_1 = $441($0_1 | 0) | 0;
                                if (!($632($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
                                  break label$30;
                                }
                                label$31: {
                                  $3_1 = HEAP32[$9_1 >> 2] | 0;
                                  if (($3_1 | 0) != (HEAP32[(($11_1 + 548) | 0) >> 2] | 0 | 0)) {
                                    break label$31;
                                  }
                                  $762($8_1 | 0, $9_1 | 0, ($11_1 + 548) | 0 | 0);
                                  $3_1 = HEAP32[$9_1 >> 2] | 0;
                                }
                                HEAP32[$9_1 >> 2] = ($3_1 + 1) | 0;
                                HEAP8[$3_1 >> 0] = $2_1;
                                $4_1 = ($4_1 + 1) | 0;
                                break label$29;
                              }
                              $3_1 = $444($13_1 | 0) | 0;
                              if (!$4_1) {
                                break label$27;
                              }
                              if (!$3_1) {
                                break label$27;
                              }
                              if (
                                (($2_1 & 255) | 0 | 0) !=
                                (((HEAPU8[(($11_1 + 118) | 0) >> 0] | 0) & 255) | 0 | 0)
                              ) {
                                break label$27;
                              }
                              label$32: {
                                $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                                if (($2_1 | 0) != (HEAP32[(($11_1 + 128) | 0) >> 2] | 0 | 0)) {
                                  break label$32;
                                }
                                $763($12_1 | 0, ($11_1 + 132) | 0 | 0, ($11_1 + 128) | 0 | 0);
                                $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                              }
                              HEAP32[(($11_1 + 132) | 0) >> 2] = ($2_1 + 4) | 0;
                              HEAP32[$2_1 >> 2] = $4_1;
                              $4_1 = 0;
                            }
                            $443($0_1 | 0) | 0;
                            continue label$28;
                          }
                        }
                        $3_1 = $751($12_1 | 0) | 0;
                        label$33: {
                          if (!$4_1) {
                            break label$33;
                          }
                          $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                          if (($3_1 | 0) == ($2_1 | 0)) {
                            break label$33;
                          }
                          label$34: {
                            if (($2_1 | 0) != (HEAP32[(($11_1 + 128) | 0) >> 2] | 0 | 0)) {
                              break label$34;
                            }
                            $763($12_1 | 0, ($11_1 + 132) | 0 | 0, ($11_1 + 128) | 0 | 0);
                            $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                          }
                          HEAP32[(($11_1 + 132) | 0) >> 2] = ($2_1 + 4) | 0;
                          HEAP32[$2_1 >> 2] = $4_1;
                        }
                        label$35: {
                          if ((HEAP32[(($11_1 + 36) | 0) >> 2] | 0 | 0) < (1 | 0)) {
                            break label$35;
                          }
                          label$36: {
                            label$37: {
                              if ($440($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0) {
                                break label$37;
                              }
                              if (
                                ((($441($0_1 | 0) | 0) & 255) | 0 | 0) ==
                                (HEAPU8[(($11_1 + 119) | 0) >> 0] | 0 | 0)
                              ) {
                                break label$36;
                              }
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                            $0_1 = 0;
                            break label$4;
                          }
                          label$38: while (1) {
                            $443($0_1 | 0) | 0;
                            if ((HEAP32[(($11_1 + 36) | 0) >> 2] | 0 | 0) < (1 | 0)) {
                              break label$35;
                            }
                            label$39: {
                              label$40: {
                                if ($440($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0) {
                                  break label$40;
                                }
                                if ($632($7_1 | 0, 2048 | 0, $441($0_1 | 0) | 0 | 0) | 0) {
                                  break label$39;
                                }
                              }
                              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                              $0_1 = 0;
                              break label$4;
                            }
                            label$41: {
                              if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[(($11_1 + 548) | 0) >> 2] | 0 | 0)) {
                                break label$41;
                              }
                              $762($8_1 | 0, $9_1 | 0, ($11_1 + 548) | 0 | 0);
                            }
                            $4_1 = $441($0_1 | 0) | 0;
                            $2_1 = HEAP32[$9_1 >> 2] | 0;
                            HEAP32[$9_1 >> 2] = ($2_1 + 1) | 0;
                            HEAP8[$2_1 >> 0] = $4_1;
                            HEAP32[(($11_1 + 36) | 0) >> 2] =
                              ((HEAP32[(($11_1 + 36) | 0) >> 2] | 0) + -1) | 0;
                            continue label$38;
                          }
                        }
                        $2_1 = $10_1;
                        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($748($8_1 | 0) | 0 | 0)) {
                          break label$2;
                        }
                        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                        $0_1 = 0;
                        break label$4;
                      }
                      label$42: {
                        if (!$10_1) {
                          break label$42;
                        }
                        $4_1 = 1;
                        label$43: while (1) {
                          if ($4_1 >>> 0 >= ($444($10_1 | 0) | 0) >>> 0) {
                            break label$42;
                          }
                          label$44: {
                            label$45: {
                              if ($440($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0) {
                                break label$45;
                              }
                              if (
                                ((($441($0_1 | 0) | 0) & 255) | 0 | 0) ==
                                (HEAPU8[($445($10_1 | 0, $4_1 | 0) | 0) >> 0] | 0 | 0)
                              ) {
                                break label$44;
                              }
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                            $0_1 = 0;
                            break label$4;
                          }
                          $443($0_1 | 0) | 0;
                          $4_1 = ($4_1 + 1) | 0;
                          continue label$43;
                        }
                      }
                      $0_1 = 1;
                      if (($751($12_1 | 0) | 0 | 0) == (HEAP32[(($11_1 + 132) | 0) >> 2] | 0 | 0)) {
                        break label$4;
                      }
                      $0_1 = 0;
                      HEAP32[(($11_1 + 24) | 0) >> 2] = 0;
                      $459(
                        $13_1 | 0,
                        $751($12_1 | 0) | 0 | 0,
                        HEAP32[(($11_1 + 132) | 0) >> 2] | 0 | 0,
                        ($11_1 + 24) | 0 | 0
                      );
                      label$46: {
                        if (!(HEAP32[(($11_1 + 24) | 0) >> 2] | 0)) {
                          break label$46;
                        }
                        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                        break label$4;
                      }
                      $0_1 = 1;
                    }
                    $1540($17_1 | 0) | 0;
                    $1540($16_1 | 0) | 0;
                    $1540($15_1 | 0) | 0;
                    $1540($14_1 | 0) | 0;
                    $1540($13_1 | 0) | 0;
                    $764($12_1 | 0) | 0;
                    global$0 = ($11_1 + 560) | 0;
                    return $0_1 | 0;
                  }
                  $2_1 = $10_1;
                }
                $1_1 = ($1_1 + 1) | 0;
                continue label$1;
              }
            }

            function $748($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[($765($0_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $749($0_1) {
              $0_1 = $0_1 | 0;
              return ($0_1 + 10) | 0 | 0;
            }

            function $750($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 12) | 0) >> 2] = $1_1;
              $776($0_1 | 0, ($3_1 + 12) | 0 | 0, $586($2_1 | 0) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $751($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[($777($0_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $752($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $14_1 = 0;
              $10_1 = (global$0 - 16) | 0;
              global$0 = $10_1;
              label$1: {
                label$2: {
                  if (!$0_1) {
                    break label$2;
                  }
                  $0_1 = $778($1_1 | 0) | 0;
                  $779($10_1 | 0, $0_1 | 0);
                  $11_1 = $2_1;
                  $12_1 = HEAP32[$10_1 >> 2] | 0;
                  HEAP8[$11_1 >> 0] = $12_1;
                  HEAP8[(($11_1 + 1) | 0) >> 0] = ($12_1 >>> 8) | 0;
                  HEAP8[(($11_1 + 2) | 0) >> 0] = ($12_1 >>> 16) | 0;
                  HEAP8[(($11_1 + 3) | 0) >> 0] = ($12_1 >>> 24) | 0;
                  $780($10_1 | 0, $0_1 | 0);
                  $781($8_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $782($10_1 | 0, $0_1 | 0);
                  $781($7_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  HEAP8[$3_1 >> 0] = $783($0_1 | 0) | 0;
                  HEAP8[$4_1 >> 0] = $784($0_1 | 0) | 0;
                  $785($10_1 | 0, $0_1 | 0);
                  $781($5_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $786($10_1 | 0, $0_1 | 0);
                  $781($6_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $0_1 = $787($0_1 | 0) | 0;
                  break label$1;
                }
                $0_1 = $788($1_1 | 0) | 0;
                $789($10_1 | 0, $0_1 | 0);
                $13_1 = $2_1;
                $14_1 = HEAP32[$10_1 >> 2] | 0;
                HEAP8[$13_1 >> 0] = $14_1;
                HEAP8[(($13_1 + 1) | 0) >> 0] = ($14_1 >>> 8) | 0;
                HEAP8[(($13_1 + 2) | 0) >> 0] = ($14_1 >>> 16) | 0;
                HEAP8[(($13_1 + 3) | 0) >> 0] = ($14_1 >>> 24) | 0;
                $790($10_1 | 0, $0_1 | 0);
                $781($8_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $791($10_1 | 0, $0_1 | 0);
                $781($7_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                HEAP8[$3_1 >> 0] = $792($0_1 | 0) | 0;
                HEAP8[$4_1 >> 0] = $793($0_1 | 0) | 0;
                $794($10_1 | 0, $0_1 | 0);
                $781($5_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $795($10_1 | 0, $0_1 | 0);
                $781($6_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $0_1 = $796($0_1 | 0) | 0;
              }
              HEAP32[$9_1 >> 2] = $0_1;
              global$0 = ($10_1 + 16) | 0;
            }

            function $753($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $797(
                $0_1 | 0,
                (((($499(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24) | 0) >> 24) | 0 | 0,
                HEAP32[$1_1 >> 2] | 0 | 0
              ) | 0;
            }

            function $754($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP8[$0_1 >> 0] | 0 | 0;
            }

            function $755($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              HEAP32[$0_1 >> 2] = $798($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $756($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($799($0_1 | 0, $1_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $757($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $758($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + 1) | 0;
              return $0_1 | 0;
            }

            function $759($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($800($0_1 | 0) | 0) - ($798($1_1 | 0) | 0)) | 0 | 0;
            }

            function $760($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $802($0_1 | 0, (0 - $1_1) | 0 | 0) | 0 | 0;
            }

            function $761($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $801($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $762($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $8_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = HEAP32[($803($0_1 | 0) | 0) >> 2] | 0;
              label$1: {
                label$2: {
                  $5_1 = ((HEAP32[$2_1 >> 2] | 0) - ($748($0_1 | 0) | 0)) | 0;
                  if ($5_1 >>> 0 >= ((($218() | 0) >>> 1) | 0) >>> 0) {
                    break label$2;
                  }
                  $5_1 = ($5_1 << 1) | 0;
                  break label$1;
                }
                $5_1 = $218() | 0;
              }
              $5_1 = $5_1 ? $5_1 : 1;
              $6_1 = HEAP32[$1_1 >> 2] | 0;
              $7_1 = $748($0_1 | 0) | 0;
              label$3: {
                label$4: {
                  if (($4_1 | 0) != (32 | 0)) {
                    break label$4;
                  }
                  $8_1 = 0;
                  break label$3;
                }
                $8_1 = $748($0_1 | 0) | 0;
              }
              label$5: {
                $8_1 = $1700($8_1 | 0, $5_1 | 0) | 0;
                if (!$8_1) {
                  break label$5;
                }
                label$6: {
                  if (($4_1 | 0) == (32 | 0)) {
                    break label$6;
                  }
                  $804($0_1 | 0) | 0;
                }
                HEAP32[(($3_1 + 4) | 0) >> 2] = 31;
                $4_1 = $581(($3_1 + 8) | 0 | 0, $8_1 | 0, ($3_1 + 4) | 0 | 0) | 0;
                $805($0_1 | 0, $4_1 | 0) | 0;
                $585($4_1 | 0) | 0;
                HEAP32[$1_1 >> 2] = (($748($0_1 | 0) | 0) + (($6_1 - $7_1) | 0)) | 0;
                HEAP32[$2_1 >> 2] = (($748($0_1 | 0) | 0) + $5_1) | 0;
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1570();
              abort();
            }

            function $763($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $8_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = HEAP32[($806($0_1 | 0) | 0) >> 2] | 0;
              label$1: {
                label$2: {
                  $5_1 = ((HEAP32[$2_1 >> 2] | 0) - ($751($0_1 | 0) | 0)) | 0;
                  if ($5_1 >>> 0 >= ((($218() | 0) >>> 1) | 0) >>> 0) {
                    break label$2;
                  }
                  $5_1 = ($5_1 << 1) | 0;
                  break label$1;
                }
                $5_1 = $218() | 0;
              }
              $5_1 = $5_1 ? $5_1 : 4;
              $6_1 = HEAP32[$1_1 >> 2] | 0;
              $7_1 = $751($0_1 | 0) | 0;
              label$3: {
                label$4: {
                  if (($4_1 | 0) != (32 | 0)) {
                    break label$4;
                  }
                  $8_1 = 0;
                  break label$3;
                }
                $8_1 = $751($0_1 | 0) | 0;
              }
              label$5: {
                $8_1 = $1700($8_1 | 0, $5_1 | 0) | 0;
                if (!$8_1) {
                  break label$5;
                }
                label$6: {
                  if (($4_1 | 0) == (32 | 0)) {
                    break label$6;
                  }
                  $807($0_1 | 0) | 0;
                }
                HEAP32[(($3_1 + 4) | 0) >> 2] = 31;
                $4_1 = $750(($3_1 + 8) | 0 | 0, $8_1 | 0, ($3_1 + 4) | 0 | 0) | 0;
                $808($0_1 | 0, $4_1 | 0) | 0;
                $764($4_1 | 0) | 0;
                HEAP32[$1_1 >> 2] = (($751($0_1 | 0) | 0) + (($6_1 - $7_1) | 0)) | 0;
                HEAP32[$2_1 >> 2] = (($751($0_1 | 0) | 0) + (($5_1 & -4) | 0)) | 0;
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1570();
              abort();
            }

            function $764($0_1) {
              $0_1 = $0_1 | 0;
              $810($0_1 | 0, 0 | 0);
              return $0_1 | 0;
            }

            function $765($0_1) {
              $0_1 = $0_1 | 0;
              return $1407($0_1 | 0) | 0 | 0;
            }

            function $766($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0;
              $7_1 = (global$0 - 160) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 144) | 0) >> 2] = $2_1;
              HEAP32[(($7_1 + 152) | 0) >> 2] = $1_1;
              HEAP32[(($7_1 + 20) | 0) >> 2] = 32;
              $8_1 = $581(($7_1 + 24) | 0 | 0, ($7_1 + 32) | 0 | 0, ($7_1 + 20) | 0 | 0) | 0;
              $1487(($7_1 + 16) | 0 | 0, $4_1 | 0);
              $1_1 = $112(($7_1 + 16) | 0 | 0) | 0;
              HEAP8[(($7_1 + 15) | 0) >> 0] = 0;
              label$1: {
                if (
                  !(
                    $747(
                      ($7_1 + 152) | 0 | 0,
                      $2_1 | 0,
                      $3_1 | 0,
                      ($7_1 + 16) | 0 | 0,
                      $83($4_1 | 0) | 0 | 0,
                      $5_1 | 0,
                      ($7_1 + 15) | 0 | 0,
                      $1_1 | 0,
                      $8_1 | 0,
                      ($7_1 + 20) | 0 | 0,
                      ($7_1 + 132) | 0 | 0
                    ) | 0
                  )
                ) {
                  break label$1;
                }
                $767($6_1 | 0);
                label$2: {
                  if (!(HEAPU8[(($7_1 + 15) | 0) >> 0] | 0)) {
                    break label$2;
                  }
                  $1550($6_1 | 0, $113($1_1 | 0, 45 | 0) | 0 | 0);
                }
                $1_1 = $113($1_1 | 0, 48 | 0) | 0;
                $4_1 = $748($8_1 | 0) | 0;
                $9_1 = HEAP32[(($7_1 + 20) | 0) >> 2] | 0;
                $2_1 = ($9_1 + -1) | 0;
                $3_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $4_1 : $2_1;
                $1_1 = ($1_1 & 255) | 0;
                label$3: while (1) {
                  label$4: {
                    label$5: {
                      if ($4_1 >>> 0 >= $2_1 >>> 0) {
                        break label$5;
                      }
                      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == ($1_1 | 0)) {
                        break label$4;
                      }
                      $3_1 = $4_1;
                    }
                    $768($6_1 | 0, $3_1 | 0, $9_1 | 0) | 0;
                    break label$1;
                  }
                  $4_1 = ($4_1 + 1) | 0;
                  continue label$3;
                }
              }
              label$6: {
                if (!($440(($7_1 + 152) | 0 | 0, ($7_1 + 144) | 0 | 0) | 0)) {
                  break label$6;
                }
                HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
              }
              $4_1 = HEAP32[(($7_1 + 152) | 0) >> 2] | 0;
              $430(($7_1 + 16) | 0 | 0) | 0;
              $585($8_1 | 0) | 0;
              global$0 = ($7_1 + 160) | 0;
              return $4_1 | 0;
            }

            function $767($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $769($0_1 | 0);
              label$1: {
                label$2: {
                  if (!($104($0_1 | 0) | 0)) {
                    break label$2;
                  }
                  $2_1 = $770($0_1 | 0) | 0;
                  HEAP8[(($1_1 + 15) | 0) >> 0] = 0;
                  $771($2_1 | 0, ($1_1 + 15) | 0 | 0);
                  $772($0_1 | 0, 0 | 0);
                  break label$1;
                }
                $2_1 = $773($0_1 | 0) | 0;
                HEAP8[(($1_1 + 14) | 0) >> 0] = 0;
                $771($2_1 | 0, ($1_1 + 14) | 0 | 0);
                $774($0_1 | 0, 0 | 0);
              }
              global$0 = ($1_1 + 16) | 0;
            }

            function $768($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $775($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $769($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $770($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[($1213($0_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $771($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
            }

            function $772($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[((($1213($0_1 | 0) | 0) + 4) | 0) >> 2] = $1_1;
            }

            function $773($0_1) {
              $0_1 = $0_1 | 0;
              return $1268($1213($0_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $774($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP8[((($1213($0_1 | 0) | 0) + 11) | 0) >> 0] = $1_1;
            }

            function $775($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              $4_1 = $444($0_1 | 0) | 0;
              $5_1 = $454($0_1 | 0) | 0;
              label$1: {
                $6_1 = $1408($1_1 | 0, $2_1 | 0) | 0;
                if (!$6_1) {
                  break label$1;
                }
                label$2: {
                  if (
                    !(
                      $1409(
                        $1280($1_1 | 0) | 0 | 0,
                        $574($0_1 | 0) | 0 | 0,
                        (($574($0_1 | 0) | 0) + ($444($0_1 | 0) | 0)) | 0 | 0
                      ) | 0
                    )
                  ) {
                    break label$2;
                  }
                  $1_1 = $1410(($3_1 + 16) | 0 | 0, $1_1 | 0, $2_1 | 0, $1211($0_1 | 0) | 0 | 0) | 0;
                  $1549($0_1 | 0, $91($1_1 | 0) | 0 | 0, $444($1_1 | 0) | 0 | 0) | 0;
                  $1540($1_1 | 0) | 0;
                  break label$1;
                }
                label$3: {
                  if ((($5_1 - $4_1) | 0) >>> 0 >= $6_1 >>> 0) {
                    break label$3;
                  }
                  $1547(
                    $0_1 | 0,
                    $5_1 | 0,
                    ((($6_1 + $4_1) | 0) - $5_1) | 0 | 0,
                    $4_1 | 0,
                    $4_1 | 0,
                    0 | 0,
                    0 | 0
                  );
                }
                $5_1 = (($493($0_1 | 0) | 0) + $4_1) | 0;
                label$4: {
                  label$5: while (1) {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    $771($5_1 | 0, $1_1 | 0);
                    $1_1 = ($1_1 + 1) | 0;
                    $5_1 = ($5_1 + 1) | 0;
                    continue label$5;
                  }
                }
                HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                $771($5_1 | 0, ($3_1 + 15) | 0 | 0);
                $1411($0_1 | 0, ($6_1 + $4_1) | 0 | 0);
              }
              global$0 = ($3_1 + 32) | 0;
              return $0_1 | 0;
            }

            function $776($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1418($0_1 | 0, $1417($1_1 | 0) | 0 | 0) | 0;
              $1366(($0_1 + 4) | 0 | 0, $1365($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $777($0_1) {
              $0_1 = $0_1 | 0;
              return $1422($0_1 | 0) | 0 | 0;
            }

            function $778($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17728 | 0) | 0 | 0;
            }

            function $779($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 44) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $780($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 32) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $781($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $866($0_1 | 0, $1_1 | 0);
              return $0_1 | 0;
            }

            function $782($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $783($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $784($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $785($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $786($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $787($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $788($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17720 | 0) | 0 | 0;
            }

            function $789($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 44) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $790($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 32) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $791($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $792($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $793($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $794($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $795($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $796($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $797($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $2_1;
              HEAP8[$0_1 >> 0] = $1_1;
              return $0_1 | 0;
            }

            function $798($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $799($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($800($0_1 | 0) | 0 | 0) == ($798($1_1 | 0) | 0 | 0)) | 0;
            }

            function $800($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $801($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 16) | 0) >> 2] = $1_1;
              HEAP32[(($3_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $2_1;
              label$1: {
                label$2: while (1) {
                  $2_1 = $559(($3_1 + 24) | 0 | 0, ($3_1 + 16) | 0 | 0) | 0;
                  if (!$2_1) {
                    break label$1;
                  }
                  if (
                    !(
                      $1423($3_1 | 0, $560(($3_1 + 24) | 0 | 0) | 0 | 0, $560(($3_1 + 8) | 0 | 0) | 0 | 0) | 0
                    )
                  ) {
                    break label$1;
                  }
                  $563(($3_1 + 24) | 0 | 0) | 0;
                  $563(($3_1 + 8) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              global$0 = ($3_1 + 32) | 0;
              return ($2_1 ^ 1) | 0 | 0;
            }

            function $802($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 8) | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
              $1206(($2_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $1_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $803($0_1) {
              $0_1 = $0_1 | 0;
              return $589($0_1 | 0) | 0 | 0;
            }

            function $804($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[($588($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($588($0_1 | 0) | 0) >> 2] = 0;
              return $1_1 | 0;
            }

            function $805($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $583($0_1 | 0, $804($1_1 | 0) | 0 | 0);
              $1_1 = HEAP32[($1365($803($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              HEAP32[($589($0_1 | 0) | 0) >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $806($0_1) {
              $0_1 = $0_1 | 0;
              return $1420($0_1 | 0) | 0 | 0;
            }

            function $807($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[($1419($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($1419($0_1 | 0) | 0) >> 2] = 0;
              return $1_1 | 0;
            }

            function $808($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $810($0_1 | 0, $807($1_1 | 0) | 0 | 0);
              $1_1 = HEAP32[($1365($806($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              HEAP32[($1420($0_1 | 0) | 0) >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $809($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1140($0_1 | 0, $1_1 | 0);
            }

            function $810($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[($1419($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($1419($0_1 | 0) | 0) >> 2] = $1_1;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[($1420($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
              }
            }

            function $811($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $10_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                i64toi32_i32$1 = 0;
              $7_1 = (global$0 - 624) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 608) | 0) >> 2] = $2_1;
              HEAP32[(($7_1 + 616) | 0) >> 2] = $1_1;
              HEAP32[(($7_1 + 16) | 0) >> 2] = 32;
              $1_1 = $619(($7_1 + 200) | 0 | 0, ($7_1 + 208) | 0 | 0, ($7_1 + 16) | 0 | 0) | 0;
              $1487(($7_1 + 192) | 0 | 0, $4_1 | 0);
              $8_1 = $503(($7_1 + 192) | 0 | 0) | 0;
              HEAP8[(($7_1 + 191) | 0) >> 0] = 0;
              label$1: {
                if (
                  !(
                    $812(
                      ($7_1 + 616) | 0 | 0,
                      $2_1 | 0,
                      $3_1 | 0,
                      ($7_1 + 192) | 0 | 0,
                      $83($4_1 | 0) | 0 | 0,
                      $5_1 | 0,
                      ($7_1 + 191) | 0 | 0,
                      $8_1 | 0,
                      $1_1 | 0,
                      ($7_1 + 196) | 0 | 0,
                      ($7_1 + 608) | 0 | 0
                    ) | 0
                  )
                ) {
                  break label$1;
                }
                $11_1 = 0;
                $12_1 =
                  HEAPU8[(($11_1 + 8699) | 0) >> 0] |
                  0 |
                  (((HEAPU8[(($11_1 + 8700) | 0) >> 0] | 0) << 8) | 0) |
                  0 |
                  (((HEAPU8[(($11_1 + 8701) | 0) >> 0] | 0) << 16) |
                    0 |
                    (((HEAPU8[(($11_1 + 8702) | 0) >> 0] | 0) << 24) | 0) |
                    0) |
                  0;
                HEAP8[(($7_1 + 183) | 0) >> 0] = $12_1;
                HEAP8[(($7_1 + 184) | 0) >> 0] = ($12_1 >>> 8) | 0;
                HEAP8[(($7_1 + 185) | 0) >> 0] = ($12_1 >>> 16) | 0;
                HEAP8[(($7_1 + 186) | 0) >> 0] = ($12_1 >>> 24) | 0;
                $10_1 = 0;
                i64toi32_i32$1 =
                  HEAPU8[(($10_1 + 8696) | 0) >> 0] |
                  0 |
                  (((HEAPU8[(($10_1 + 8697) | 0) >> 0] | 0) << 8) | 0) |
                  0 |
                  (((HEAPU8[(($10_1 + 8698) | 0) >> 0] | 0) << 16) |
                    0 |
                    (((HEAPU8[(($10_1 + 8699) | 0) >> 0] | 0) << 24) | 0) |
                    0) |
                  0;
                HEAP32[(($7_1 + 176) | 0) >> 2] =
                  HEAPU8[(($10_1 + 8692) | 0) >> 0] |
                  0 |
                  (((HEAPU8[(($10_1 + 8693) | 0) >> 0] | 0) << 8) | 0) |
                  0 |
                  (((HEAPU8[(($10_1 + 8694) | 0) >> 0] | 0) << 16) |
                    0 |
                    (((HEAPU8[(($10_1 + 8695) | 0) >> 0] | 0) << 24) | 0) |
                    0) |
                  0;
                HEAP32[(($7_1 + 180) | 0) >> 2] = i64toi32_i32$1;
                $541($8_1 | 0, ($7_1 + 176) | 0 | 0, ($7_1 + 186) | 0 | 0, ($7_1 + 128) | 0 | 0) | 0;
                HEAP32[(($7_1 + 16) | 0) >> 2] = 31;
                $8_1 = $581(($7_1 + 8) | 0 | 0, 0 | 0, ($7_1 + 16) | 0 | 0) | 0;
                $2_1 = ($7_1 + 16) | 0;
                label$2: {
                  label$3: {
                    if (
                      (((HEAP32[(($7_1 + 196) | 0) >> 2] | 0) - ($813($1_1 | 0) | 0)) | 0 | 0) <
                      (393 | 0)
                    ) {
                      break label$3;
                    }
                    $583(
                      $8_1 | 0,
                      $1698(
                        ((((((HEAP32[(($7_1 + 196) | 0) >> 2] | 0) - ($813($1_1 | 0) | 0)) | 0) >> 2) | 0) +
                          2) |
                          0 |
                          0
                      ) |
                        0 |
                        0
                    );
                    if (!($748($8_1 | 0) | 0)) {
                      break label$2;
                    }
                    $2_1 = $748($8_1 | 0) | 0;
                  }
                  label$4: {
                    if (!(HEAPU8[(($7_1 + 191) | 0) >> 0] | 0)) {
                      break label$4;
                    }
                    HEAP8[$2_1 >> 0] = 45;
                    $2_1 = ($2_1 + 1) | 0;
                  }
                  $4_1 = $813($1_1 | 0) | 0;
                  label$5: {
                    label$6: while (1) {
                      label$7: {
                        if ($4_1 >>> 0 < (HEAP32[(($7_1 + 196) | 0) >> 2] | 0) >>> 0) {
                          break label$7;
                        }
                        HEAP8[$2_1 >> 0] = 0;
                        HEAP32[$7_1 >> 2] = $6_1;
                        if (($369(($7_1 + 16) | 0 | 0, 8688 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
                          break label$5;
                        }
                        $585($8_1 | 0) | 0;
                        break label$1;
                      }
                      HEAP8[$2_1 >> 0] =
                        HEAPU8[
                          (((($7_1 + 176) | 0) +
                            ((((($554(($7_1 + 128) | 0 | 0, $814(($7_1 + 128) | 0 | 0) | 0 | 0, $4_1 | 0) |
                              0) -
                              (($7_1 + 128) | 0)) |
                              0) >>
                              2) |
                              0)) |
                            0) >>
                            0
                        ] | 0;
                      $2_1 = ($2_1 + 1) | 0;
                      $4_1 = ($4_1 + 4) | 0;
                      continue label$6;
                    }
                  }
                  $701($7_1 | 0);
                  abort();
                }
                $1570();
                abort();
              }
              label$8: {
                if (!($510(($7_1 + 616) | 0 | 0, ($7_1 + 608) | 0 | 0) | 0)) {
                  break label$8;
                }
                HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
              }
              $4_1 = HEAP32[(($7_1 + 616) | 0) >> 2] | 0;
              $430(($7_1 + 192) | 0 | 0) | 0;
              $622($1_1 | 0) | 0;
              global$0 = ($7_1 + 624) | 0;
              return $4_1 | 0;
            }

            function $812($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              $10_1 = $10_1 | 0;
              var $11_1 = 0,
                $15_1 = 0,
                $16_1 = 0,
                $14_1 = 0,
                $12_1 = 0,
                $17_1 = 0,
                $13_1 = 0,
                $18_1 = 0,
                $19_1 = 0;
              $11_1 = (global$0 - 560) | 0;
              global$0 = $11_1;
              HEAP32[(($11_1 + 548) | 0) >> 2] = $10_1;
              HEAP32[(($11_1 + 552) | 0) >> 2] = $1_1;
              HEAP32[(($11_1 + 96) | 0) >> 2] = 32;
              $12_1 = $750(($11_1 + 136) | 0 | 0, ($11_1 + 144) | 0 | 0, ($11_1 + 96) | 0 | 0) | 0;
              $1_1 = $751($12_1 | 0) | 0;
              HEAP32[(($11_1 + 132) | 0) >> 2] = $1_1;
              HEAP32[(($11_1 + 128) | 0) >> 2] = ($1_1 + 400) | 0;
              $13_1 = $453(($11_1 + 96) | 0 | 0) | 0;
              $14_1 = $729(($11_1 + 80) | 0 | 0) | 0;
              $15_1 = $729(($11_1 + 64) | 0 | 0) | 0;
              $16_1 = $729(($11_1 + 48) | 0 | 0) | 0;
              $17_1 = $729(($11_1 + 32) | 0 | 0) | 0;
              $815(
                $2_1 | 0,
                $3_1 | 0,
                ($11_1 + 120) | 0 | 0,
                ($11_1 + 116) | 0 | 0,
                ($11_1 + 112) | 0 | 0,
                $13_1 | 0,
                $14_1 | 0,
                $15_1 | 0,
                $16_1 | 0,
                ($11_1 + 28) | 0 | 0
              );
              HEAP32[$9_1 >> 2] = $813($8_1 | 0) | 0;
              $18_1 = ($4_1 & 512) | 0;
              $19_1 = ($18_1 >>> 9) | 0;
              $1_1 = 0;
              $2_1 = 0;
              label$1: while (1) {
                $10_1 = $2_1;
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (($1_1 | 0) == (4 | 0)) {
                          break label$5;
                        }
                        if (!($509($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                          break label$5;
                        }
                        $4_1 = 0;
                        $2_1 = $10_1;
                        label$6: {
                          label$7: {
                            label$8: {
                              label$9: {
                                label$10: {
                                  switch (HEAP8[(((($11_1 + 120) | 0) + $1_1) | 0) >> 0] | 0 | 0) {
                                    case 1:
                                      if (($1_1 | 0) == (3 | 0)) {
                                        break label$3;
                                      }
                                      label$12: {
                                        if (!($658($7_1 | 0, 8192 | 0, $511($0_1 | 0) | 0 | 0) | 0)) {
                                          break label$12;
                                        }
                                        $816(($11_1 + 16) | 0 | 0, $0_1 | 0, 0 | 0);
                                        $1567($17_1 | 0, $817(($11_1 + 16) | 0 | 0) | 0 | 0);
                                        break label$9;
                                      }
                                      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                                      $0_1 = 0;
                                      break label$4;
                                    case 0:
                                      break label$10;
                                    case 4:
                                      break label$6;
                                    case 2:
                                      break label$7;
                                    case 3:
                                      break label$8;
                                    default:
                                      break label$2;
                                  }
                                }
                                if (($1_1 | 0) == (3 | 0)) {
                                  break label$3;
                                }
                              }
                              label$13: while (1) {
                                if (!($509($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                                  break label$3;
                                }
                                if (!($658($7_1 | 0, 8192 | 0, $511($0_1 | 0) | 0 | 0) | 0)) {
                                  break label$3;
                                }
                                $816(($11_1 + 16) | 0 | 0, $0_1 | 0, 0 | 0);
                                $1567($17_1 | 0, $817(($11_1 + 16) | 0 | 0) | 0 | 0);
                                continue label$13;
                              }
                            }
                            if (($514($15_1 | 0) | 0 | 0) == ((0 - ($514($16_1 | 0) | 0)) | 0 | 0)) {
                              break label$3;
                            }
                            label$14: {
                              label$15: {
                                if (!($514($15_1 | 0) | 0)) {
                                  break label$15;
                                }
                                if ($514($16_1 | 0) | 0) {
                                  break label$14;
                                }
                              }
                              $4_1 = $514($15_1 | 0) | 0;
                              $2_1 = $511($0_1 | 0) | 0;
                              label$16: {
                                if (!$4_1) {
                                  break label$16;
                                }
                                label$17: {
                                  if (($2_1 | 0) != (HEAP32[($818($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
                                    break label$17;
                                  }
                                  $513($0_1 | 0) | 0;
                                  $2_1 = ($514($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
                                  break label$2;
                                }
                                HEAP8[$6_1 >> 0] = 1;
                                break label$3;
                              }
                              if (($2_1 | 0) != (HEAP32[($818($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
                                break label$3;
                              }
                              $513($0_1 | 0) | 0;
                              HEAP8[$6_1 >> 0] = 1;
                              $2_1 = ($514($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
                              break label$2;
                            }
                            label$18: {
                              if (
                                ($511($0_1 | 0) | 0 | 0) !=
                                (HEAP32[($818($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)
                              ) {
                                break label$18;
                              }
                              $513($0_1 | 0) | 0;
                              $2_1 = ($514($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
                              break label$2;
                            }
                            label$19: {
                              if (
                                ($511($0_1 | 0) | 0 | 0) !=
                                (HEAP32[($818($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)
                              ) {
                                break label$19;
                              }
                              $513($0_1 | 0) | 0;
                              HEAP8[$6_1 >> 0] = 1;
                              $2_1 = ($514($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
                              break label$2;
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                            $0_1 = 0;
                            break label$4;
                          }
                          label$20: {
                            if ($1_1 >>> 0 < 2 >>> 0) {
                              break label$20;
                            }
                            if ($10_1) {
                              break label$20;
                            }
                            $2_1 = 0;
                            if (
                              (((($1_1 | 0) == (2 | 0)) &
                                ((HEAPU8[(($11_1 + 123) | 0) >> 0] | 0 | 0) != (0 | 0))) |
                                0 |
                                $19_1 |
                                0 |
                                0) !=
                              (1 | 0)
                            ) {
                              break label$2;
                            }
                          }
                          HEAP32[(($11_1 + 8) | 0) >> 2] = $593($14_1 | 0) | 0;
                          $4_1 = $819(($11_1 + 16) | 0 | 0, ($11_1 + 8) | 0 | 0, 0 | 0) | 0;
                          label$21: {
                            if (!$1_1) {
                              break label$21;
                            }
                            if (
                              (HEAPU8[(((($1_1 + (($11_1 + 120) | 0)) | 0) + -1) | 0) >> 0] | 0) >>> 0 >
                              1 >>> 0
                            ) {
                              break label$21;
                            }
                            label$22: {
                              label$23: while (1) {
                                HEAP32[(($11_1 + 8) | 0) >> 2] = $594($14_1 | 0) | 0;
                                if (!($820($4_1 | 0, ($11_1 + 8) | 0 | 0) | 0)) {
                                  break label$22;
                                }
                                if (
                                  !($658($7_1 | 0, 8192 | 0, HEAP32[($821($4_1 | 0) | 0) >> 2] | 0 | 0) | 0)
                                ) {
                                  break label$22;
                                }
                                $822($4_1 | 0) | 0;
                                continue label$23;
                              }
                            }
                            HEAP32[(($11_1 + 8) | 0) >> 2] = $593($14_1 | 0) | 0;
                            label$24: {
                              $4_1 = $823($4_1 | 0, ($11_1 + 8) | 0 | 0) | 0;
                              if ($4_1 >>> 0 > ($514($17_1 | 0) | 0) >>> 0) {
                                break label$24;
                              }
                              HEAP32[(($11_1 + 8) | 0) >> 2] = $594($17_1 | 0) | 0;
                              if (
                                $825(
                                  $824(($11_1 + 8) | 0 | 0, $4_1 | 0) | 0 | 0,
                                  $594($17_1 | 0) | 0 | 0,
                                  $593($14_1 | 0) | 0 | 0
                                ) | 0
                              ) {
                                break label$21;
                              }
                            }
                            HEAP32[$11_1 >> 2] = $593($14_1 | 0) | 0;
                            $819(($11_1 + 8) | 0 | 0, $11_1 | 0, 0 | 0) | 0;
                            HEAP32[(($11_1 + 16) | 0) >> 2] = HEAP32[(($11_1 + 8) | 0) >> 2] | 0;
                          }
                          HEAP32[(($11_1 + 8) | 0) >> 2] = HEAP32[(($11_1 + 16) | 0) >> 2] | 0;
                          label$25: {
                            label$26: while (1) {
                              HEAP32[$11_1 >> 2] = $594($14_1 | 0) | 0;
                              if (!($820(($11_1 + 8) | 0 | 0, $11_1 | 0) | 0)) {
                                break label$25;
                              }
                              if (!($509($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                                break label$25;
                              }
                              if (
                                ($511($0_1 | 0) | 0 | 0) !=
                                (HEAP32[($821(($11_1 + 8) | 0 | 0) | 0) >> 2] | 0 | 0)
                              ) {
                                break label$25;
                              }
                              $513($0_1 | 0) | 0;
                              $822(($11_1 + 8) | 0 | 0) | 0;
                              continue label$26;
                            }
                          }
                          if (!$18_1) {
                            break label$3;
                          }
                          HEAP32[$11_1 >> 2] = $594($14_1 | 0) | 0;
                          if (!($820(($11_1 + 8) | 0 | 0, $11_1 | 0) | 0)) {
                            break label$3;
                          }
                          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                          $0_1 = 0;
                          break label$4;
                        }
                        label$27: {
                          label$28: while (1) {
                            if (!($509($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0)) {
                              break label$27;
                            }
                            label$29: {
                              label$30: {
                                $2_1 = $511($0_1 | 0) | 0;
                                if (!($658($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
                                  break label$30;
                                }
                                label$31: {
                                  $3_1 = HEAP32[$9_1 >> 2] | 0;
                                  if (($3_1 | 0) != (HEAP32[(($11_1 + 548) | 0) >> 2] | 0 | 0)) {
                                    break label$31;
                                  }
                                  $826($8_1 | 0, $9_1 | 0, ($11_1 + 548) | 0 | 0);
                                  $3_1 = HEAP32[$9_1 >> 2] | 0;
                                }
                                HEAP32[$9_1 >> 2] = ($3_1 + 4) | 0;
                                HEAP32[$3_1 >> 2] = $2_1;
                                $4_1 = ($4_1 + 1) | 0;
                                break label$29;
                              }
                              $3_1 = $444($13_1 | 0) | 0;
                              if (!$4_1) {
                                break label$27;
                              }
                              if (!$3_1) {
                                break label$27;
                              }
                              if (($2_1 | 0) != (HEAP32[(($11_1 + 112) | 0) >> 2] | 0 | 0)) {
                                break label$27;
                              }
                              label$32: {
                                $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                                if (($2_1 | 0) != (HEAP32[(($11_1 + 128) | 0) >> 2] | 0 | 0)) {
                                  break label$32;
                                }
                                $763($12_1 | 0, ($11_1 + 132) | 0 | 0, ($11_1 + 128) | 0 | 0);
                                $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                              }
                              HEAP32[(($11_1 + 132) | 0) >> 2] = ($2_1 + 4) | 0;
                              HEAP32[$2_1 >> 2] = $4_1;
                              $4_1 = 0;
                            }
                            $513($0_1 | 0) | 0;
                            continue label$28;
                          }
                        }
                        $3_1 = $751($12_1 | 0) | 0;
                        label$33: {
                          if (!$4_1) {
                            break label$33;
                          }
                          $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                          if (($3_1 | 0) == ($2_1 | 0)) {
                            break label$33;
                          }
                          label$34: {
                            if (($2_1 | 0) != (HEAP32[(($11_1 + 128) | 0) >> 2] | 0 | 0)) {
                              break label$34;
                            }
                            $763($12_1 | 0, ($11_1 + 132) | 0 | 0, ($11_1 + 128) | 0 | 0);
                            $2_1 = HEAP32[(($11_1 + 132) | 0) >> 2] | 0;
                          }
                          HEAP32[(($11_1 + 132) | 0) >> 2] = ($2_1 + 4) | 0;
                          HEAP32[$2_1 >> 2] = $4_1;
                        }
                        label$35: {
                          if ((HEAP32[(($11_1 + 28) | 0) >> 2] | 0 | 0) < (1 | 0)) {
                            break label$35;
                          }
                          label$36: {
                            label$37: {
                              if ($510($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0) {
                                break label$37;
                              }
                              if (($511($0_1 | 0) | 0 | 0) == (HEAP32[(($11_1 + 116) | 0) >> 2] | 0 | 0)) {
                                break label$36;
                              }
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                            $0_1 = 0;
                            break label$4;
                          }
                          label$38: while (1) {
                            $513($0_1 | 0) | 0;
                            if ((HEAP32[(($11_1 + 28) | 0) >> 2] | 0 | 0) < (1 | 0)) {
                              break label$35;
                            }
                            label$39: {
                              label$40: {
                                if ($510($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0) {
                                  break label$40;
                                }
                                if ($658($7_1 | 0, 2048 | 0, $511($0_1 | 0) | 0 | 0) | 0) {
                                  break label$39;
                                }
                              }
                              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                              $0_1 = 0;
                              break label$4;
                            }
                            label$41: {
                              if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[(($11_1 + 548) | 0) >> 2] | 0 | 0)) {
                                break label$41;
                              }
                              $826($8_1 | 0, $9_1 | 0, ($11_1 + 548) | 0 | 0);
                            }
                            $4_1 = $511($0_1 | 0) | 0;
                            $2_1 = HEAP32[$9_1 >> 2] | 0;
                            HEAP32[$9_1 >> 2] = ($2_1 + 4) | 0;
                            HEAP32[$2_1 >> 2] = $4_1;
                            HEAP32[(($11_1 + 28) | 0) >> 2] =
                              ((HEAP32[(($11_1 + 28) | 0) >> 2] | 0) + -1) | 0;
                            continue label$38;
                          }
                        }
                        $2_1 = $10_1;
                        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($813($8_1 | 0) | 0 | 0)) {
                          break label$2;
                        }
                        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                        $0_1 = 0;
                        break label$4;
                      }
                      label$42: {
                        if (!$10_1) {
                          break label$42;
                        }
                        $4_1 = 1;
                        label$43: while (1) {
                          if ($4_1 >>> 0 >= ($514($10_1 | 0) | 0) >>> 0) {
                            break label$42;
                          }
                          label$44: {
                            label$45: {
                              if ($510($0_1 | 0, ($11_1 + 552) | 0 | 0) | 0) {
                                break label$45;
                              }
                              if (
                                ($511($0_1 | 0) | 0 | 0) ==
                                (HEAP32[($515($10_1 | 0, $4_1 | 0) | 0) >> 2] | 0 | 0)
                              ) {
                                break label$44;
                              }
                            }
                            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                            $0_1 = 0;
                            break label$4;
                          }
                          $513($0_1 | 0) | 0;
                          $4_1 = ($4_1 + 1) | 0;
                          continue label$43;
                        }
                      }
                      $0_1 = 1;
                      if (($751($12_1 | 0) | 0 | 0) == (HEAP32[(($11_1 + 132) | 0) >> 2] | 0 | 0)) {
                        break label$4;
                      }
                      $0_1 = 0;
                      HEAP32[(($11_1 + 16) | 0) >> 2] = 0;
                      $459(
                        $13_1 | 0,
                        $751($12_1 | 0) | 0 | 0,
                        HEAP32[(($11_1 + 132) | 0) >> 2] | 0 | 0,
                        ($11_1 + 16) | 0 | 0
                      );
                      label$46: {
                        if (!(HEAP32[(($11_1 + 16) | 0) >> 2] | 0)) {
                          break label$46;
                        }
                        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
                        break label$4;
                      }
                      $0_1 = 1;
                    }
                    $1560($17_1 | 0) | 0;
                    $1560($16_1 | 0) | 0;
                    $1560($15_1 | 0) | 0;
                    $1560($14_1 | 0) | 0;
                    $1540($13_1 | 0) | 0;
                    $764($12_1 | 0) | 0;
                    global$0 = ($11_1 + 560) | 0;
                    return $0_1 | 0;
                  }
                  $2_1 = $10_1;
                }
                $1_1 = ($1_1 + 1) | 0;
                continue label$1;
              }
            }

            function $813($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[($827($0_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $814($0_1) {
              $0_1 = $0_1 | 0;
              return ($0_1 + 40) | 0 | 0;
            }

            function $815($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $14_1 = 0;
              $10_1 = (global$0 - 16) | 0;
              global$0 = $10_1;
              label$1: {
                label$2: {
                  if (!$0_1) {
                    break label$2;
                  }
                  $0_1 = $838($1_1 | 0) | 0;
                  $839($10_1 | 0, $0_1 | 0);
                  $11_1 = $2_1;
                  $12_1 = HEAP32[$10_1 >> 2] | 0;
                  HEAP8[$11_1 >> 0] = $12_1;
                  HEAP8[(($11_1 + 1) | 0) >> 0] = ($12_1 >>> 8) | 0;
                  HEAP8[(($11_1 + 2) | 0) >> 0] = ($12_1 >>> 16) | 0;
                  HEAP8[(($11_1 + 3) | 0) >> 0] = ($12_1 >>> 24) | 0;
                  $840($10_1 | 0, $0_1 | 0);
                  $841($8_1 | 0, $10_1 | 0) | 0;
                  $1560($10_1 | 0) | 0;
                  $842($10_1 | 0, $0_1 | 0);
                  $841($7_1 | 0, $10_1 | 0) | 0;
                  $1560($10_1 | 0) | 0;
                  HEAP32[$3_1 >> 2] = $843($0_1 | 0) | 0;
                  HEAP32[$4_1 >> 2] = $844($0_1 | 0) | 0;
                  $845($10_1 | 0, $0_1 | 0);
                  $781($5_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $846($10_1 | 0, $0_1 | 0);
                  $841($6_1 | 0, $10_1 | 0) | 0;
                  $1560($10_1 | 0) | 0;
                  $0_1 = $847($0_1 | 0) | 0;
                  break label$1;
                }
                $0_1 = $848($1_1 | 0) | 0;
                $849($10_1 | 0, $0_1 | 0);
                $13_1 = $2_1;
                $14_1 = HEAP32[$10_1 >> 2] | 0;
                HEAP8[$13_1 >> 0] = $14_1;
                HEAP8[(($13_1 + 1) | 0) >> 0] = ($14_1 >>> 8) | 0;
                HEAP8[(($13_1 + 2) | 0) >> 0] = ($14_1 >>> 16) | 0;
                HEAP8[(($13_1 + 3) | 0) >> 0] = ($14_1 >>> 24) | 0;
                $850($10_1 | 0, $0_1 | 0);
                $841($8_1 | 0, $10_1 | 0) | 0;
                $1560($10_1 | 0) | 0;
                $851($10_1 | 0, $0_1 | 0);
                $841($7_1 | 0, $10_1 | 0) | 0;
                $1560($10_1 | 0) | 0;
                HEAP32[$3_1 >> 2] = $852($0_1 | 0) | 0;
                HEAP32[$4_1 >> 2] = $853($0_1 | 0) | 0;
                $854($10_1 | 0, $0_1 | 0);
                $781($5_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $855($10_1 | 0, $0_1 | 0);
                $841($6_1 | 0, $10_1 | 0) | 0;
                $1560($10_1 | 0) | 0;
                $0_1 = $856($0_1 | 0) | 0;
              }
              HEAP32[$9_1 >> 2] = $0_1;
              global$0 = ($10_1 + 16) | 0;
            }

            function $816($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $857($0_1 | 0, $545(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
            }

            function $817($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $818($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($601($0_1 | 0) | 0) + (($1_1 << 2) | 0)) | 0 | 0;
            }

            function $819($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              HEAP32[$0_1 >> 2] = $858($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $820($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($859($0_1 | 0, $1_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $821($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $822($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + 4) | 0;
              return $0_1 | 0;
            }

            function $823($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (((($860($0_1 | 0) | 0) - ($858($1_1 | 0) | 0)) | 0) >> 2) | 0 | 0;
            }

            function $824($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $862($0_1 | 0, (0 - $1_1) | 0 | 0) | 0 | 0;
            }

            function $825($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $861($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $826($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $8_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = HEAP32[($863($0_1 | 0) | 0) >> 2] | 0;
              label$1: {
                label$2: {
                  $5_1 = ((HEAP32[$2_1 >> 2] | 0) - ($813($0_1 | 0) | 0)) | 0;
                  if ($5_1 >>> 0 >= ((($218() | 0) >>> 1) | 0) >>> 0) {
                    break label$2;
                  }
                  $5_1 = ($5_1 << 1) | 0;
                  break label$1;
                }
                $5_1 = $218() | 0;
              }
              $5_1 = $5_1 ? $5_1 : 4;
              $6_1 = HEAP32[$1_1 >> 2] | 0;
              $7_1 = $813($0_1 | 0) | 0;
              label$3: {
                label$4: {
                  if (($4_1 | 0) != (32 | 0)) {
                    break label$4;
                  }
                  $8_1 = 0;
                  break label$3;
                }
                $8_1 = $813($0_1 | 0) | 0;
              }
              label$5: {
                $8_1 = $1700($8_1 | 0, $5_1 | 0) | 0;
                if (!$8_1) {
                  break label$5;
                }
                label$6: {
                  if (($4_1 | 0) == (32 | 0)) {
                    break label$6;
                  }
                  $864($0_1 | 0) | 0;
                }
                HEAP32[(($3_1 + 4) | 0) >> 2] = 31;
                $4_1 = $619(($3_1 + 8) | 0 | 0, $8_1 | 0, ($3_1 + 4) | 0 | 0) | 0;
                $865($0_1 | 0, $4_1 | 0) | 0;
                $622($4_1 | 0) | 0;
                HEAP32[$1_1 >> 2] = (($813($0_1 | 0) | 0) + (($6_1 - $7_1) | 0)) | 0;
                HEAP32[$2_1 >> 2] = (($813($0_1 | 0) | 0) + (($5_1 & -4) | 0)) | 0;
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1570();
              abort();
            }

            function $827($0_1) {
              $0_1 = $0_1 | 0;
              return $1424($0_1 | 0) | 0 | 0;
            }

            function $828($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $8_1 = 0;
              $7_1 = (global$0 - 448) | 0;
              global$0 = $7_1;
              HEAP32[(($7_1 + 432) | 0) >> 2] = $2_1;
              HEAP32[(($7_1 + 440) | 0) >> 2] = $1_1;
              HEAP32[(($7_1 + 20) | 0) >> 2] = 32;
              $8_1 = $619(($7_1 + 24) | 0 | 0, ($7_1 + 32) | 0 | 0, ($7_1 + 20) | 0 | 0) | 0;
              $1487(($7_1 + 16) | 0 | 0, $4_1 | 0);
              $1_1 = $503(($7_1 + 16) | 0 | 0) | 0;
              HEAP8[(($7_1 + 15) | 0) >> 0] = 0;
              label$1: {
                if (
                  !(
                    $812(
                      ($7_1 + 440) | 0 | 0,
                      $2_1 | 0,
                      $3_1 | 0,
                      ($7_1 + 16) | 0 | 0,
                      $83($4_1 | 0) | 0 | 0,
                      $5_1 | 0,
                      ($7_1 + 15) | 0 | 0,
                      $1_1 | 0,
                      $8_1 | 0,
                      ($7_1 + 20) | 0 | 0,
                      ($7_1 + 432) | 0 | 0
                    ) | 0
                  )
                ) {
                  break label$1;
                }
                $829($6_1 | 0);
                label$2: {
                  if (!(HEAPU8[(($7_1 + 15) | 0) >> 0] | 0)) {
                    break label$2;
                  }
                  $1567($6_1 | 0, $610($1_1 | 0, 45 | 0) | 0 | 0);
                }
                $1_1 = $610($1_1 | 0, 48 | 0) | 0;
                $4_1 = $813($8_1 | 0) | 0;
                $3_1 = HEAP32[(($7_1 + 20) | 0) >> 2] | 0;
                $2_1 = ($3_1 + -4) | 0;
                label$3: {
                  label$4: while (1) {
                    if ($4_1 >>> 0 >= $2_1 >>> 0) {
                      break label$3;
                    }
                    if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
                      break label$3;
                    }
                    $4_1 = ($4_1 + 4) | 0;
                    continue label$4;
                  }
                }
                $830($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
              }
              label$5: {
                if (!($510(($7_1 + 440) | 0 | 0, ($7_1 + 432) | 0 | 0) | 0)) {
                  break label$5;
                }
                HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
              }
              $4_1 = HEAP32[(($7_1 + 440) | 0) >> 2] | 0;
              $430(($7_1 + 16) | 0 | 0) | 0;
              $622($8_1 | 0) | 0;
              global$0 = ($7_1 + 448) | 0;
              return $4_1 | 0;
            }

            function $829($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $831($0_1 | 0);
              label$1: {
                label$2: {
                  if (!($665($0_1 | 0) | 0)) {
                    break label$2;
                  }
                  $2_1 = $832($0_1 | 0) | 0;
                  HEAP32[(($1_1 + 12) | 0) >> 2] = 0;
                  $833($2_1 | 0, ($1_1 + 12) | 0 | 0);
                  $834($0_1 | 0, 0 | 0);
                  break label$1;
                }
                $2_1 = $835($0_1 | 0) | 0;
                HEAP32[(($1_1 + 8) | 0) >> 2] = 0;
                $833($2_1 | 0, ($1_1 + 8) | 0 | 0);
                $836($0_1 | 0, 0 | 0);
              }
              global$0 = ($1_1 + 16) | 0;
            }

            function $830($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $837($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
            }

            function $831($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $832($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[($1225($0_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $833($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
            }

            function $834($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[((($1225($0_1 | 0) | 0) + 4) | 0) >> 2] = $1_1;
            }

            function $835($0_1) {
              $0_1 = $0_1 | 0;
              return $1348($1225($0_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $836($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP8[((($1225($0_1 | 0) | 0) + 11) | 0) >> 0] = $1_1;
            }

            function $837($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = $514($0_1 | 0) | 0;
              $5_1 = $1177($0_1 | 0) | 0;
              label$1: {
                $6_1 = $1176($1_1 | 0, $2_1 | 0) | 0;
                if (!$6_1) {
                  break label$1;
                }
                label$2: {
                  if (
                    !(
                      $1425(
                        $1355($1_1 | 0) | 0 | 0,
                        $614($0_1 | 0) | 0 | 0,
                        (($614($0_1 | 0) | 0) + ((($514($0_1 | 0) | 0) << 2) | 0)) | 0 | 0
                      ) | 0
                    )
                  ) {
                    break label$2;
                  }
                  $1_1 = $1426($3_1 | 0, $1_1 | 0, $2_1 | 0, $1223($0_1 | 0) | 0 | 0) | 0;
                  $1566($0_1 | 0, $662($1_1 | 0) | 0 | 0, $514($1_1 | 0) | 0 | 0) | 0;
                  $1560($1_1 | 0) | 0;
                  break label$1;
                }
                label$3: {
                  if ((($5_1 - $4_1) | 0) >>> 0 >= $6_1 >>> 0) {
                    break label$3;
                  }
                  $1564(
                    $0_1 | 0,
                    $5_1 | 0,
                    ((($6_1 + $4_1) | 0) - $5_1) | 0 | 0,
                    $4_1 | 0,
                    $4_1 | 0,
                    0 | 0,
                    0 | 0
                  );
                }
                $5_1 = (($601($0_1 | 0) | 0) + (($4_1 << 2) | 0)) | 0;
                label$4: {
                  label$5: while (1) {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    $833($5_1 | 0, $1_1 | 0);
                    $1_1 = ($1_1 + 4) | 0;
                    $5_1 = ($5_1 + 4) | 0;
                    continue label$5;
                  }
                }
                HEAP32[$3_1 >> 2] = 0;
                $833($5_1 | 0, $3_1 | 0);
                $1179($0_1 | 0, ($6_1 + $4_1) | 0 | 0);
              }
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $838($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17744 | 0) | 0 | 0;
            }

            function $839($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 44) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $840($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 32) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $841($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $867($0_1 | 0, $1_1 | 0);
              return $0_1 | 0;
            }

            function $842($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $843($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $844($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $845($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $846($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $847($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $848($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17736 | 0) | 0 | 0;
            }

            function $849($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 44) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $850($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 32) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $851($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $852($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $853($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $854($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $855($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $856($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $857($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $2_1;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $858($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $859($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($860($0_1 | 0) | 0 | 0) == ($858($1_1 | 0) | 0 | 0)) | 0;
            }

            function $860($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $861($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 16) | 0) >> 2] = $1_1;
              HEAP32[(($3_1 + 24) | 0) >> 2] = $0_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $2_1;
              label$1: {
                label$2: while (1) {
                  $2_1 = $595(($3_1 + 24) | 0 | 0, ($3_1 + 16) | 0 | 0) | 0;
                  if (!$2_1) {
                    break label$1;
                  }
                  if (
                    !(
                      $1431($3_1 | 0, $596(($3_1 + 24) | 0 | 0) | 0 | 0, $596(($3_1 + 8) | 0 | 0) | 0 | 0) | 0
                    )
                  ) {
                    break label$1;
                  }
                  $599(($3_1 + 24) | 0 | 0) | 0;
                  $599(($3_1 + 8) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              global$0 = ($3_1 + 32) | 0;
              return ($2_1 ^ 1) | 0 | 0;
            }

            function $862($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 8) | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
              $1207(($2_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $1_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $863($0_1) {
              $0_1 = $0_1 | 0;
              return $625($0_1 | 0) | 0 | 0;
            }

            function $864($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[($624($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($624($0_1 | 0) | 0) >> 2] = 0;
              return $1_1 | 0;
            }

            function $865($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $620($0_1 | 0, $864($1_1 | 0) | 0 | 0);
              $1_1 = HEAP32[($1365($863($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              HEAP32[($625($0_1 | 0) | 0) >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $866($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                i64toi32_i32$1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                if (!($104($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1209($1211($0_1 | 0) | 0 | 0, $770($0_1 | 0) | 0 | 0, $492($0_1 | 0) | 0 | 0);
              }
              $1369($0_1 | 0, $1_1 | 0);
              $3_1 = $1213($1_1 | 0) | 0;
              $0_1 = $1213($0_1 | 0) | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
              HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = i64toi32_i32$1;
              $774($1_1 | 0, 0 | 0);
              $0_1 = $773($1_1 | 0) | 0;
              HEAP8[(($2_1 + 15) | 0) >> 0] = 0;
              $771($0_1 | 0, ($2_1 + 15) | 0 | 0);
              global$0 = ($2_1 + 16) | 0;
            }

            function $867($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                i64toi32_i32$1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1221($1223($0_1 | 0) | 0 | 0, $832($0_1 | 0) | 0 | 0, $1226($0_1 | 0) | 0 | 0);
              }
              $1373($0_1 | 0, $1_1 | 0);
              $3_1 = $1225($1_1 | 0) | 0;
              $0_1 = $1225($0_1 | 0) | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
              HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = i64toi32_i32$1;
              $836($1_1 | 0, 0 | 0);
              $0_1 = $835($1_1 | 0) | 0;
              HEAP32[(($2_1 + 12) | 0) >> 2] = 0;
              $833($0_1 | 0, ($2_1 + 12) | 0 | 0);
              global$0 = ($2_1 + 16) | 0;
            }

            function $868($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $5$hi = $5$hi | 0;
              $6_1 = $6_1 | 0;
              $6$hi = $6$hi | 0;
              var $7_1 = 0,
                $8_1 = 0,
                i64toi32_i32$0 = 0,
                $12_1 = 0,
                $14_1 = 0,
                $16_1 = 0,
                $18_1 = 0,
                $11_1 = 0,
                $9_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $10_1 = 0,
                $13_1 = 0;
              $7_1 = (global$0 - 464) | 0;
              global$0 = $7_1;
              i64toi32_i32$0 = $5$hi;
              HEAP32[(($7_1 + 16) | 0) >> 2] = $5_1;
              HEAP32[(($7_1 + 20) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $6$hi;
              HEAP32[(($7_1 + 24) | 0) >> 2] = $6_1;
              HEAP32[(($7_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(($7_1 + 348) | 0) >> 2] = ($7_1 + 352) | 0;
              $8_1 = $370(($7_1 + 352) | 0 | 0, 100 | 0, 8703 | 0, ($7_1 + 16) | 0 | 0) | 0;
              HEAP32[(($7_1 + 240) | 0) >> 2] = 31;
              $9_1 = 0;
              $10_1 = $581(($7_1 + 232) | 0 | 0, 0 | 0, ($7_1 + 240) | 0 | 0) | 0;
              HEAP32[(($7_1 + 240) | 0) >> 2] = 31;
              $11_1 = $581(($7_1 + 224) | 0 | 0, 0 | 0, ($7_1 + 240) | 0 | 0) | 0;
              $12_1 = ($7_1 + 240) | 0;
              label$1: {
                label$2: {
                  if ($8_1 >>> 0 < 100 >>> 0) {
                    break label$2;
                  }
                  $8_1 = $489() | 0;
                  i64toi32_i32$0 = $5$hi;
                  HEAP32[$7_1 >> 2] = $5_1;
                  HEAP32[(($7_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$0 = $6$hi;
                  HEAP32[(($7_1 + 8) | 0) >> 2] = $6_1;
                  HEAP32[(($7_1 + 12) | 0) >> 2] = i64toi32_i32$0;
                  $8_1 = $582(($7_1 + 348) | 0 | 0, $8_1 | 0, 8703 | 0, $7_1 | 0) | 0;
                  $12_1 = HEAP32[(($7_1 + 348) | 0) >> 2] | 0;
                  if (!$12_1) {
                    break label$1;
                  }
                  $583($10_1 | 0, $12_1 | 0);
                  $583($11_1 | 0, $1698($8_1 | 0) | 0 | 0);
                  if ($869($11_1 | 0, 0 | 0) | 0) {
                    break label$1;
                  }
                  $12_1 = $748($11_1 | 0) | 0;
                }
                $1487(($7_1 + 216) | 0 | 0, $3_1 | 0);
                $13_1 = $112(($7_1 + 216) | 0 | 0) | 0;
                $14_1 = HEAP32[(($7_1 + 348) | 0) >> 2] | 0;
                $487($13_1 | 0, $14_1 | 0, ($14_1 + $8_1) | 0 | 0, $12_1 | 0) | 0;
                label$3: {
                  if (!$8_1) {
                    break label$3;
                  }
                  $9_1 = (HEAPU8[(HEAP32[(($7_1 + 348) | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
                }
                $15_1 = $453(($7_1 + 192) | 0 | 0) | 0;
                $14_1 = $453(($7_1 + 176) | 0 | 0) | 0;
                $16_1 = $453(($7_1 + 160) | 0 | 0) | 0;
                $870(
                  $2_1 | 0,
                  $9_1 | 0,
                  ($7_1 + 216) | 0 | 0,
                  ($7_1 + 208) | 0 | 0,
                  ($7_1 + 207) | 0 | 0,
                  ($7_1 + 206) | 0 | 0,
                  $15_1 | 0,
                  $14_1 | 0,
                  $16_1 | 0,
                  ($7_1 + 156) | 0 | 0
                );
                HEAP32[(($7_1 + 48) | 0) >> 2] = 31;
                $17_1 = $581(($7_1 + 40) | 0 | 0, 0 | 0, ($7_1 + 48) | 0 | 0) | 0;
                label$4: {
                  label$5: {
                    $2_1 = HEAP32[(($7_1 + 156) | 0) >> 2] | 0;
                    if (($8_1 | 0) <= ($2_1 | 0)) {
                      break label$5;
                    }
                    $18_1 = ((((($8_1 - $2_1) | 0) << 1) | 0 | 1 | 0) + ($444($16_1 | 0) | 0)) | 0;
                    break label$4;
                  }
                  $18_1 = (($444($16_1 | 0) | 0) + 2) | 0;
                }
                $2_1 = ($7_1 + 48) | 0;
                label$6: {
                  $18_1 = ((($18_1 + ($444($14_1 | 0) | 0)) | 0) + (HEAP32[(($7_1 + 156) | 0) >> 2] | 0)) | 0;
                  if ($18_1 >>> 0 < 101 >>> 0) {
                    break label$6;
                  }
                  $583($17_1 | 0, $1698($18_1 | 0) | 0 | 0);
                  $2_1 = $748($17_1 | 0) | 0;
                  if (!$2_1) {
                    break label$1;
                  }
                }
                $871(
                  $2_1 | 0,
                  ($7_1 + 36) | 0 | 0,
                  ($7_1 + 32) | 0 | 0,
                  $83($3_1 | 0) | 0 | 0,
                  $12_1 | 0,
                  ($12_1 + $8_1) | 0 | 0,
                  $13_1 | 0,
                  $9_1 | 0,
                  ($7_1 + 208) | 0 | 0,
                  HEAP8[(($7_1 + 207) | 0) >> 0] | 0 | 0,
                  HEAP8[(($7_1 + 206) | 0) >> 0] | 0 | 0,
                  $15_1 | 0,
                  $14_1 | 0,
                  $16_1 | 0,
                  HEAP32[(($7_1 + 156) | 0) >> 2] | 0 | 0
                );
                $8_1 =
                  $85(
                    $1_1 | 0,
                    $2_1 | 0,
                    HEAP32[(($7_1 + 36) | 0) >> 2] | 0 | 0,
                    HEAP32[(($7_1 + 32) | 0) >> 2] | 0 | 0,
                    $3_1 | 0,
                    $4_1 | 0
                  ) | 0;
                $585($17_1 | 0) | 0;
                $1540($16_1 | 0) | 0;
                $1540($14_1 | 0) | 0;
                $1540($15_1 | 0) | 0;
                $430(($7_1 + 216) | 0 | 0) | 0;
                $585($11_1 | 0) | 0;
                $585($10_1 | 0) | 0;
                global$0 = ($7_1 + 464) | 0;
                return $8_1 | 0;
              }
              $1570();
              abort();
            }

            function $869($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($872($0_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $870($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $14_1 = 0;
              $10_1 = (global$0 - 16) | 0;
              global$0 = $10_1;
              label$1: {
                label$2: {
                  if (!$0_1) {
                    break label$2;
                  }
                  $0_1 = $778($2_1 | 0) | 0;
                  label$3: {
                    label$4: {
                      if (!$1_1) {
                        break label$4;
                      }
                      $779($10_1 | 0, $0_1 | 0);
                      $11_1 = HEAP32[$10_1 >> 2] | 0;
                      HEAP8[$3_1 >> 0] = $11_1;
                      HEAP8[(($3_1 + 1) | 0) >> 0] = ($11_1 >>> 8) | 0;
                      HEAP8[(($3_1 + 2) | 0) >> 0] = ($11_1 >>> 16) | 0;
                      HEAP8[(($3_1 + 3) | 0) >> 0] = ($11_1 >>> 24) | 0;
                      $780($10_1 | 0, $0_1 | 0);
                      $781($8_1 | 0, $10_1 | 0) | 0;
                      $1540($10_1 | 0) | 0;
                      break label$3;
                    }
                    $873($10_1 | 0, $0_1 | 0);
                    $12_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP8[$3_1 >> 0] = $12_1;
                    HEAP8[(($3_1 + 1) | 0) >> 0] = ($12_1 >>> 8) | 0;
                    HEAP8[(($3_1 + 2) | 0) >> 0] = ($12_1 >>> 16) | 0;
                    HEAP8[(($3_1 + 3) | 0) >> 0] = ($12_1 >>> 24) | 0;
                    $782($10_1 | 0, $0_1 | 0);
                    $781($8_1 | 0, $10_1 | 0) | 0;
                    $1540($10_1 | 0) | 0;
                  }
                  HEAP8[$4_1 >> 0] = $783($0_1 | 0) | 0;
                  HEAP8[$5_1 >> 0] = $784($0_1 | 0) | 0;
                  $785($10_1 | 0, $0_1 | 0);
                  $781($6_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $786($10_1 | 0, $0_1 | 0);
                  $781($7_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $0_1 = $787($0_1 | 0) | 0;
                  break label$1;
                }
                $0_1 = $788($2_1 | 0) | 0;
                label$5: {
                  label$6: {
                    if (!$1_1) {
                      break label$6;
                    }
                    $789($10_1 | 0, $0_1 | 0);
                    $13_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP8[$3_1 >> 0] = $13_1;
                    HEAP8[(($3_1 + 1) | 0) >> 0] = ($13_1 >>> 8) | 0;
                    HEAP8[(($3_1 + 2) | 0) >> 0] = ($13_1 >>> 16) | 0;
                    HEAP8[(($3_1 + 3) | 0) >> 0] = ($13_1 >>> 24) | 0;
                    $790($10_1 | 0, $0_1 | 0);
                    $781($8_1 | 0, $10_1 | 0) | 0;
                    $1540($10_1 | 0) | 0;
                    break label$5;
                  }
                  $874($10_1 | 0, $0_1 | 0);
                  $14_1 = HEAP32[$10_1 >> 2] | 0;
                  HEAP8[$3_1 >> 0] = $14_1;
                  HEAP8[(($3_1 + 1) | 0) >> 0] = ($14_1 >>> 8) | 0;
                  HEAP8[(($3_1 + 2) | 0) >> 0] = ($14_1 >>> 16) | 0;
                  HEAP8[(($3_1 + 3) | 0) >> 0] = ($14_1 >>> 24) | 0;
                  $791($10_1 | 0, $0_1 | 0);
                  $781($8_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                }
                HEAP8[$4_1 >> 0] = $792($0_1 | 0) | 0;
                HEAP8[$5_1 >> 0] = $793($0_1 | 0) | 0;
                $794($10_1 | 0, $0_1 | 0);
                $781($6_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $795($10_1 | 0, $0_1 | 0);
                $781($7_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $0_1 = $796($0_1 | 0) | 0;
              }
              HEAP32[$9_1 >> 2] = $0_1;
              global$0 = ($10_1 + 16) | 0;
            }

            function $871(
              $0_1,
              $1_1,
              $2_1,
              $3_1,
              $4_1,
              $5_1,
              $6_1,
              $7_1,
              $8_1,
              $9_1,
              $10_1,
              $11_1,
              $12_1,
              $13_1,
              $14_1
            ) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              $10_1 = $10_1 | 0;
              $11_1 = $11_1 | 0;
              $12_1 = $12_1 | 0;
              $13_1 = $13_1 | 0;
              $14_1 = $14_1 | 0;
              var $18_1 = 0,
                $19_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $23_1 = 0,
                $24_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $16_1 = 0,
                $20_1 = 0;
              $15_1 = (global$0 - 16) | 0;
              global$0 = $15_1;
              HEAP32[$2_1 >> 2] = $0_1;
              $16_1 = ($3_1 & 512) | 0;
              $17_1 = 0;
              label$1: while (1) {
                label$2: {
                  if (($17_1 | 0) != (4 | 0)) {
                    break label$2;
                  }
                  label$3: {
                    if (($444($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
                      break label$3;
                    }
                    HEAP32[(($15_1 + 8) | 0) >> 2] = $875($13_1 | 0) | 0;
                    HEAP32[$2_1 >> 2] =
                      $878(
                        $876(($15_1 + 8) | 0 | 0, 1 | 0) | 0 | 0,
                        $877($13_1 | 0) | 0 | 0,
                        HEAP32[$2_1 >> 2] | 0 | 0
                      ) | 0;
                  }
                  label$4: {
                    $18_1 = ($3_1 & 176) | 0;
                    if (($18_1 | 0) == (16 | 0)) {
                      break label$4;
                    }
                    label$5: {
                      if (($18_1 | 0) != (32 | 0)) {
                        break label$5;
                      }
                      $0_1 = HEAP32[$2_1 >> 2] | 0;
                    }
                    HEAP32[$1_1 >> 2] = $0_1;
                  }
                  global$0 = ($15_1 + 16) | 0;
                  return;
                }
                label$6: {
                  label$7: {
                    switch (HEAP8[(($8_1 + $17_1) | 0) >> 0] | 0 | 0) {
                      case 0:
                        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
                        break label$6;
                      case 1:
                        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
                        $18_1 = $113($6_1 | 0, 32 | 0) | 0;
                        $19_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($19_1 + 1) | 0;
                        HEAP8[$19_1 >> 0] = $18_1;
                        break label$6;
                      case 3:
                        if ($447($13_1 | 0) | 0) {
                          break label$6;
                        }
                        $18_1 = HEAPU8[($445($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
                        $19_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($19_1 + 1) | 0;
                        HEAP8[$19_1 >> 0] = $18_1;
                        break label$6;
                      case 2:
                        $18_1 = $447($12_1 | 0) | 0;
                        if (!$16_1) {
                          break label$6;
                        }
                        if ($18_1) {
                          break label$6;
                        }
                        HEAP32[$2_1 >> 2] =
                          $878($875($12_1 | 0) | 0 | 0, $877($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) |
                          0;
                        break label$6;
                      case 4:
                        break label$7;
                      default:
                        break label$6;
                    }
                  }
                  $20_1 = HEAP32[$2_1 >> 2] | 0;
                  $4_1 = $7_1 ? ($4_1 + 1) | 0 : $4_1;
                  $18_1 = $4_1;
                  label$12: {
                    label$13: while (1) {
                      if ($18_1 >>> 0 >= $5_1 >>> 0) {
                        break label$12;
                      }
                      if (!($632($6_1 | 0, 2048 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
                        break label$12;
                      }
                      $18_1 = ($18_1 + 1) | 0;
                      continue label$13;
                    }
                  }
                  $19_1 = $14_1;
                  label$14: {
                    if (($19_1 | 0) < (1 | 0)) {
                      break label$14;
                    }
                    label$15: {
                      label$16: while (1) {
                        $21_1 = ($19_1 | 0) < (1 | 0);
                        if ($21_1) {
                          break label$15;
                        }
                        if ($18_1 >>> 0 <= $4_1 >>> 0) {
                          break label$15;
                        }
                        $18_1 = ($18_1 + -1) | 0;
                        $21_1 = HEAPU8[$18_1 >> 0] | 0;
                        $22_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($22_1 + 1) | 0;
                        HEAP8[$22_1 >> 0] = $21_1;
                        $19_1 = ($19_1 + -1) | 0;
                        continue label$16;
                      }
                    }
                    label$17: {
                      label$18: {
                        if (!$21_1) {
                          break label$18;
                        }
                        $22_1 = 0;
                        break label$17;
                      }
                      $22_1 = $113($6_1 | 0, 48 | 0) | 0;
                    }
                    label$19: {
                      label$20: while (1) {
                        $21_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($21_1 + 1) | 0;
                        if (($19_1 | 0) < (1 | 0)) {
                          break label$19;
                        }
                        HEAP8[$21_1 >> 0] = $22_1;
                        $19_1 = ($19_1 + -1) | 0;
                        continue label$20;
                      }
                    }
                    HEAP8[$21_1 >> 0] = $9_1;
                  }
                  label$21: {
                    label$22: {
                      if (($18_1 | 0) != ($4_1 | 0)) {
                        break label$22;
                      }
                      $18_1 = $113($6_1 | 0, 48 | 0) | 0;
                      $19_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($19_1 + 1) | 0;
                      HEAP8[$19_1 >> 0] = $18_1;
                      break label$21;
                    }
                    label$23: {
                      label$24: {
                        if (!($447($11_1 | 0) | 0)) {
                          break label$24;
                        }
                        $23_1 = $212() | 0;
                        break label$23;
                      }
                      $23_1 = HEAP8[($445($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
                    }
                    $19_1 = 0;
                    $24_1 = 0;
                    label$25: while (1) {
                      if (($18_1 | 0) == ($4_1 | 0)) {
                        break label$21;
                      }
                      label$26: {
                        label$27: {
                          if (($19_1 | 0) == ($23_1 | 0)) {
                            break label$27;
                          }
                          $22_1 = $19_1;
                          break label$26;
                        }
                        $21_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($21_1 + 1) | 0;
                        HEAP8[$21_1 >> 0] = $10_1;
                        $22_1 = 0;
                        label$28: {
                          $24_1 = ($24_1 + 1) | 0;
                          if ($24_1 >>> 0 < ($444($11_1 | 0) | 0) >>> 0) {
                            break label$28;
                          }
                          $23_1 = $19_1;
                          break label$26;
                        }
                        label$29: {
                          if (
                            (HEAPU8[($445($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) !=
                            ((($195() | 0) & 255) | 0 | 0)
                          ) {
                            break label$29;
                          }
                          $23_1 = $212() | 0;
                          break label$26;
                        }
                        $23_1 = HEAP8[($445($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
                      }
                      $18_1 = ($18_1 + -1) | 0;
                      $19_1 = HEAPU8[$18_1 >> 0] | 0;
                      $21_1 = HEAP32[$2_1 >> 2] | 0;
                      HEAP32[$2_1 >> 2] = ($21_1 + 1) | 0;
                      HEAP8[$21_1 >> 0] = $19_1;
                      $19_1 = ($22_1 + 1) | 0;
                      continue label$25;
                    }
                  }
                  $573($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
                }
                $17_1 = ($17_1 + 1) | 0;
                continue label$1;
              }
            }

            function $872($0_1) {
              $0_1 = $0_1 | 0;
              return ((HEAP32[($765($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0)) | 0;
            }

            function $873($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $874($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $875($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 = HEAP32[($894(($1_1 + 8) | 0 | 0, $98($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $876($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 8) | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
              $895(($2_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $1_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $877($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 =
                HEAP32[
                  ($894(($1_1 + 8) | 0 | 0, (($98($0_1 | 0) | 0) + ($444($0_1 | 0) | 0)) | 0 | 0) | 0) >> 2
                ] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $878($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $893($892($0_1 | 0) | 0 | 0, $892($1_1 | 0) | 0 | 0, $693($2_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $879($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $13_1 = 0,
                $11_1 = 0,
                $10_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $12_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 192) | 0;
              global$0 = $6_1;
              $1487(($6_1 + 184) | 0 | 0, $3_1 | 0);
              $7_1 = $112(($6_1 + 184) | 0 | 0) | 0;
              $8_1 = 0;
              label$1: {
                if (!($444($5_1 | 0) | 0)) {
                  break label$1;
                }
                $8_1 =
                  (HEAPU8[($445($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) ==
                  ((($113($7_1 | 0, 45 | 0) | 0) & 255) | 0 | 0);
              }
              $9_1 = $453(($6_1 + 160) | 0 | 0) | 0;
              $10_1 = $453(($6_1 + 144) | 0 | 0) | 0;
              $11_1 = $453(($6_1 + 128) | 0 | 0) | 0;
              $870(
                $2_1 | 0,
                $8_1 | 0,
                ($6_1 + 184) | 0 | 0,
                ($6_1 + 176) | 0 | 0,
                ($6_1 + 175) | 0 | 0,
                ($6_1 + 174) | 0 | 0,
                $9_1 | 0,
                $10_1 | 0,
                $11_1 | 0,
                ($6_1 + 124) | 0 | 0
              );
              HEAP32[(($6_1 + 16) | 0) >> 2] = 31;
              $12_1 = $581(($6_1 + 8) | 0 | 0, 0 | 0, ($6_1 + 16) | 0 | 0) | 0;
              label$2: {
                label$3: {
                  if (($444($5_1 | 0) | 0 | 0) <= (HEAP32[(($6_1 + 124) | 0) >> 2] | 0 | 0)) {
                    break label$3;
                  }
                  $2_1 = $444($5_1 | 0) | 0;
                  $13_1 = HEAP32[(($6_1 + 124) | 0) >> 2] | 0;
                  $13_1 = (((($444($11_1 | 0) | 0) + (((($2_1 - $13_1) | 0) << 1) | 0)) | 0) + 1) | 0;
                  break label$2;
                }
                $13_1 = (($444($11_1 | 0) | 0) + 2) | 0;
              }
              $2_1 = ($6_1 + 16) | 0;
              label$4: {
                $13_1 = ((($13_1 + ($444($10_1 | 0) | 0)) | 0) + (HEAP32[(($6_1 + 124) | 0) >> 2] | 0)) | 0;
                if ($13_1 >>> 0 < 101 >>> 0) {
                  break label$4;
                }
                $583($12_1 | 0, $1698($13_1 | 0) | 0 | 0);
                $2_1 = $748($12_1 | 0) | 0;
                if ($2_1) {
                  break label$4;
                }
                $1570();
                abort();
              }
              $871(
                $2_1 | 0,
                ($6_1 + 4) | 0 | 0,
                $6_1 | 0,
                $83($3_1 | 0) | 0 | 0,
                $91($5_1 | 0) | 0 | 0,
                (($91($5_1 | 0) | 0) + ($444($5_1 | 0) | 0)) | 0 | 0,
                $7_1 | 0,
                $8_1 | 0,
                ($6_1 + 176) | 0 | 0,
                HEAP8[(($6_1 + 175) | 0) >> 0] | 0 | 0,
                HEAP8[(($6_1 + 174) | 0) >> 0] | 0 | 0,
                $9_1 | 0,
                $10_1 | 0,
                $11_1 | 0,
                HEAP32[(($6_1 + 124) | 0) >> 2] | 0 | 0
              );
              $5_1 =
                $85(
                  $1_1 | 0,
                  $2_1 | 0,
                  HEAP32[(($6_1 + 4) | 0) >> 2] | 0 | 0,
                  HEAP32[$6_1 >> 2] | 0 | 0,
                  $3_1 | 0,
                  $4_1 | 0
                ) | 0;
              $585($12_1 | 0) | 0;
              $1540($11_1 | 0) | 0;
              $1540($10_1 | 0) | 0;
              $1540($9_1 | 0) | 0;
              $430(($6_1 + 184) | 0 | 0) | 0;
              global$0 = ($6_1 + 192) | 0;
              return $5_1 | 0;
            }

            function $880($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $5$hi = $5$hi | 0;
              $6_1 = $6_1 | 0;
              $6$hi = $6$hi | 0;
              var $7_1 = 0,
                $8_1 = 0,
                i64toi32_i32$0 = 0,
                $12_1 = 0,
                $14_1 = 0,
                $16_1 = 0,
                $18_1 = 0,
                $11_1 = 0,
                $9_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $10_1 = 0,
                $13_1 = 0;
              $7_1 = (global$0 - 1072) | 0;
              global$0 = $7_1;
              i64toi32_i32$0 = $5$hi;
              HEAP32[(($7_1 + 16) | 0) >> 2] = $5_1;
              HEAP32[(($7_1 + 20) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $6$hi;
              HEAP32[(($7_1 + 24) | 0) >> 2] = $6_1;
              HEAP32[(($7_1 + 28) | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(($7_1 + 956) | 0) >> 2] = ($7_1 + 960) | 0;
              $8_1 = $370(($7_1 + 960) | 0 | 0, 100 | 0, 8703 | 0, ($7_1 + 16) | 0 | 0) | 0;
              HEAP32[(($7_1 + 544) | 0) >> 2] = 31;
              $9_1 = 0;
              $10_1 = $581(($7_1 + 536) | 0 | 0, 0 | 0, ($7_1 + 544) | 0 | 0) | 0;
              HEAP32[(($7_1 + 544) | 0) >> 2] = 31;
              $11_1 = $619(($7_1 + 528) | 0 | 0, 0 | 0, ($7_1 + 544) | 0 | 0) | 0;
              $12_1 = ($7_1 + 544) | 0;
              label$1: {
                label$2: {
                  if ($8_1 >>> 0 < 100 >>> 0) {
                    break label$2;
                  }
                  $8_1 = $489() | 0;
                  i64toi32_i32$0 = $5$hi;
                  HEAP32[$7_1 >> 2] = $5_1;
                  HEAP32[(($7_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$0 = $6$hi;
                  HEAP32[(($7_1 + 8) | 0) >> 2] = $6_1;
                  HEAP32[(($7_1 + 12) | 0) >> 2] = i64toi32_i32$0;
                  $8_1 = $582(($7_1 + 956) | 0 | 0, $8_1 | 0, 8703 | 0, $7_1 | 0) | 0;
                  $12_1 = HEAP32[(($7_1 + 956) | 0) >> 2] | 0;
                  if (!$12_1) {
                    break label$1;
                  }
                  $583($10_1 | 0, $12_1 | 0);
                  $620($11_1 | 0, $1698(($8_1 << 2) | 0 | 0) | 0 | 0);
                  if ($881($11_1 | 0, 0 | 0) | 0) {
                    break label$1;
                  }
                  $12_1 = $813($11_1 | 0) | 0;
                }
                $1487(($7_1 + 520) | 0 | 0, $3_1 | 0);
                $13_1 = $503(($7_1 + 520) | 0 | 0) | 0;
                $14_1 = HEAP32[(($7_1 + 956) | 0) >> 2] | 0;
                $541($13_1 | 0, $14_1 | 0, ($14_1 + $8_1) | 0 | 0, $12_1 | 0) | 0;
                label$3: {
                  if (!$8_1) {
                    break label$3;
                  }
                  $9_1 = (HEAPU8[(HEAP32[(($7_1 + 956) | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
                }
                $15_1 = $453(($7_1 + 488) | 0 | 0) | 0;
                $14_1 = $729(($7_1 + 472) | 0 | 0) | 0;
                $16_1 = $729(($7_1 + 456) | 0 | 0) | 0;
                $882(
                  $2_1 | 0,
                  $9_1 | 0,
                  ($7_1 + 520) | 0 | 0,
                  ($7_1 + 512) | 0 | 0,
                  ($7_1 + 508) | 0 | 0,
                  ($7_1 + 504) | 0 | 0,
                  $15_1 | 0,
                  $14_1 | 0,
                  $16_1 | 0,
                  ($7_1 + 452) | 0 | 0
                );
                HEAP32[(($7_1 + 48) | 0) >> 2] = 31;
                $17_1 = $619(($7_1 + 40) | 0 | 0, 0 | 0, ($7_1 + 48) | 0 | 0) | 0;
                label$4: {
                  label$5: {
                    $2_1 = HEAP32[(($7_1 + 452) | 0) >> 2] | 0;
                    if (($8_1 | 0) <= ($2_1 | 0)) {
                      break label$5;
                    }
                    $18_1 = ((((($8_1 - $2_1) | 0) << 1) | 0 | 1 | 0) + ($514($16_1 | 0) | 0)) | 0;
                    break label$4;
                  }
                  $18_1 = (($514($16_1 | 0) | 0) + 2) | 0;
                }
                $2_1 = ($7_1 + 48) | 0;
                label$6: {
                  $18_1 = ((($18_1 + ($514($14_1 | 0) | 0)) | 0) + (HEAP32[(($7_1 + 452) | 0) >> 2] | 0)) | 0;
                  if ($18_1 >>> 0 < 101 >>> 0) {
                    break label$6;
                  }
                  $620($17_1 | 0, $1698(($18_1 << 2) | 0 | 0) | 0 | 0);
                  $2_1 = $813($17_1 | 0) | 0;
                  if (!$2_1) {
                    break label$1;
                  }
                }
                $883(
                  $2_1 | 0,
                  ($7_1 + 36) | 0 | 0,
                  ($7_1 + 32) | 0 | 0,
                  $83($3_1 | 0) | 0 | 0,
                  $12_1 | 0,
                  ($12_1 + (($8_1 << 2) | 0)) | 0 | 0,
                  $13_1 | 0,
                  $9_1 | 0,
                  ($7_1 + 512) | 0 | 0,
                  HEAP32[(($7_1 + 508) | 0) >> 2] | 0 | 0,
                  HEAP32[(($7_1 + 504) | 0) >> 2] | 0 | 0,
                  $15_1 | 0,
                  $14_1 | 0,
                  $16_1 | 0,
                  HEAP32[(($7_1 + 452) | 0) >> 2] | 0 | 0
                );
                $8_1 =
                  $609(
                    $1_1 | 0,
                    $2_1 | 0,
                    HEAP32[(($7_1 + 36) | 0) >> 2] | 0 | 0,
                    HEAP32[(($7_1 + 32) | 0) >> 2] | 0 | 0,
                    $3_1 | 0,
                    $4_1 | 0
                  ) | 0;
                $622($17_1 | 0) | 0;
                $1560($16_1 | 0) | 0;
                $1560($14_1 | 0) | 0;
                $1540($15_1 | 0) | 0;
                $430(($7_1 + 520) | 0 | 0) | 0;
                $622($11_1 | 0) | 0;
                $585($10_1 | 0) | 0;
                global$0 = ($7_1 + 1072) | 0;
                return $8_1 | 0;
              }
              $1570();
              abort();
            }

            function $881($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return (($884($0_1 | 0) | 0) ^ 1) | 0 | 0;
            }

            function $882($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $14_1 = 0;
              $10_1 = (global$0 - 16) | 0;
              global$0 = $10_1;
              label$1: {
                label$2: {
                  if (!$0_1) {
                    break label$2;
                  }
                  $0_1 = $838($2_1 | 0) | 0;
                  label$3: {
                    label$4: {
                      if (!$1_1) {
                        break label$4;
                      }
                      $839($10_1 | 0, $0_1 | 0);
                      $11_1 = HEAP32[$10_1 >> 2] | 0;
                      HEAP8[$3_1 >> 0] = $11_1;
                      HEAP8[(($3_1 + 1) | 0) >> 0] = ($11_1 >>> 8) | 0;
                      HEAP8[(($3_1 + 2) | 0) >> 0] = ($11_1 >>> 16) | 0;
                      HEAP8[(($3_1 + 3) | 0) >> 0] = ($11_1 >>> 24) | 0;
                      $840($10_1 | 0, $0_1 | 0);
                      $841($8_1 | 0, $10_1 | 0) | 0;
                      $1560($10_1 | 0) | 0;
                      break label$3;
                    }
                    $885($10_1 | 0, $0_1 | 0);
                    $12_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP8[$3_1 >> 0] = $12_1;
                    HEAP8[(($3_1 + 1) | 0) >> 0] = ($12_1 >>> 8) | 0;
                    HEAP8[(($3_1 + 2) | 0) >> 0] = ($12_1 >>> 16) | 0;
                    HEAP8[(($3_1 + 3) | 0) >> 0] = ($12_1 >>> 24) | 0;
                    $842($10_1 | 0, $0_1 | 0);
                    $841($8_1 | 0, $10_1 | 0) | 0;
                    $1560($10_1 | 0) | 0;
                  }
                  HEAP32[$4_1 >> 2] = $843($0_1 | 0) | 0;
                  HEAP32[$5_1 >> 2] = $844($0_1 | 0) | 0;
                  $845($10_1 | 0, $0_1 | 0);
                  $781($6_1 | 0, $10_1 | 0) | 0;
                  $1540($10_1 | 0) | 0;
                  $846($10_1 | 0, $0_1 | 0);
                  $841($7_1 | 0, $10_1 | 0) | 0;
                  $1560($10_1 | 0) | 0;
                  $0_1 = $847($0_1 | 0) | 0;
                  break label$1;
                }
                $0_1 = $848($2_1 | 0) | 0;
                label$5: {
                  label$6: {
                    if (!$1_1) {
                      break label$6;
                    }
                    $849($10_1 | 0, $0_1 | 0);
                    $13_1 = HEAP32[$10_1 >> 2] | 0;
                    HEAP8[$3_1 >> 0] = $13_1;
                    HEAP8[(($3_1 + 1) | 0) >> 0] = ($13_1 >>> 8) | 0;
                    HEAP8[(($3_1 + 2) | 0) >> 0] = ($13_1 >>> 16) | 0;
                    HEAP8[(($3_1 + 3) | 0) >> 0] = ($13_1 >>> 24) | 0;
                    $850($10_1 | 0, $0_1 | 0);
                    $841($8_1 | 0, $10_1 | 0) | 0;
                    $1560($10_1 | 0) | 0;
                    break label$5;
                  }
                  $886($10_1 | 0, $0_1 | 0);
                  $14_1 = HEAP32[$10_1 >> 2] | 0;
                  HEAP8[$3_1 >> 0] = $14_1;
                  HEAP8[(($3_1 + 1) | 0) >> 0] = ($14_1 >>> 8) | 0;
                  HEAP8[(($3_1 + 2) | 0) >> 0] = ($14_1 >>> 16) | 0;
                  HEAP8[(($3_1 + 3) | 0) >> 0] = ($14_1 >>> 24) | 0;
                  $851($10_1 | 0, $0_1 | 0);
                  $841($8_1 | 0, $10_1 | 0) | 0;
                  $1560($10_1 | 0) | 0;
                }
                HEAP32[$4_1 >> 2] = $852($0_1 | 0) | 0;
                HEAP32[$5_1 >> 2] = $853($0_1 | 0) | 0;
                $854($10_1 | 0, $0_1 | 0);
                $781($6_1 | 0, $10_1 | 0) | 0;
                $1540($10_1 | 0) | 0;
                $855($10_1 | 0, $0_1 | 0);
                $841($7_1 | 0, $10_1 | 0) | 0;
                $1560($10_1 | 0) | 0;
                $0_1 = $856($0_1 | 0) | 0;
              }
              HEAP32[$9_1 >> 2] = $0_1;
              global$0 = ($10_1 + 16) | 0;
            }

            function $883(
              $0_1,
              $1_1,
              $2_1,
              $3_1,
              $4_1,
              $5_1,
              $6_1,
              $7_1,
              $8_1,
              $9_1,
              $10_1,
              $11_1,
              $12_1,
              $13_1,
              $14_1
            ) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              $10_1 = $10_1 | 0;
              $11_1 = $11_1 | 0;
              $12_1 = $12_1 | 0;
              $13_1 = $13_1 | 0;
              $14_1 = $14_1 | 0;
              var $18_1 = 0,
                $19_1 = 0,
                $21_1 = 0,
                $22_1 = 0,
                $23_1 = 0,
                $24_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $16_1 = 0,
                $20_1 = 0;
              $15_1 = (global$0 - 16) | 0;
              global$0 = $15_1;
              HEAP32[$2_1 >> 2] = $0_1;
              $16_1 = ($3_1 & 512) | 0;
              $17_1 = 0;
              label$1: while (1) {
                label$2: {
                  if (($17_1 | 0) != (4 | 0)) {
                    break label$2;
                  }
                  label$3: {
                    if (($514($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
                      break label$3;
                    }
                    HEAP32[(($15_1 + 8) | 0) >> 2] = $887($13_1 | 0) | 0;
                    HEAP32[$2_1 >> 2] =
                      $890(
                        $888(($15_1 + 8) | 0 | 0, 1 | 0) | 0 | 0,
                        $889($13_1 | 0) | 0 | 0,
                        HEAP32[$2_1 >> 2] | 0 | 0
                      ) | 0;
                  }
                  label$4: {
                    $18_1 = ($3_1 & 176) | 0;
                    if (($18_1 | 0) == (16 | 0)) {
                      break label$4;
                    }
                    label$5: {
                      if (($18_1 | 0) != (32 | 0)) {
                        break label$5;
                      }
                      $0_1 = HEAP32[$2_1 >> 2] | 0;
                    }
                    HEAP32[$1_1 >> 2] = $0_1;
                  }
                  global$0 = ($15_1 + 16) | 0;
                  return;
                }
                label$6: {
                  label$7: {
                    switch (HEAP8[(($8_1 + $17_1) | 0) >> 0] | 0 | 0) {
                      case 0:
                        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
                        break label$6;
                      case 1:
                        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
                        $18_1 = $610($6_1 | 0, 32 | 0) | 0;
                        $19_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($19_1 + 4) | 0;
                        HEAP32[$19_1 >> 2] = $18_1;
                        break label$6;
                      case 3:
                        if ($516($13_1 | 0) | 0) {
                          break label$6;
                        }
                        $18_1 = HEAP32[($515($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
                        $19_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($19_1 + 4) | 0;
                        HEAP32[$19_1 >> 2] = $18_1;
                        break label$6;
                      case 2:
                        $18_1 = $516($12_1 | 0) | 0;
                        if (!$16_1) {
                          break label$6;
                        }
                        if ($18_1) {
                          break label$6;
                        }
                        HEAP32[$2_1 >> 2] =
                          $890($887($12_1 | 0) | 0 | 0, $889($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) |
                          0;
                        break label$6;
                      case 4:
                        break label$7;
                      default:
                        break label$6;
                    }
                  }
                  $20_1 = HEAP32[$2_1 >> 2] | 0;
                  $4_1 = $7_1 ? ($4_1 + 4) | 0 : $4_1;
                  $18_1 = $4_1;
                  label$12: {
                    label$13: while (1) {
                      if ($18_1 >>> 0 >= $5_1 >>> 0) {
                        break label$12;
                      }
                      if (!($658($6_1 | 0, 2048 | 0, HEAP32[$18_1 >> 2] | 0 | 0) | 0)) {
                        break label$12;
                      }
                      $18_1 = ($18_1 + 4) | 0;
                      continue label$13;
                    }
                  }
                  $19_1 = $14_1;
                  label$14: {
                    if (($19_1 | 0) < (1 | 0)) {
                      break label$14;
                    }
                    label$15: {
                      label$16: while (1) {
                        $21_1 = ($19_1 | 0) < (1 | 0);
                        if ($21_1) {
                          break label$15;
                        }
                        if ($18_1 >>> 0 <= $4_1 >>> 0) {
                          break label$15;
                        }
                        $18_1 = ($18_1 + -4) | 0;
                        $21_1 = HEAP32[$18_1 >> 2] | 0;
                        $22_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($22_1 + 4) | 0;
                        HEAP32[$22_1 >> 2] = $21_1;
                        $19_1 = ($19_1 + -1) | 0;
                        continue label$16;
                      }
                    }
                    label$17: {
                      label$18: {
                        if (!$21_1) {
                          break label$18;
                        }
                        $22_1 = 0;
                        break label$17;
                      }
                      $22_1 = $610($6_1 | 0, 48 | 0) | 0;
                    }
                    label$19: {
                      label$20: while (1) {
                        $21_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($21_1 + 4) | 0;
                        if (($19_1 | 0) < (1 | 0)) {
                          break label$19;
                        }
                        HEAP32[$21_1 >> 2] = $22_1;
                        $19_1 = ($19_1 + -1) | 0;
                        continue label$20;
                      }
                    }
                    HEAP32[$21_1 >> 2] = $9_1;
                  }
                  label$21: {
                    label$22: {
                      if (($18_1 | 0) != ($4_1 | 0)) {
                        break label$22;
                      }
                      $19_1 = $610($6_1 | 0, 48 | 0) | 0;
                      $21_1 = HEAP32[$2_1 >> 2] | 0;
                      $18_1 = ($21_1 + 4) | 0;
                      HEAP32[$2_1 >> 2] = $18_1;
                      HEAP32[$21_1 >> 2] = $19_1;
                      break label$21;
                    }
                    label$23: {
                      label$24: {
                        if (!($447($11_1 | 0) | 0)) {
                          break label$24;
                        }
                        $23_1 = $212() | 0;
                        break label$23;
                      }
                      $23_1 = HEAP8[($445($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
                    }
                    $19_1 = 0;
                    $24_1 = 0;
                    label$25: {
                      label$26: while (1) {
                        if (($18_1 | 0) == ($4_1 | 0)) {
                          break label$25;
                        }
                        label$27: {
                          label$28: {
                            if (($19_1 | 0) == ($23_1 | 0)) {
                              break label$28;
                            }
                            $22_1 = $19_1;
                            break label$27;
                          }
                          $21_1 = HEAP32[$2_1 >> 2] | 0;
                          HEAP32[$2_1 >> 2] = ($21_1 + 4) | 0;
                          HEAP32[$21_1 >> 2] = $10_1;
                          $22_1 = 0;
                          label$29: {
                            $24_1 = ($24_1 + 1) | 0;
                            if ($24_1 >>> 0 < ($444($11_1 | 0) | 0) >>> 0) {
                              break label$29;
                            }
                            $23_1 = $19_1;
                            break label$27;
                          }
                          label$30: {
                            if (
                              (HEAPU8[($445($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) !=
                              ((($195() | 0) & 255) | 0 | 0)
                            ) {
                              break label$30;
                            }
                            $23_1 = $212() | 0;
                            break label$27;
                          }
                          $23_1 = HEAP8[($445($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
                        }
                        $18_1 = ($18_1 + -4) | 0;
                        $19_1 = HEAP32[$18_1 >> 2] | 0;
                        $21_1 = HEAP32[$2_1 >> 2] | 0;
                        HEAP32[$2_1 >> 2] = ($21_1 + 4) | 0;
                        HEAP32[$21_1 >> 2] = $19_1;
                        $19_1 = ($22_1 + 1) | 0;
                        continue label$26;
                      }
                    }
                    $18_1 = HEAP32[$2_1 >> 2] | 0;
                  }
                  $611($20_1 | 0, $18_1 | 0);
                }
                $17_1 = ($17_1 + 1) | 0;
                continue label$1;
              }
            }

            function $884($0_1) {
              $0_1 = $0_1 | 0;
              return ((HEAP32[($827($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0)) | 0;
            }

            function $885($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $886($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1, $1_1);
            }

            function $887($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 = HEAP32[($898(($1_1 + 8) | 0 | 0, $663($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $888($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 8) | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
              $899(($2_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $1_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
              return $1_1 | 0;
            }

            function $889($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 =
                HEAP32[
                  ($898(
                    ($1_1 + 8) | 0 | 0,
                    (($663($0_1 | 0) | 0) + ((($514($0_1 | 0) | 0) << 2) | 0)) | 0 | 0
                  ) |
                    0) >>
                    2
                ] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $890($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $897($896($0_1 | 0) | 0 | 0, $896($1_1 | 0) | 0 | 0, $702($2_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $891($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $13_1 = 0,
                $11_1 = 0,
                $10_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $12_1 = 0,
                $7_1 = 0;
              $6_1 = (global$0 - 496) | 0;
              global$0 = $6_1;
              $1487(($6_1 + 488) | 0 | 0, $3_1 | 0);
              $7_1 = $503(($6_1 + 488) | 0 | 0) | 0;
              $8_1 = 0;
              label$1: {
                if (!($514($5_1 | 0) | 0)) {
                  break label$1;
                }
                $8_1 = (HEAP32[($515($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($610($7_1 | 0, 45 | 0) | 0 | 0);
              }
              $9_1 = $453(($6_1 + 456) | 0 | 0) | 0;
              $10_1 = $729(($6_1 + 440) | 0 | 0) | 0;
              $11_1 = $729(($6_1 + 424) | 0 | 0) | 0;
              $882(
                $2_1 | 0,
                $8_1 | 0,
                ($6_1 + 488) | 0 | 0,
                ($6_1 + 480) | 0 | 0,
                ($6_1 + 476) | 0 | 0,
                ($6_1 + 472) | 0 | 0,
                $9_1 | 0,
                $10_1 | 0,
                $11_1 | 0,
                ($6_1 + 420) | 0 | 0
              );
              HEAP32[(($6_1 + 16) | 0) >> 2] = 31;
              $12_1 = $619(($6_1 + 8) | 0 | 0, 0 | 0, ($6_1 + 16) | 0 | 0) | 0;
              label$2: {
                label$3: {
                  if (($514($5_1 | 0) | 0 | 0) <= (HEAP32[(($6_1 + 420) | 0) >> 2] | 0 | 0)) {
                    break label$3;
                  }
                  $2_1 = $514($5_1 | 0) | 0;
                  $13_1 = HEAP32[(($6_1 + 420) | 0) >> 2] | 0;
                  $13_1 = (((($514($11_1 | 0) | 0) + (((($2_1 - $13_1) | 0) << 1) | 0)) | 0) + 1) | 0;
                  break label$2;
                }
                $13_1 = (($514($11_1 | 0) | 0) + 2) | 0;
              }
              $2_1 = ($6_1 + 16) | 0;
              label$4: {
                $13_1 = ((($13_1 + ($514($10_1 | 0) | 0)) | 0) + (HEAP32[(($6_1 + 420) | 0) >> 2] | 0)) | 0;
                if ($13_1 >>> 0 < 101 >>> 0) {
                  break label$4;
                }
                $620($12_1 | 0, $1698(($13_1 << 2) | 0 | 0) | 0 | 0);
                $2_1 = $813($12_1 | 0) | 0;
                if ($2_1) {
                  break label$4;
                }
                $1570();
                abort();
              }
              $883(
                $2_1 | 0,
                ($6_1 + 4) | 0 | 0,
                $6_1 | 0,
                $83($3_1 | 0) | 0 | 0,
                $662($5_1 | 0) | 0 | 0,
                (($662($5_1 | 0) | 0) + ((($514($5_1 | 0) | 0) << 2) | 0)) | 0 | 0,
                $7_1 | 0,
                $8_1 | 0,
                ($6_1 + 480) | 0 | 0,
                HEAP32[(($6_1 + 476) | 0) >> 2] | 0 | 0,
                HEAP32[(($6_1 + 472) | 0) >> 2] | 0 | 0,
                $9_1 | 0,
                $10_1 | 0,
                $11_1 | 0,
                HEAP32[(($6_1 + 420) | 0) >> 2] | 0 | 0
              );
              $5_1 =
                $609(
                  $1_1 | 0,
                  $2_1 | 0,
                  HEAP32[(($6_1 + 4) | 0) >> 2] | 0 | 0,
                  HEAP32[$6_1 >> 2] | 0 | 0,
                  $3_1 | 0,
                  $4_1 | 0
                ) | 0;
              $622($12_1 | 0) | 0;
              $1560($11_1 | 0) | 0;
              $1560($10_1 | 0) | 0;
              $1540($9_1 | 0) | 0;
              $430(($6_1 + 488) | 0 | 0) | 0;
              global$0 = ($6_1 + 496) | 0;
              return $5_1 | 0;
            }

            function $892($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              HEAP32[(($1_1 + 8) | 0) >> 2] = $0_1;
              $0_1 = $800(($1_1 + 8) | 0 | 0) | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $893($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                $1_1 = ($1_1 - $0_1) | 0;
                if (!$1_1) {
                  break label$1;
                }
                $1709($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
              }
              return ($2_1 + $1_1) | 0 | 0;
            }

            function $894($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $895($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + $1_1) | 0;
              return $0_1 | 0;
            }

            function $896($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              HEAP32[(($1_1 + 8) | 0) >> 2] = $0_1;
              $0_1 = $860(($1_1 + 8) | 0 | 0) | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $897($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                $1_1 = ($1_1 - $0_1) | 0;
                if (!$1_1) {
                  break label$1;
                }
                $1709($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
              }
              return ($2_1 + $1_1) | 0 | 0;
            }

            function $898($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $899($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + (($1_1 << 2) | 0)) | 0;
              return $0_1 | 0;
            }

            function $900($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return -1 | 0;
            }

            function $901($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $1533($0_1 | 0, $5_1 | 0) | 0;
            }

            function $902($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $903($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return -1 | 0;
            }

            function $904($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $1553($0_1 | 0, $5_1 | 0) | 0;
            }

            function $905($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $906($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 8792;
              label$1: {
                if ((HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0) == ($489() | 0 | 0)) {
                  break label$1;
                }
                $385(HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0);
              }
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $907($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 8720;
              $1_1 = $909(($0_1 + 16) | 0 | 0, 28 | 0) | 0;
              $910(($0_1 + 176) | 0 | 0, 8709 | 0) | 0;
              $911($1_1 | 0);
              $912();
              $913($0_1 | 0, 19104 | 0);
              $914();
              $915($0_1 | 0, 19112 | 0);
              $916();
              $917($0_1 | 0, 19120 | 0);
              $918();
              $919($0_1 | 0, 19136 | 0);
              $920();
              $921($0_1 | 0, 19144 | 0);
              $922();
              $923($0_1 | 0, 19152 | 0);
              $924();
              $925($0_1 | 0, 19168 | 0);
              $926();
              $927($0_1 | 0, 19176 | 0);
              $928();
              $929($0_1 | 0, 19184 | 0);
              $930();
              $931($0_1 | 0, 19216 | 0);
              $932();
              $933($0_1 | 0, 19248 | 0);
              $934();
              $935($0_1 | 0, 19256 | 0);
              $936();
              $937($0_1 | 0, 19264 | 0);
              $938();
              $939($0_1 | 0, 19272 | 0);
              $940();
              $941($0_1 | 0, 19280 | 0);
              $942();
              $943($0_1 | 0, 19288 | 0);
              $944();
              $945($0_1 | 0, 19296 | 0);
              $946();
              $947($0_1 | 0, 19304 | 0);
              $948();
              $949($0_1 | 0, 19312 | 0);
              $950();
              $951($0_1 | 0, 19320 | 0);
              $952();
              $953($0_1 | 0, 19328 | 0);
              $954();
              $955($0_1 | 0, 19336 | 0);
              $956();
              $957($0_1 | 0, 19344 | 0);
              $958();
              $959($0_1 | 0, 19360 | 0);
              $960();
              $961($0_1 | 0, 19376 | 0);
              $962();
              $963($0_1 | 0, 19392 | 0);
              $964();
              $965($0_1 | 0, 19408 | 0);
              $966();
              $967($0_1 | 0, 19416 | 0);
              return $0_1 | 0;
            }

            function $908($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $968($0_1 | 0, ($1_1 + -1) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = 9244;
              return $0_1 | 0;
            }

            function $909($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $969($0_1 | 0) | 0;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $970($0_1 | 0, $1_1 | 0);
                $971($0_1 | 0, $1_1 | 0);
              }
              return $0_1 | 0;
            }

            function $910($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $97($0_1 | 0, ($2_1 + 8) | 0 | 0, $2_1 | 0) | 0;
              $1536($0_1 | 0, $1_1 | 0, $78($1_1 | 0) | 0 | 0);
              global$0 = ($2_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $911($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = $972($0_1 | 0) | 0;
              $973($0_1 | 0);
              $974($0_1 | 0, $1_1 | 0);
              $975($0_1 | 0);
            }

            function $912() {
              $978(19104 | 0, 1 | 0) | 0;
            }

            function $913($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17640 | 0) | 0 | 0);
            }

            function $914() {
              $979(19112 | 0, 1 | 0) | 0;
            }

            function $915($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17648 | 0) | 0 | 0);
            }

            function $916() {
              $980(19120 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
            }

            function $917($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17844 | 0) | 0 | 0);
            }

            function $918() {
              $981(19136 | 0, 1 | 0) | 0;
            }

            function $919($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17836 | 0) | 0 | 0);
            }

            function $920() {
              $982(19144 | 0, 1 | 0) | 0;
            }

            function $921($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17852 | 0) | 0 | 0);
            }

            function $922() {
              $983(19152 | 0, 1 | 0) | 0;
            }

            function $923($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17860 | 0) | 0 | 0);
            }

            function $924() {
              $984(19168 | 0, 1 | 0) | 0;
            }

            function $925($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17868 | 0) | 0 | 0);
            }

            function $926() {
              $985(19176 | 0, 1 | 0) | 0;
            }

            function $927($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17876 | 0) | 0 | 0);
            }

            function $928() {
              $986(19184 | 0, 1 | 0) | 0;
            }

            function $929($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17884 | 0) | 0 | 0);
            }

            function $930() {
              $987(19216 | 0, 1 | 0) | 0;
            }

            function $931($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17892 | 0) | 0 | 0);
            }

            function $932() {
              $988(19248 | 0, 1 | 0) | 0;
            }

            function $933($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17656 | 0) | 0 | 0);
            }

            function $934() {
              $989(19256 | 0, 1 | 0) | 0;
            }

            function $935($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17664 | 0) | 0 | 0);
            }

            function $936() {
              $990(19264 | 0, 1 | 0) | 0;
            }

            function $937($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17672 | 0) | 0 | 0);
            }

            function $938() {
              $991(19272 | 0, 1 | 0) | 0;
            }

            function $939($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17680 | 0) | 0 | 0);
            }

            function $940() {
              $992(19280 | 0, 1 | 0) | 0;
            }

            function $941($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17720 | 0) | 0 | 0);
            }

            function $942() {
              $993(19288 | 0, 1 | 0) | 0;
            }

            function $943($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17728 | 0) | 0 | 0);
            }

            function $944() {
              $994(19296 | 0, 1 | 0) | 0;
            }

            function $945($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17736 | 0) | 0 | 0);
            }

            function $946() {
              $995(19304 | 0, 1 | 0) | 0;
            }

            function $947($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17744 | 0) | 0 | 0);
            }

            function $948() {
              $996(19312 | 0, 1 | 0) | 0;
            }

            function $949($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17752 | 0) | 0 | 0);
            }

            function $950() {
              $997(19320 | 0, 1 | 0) | 0;
            }

            function $951($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17760 | 0) | 0 | 0);
            }

            function $952() {
              $998(19328 | 0, 1 | 0) | 0;
            }

            function $953($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17768 | 0) | 0 | 0);
            }

            function $954() {
              $999(19336 | 0, 1 | 0) | 0;
            }

            function $955($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17776 | 0) | 0 | 0);
            }

            function $956() {
              $1000(19344 | 0, 1 | 0) | 0;
            }

            function $957($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17688 | 0) | 0 | 0);
            }

            function $958() {
              $1001(19360 | 0, 1 | 0) | 0;
            }

            function $959($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17696 | 0) | 0 | 0);
            }

            function $960() {
              $1002(19376 | 0, 1 | 0) | 0;
            }

            function $961($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17704 | 0) | 0 | 0);
            }

            function $962() {
              $1003(19392 | 0, 1 | 0) | 0;
            }

            function $963($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17712 | 0) | 0 | 0);
            }

            function $964() {
              $1004(19408 | 0, 1 | 0) | 0;
            }

            function $965($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17784 | 0) | 0 | 0);
            }

            function $966() {
              $1005(19416 | 0, 1 | 0) | 0;
            }

            function $967($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $977($0_1 | 0, $1_1 | 0, $976(17792 | 0) | 0 | 0);
            }

            function $968($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = (8368 + 8) | 0;
              return $0_1 | 0;
            }

            function $969($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $1230($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = 0;
              HEAP32[(($1_1 + 12) | 0) >> 2] = 0;
              $1231(($0_1 + 16) | 0 | 0, ($1_1 + 12) | 0 | 0, ($1_1 + 8) | 0 | 0) | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $970($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              label$1: {
                if (($1232($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
                  break label$1;
                }
                $1574($0_1 | 0);
                abort();
              }
              $2_1 = $1234($1233($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = $2_1;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $2_1;
              HEAP32[($1235($0_1 | 0) | 0) >> 2] = ($2_1 + (($1_1 << 2) | 0)) | 0;
              $1236($0_1 | 0, 0 | 0);
            }

            function $971($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $1_1 = $1237($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
              $3_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              label$1: {
                label$2: while (1) {
                  if (($3_1 | 0) == (HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0)) {
                    break label$1;
                  }
                  $1239($1233($0_1 | 0) | 0 | 0, $1238(HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 0) | 0 | 0);
                  $3_1 = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) + 4) | 0;
                  HEAP32[(($1_1 + 4) | 0) >> 2] = $3_1;
                  continue label$2;
                }
              }
              $1240($1_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $972($0_1) {
              $0_1 = $0_1 | 0;
              return ((((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0)) | 0) >> 2) | 0 | 0;
            }

            function $973($0_1) {
              $0_1 = $0_1 | 0;
              $1283($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
            }

            function $974($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1252(
                $0_1 | 0,
                $1250($0_1 | 0) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($1251($0_1 | 0) | 0) << 2) | 0)) | 0 | 0,
                (($1250($0_1 | 0) | 0) + (($1_1 << 2) | 0)) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($972($0_1 | 0) | 0) << 2) | 0)) | 0 | 0
              );
            }

            function $975($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $976($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                i64toi32_i32$1 = 0;
              $1_1 = (global$0 - 32) | 0;
              global$0 = $1_1;
              HEAP32[(($1_1 + 12) | 0) >> 2] = 0;
              HEAP32[(($1_1 + 8) | 0) >> 2] = 33;
              i64toi32_i32$1 = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
              HEAP32[$1_1 >> 2] = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
              HEAP32[(($1_1 + 4) | 0) >> 2] = i64toi32_i32$1;
              $1040($0_1 | 0, $1039(($1_1 + 16) | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
              $0_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              global$0 = ($1_1 + 32) | 0;
              return ($0_1 + -1) | 0 | 0;
            }

            function $977($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $1008($1_1 | 0);
              $4_1 = $1014(($3_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              label$1: {
                $1_1 = ($0_1 + 16) | 0;
                if (($972($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
                  break label$1;
                }
                $1017($1_1 | 0, ($2_1 + 1) | 0 | 0);
              }
              label$2: {
                if (!(HEAP32[($1007($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
                  break label$2;
                }
                $1018(HEAP32[($1007($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
              }
              $0_1 = $1019($4_1 | 0) | 0;
              HEAP32[($1007($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
              $1015($4_1 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
            }

            function $978($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 10120;
              return $0_1 | 0;
            }

            function $979($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 10152;
              return $0_1 | 0;
            }

            function $980($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $908($0_1 | 0, $3_1 | 0) | 0;
              $1064($0_1 | 0) | 0;
              HEAP8[(($0_1 + 12) | 0) >> 0] = $2_1;
              HEAP32[(($0_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = 8740;
              label$1: {
                if ($1_1) {
                  break label$1;
                }
                HEAP32[(($0_1 + 8) | 0) >> 2] = $1050() | 0;
              }
              return $0_1 | 0;
            }

            function $981($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1064($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 9300;
              return $0_1 | 0;
            }

            function $982($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1085($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 9448;
              return $0_1 | 0;
            }

            function $983($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1085($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 8792;
              HEAP32[(($0_1 + 8) | 0) >> 2] = $489() | 0;
              return $0_1 | 0;
            }

            function $984($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1085($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 9596;
              return $0_1 | 0;
            }

            function $985($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1085($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 9712;
              return $0_1 | 0;
            }

            function $986($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP16[(($0_1 + 8) | 0) >> 1] = 11310;
              HEAP32[$0_1 >> 2] = 8840;
              $453(($0_1 + 12) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $987($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = 46;
              HEAP32[(($0_1 + 12) | 0) >> 2] = 44;
              HEAP32[$0_1 >> 2] = 8880;
              $453(($0_1 + 16) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $988($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 10184;
              return $0_1 | 0;
            }

            function $989($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 10428;
              return $0_1 | 0;
            }

            function $990($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 10640;
              return $0_1 | 0;
            }

            function $991($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 10872;
              return $0_1 | 0;
            }

            function $992($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1287($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 11856;
              return $0_1 | 0;
            }

            function $993($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1287($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12004;
              return $0_1 | 0;
            }

            function $994($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1287($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12120;
              return $0_1 | 0;
            }

            function $995($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1287($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12236;
              return $0_1 | 0;
            }

            function $996($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1288($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12352;
              return $0_1 | 0;
            }

            function $997($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1289($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12516;
              return $0_1 | 0;
            }

            function $998($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1290($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12680;
              return $0_1 | 0;
            }

            function $999($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1291($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 12844;
              return $0_1 | 0;
            }

            function $1000($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1_1 = $1292(($0_1 + 8) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = 11072;
              HEAP32[$1_1 >> 2] = 11120;
              return $0_1 | 0;
            }

            function $1001($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1_1 = $1293(($0_1 + 8) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = 11336;
              HEAP32[$1_1 >> 2] = 11384;
              return $0_1 | 0;
            }

            function $1002($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1294(($0_1 + 8) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = 11572;
              return $0_1 | 0;
            }

            function $1003($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1294(($0_1 + 8) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = 11728;
              return $0_1 | 0;
            }

            function $1004($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1295($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 13008;
              return $0_1 | 0;
            }

            function $1005($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $908($0_1 | 0, $1_1 | 0) | 0;
              $1295($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 13128;
              return $0_1 | 0;
            }

            function $1006() {
              label$1: {
                if (((HEAPU8[((0 + 17816) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17816 | 0) | 0)) {
                  break label$1;
                }
                $1009() | 0;
                HEAP32[((0 + 17812) | 0) >> 2] = 17808;
                $1656(17816 | 0);
              }
              return HEAP32[((0 + 17812) | 0) >> 2] | 0 | 0;
            }

            function $1007($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((HEAP32[$0_1 >> 2] | 0) + (($1_1 << 2) | 0)) | 0 | 0;
            }

            function $1008($0_1) {
              $0_1 = $0_1 | 0;
              $1010(($0_1 + 4) | 0 | 0) | 0;
            }

            function $1009() {
              $1033();
              HEAP32[((0 + 17808) | 0) >> 2] = 19424;
              return 17808 | 0;
            }

            function $1010($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = ((HEAP32[$0_1 >> 2] | 0) + 1) | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $1_1 | 0;
            }

            function $1011($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1012($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1012($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $3_1 = $1208(($2_1 + 8) | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
              return ($3_1 ? $1_1 : $0_1) | 0;
            }

            function $1013($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if ($1030($0_1 | 0, $1_1 | 0) | 0) {
                  break label$1;
                }
                $1031();
                abort();
              }
              return HEAP32[($1032(($0_1 + 16) | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $1014($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 12) | 0) >> 2] = $1_1;
              $1016($0_1 | 0, ($2_1 + 12) | 0 | 0, ($2_1 + 8) | 0 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1015($0_1) {
              $0_1 = $0_1 | 0;
              $1020($0_1 | 0);
              return $0_1 | 0;
            }

            function $1016($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1299($0_1 | 0, $1298($1_1 | 0) | 0 | 0) | 0;
              $100($2_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1017($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              label$1: {
                $2_1 = $972($0_1 | 0) | 0;
                if ($2_1 >>> 0 >= $1_1 >>> 0) {
                  break label$1;
                }
                $1027($0_1 | 0, ($1_1 - $2_1) | 0 | 0);
                return;
              }
              label$2: {
                if ($2_1 >>> 0 <= $1_1 >>> 0) {
                  break label$2;
                }
                $1028($0_1 | 0, ((HEAP32[$0_1 >> 2] | 0) + (($1_1 << 2) | 0)) | 0 | 0);
              }
            }

            function $1018($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = $1023(($0_1 + 4) | 0 | 0) | 0;
                if (($1_1 | 0) != (-1 | 0)) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 8) | 0) >> 2] | 0 | 0]($0_1);
              }
              return (($1_1 | 0) == (-1 | 0)) | 0;
            }

            function $1019($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[($1029($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($1029($0_1 | 0) | 0) >> 2] = 0;
              return $1_1 | 0;
            }

            function $1020($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[($1029($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[($1029($0_1 | 0) | 0) >> 2] = 0;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $1300($1_1 | 0);
              }
            }

            function $1021($0_1) {
              $0_1 = $0_1 | 0;
              var $2_1 = 0,
                $1_1 = 0;
              HEAP32[$0_1 >> 2] = 8720;
              $1_1 = ($0_1 + 16) | 0;
              $2_1 = 0;
              label$1: {
                label$2: while (1) {
                  if ($2_1 >>> 0 >= ($972($1_1 | 0) | 0) >>> 0) {
                    break label$1;
                  }
                  label$3: {
                    if (!(HEAP32[($1007($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
                      break label$3;
                    }
                    $1018(HEAP32[($1007($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
                  }
                  $2_1 = ($2_1 + 1) | 0;
                  continue label$2;
                }
              }
              $1540(($0_1 + 176) | 0 | 0) | 0;
              $1022($1_1 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1022($0_1) {
              $0_1 = $0_1 | 0;
              $1024($0_1 | 0);
              $1025($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1023($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = ((HEAP32[$0_1 >> 2] | 0) + -1) | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $1_1 | 0;
            }

            function $1024($0_1) {
              $0_1 = $0_1 | 0;
              $1252(
                $0_1 | 0,
                $1250($0_1 | 0) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($1251($0_1 | 0) | 0) << 2) | 0)) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($972($0_1 | 0) | 0) << 2) | 0)) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($1251($0_1 | 0) | 0) << 2) | 0)) | 0 | 0
              );
            }

            function $1025($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!(HEAP32[$0_1 >> 2] | 0)) {
                  break label$1;
                }
                $973($0_1 | 0);
                $1282($1233($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1260($0_1 | 0) | 0 | 0);
              }
              return $0_1 | 0;
            }

            function $1026($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1021($0_1 | 0) | 0 | 0);
            }

            function $1027($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  if (
                    (((((HEAP32[($1235($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[(($0_1 + 4) | 0) >> 2] | 0)) |
                      0) >>
                      2) |
                      0) >>>
                      0 <
                    $1_1 >>> 0
                  ) {
                    break label$2;
                  }
                  $971($0_1 | 0, $1_1 | 0);
                  break label$1;
                }
                $3_1 = $1233($0_1 | 0) | 0;
                $3_1 =
                  $1302(
                    ($2_1 + 8) | 0 | 0,
                    $1296($0_1 | 0, (($972($0_1 | 0) | 0) + $1_1) | 0 | 0) | 0 | 0,
                    $972($0_1 | 0) | 0 | 0,
                    $3_1 | 0
                  ) | 0;
                $1303($3_1 | 0, $1_1 | 0);
                $1304($0_1 | 0, $3_1 | 0);
                $1305($3_1 | 0) | 0;
              }
              global$0 = ($2_1 + 32) | 0;
            }

            function $1028($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $1297($0_1 | 0, $1_1 | 0);
              $2_1 = $972($0_1 | 0) | 0;
              $1283($0_1 | 0, $1_1 | 0);
              $974($0_1 | 0, $2_1 | 0);
            }

            function $1029($0_1) {
              $0_1 = $0_1 | 0;
              return $1301($0_1 | 0) | 0 | 0;
            }

            function $1030($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = 0;
              label$1: {
                $0_1 = ($0_1 + 16) | 0;
                if (($972($0_1 | 0) | 0) >>> 0 <= $1_1 >>> 0) {
                  break label$1;
                }
                $2_1 = (HEAP32[($1032($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
              }
              return $2_1 | 0;
            }

            function $1031() {
              fimport$24();
              abort();
            }

            function $1032($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((HEAP32[$0_1 >> 2] | 0) + (($1_1 << 2) | 0)) | 0 | 0;
            }

            function $1033() {
              $907(19424 | 0, 1 | 0) | 0;
            }

            function $1034() {
              $1035(17820 | 0, $1006() | 0 | 0) | 0;
              return 17820 | 0;
            }

            function $1035($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1_1 = HEAP32[$1_1 >> 2] | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              $1008($1_1 | 0);
              return $0_1 | 0;
            }

            function $1036() {
              label$1: {
                if (((HEAPU8[((0 + 17828) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17828 | 0) | 0)) {
                  break label$1;
                }
                $1034() | 0;
                HEAP32[((0 + 17824) | 0) >> 2] = 17820;
                $1656(17828 | 0);
              }
              return HEAP32[((0 + 17824) | 0) >> 2] | 0 | 0;
            }

            function $1037($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[($1036() | 0) >> 2] | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              $1008($1_1 | 0);
              return $0_1 | 0;
            }

            function $1038($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1047() | 0;
            }

            function $1039($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = i64toi32_i32$1;
              HEAP32[$0_1 >> 2] = $2_1;
              return $0_1 | 0;
            }

            function $1040($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                if (($1043($0_1 | 0) | 0 | 0) == (-1 | 0)) {
                  break label$1;
                }
                $1045($2_1 | 0, $1044(($2_1 + 8) | 0 | 0, $1_1 | 0) | 0 | 0) | 0;
                $380($0_1 | 0, $2_1 | 0, 34 | 0);
              }
              global$0 = ($2_1 + 16) | 0;
            }

            function $1041($0_1) {
              $0_1 = $0_1 | 0;
              $1572($414($0_1 | 0) | 0 | 0);
            }

            function $1042($0_1) {
              $0_1 = $0_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 4) | 0) >> 2] | 0 | 0]($0_1);
            }

            function $1043($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $1044($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1325($0_1 | 0, $1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1045($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $1046($0_1) {
              $0_1 = $0_1 | 0;
              $1326($0_1 | 0);
            }

            function $1047() {
              var $0_1 = 0;
              $0_1 = ((HEAP32[((0 + 17832) | 0) >> 2] | 0) + 1) | 0;
              HEAP32[((0 + 17832) | 0) >> 2] = $0_1;
              return $0_1 | 0;
            }

            function $1048($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1049($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = 0;
              label$1: {
                if ($2_1 >>> 0 > 127 >>> 0) {
                  break label$1;
                }
                $3_1 =
                  (((HEAPU16[((($1050() | 0) + (($2_1 << 1) | 0)) | 0) >> 1] | 0) & $1_1) | 0 | 0) != (0 | 0);
              }
              return $3_1 | 0;
            }

            function $1050() {
              return HEAP32[($388() | 0) >> 2] | 0 | 0;
            }

            function $1051($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  $4_1 = 0;
                  label$3: {
                    if ((HEAP32[$1_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
                      break label$3;
                    }
                    $4_1 = HEAPU16[((($1050() | 0) + (((HEAP32[$1_1 >> 2] | 0) << 1) | 0)) | 0) >> 1] | 0;
                  }
                  HEAP16[$3_1 >> 1] = $4_1;
                  $3_1 = ($3_1 + 2) | 0;
                  $1_1 = ($1_1 + 4) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1052($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: while (1) {
                label$2: {
                  label$3: {
                    if (($2_1 | 0) == ($3_1 | 0)) {
                      break label$3;
                    }
                    if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
                      break label$2;
                    }
                    if (
                      !(
                        ((HEAPU16[((($1050() | 0) + (((HEAP32[$2_1 >> 2] | 0) << 1) | 0)) | 0) >> 1] | 0) &
                          $1_1) |
                        0
                      )
                    ) {
                      break label$2;
                    }
                    $3_1 = $2_1;
                  }
                  return $3_1 | 0;
                }
                $2_1 = ($2_1 + 4) | 0;
                continue label$1;
              }
            }

            function $1053($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: {
                label$2: while (1) {
                  if (($2_1 | 0) == ($3_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
                      break label$3;
                    }
                    if (
                      !(
                        ((HEAPU16[((($1050() | 0) + (((HEAP32[$2_1 >> 2] | 0) << 1) | 0)) | 0) >> 1] | 0) &
                          $1_1) |
                        0
                      )
                    ) {
                      break label$3;
                    }
                    $2_1 = ($2_1 + 4) | 0;
                    continue label$2;
                  }
                  break label$2;
                }
                $3_1 = $2_1;
              }
              return $3_1 | 0;
            }

            function $1054($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if ($1_1 >>> 0 > 127 >>> 0) {
                  break label$1;
                }
                $1_1 = HEAP32[((($1055() | 0) + (($1_1 << 2) | 0)) | 0) >> 2] | 0;
              }
              return $1_1 | 0;
            }

            function $1055() {
              return HEAP32[($389() | 0) >> 2] | 0 | 0;
            }

            function $1056($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    $3_1 = HEAP32[$1_1 >> 2] | 0;
                    if ($3_1 >>> 0 > 127 >>> 0) {
                      break label$3;
                    }
                    $3_1 = HEAP32[((($1055() | 0) + (((HEAP32[$1_1 >> 2] | 0) << 2) | 0)) | 0) >> 2] | 0;
                  }
                  HEAP32[$1_1 >> 2] = $3_1;
                  $1_1 = ($1_1 + 4) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1057($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if ($1_1 >>> 0 > 127 >>> 0) {
                  break label$1;
                }
                $1_1 = HEAP32[((($1058() | 0) + (($1_1 << 2) | 0)) | 0) >> 2] | 0;
              }
              return $1_1 | 0;
            }

            function $1058() {
              return HEAP32[($390() | 0) >> 2] | 0 | 0;
            }

            function $1059($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    $3_1 = HEAP32[$1_1 >> 2] | 0;
                    if ($3_1 >>> 0 > 127 >>> 0) {
                      break label$3;
                    }
                    $3_1 = HEAP32[((($1058() | 0) + (((HEAP32[$1_1 >> 2] | 0) << 2) | 0)) | 0) >> 2] | 0;
                  }
                  HEAP32[$1_1 >> 2] = $3_1;
                  $1_1 = ($1_1 + 4) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1060($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1_1 | 0;
            }

            function $1061($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
                  $3_1 = ($3_1 + 4) | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1062($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (((($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24) | 0) >> 24) | 0 | 0;
            }

            function $1063($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  $5_1 = HEAP32[$1_1 >> 2] | 0;
                  HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
                  $4_1 = ($4_1 + 1) | 0;
                  $1_1 = ($1_1 + 4) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1064($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1065($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              HEAP32[$0_1 >> 2] = 8740;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                if (!$1_1) {
                  break label$1;
                }
                if (!(HEAPU8[(($0_1 + 12) | 0) >> 0] | 0)) {
                  break label$1;
                }
                $1573($1_1 | 0);
              }
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1066($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1065($0_1 | 0) | 0 | 0);
            }

            function $1067($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (($1_1 | 0) < (0 | 0)) {
                  break label$1;
                }
                $1_1 = HEAP32[((($1055() | 0) + (((($1_1 & 255) | 0) << 2) | 0)) | 0) >> 2] | 0;
              }
              return ((($1_1 << 24) | 0) >> 24) | 0 | 0;
            }

            function $1068($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    $3_1 = HEAP8[$1_1 >> 0] | 0;
                    if (($3_1 | 0) < (0 | 0)) {
                      break label$3;
                    }
                    $3_1 = HEAP32[((($1055() | 0) + (((HEAP8[$1_1 >> 0] | 0) << 2) | 0)) | 0) >> 2] | 0;
                  }
                  HEAP8[$1_1 >> 0] = $3_1;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1069($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (($1_1 | 0) < (0 | 0)) {
                  break label$1;
                }
                $1_1 = HEAP32[((($1058() | 0) + (((($1_1 & 255) | 0) << 2) | 0)) | 0) >> 2] | 0;
              }
              return ((($1_1 << 24) | 0) >> 24) | 0 | 0;
            }

            function $1070($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    $3_1 = HEAP8[$1_1 >> 0] | 0;
                    if (($3_1 | 0) < (0 | 0)) {
                      break label$3;
                    }
                    $3_1 = HEAP32[((($1058() | 0) + (((HEAP8[$1_1 >> 0] | 0) << 2) | 0)) | 0) >> 2] | 0;
                  }
                  HEAP8[$1_1 >> 0] = $3_1;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1071($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1_1 | 0;
            }

            function $1072($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                  $3_1 = ($3_1 + 1) | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1073($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (($1_1 | 0) > (-1 | 0) ? $1_1 : $2_1) | 0;
            }

            function $1074($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($1_1 | 0) == ($2_1 | 0)) {
                    break label$1;
                  }
                  $5_1 = HEAP8[$1_1 >> 0] | 0;
                  HEAP8[$4_1 >> 0] = ($5_1 | 0) > (-1 | 0) ? $5_1 : $3_1;
                  $4_1 = ($4_1 + 1) | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  continue label$2;
                }
              }
              return $2_1 | 0;
            }

            function $1075($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1076($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              HEAP32[$4_1 >> 2] = $2_1;
              HEAP32[$7_1 >> 2] = $5_1;
              return 3 | 0;
            }

            function $1077($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              HEAP32[$4_1 >> 2] = $2_1;
              HEAP32[$7_1 >> 2] = $5_1;
              return 3 | 0;
            }

            function $1078($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              HEAP32[$4_1 >> 2] = $2_1;
              return 3 | 0;
            }

            function $1079($0_1) {
              $0_1 = $0_1 | 0;
              return 1 | 0;
            }

            function $1080($0_1) {
              $0_1 = $0_1 | 0;
              return 1 | 0;
            }

            function $1081($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $4_1;
              HEAP32[(($5_1 + 8) | 0) >> 2] = ($3_1 - $2_1) | 0;
              $3_1 = HEAP32[($1082(($5_1 + 12) | 0 | 0, ($5_1 + 8) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($5_1 + 16) | 0;
              return $3_1 | 0;
            }

            function $1082($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1083($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1083($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $3_1 = $1208(($2_1 + 8) | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
              return ($3_1 ? $1_1 : $0_1) | 0;
            }

            function $1084($0_1) {
              $0_1 = $0_1 | 0;
              return 1 | 0;
            }

            function $1085($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1086($0_1) {
              $0_1 = $0_1 | 0;
              $1572($906($0_1 | 0) | 0 | 0);
            }

            function $1087($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $9_1 = 0,
                $8_1 = 0,
                $10_1 = 0,
                $11_1 = 0,
                i64toi32_i32$1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              $9_1 = $2_1;
              label$1: {
                label$2: while (1) {
                  label$3: {
                    if (($9_1 | 0) != ($3_1 | 0)) {
                      break label$3;
                    }
                    $9_1 = $3_1;
                    break label$1;
                  }
                  if (!(HEAP32[$9_1 >> 2] | 0)) {
                    break label$1;
                  }
                  $9_1 = ($9_1 + 4) | 0;
                  continue label$2;
                }
              }
              HEAP32[$7_1 >> 2] = $5_1;
              HEAP32[$4_1 >> 2] = $2_1;
              label$4: while (1) {
                label$5: {
                  label$6: {
                    label$7: {
                      if (($5_1 | 0) == ($6_1 | 0)) {
                        break label$7;
                      }
                      if (($2_1 | 0) == ($3_1 | 0)) {
                        break label$7;
                      }
                      i64toi32_i32$1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      HEAP32[(($8_1 + 8) | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                      $10_1 = 1;
                      label$8: {
                        label$9: {
                          label$10: {
                            label$11: {
                              label$12: {
                                $11_1 =
                                  $1088(
                                    $5_1 | 0,
                                    $4_1 | 0,
                                    ((($9_1 - $2_1) | 0) >> 2) | 0 | 0,
                                    ($6_1 - $5_1) | 0 | 0,
                                    $1_1 | 0,
                                    HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                                  ) | 0;
                                switch (($11_1 + 1) | 0 | 0) {
                                  case 0:
                                    break label$12;
                                  case 1:
                                    break label$6;
                                  default:
                                    break label$11;
                                }
                              }
                              HEAP32[$7_1 >> 2] = $5_1;
                              label$13: {
                                label$14: while (1) {
                                  if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
                                    break label$13;
                                  }
                                  $9_1 =
                                    $1089(
                                      $5_1 | 0,
                                      HEAP32[$2_1 >> 2] | 0 | 0,
                                      ($8_1 + 8) | 0 | 0,
                                      HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                                    ) | 0;
                                  if (($9_1 | 0) == (-1 | 0)) {
                                    break label$13;
                                  }
                                  $5_1 = ((HEAP32[$7_1 >> 2] | 0) + $9_1) | 0;
                                  HEAP32[$7_1 >> 2] = $5_1;
                                  $2_1 = ($2_1 + 4) | 0;
                                  continue label$14;
                                }
                              }
                              HEAP32[$4_1 >> 2] = $2_1;
                              break label$10;
                            }
                            $5_1 = ((HEAP32[$7_1 >> 2] | 0) + $11_1) | 0;
                            HEAP32[$7_1 >> 2] = $5_1;
                            if (($5_1 | 0) == ($6_1 | 0)) {
                              break label$8;
                            }
                            label$15: {
                              if (($9_1 | 0) != ($3_1 | 0)) {
                                break label$15;
                              }
                              $2_1 = HEAP32[$4_1 >> 2] | 0;
                              $9_1 = $3_1;
                              continue label$4;
                            }
                            $9_1 =
                              $1089(
                                ($8_1 + 4) | 0 | 0,
                                0 | 0,
                                $1_1 | 0,
                                HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                              ) | 0;
                            if (($9_1 | 0) != (-1 | 0)) {
                              break label$9;
                            }
                          }
                          $10_1 = 2;
                          break label$6;
                        }
                        $2_1 = ($8_1 + 4) | 0;
                        label$16: {
                          if ($9_1 >>> 0 <= (($6_1 - (HEAP32[$7_1 >> 2] | 0)) | 0) >>> 0) {
                            break label$16;
                          }
                          $10_1 = 1;
                          break label$6;
                        }
                        label$17: {
                          label$18: while (1) {
                            if (!$9_1) {
                              break label$17;
                            }
                            $5_1 = HEAPU8[$2_1 >> 0] | 0;
                            $10_1 = HEAP32[$7_1 >> 2] | 0;
                            HEAP32[$7_1 >> 2] = ($10_1 + 1) | 0;
                            HEAP8[$10_1 >> 0] = $5_1;
                            $9_1 = ($9_1 + -1) | 0;
                            $2_1 = ($2_1 + 1) | 0;
                            continue label$18;
                          }
                        }
                        $2_1 = ((HEAP32[$4_1 >> 2] | 0) + 4) | 0;
                        HEAP32[$4_1 >> 2] = $2_1;
                        $9_1 = $2_1;
                        label$19: while (1) {
                          label$20: {
                            if (($9_1 | 0) != ($3_1 | 0)) {
                              break label$20;
                            }
                            $9_1 = $3_1;
                            break label$5;
                          }
                          if (!(HEAP32[$9_1 >> 2] | 0)) {
                            break label$5;
                          }
                          $9_1 = ($9_1 + 4) | 0;
                          continue label$19;
                        }
                      }
                      $2_1 = HEAP32[$4_1 >> 2] | 0;
                    }
                    $10_1 = ($2_1 | 0) != ($3_1 | 0);
                  }
                  global$0 = ($8_1 + 16) | 0;
                  return $10_1 | 0;
                }
                $5_1 = HEAP32[$7_1 >> 2] | 0;
                continue label$4;
              }
            }

            function $1088($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = $5_1;
              $5_1 = $500(($6_1 + 8) | 0 | 0, ($6_1 + 12) | 0 | 0) | 0;
              $0_1 = $392($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
              $501($5_1 | 0) | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1089($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
              $3_1 = $500(($4_1 + 8) | 0 | 0, ($4_1 + 12) | 0 | 0) | 0;
              $0_1 = $348($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              $501($3_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1090($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $9_1 = 0,
                $8_1 = 0,
                $10_1 = 0,
                i64toi32_i32$1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              $9_1 = $2_1;
              label$1: {
                label$2: while (1) {
                  label$3: {
                    if (($9_1 | 0) != ($3_1 | 0)) {
                      break label$3;
                    }
                    $9_1 = $3_1;
                    break label$1;
                  }
                  if (!(HEAPU8[$9_1 >> 0] | 0)) {
                    break label$1;
                  }
                  $9_1 = ($9_1 + 1) | 0;
                  continue label$2;
                }
              }
              HEAP32[$7_1 >> 2] = $5_1;
              HEAP32[$4_1 >> 2] = $2_1;
              label$4: while (1) {
                label$5: {
                  label$6: {
                    label$7: {
                      if (($5_1 | 0) == ($6_1 | 0)) {
                        break label$7;
                      }
                      if (($2_1 | 0) == ($3_1 | 0)) {
                        break label$7;
                      }
                      i64toi32_i32$1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      HEAP32[(($8_1 + 8) | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$1;
                      label$8: {
                        label$9: {
                          label$10: {
                            label$11: {
                              label$12: {
                                $10_1 =
                                  $1091(
                                    $5_1 | 0,
                                    $4_1 | 0,
                                    ($9_1 - $2_1) | 0 | 0,
                                    ((($6_1 - $5_1) | 0) >> 2) | 0 | 0,
                                    $1_1 | 0,
                                    HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                                  ) | 0;
                                if (($10_1 | 0) != (-1 | 0)) {
                                  break label$12;
                                }
                                label$13: {
                                  label$14: while (1) {
                                    HEAP32[$7_1 >> 2] = $5_1;
                                    if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
                                      break label$13;
                                    }
                                    $6_1 = 1;
                                    label$15: {
                                      label$16: {
                                        label$17: {
                                          $5_1 =
                                            $1092(
                                              $5_1 | 0,
                                              $2_1 | 0,
                                              ($9_1 - $2_1) | 0 | 0,
                                              ($8_1 + 8) | 0 | 0,
                                              HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                                            ) | 0;
                                          switch (($5_1 + 2) | 0 | 0) {
                                            case 2:
                                              break label$15;
                                            case 1:
                                              break label$17;
                                            case 0:
                                              break label$9;
                                            default:
                                              break label$16;
                                          }
                                        }
                                        HEAP32[$4_1 >> 2] = $2_1;
                                        break label$11;
                                      }
                                      $6_1 = $5_1;
                                    }
                                    $2_1 = ($2_1 + $6_1) | 0;
                                    $5_1 = ((HEAP32[$7_1 >> 2] | 0) + 4) | 0;
                                    continue label$14;
                                  }
                                }
                                HEAP32[$4_1 >> 2] = $2_1;
                                break label$7;
                              }
                              $5_1 = ((HEAP32[$7_1 >> 2] | 0) + (($10_1 << 2) | 0)) | 0;
                              HEAP32[$7_1 >> 2] = $5_1;
                              if (($5_1 | 0) == ($6_1 | 0)) {
                                break label$8;
                              }
                              $2_1 = HEAP32[$4_1 >> 2] | 0;
                              label$18: {
                                if (($9_1 | 0) != ($3_1 | 0)) {
                                  break label$18;
                                }
                                $9_1 = $3_1;
                                continue label$4;
                              }
                              if (
                                !(
                                  $1092(
                                    $5_1 | 0,
                                    $2_1 | 0,
                                    1 | 0,
                                    $1_1 | 0,
                                    HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                                  ) | 0
                                )
                              ) {
                                break label$10;
                              }
                            }
                            $9_1 = 2;
                            break label$6;
                          }
                          HEAP32[$7_1 >> 2] = ((HEAP32[$7_1 >> 2] | 0) + 4) | 0;
                          $2_1 = ((HEAP32[$4_1 >> 2] | 0) + 1) | 0;
                          HEAP32[$4_1 >> 2] = $2_1;
                          $9_1 = $2_1;
                          label$19: while (1) {
                            label$20: {
                              if (($9_1 | 0) != ($3_1 | 0)) {
                                break label$20;
                              }
                              $9_1 = $3_1;
                              break label$5;
                            }
                            if (!(HEAPU8[$9_1 >> 0] | 0)) {
                              break label$5;
                            }
                            $9_1 = ($9_1 + 1) | 0;
                            continue label$19;
                          }
                        }
                        HEAP32[$4_1 >> 2] = $2_1;
                        $9_1 = 1;
                        break label$6;
                      }
                      $2_1 = HEAP32[$4_1 >> 2] | 0;
                    }
                    $9_1 = ($2_1 | 0) != ($3_1 | 0);
                  }
                  global$0 = ($8_1 + 16) | 0;
                  return $9_1 | 0;
                }
                $5_1 = HEAP32[$7_1 >> 2] | 0;
                continue label$4;
              }
            }

            function $1091($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0;
              $6_1 = (global$0 - 16) | 0;
              global$0 = $6_1;
              HEAP32[(($6_1 + 12) | 0) >> 2] = $5_1;
              $5_1 = $500(($6_1 + 8) | 0 | 0, ($6_1 + 12) | 0 | 0) | 0;
              $0_1 = $394($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
              $501($5_1 | 0) | 0;
              global$0 = ($6_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1092($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[(($5_1 + 12) | 0) >> 2] = $4_1;
              $4_1 = $500(($5_1 + 8) | 0 | 0, ($5_1 + 12) | 0 | 0) | 0;
              $0_1 = $330($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
              $501($4_1 | 0) | 0;
              global$0 = ($5_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1093($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0;
              $5_1 = (global$0 - 16) | 0;
              global$0 = $5_1;
              HEAP32[$4_1 >> 2] = $2_1;
              $2_1 = 2;
              label$1: {
                $1_1 = $1089(($5_1 + 12) | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0) | 0;
                if ((($1_1 + 1) | 0) >>> 0 < 2 >>> 0) {
                  break label$1;
                }
                $2_1 = 1;
                $1_1 = ($1_1 + -1) | 0;
                if ($1_1 >>> 0 > (($3_1 - (HEAP32[$4_1 >> 2] | 0)) | 0) >>> 0) {
                  break label$1;
                }
                $2_1 = ($5_1 + 12) | 0;
                label$2: while (1) {
                  label$3: {
                    if ($1_1) {
                      break label$3;
                    }
                    $2_1 = 0;
                    break label$1;
                  }
                  $0_1 = HEAPU8[$2_1 >> 0] | 0;
                  $3_1 = HEAP32[$4_1 >> 2] | 0;
                  HEAP32[$4_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = $0_1;
                  $1_1 = ($1_1 + -1) | 0;
                  $2_1 = ($2_1 + 1) | 0;
                  continue label$2;
                }
              }
              global$0 = ($5_1 + 16) | 0;
              return $2_1 | 0;
            }

            function $1094($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = -1;
              label$1: {
                label$2: {
                  if ($1095(0 | 0, 0 | 0, 4 | 0, HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0) | 0) {
                    break label$2;
                  }
                  $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                  if ($0_1) {
                    break label$1;
                  }
                  $1_1 = 1;
                }
                return $1_1 | 0;
              }
              return (($1096($0_1 | 0) | 0 | 0) == (1 | 0)) | 0;
            }

            function $1095($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
              $3_1 = $500(($4_1 + 8) | 0 | 0, ($4_1 + 12) | 0 | 0) | 0;
              $0_1 = $395($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              $501($3_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1096($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              HEAP32[(($1_1 + 12) | 0) >> 2] = $0_1;
              $0_1 = $500(($1_1 + 8) | 0 | 0, ($1_1 + 12) | 0 | 0) | 0;
              $2_1 = $396() | 0;
              $501($0_1 | 0) | 0;
              global$0 = ($1_1 + 16) | 0;
              return $2_1 | 0;
            }

            function $1097($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1098($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0,
                $7_1 = 0,
                $8_1 = 0;
              $5_1 = 0;
              $6_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($2_1 | 0) == ($3_1 | 0)) {
                    break label$1;
                  }
                  if ($6_1 >>> 0 >= $4_1 >>> 0) {
                    break label$1;
                  }
                  $7_1 = 1;
                  label$3: {
                    label$4: {
                      $8_1 =
                        $1099(
                          $2_1 | 0,
                          ($3_1 - $2_1) | 0 | 0,
                          $1_1 | 0,
                          HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0
                        ) | 0;
                      switch (($8_1 + 2) | 0 | 0) {
                        case 0:
                        case 1:
                          break label$1;
                        case 2:
                          break label$3;
                        default:
                          break label$4;
                      }
                    }
                    $7_1 = $8_1;
                  }
                  $6_1 = ($6_1 + 1) | 0;
                  $5_1 = ($7_1 + $5_1) | 0;
                  $2_1 = ($2_1 + $7_1) | 0;
                  continue label$2;
                }
              }
              return $5_1 | 0;
            }

            function $1099($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
              $3_1 = $500(($4_1 + 8) | 0 | 0, ($4_1 + 12) | 0 | 0) | 0;
              $0_1 = $397($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              $501($3_1 | 0) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1100($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                if ($0_1) {
                  break label$1;
                }
                return 1 | 0;
              }
              return $1096($0_1 | 0) | 0 | 0;
            }

            function $1101($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1102($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 12) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 8) | 0) >> 2] = $5_1;
              $5_1 =
                $1103(
                  $2_1 | 0,
                  $3_1 | 0,
                  ($8_1 + 12) | 0 | 0,
                  $5_1 | 0,
                  $6_1 | 0,
                  ($8_1 + 8) | 0 | 0,
                  1114111 | 0,
                  0 | 0
                ) | 0;
              HEAP32[$4_1 >> 2] = HEAP32[(($8_1 + 12) | 0) >> 2] | 0;
              HEAP32[$7_1 >> 2] = HEAP32[(($8_1 + 8) | 0) >> 2] | 0;
              global$0 = ($8_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $1103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0;
              HEAP32[$2_1 >> 2] = $0_1;
              HEAP32[$5_1 >> 2] = $3_1;
              label$1: {
                label$2: {
                  if (!(($7_1 & 2) | 0)) {
                    break label$2;
                  }
                  $0_1 = 1;
                  if ((($4_1 - $3_1) | 0 | 0) < (3 | 0)) {
                    break label$1;
                  }
                  HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = 239;
                  $3_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = 187;
                  $3_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = 191;
                }
                $7_1 = HEAP32[$2_1 >> 2] | 0;
                label$3: {
                  label$4: while (1) {
                    label$5: {
                      if ($7_1 >>> 0 < $1_1 >>> 0) {
                        break label$5;
                      }
                      $0_1 = 0;
                      break label$1;
                    }
                    $0_1 = 2;
                    $3_1 = HEAPU16[$7_1 >> 1] | 0;
                    if ($3_1 >>> 0 > $6_1 >>> 0) {
                      break label$1;
                    }
                    label$6: {
                      label$7: {
                        label$8: {
                          if ($3_1 >>> 0 > 127 >>> 0) {
                            break label$8;
                          }
                          $0_1 = 1;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          if ((($4_1 - $7_1) | 0 | 0) < (1 | 0)) {
                            break label$1;
                          }
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] = $3_1;
                          break label$7;
                        }
                        label$9: {
                          if ($3_1 >>> 0 > 2047 >>> 0) {
                            break label$9;
                          }
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          if ((($4_1 - $7_1) | 0 | 0) < (2 | 0)) {
                            break label$3;
                          }
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] = ($3_1 >>> 6) | 0 | 192 | 0;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] = ($3_1 & 63) | 0 | 128 | 0;
                          break label$7;
                        }
                        label$10: {
                          if ($3_1 >>> 0 > 55295 >>> 0) {
                            break label$10;
                          }
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          if ((($4_1 - $7_1) | 0 | 0) < (3 | 0)) {
                            break label$3;
                          }
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] = ($3_1 >>> 12) | 0 | 224 | 0;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] = ((($3_1 >>> 6) | 0) & 63) | 0 | 128 | 0;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] = ($3_1 & 63) | 0 | 128 | 0;
                          break label$7;
                        }
                        label$11: {
                          if ($3_1 >>> 0 > 56319 >>> 0) {
                            break label$11;
                          }
                          $0_1 = 1;
                          if ((($1_1 - $7_1) | 0 | 0) < (4 | 0)) {
                            break label$1;
                          }
                          $8_1 = HEAPU16[(($7_1 + 2) | 0) >> 1] | 0;
                          if ((($8_1 & 64512) | 0 | 0) != (56320 | 0)) {
                            break label$6;
                          }
                          if ((($4_1 - (HEAP32[$5_1 >> 2] | 0)) | 0 | 0) < (4 | 0)) {
                            break label$1;
                          }
                          $0_1 = ($3_1 & 960) | 0;
                          if (
                            (((($0_1 << 10) |
                              0 |
                              (((($3_1 << 10) | 0) & 64512) | 0) |
                              0 |
                              (($8_1 & 1023) | 0) |
                              0) +
                              65536) |
                              0) >>>
                              0 >
                            $6_1 >>> 0
                          ) {
                            break label$6;
                          }
                          HEAP32[$2_1 >> 2] = ($7_1 + 2) | 0;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          $0_1 = ((($0_1 >>> 6) | 0) + 1) | 0;
                          HEAP8[$7_1 >> 0] = ($0_1 >>> 2) | 0 | 240 | 0;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] =
                            ((($0_1 << 4) | 0) & 48) | 0 | (((($3_1 >>> 2) | 0) & 15) | 0) | 0 | 128 | 0;
                          $7_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                          HEAP8[$7_1 >> 0] =
                            ((($8_1 >>> 6) | 0) & 15) | 0 | (((($3_1 << 4) | 0) & 48) | 0) | 0 | 128 | 0;
                          $3_1 = HEAP32[$5_1 >> 2] | 0;
                          HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                          HEAP8[$3_1 >> 0] = ($8_1 & 63) | 0 | 128 | 0;
                          break label$7;
                        }
                        if ($3_1 >>> 0 < 57344 >>> 0) {
                          break label$1;
                        }
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        if ((($4_1 - $7_1) | 0 | 0) < (3 | 0)) {
                          break label$3;
                        }
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ($3_1 >>> 12) | 0 | 224 | 0;
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ((($3_1 >>> 6) | 0) & 63) | 0 | 128 | 0;
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ($3_1 & 63) | 0 | 128 | 0;
                      }
                      $7_1 = ((HEAP32[$2_1 >> 2] | 0) + 2) | 0;
                      HEAP32[$2_1 >> 2] = $7_1;
                      continue label$4;
                    }
                    break label$4;
                  }
                  return 2 | 0;
                }
                return 1 | 0;
              }
              return $0_1 | 0;
            }

            function $1104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 12) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 8) | 0) >> 2] = $5_1;
              $5_1 =
                $1105(
                  $2_1 | 0,
                  $3_1 | 0,
                  ($8_1 + 12) | 0 | 0,
                  $5_1 | 0,
                  $6_1 | 0,
                  ($8_1 + 8) | 0 | 0,
                  1114111 | 0,
                  0 | 0
                ) | 0;
              HEAP32[$4_1 >> 2] = HEAP32[(($8_1 + 12) | 0) >> 2] | 0;
              HEAP32[$7_1 >> 2] = HEAP32[(($8_1 + 8) | 0) >> 2] | 0;
              global$0 = ($8_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $1105($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $9_1 = 0,
                $10_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $184_1 = 0;
              HEAP32[$2_1 >> 2] = $0_1;
              HEAP32[$5_1 >> 2] = $3_1;
              label$1: {
                if (!(($7_1 & 4) | 0)) {
                  break label$1;
                }
                $7_1 = HEAP32[$2_1 >> 2] | 0;
                if ((($1_1 - $7_1) | 0 | 0) < (3 | 0)) {
                  break label$1;
                }
                if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
                  break label$1;
                }
                if ((HEAPU8[(($7_1 + 1) | 0) >> 0] | 0 | 0) != (187 | 0)) {
                  break label$1;
                }
                if ((HEAPU8[(($7_1 + 2) | 0) >> 0] | 0 | 0) != (191 | 0)) {
                  break label$1;
                }
                HEAP32[$2_1 >> 2] = ($7_1 + 3) | 0;
                $3_1 = HEAP32[$5_1 >> 2] | 0;
              }
              label$2: {
                label$3: {
                  label$4: {
                    label$5: {
                      label$6: while (1) {
                        $0_1 = HEAP32[$2_1 >> 2] | 0;
                        if ($0_1 >>> 0 >= $1_1 >>> 0) {
                          break label$5;
                        }
                        if ($3_1 >>> 0 >= $4_1 >>> 0) {
                          break label$5;
                        }
                        $8_1 = 2;
                        $7_1 = HEAPU8[$0_1 >> 0] | 0;
                        if ($7_1 >>> 0 > $6_1 >>> 0) {
                          break label$2;
                        }
                        label$7: {
                          label$8: {
                            if ((((($7_1 << 24) | 0) >> 24) | 0 | 0) < (0 | 0)) {
                              break label$8;
                            }
                            HEAP16[$3_1 >> 1] = $7_1;
                            $7_1 = ($0_1 + 1) | 0;
                            break label$7;
                          }
                          if ($7_1 >>> 0 < 194 >>> 0) {
                            break label$2;
                          }
                          label$9: {
                            if ($7_1 >>> 0 > 223 >>> 0) {
                              break label$9;
                            }
                            if ((($1_1 - $0_1) | 0 | 0) < (2 | 0)) {
                              break label$3;
                            }
                            $9_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                            if ((($9_1 & 192) | 0 | 0) != (128 | 0)) {
                              break label$4;
                            }
                            $8_1 = 2;
                            $7_1 = ($9_1 & 63) | 0 | (((($7_1 << 6) | 0) & 1984) | 0) | 0;
                            if ($7_1 >>> 0 > $6_1 >>> 0) {
                              break label$4;
                            }
                            HEAP16[$3_1 >> 1] = $7_1;
                            $7_1 = ($0_1 + 2) | 0;
                            break label$7;
                          }
                          label$10: {
                            if ($7_1 >>> 0 > 239 >>> 0) {
                              break label$10;
                            }
                            if ((($1_1 - $0_1) | 0 | 0) < (3 | 0)) {
                              break label$3;
                            }
                            $10_1 = HEAPU8[(($0_1 + 2) | 0) >> 0] | 0;
                            $9_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                            label$11: {
                              label$12: {
                                label$13: {
                                  if (($7_1 | 0) == (237 | 0)) {
                                    break label$13;
                                  }
                                  if (($7_1 | 0) != (224 | 0)) {
                                    break label$12;
                                  }
                                  if ((($9_1 & 224) | 0 | 0) == (160 | 0)) {
                                    break label$11;
                                  }
                                  break label$4;
                                }
                                if ((($9_1 & 224) | 0 | 0) == (128 | 0)) {
                                  break label$11;
                                }
                                break label$4;
                              }
                              if ((($9_1 & 192) | 0 | 0) != (128 | 0)) {
                                break label$4;
                              }
                            }
                            if ((($10_1 & 192) | 0 | 0) != (128 | 0)) {
                              break label$4;
                            }
                            $8_1 = 2;
                            $7_1 =
                              ((($9_1 & 63) | 0) << 6) | 0 | (($7_1 << 12) | 0) | 0 | (($10_1 & 63) | 0) | 0;
                            if ((($7_1 & 65535) | 0) >>> 0 > $6_1 >>> 0) {
                              break label$4;
                            }
                            HEAP16[$3_1 >> 1] = $7_1;
                            $7_1 = ($0_1 + 3) | 0;
                            break label$7;
                          }
                          if ($7_1 >>> 0 > 244 >>> 0) {
                            break label$2;
                          }
                          $8_1 = 1;
                          if ((($1_1 - $0_1) | 0 | 0) < (4 | 0)) {
                            break label$4;
                          }
                          $10_1 = HEAPU8[(($0_1 + 3) | 0) >> 0] | 0;
                          $9_1 = HEAPU8[(($0_1 + 2) | 0) >> 0] | 0;
                          $0_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                          label$14: {
                            label$15: {
                              switch (($7_1 + -240) | 0 | 0) {
                                case 0:
                                  if ((((($0_1 + 112) | 0) & 255) | 0) >>> 0 >= 48 >>> 0) {
                                    break label$2;
                                  }
                                  break label$14;
                                case 4:
                                  if ((($0_1 & 240) | 0 | 0) != (128 | 0)) {
                                    break label$2;
                                  }
                                  break label$14;
                                default:
                                  break label$15;
                              }
                            }
                            if ((($0_1 & 192) | 0 | 0) != (128 | 0)) {
                              break label$2;
                            }
                          }
                          if ((($9_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$2;
                          }
                          if ((($10_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$2;
                          }
                          if ((($4_1 - $3_1) | 0 | 0) < (4 | 0)) {
                            break label$4;
                          }
                          $8_1 = 2;
                          $7_1 = ($7_1 & 7) | 0;
                          $11_1 = ($9_1 << 6) | 0;
                          $10_1 = ($10_1 & 63) | 0;
                          if (
                            (((($0_1 << 12) | 0) & 258048) |
                              0 |
                              (($7_1 << 18) | 0) |
                              0 |
                              (($11_1 & 4032) | 0) |
                              0 |
                              $10_1 |
                              0) >>>
                              0 >
                            $6_1 >>> 0
                          ) {
                            break label$4;
                          }
                          $184_1 = ($7_1 << 8) | 0;
                          $7_1 = ($0_1 << 2) | 0;
                          HEAP16[$3_1 >> 1] =
                            (($184_1 |
                              (($7_1 & 192) | 0) |
                              0 |
                              (($7_1 & 60) | 0) |
                              0 |
                              (((($9_1 >>> 4) | 0) & 3) | 0) |
                              0) +
                              16320) |
                            0 |
                            55296 |
                            0;
                          HEAP32[$5_1 >> 2] = ($3_1 + 2) | 0;
                          HEAP16[(($3_1 + 2) | 0) >> 1] = ($11_1 & 960) | 0 | $10_1 | 0 | 56320 | 0;
                          $7_1 = ((HEAP32[$2_1 >> 2] | 0) + 4) | 0;
                        }
                        HEAP32[$2_1 >> 2] = $7_1;
                        $3_1 = ((HEAP32[$5_1 >> 2] | 0) + 2) | 0;
                        HEAP32[$5_1 >> 2] = $3_1;
                        continue label$6;
                      }
                    }
                    $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
                  }
                  return $8_1 | 0;
                }
                return 1 | 0;
              }
              return 2 | 0;
            }

            function $1106($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              HEAP32[$4_1 >> 2] = $2_1;
              return 3 | 0;
            }

            function $1107($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1108($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1109($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              return $1110($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
            }

            function $1110($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $7_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0;
              $5_1 = $0_1;
              label$1: {
                if (!(($4_1 & 4) | 0)) {
                  break label$1;
                }
                $5_1 = $0_1;
                if ((($1_1 - $5_1) | 0 | 0) < (3 | 0)) {
                  break label$1;
                }
                $5_1 = $0_1;
                if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
                  break label$1;
                }
                $5_1 = $0_1;
                if ((HEAPU8[(($5_1 + 1) | 0) >> 0] | 0 | 0) != (187 | 0)) {
                  break label$1;
                }
                $5_1 = (HEAPU8[(($0_1 + 2) | 0) >> 0] | 0 | 0) == (191 | 0) ? ($0_1 + 3) | 0 : $0_1;
              }
              $6_1 = 0;
              label$2: {
                label$3: while (1) {
                  if ($6_1 >>> 0 >= $2_1 >>> 0) {
                    break label$2;
                  }
                  if ($5_1 >>> 0 >= $1_1 >>> 0) {
                    break label$2;
                  }
                  $4_1 = HEAPU8[$5_1 >> 0] | 0;
                  if ($4_1 >>> 0 > $3_1 >>> 0) {
                    break label$2;
                  }
                  label$4: {
                    label$5: {
                      if ((((($4_1 << 24) | 0) >> 24) | 0 | 0) < (0 | 0)) {
                        break label$5;
                      }
                      $5_1 = ($5_1 + 1) | 0;
                      break label$4;
                    }
                    if ($4_1 >>> 0 < 194 >>> 0) {
                      break label$2;
                    }
                    label$6: {
                      if ($4_1 >>> 0 > 223 >>> 0) {
                        break label$6;
                      }
                      if ((($1_1 - $5_1) | 0 | 0) < (2 | 0)) {
                        break label$2;
                      }
                      $7_1 = HEAPU8[(($5_1 + 1) | 0) >> 0] | 0;
                      if ((($7_1 & 192) | 0 | 0) != (128 | 0)) {
                        break label$2;
                      }
                      if ((($7_1 & 63) | 0 | (((($4_1 << 6) | 0) & 1984) | 0) | 0) >>> 0 > $3_1 >>> 0) {
                        break label$2;
                      }
                      $5_1 = ($5_1 + 2) | 0;
                      break label$4;
                    }
                    label$7: {
                      label$8: {
                        label$9: {
                          if ($4_1 >>> 0 > 239 >>> 0) {
                            break label$9;
                          }
                          if ((($1_1 - $5_1) | 0 | 0) < (3 | 0)) {
                            break label$2;
                          }
                          $8_1 = HEAPU8[(($5_1 + 2) | 0) >> 0] | 0;
                          $7_1 = HEAPU8[(($5_1 + 1) | 0) >> 0] | 0;
                          if (($4_1 | 0) == (237 | 0)) {
                            break label$8;
                          }
                          label$10: {
                            if (($4_1 | 0) != (224 | 0)) {
                              break label$10;
                            }
                            if ((($7_1 & 224) | 0 | 0) == (160 | 0)) {
                              break label$7;
                            }
                            break label$2;
                          }
                          if ((($7_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$2;
                          }
                          break label$7;
                        }
                        if ($4_1 >>> 0 > 244 >>> 0) {
                          break label$2;
                        }
                        if ((($2_1 - $6_1) | 0) >>> 0 < 2 >>> 0) {
                          break label$2;
                        }
                        if ((($1_1 - $5_1) | 0 | 0) < (4 | 0)) {
                          break label$2;
                        }
                        $9_1 = HEAPU8[(($5_1 + 3) | 0) >> 0] | 0;
                        $8_1 = HEAPU8[(($5_1 + 2) | 0) >> 0] | 0;
                        $7_1 = HEAPU8[(($5_1 + 1) | 0) >> 0] | 0;
                        label$11: {
                          label$12: {
                            switch (($4_1 + -240) | 0 | 0) {
                              case 0:
                                if ((((($7_1 + 112) | 0) & 255) | 0) >>> 0 < 48 >>> 0) {
                                  break label$11;
                                }
                                break label$2;
                              case 4:
                                if ((($7_1 & 240) | 0 | 0) == (128 | 0)) {
                                  break label$11;
                                }
                                break label$2;
                              default:
                                break label$12;
                            }
                          }
                          if ((($7_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$2;
                          }
                        }
                        if ((($8_1 & 192) | 0 | 0) != (128 | 0)) {
                          break label$2;
                        }
                        if ((($9_1 & 192) | 0 | 0) != (128 | 0)) {
                          break label$2;
                        }
                        if (
                          (((($7_1 & 63) | 0) << 12) |
                            0 |
                            (((($4_1 << 18) | 0) & 1835008) | 0) |
                            0 |
                            (((($8_1 << 6) | 0) & 4032) | 0) |
                            0 |
                            (($9_1 & 63) | 0) |
                            0) >>>
                            0 >
                          $3_1 >>> 0
                        ) {
                          break label$2;
                        }
                        $5_1 = ($5_1 + 4) | 0;
                        $6_1 = ($6_1 + 1) | 0;
                        break label$4;
                      }
                      if ((($7_1 & 224) | 0 | 0) != (128 | 0)) {
                        break label$2;
                      }
                    }
                    if ((($8_1 & 192) | 0 | 0) != (128 | 0)) {
                      break label$2;
                    }
                    if (
                      (((($7_1 & 63) | 0) << 6) |
                        0 |
                        (((($4_1 << 12) | 0) & 61440) | 0) |
                        0 |
                        (($8_1 & 63) | 0) |
                        0) >>>
                        0 >
                      $3_1 >>> 0
                    ) {
                      break label$2;
                    }
                    $5_1 = ($5_1 + 3) | 0;
                  }
                  $6_1 = ($6_1 + 1) | 0;
                  continue label$3;
                }
              }
              return ($5_1 - $0_1) | 0 | 0;
            }

            function $1111($0_1) {
              $0_1 = $0_1 | 0;
              return 4 | 0;
            }

            function $1112($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1113($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 12) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 8) | 0) >> 2] = $5_1;
              $5_1 =
                $1114(
                  $2_1 | 0,
                  $3_1 | 0,
                  ($8_1 + 12) | 0 | 0,
                  $5_1 | 0,
                  $6_1 | 0,
                  ($8_1 + 8) | 0 | 0,
                  1114111 | 0,
                  0 | 0
                ) | 0;
              HEAP32[$4_1 >> 2] = HEAP32[(($8_1 + 12) | 0) >> 2] | 0;
              HEAP32[$7_1 >> 2] = HEAP32[(($8_1 + 8) | 0) >> 2] | 0;
              global$0 = ($8_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $1114($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              HEAP32[$2_1 >> 2] = $0_1;
              HEAP32[$5_1 >> 2] = $3_1;
              label$1: {
                label$2: {
                  if (!(($7_1 & 2) | 0)) {
                    break label$2;
                  }
                  $7_1 = 1;
                  if ((($4_1 - $3_1) | 0 | 0) < (3 | 0)) {
                    break label$1;
                  }
                  HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = 239;
                  $3_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = 187;
                  $3_1 = HEAP32[$5_1 >> 2] | 0;
                  HEAP32[$5_1 >> 2] = ($3_1 + 1) | 0;
                  HEAP8[$3_1 >> 0] = 191;
                }
                $3_1 = HEAP32[$2_1 >> 2] | 0;
                label$3: while (1) {
                  label$4: {
                    if ($3_1 >>> 0 < $1_1 >>> 0) {
                      break label$4;
                    }
                    $7_1 = 0;
                    break label$1;
                  }
                  $7_1 = 2;
                  $3_1 = HEAP32[$3_1 >> 2] | 0;
                  if ($3_1 >>> 0 > $6_1 >>> 0) {
                    break label$1;
                  }
                  if ((($3_1 & -2048) | 0 | 0) == (55296 | 0)) {
                    break label$1;
                  }
                  label$5: {
                    label$6: {
                      label$7: {
                        if ($3_1 >>> 0 > 127 >>> 0) {
                          break label$7;
                        }
                        $7_1 = 1;
                        $0_1 = HEAP32[$5_1 >> 2] | 0;
                        if ((($4_1 - $0_1) | 0 | 0) < (1 | 0)) {
                          break label$1;
                        }
                        HEAP32[$5_1 >> 2] = ($0_1 + 1) | 0;
                        HEAP8[$0_1 >> 0] = $3_1;
                        break label$6;
                      }
                      label$8: {
                        if ($3_1 >>> 0 > 2047 >>> 0) {
                          break label$8;
                        }
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        if ((($4_1 - $7_1) | 0 | 0) < (2 | 0)) {
                          break label$5;
                        }
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ($3_1 >>> 6) | 0 | 192 | 0;
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ($3_1 & 63) | 0 | 128 | 0;
                        break label$6;
                      }
                      $7_1 = HEAP32[$5_1 >> 2] | 0;
                      $0_1 = ($4_1 - $7_1) | 0;
                      label$9: {
                        if ($3_1 >>> 0 > 65535 >>> 0) {
                          break label$9;
                        }
                        if (($0_1 | 0) < (3 | 0)) {
                          break label$5;
                        }
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ($3_1 >>> 12) | 0 | 224 | 0;
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ((($3_1 >>> 6) | 0) & 63) | 0 | 128 | 0;
                        $7_1 = HEAP32[$5_1 >> 2] | 0;
                        HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                        HEAP8[$7_1 >> 0] = ($3_1 & 63) | 0 | 128 | 0;
                        break label$6;
                      }
                      if (($0_1 | 0) < (4 | 0)) {
                        break label$5;
                      }
                      HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                      HEAP8[$7_1 >> 0] = ($3_1 >>> 18) | 0 | 240 | 0;
                      $7_1 = HEAP32[$5_1 >> 2] | 0;
                      HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                      HEAP8[$7_1 >> 0] = ((($3_1 >>> 12) | 0) & 63) | 0 | 128 | 0;
                      $7_1 = HEAP32[$5_1 >> 2] | 0;
                      HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                      HEAP8[$7_1 >> 0] = ((($3_1 >>> 6) | 0) & 63) | 0 | 128 | 0;
                      $7_1 = HEAP32[$5_1 >> 2] | 0;
                      HEAP32[$5_1 >> 2] = ($7_1 + 1) | 0;
                      HEAP8[$7_1 >> 0] = ($3_1 & 63) | 0 | 128 | 0;
                    }
                    $3_1 = ((HEAP32[$2_1 >> 2] | 0) + 4) | 0;
                    HEAP32[$2_1 >> 2] = $3_1;
                    continue label$3;
                  }
                  break label$3;
                }
                return 1 | 0;
              }
              return $7_1 | 0;
            }

            function $1115($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              HEAP32[(($8_1 + 12) | 0) >> 2] = $2_1;
              HEAP32[(($8_1 + 8) | 0) >> 2] = $5_1;
              $5_1 =
                $1116(
                  $2_1 | 0,
                  $3_1 | 0,
                  ($8_1 + 12) | 0 | 0,
                  $5_1 | 0,
                  $6_1 | 0,
                  ($8_1 + 8) | 0 | 0,
                  1114111 | 0,
                  0 | 0
                ) | 0;
              HEAP32[$4_1 >> 2] = HEAP32[(($8_1 + 12) | 0) >> 2] | 0;
              HEAP32[$7_1 >> 2] = HEAP32[(($8_1 + 8) | 0) >> 2] | 0;
              global$0 = ($8_1 + 16) | 0;
              return $5_1 | 0;
            }

            function $1116($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $10_1 = 0,
                $8_1 = 0,
                $11_1 = 0,
                $9_1 = 0,
                $12_1 = 0;
              HEAP32[$2_1 >> 2] = $0_1;
              HEAP32[$5_1 >> 2] = $3_1;
              label$1: {
                if (!(($7_1 & 4) | 0)) {
                  break label$1;
                }
                $7_1 = HEAP32[$2_1 >> 2] | 0;
                if ((($1_1 - $7_1) | 0 | 0) < (3 | 0)) {
                  break label$1;
                }
                if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
                  break label$1;
                }
                if ((HEAPU8[(($7_1 + 1) | 0) >> 0] | 0 | 0) != (187 | 0)) {
                  break label$1;
                }
                if ((HEAPU8[(($7_1 + 2) | 0) >> 0] | 0 | 0) != (191 | 0)) {
                  break label$1;
                }
                HEAP32[$2_1 >> 2] = ($7_1 + 3) | 0;
                $3_1 = HEAP32[$5_1 >> 2] | 0;
              }
              label$2: {
                label$3: {
                  label$4: {
                    label$5: while (1) {
                      $0_1 = HEAP32[$2_1 >> 2] | 0;
                      if ($0_1 >>> 0 >= $1_1 >>> 0) {
                        break label$4;
                      }
                      if ($3_1 >>> 0 >= $4_1 >>> 0) {
                        break label$4;
                      }
                      $8_1 = HEAP8[$0_1 >> 0] | 0;
                      $7_1 = ($8_1 & 255) | 0;
                      label$6: {
                        label$7: {
                          if (($8_1 | 0) < (0 | 0)) {
                            break label$7;
                          }
                          label$8: {
                            if ($7_1 >>> 0 > $6_1 >>> 0) {
                              break label$8;
                            }
                            $8_1 = 1;
                            break label$6;
                          }
                          return 2 | 0;
                        }
                        $9_1 = 2;
                        if ($7_1 >>> 0 < 194 >>> 0) {
                          break label$3;
                        }
                        label$9: {
                          if ($7_1 >>> 0 > 223 >>> 0) {
                            break label$9;
                          }
                          if ((($1_1 - $0_1) | 0 | 0) < (2 | 0)) {
                            break label$2;
                          }
                          $10_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                          if ((($10_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$3;
                          }
                          $8_1 = 2;
                          $9_1 = 2;
                          $7_1 = ($10_1 & 63) | 0 | (((($7_1 << 6) | 0) & 1984) | 0) | 0;
                          if ($7_1 >>> 0 <= $6_1 >>> 0) {
                            break label$6;
                          }
                          break label$3;
                        }
                        label$10: {
                          if ($7_1 >>> 0 > 239 >>> 0) {
                            break label$10;
                          }
                          if ((($1_1 - $0_1) | 0 | 0) < (3 | 0)) {
                            break label$2;
                          }
                          $11_1 = HEAPU8[(($0_1 + 2) | 0) >> 0] | 0;
                          $10_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                          label$11: {
                            label$12: {
                              label$13: {
                                if (($7_1 | 0) == (237 | 0)) {
                                  break label$13;
                                }
                                if (($7_1 | 0) != (224 | 0)) {
                                  break label$12;
                                }
                                if ((($10_1 & 224) | 0 | 0) == (160 | 0)) {
                                  break label$11;
                                }
                                break label$3;
                              }
                              if ((($10_1 & 224) | 0 | 0) == (128 | 0)) {
                                break label$11;
                              }
                              break label$3;
                            }
                            if ((($10_1 & 192) | 0 | 0) != (128 | 0)) {
                              break label$3;
                            }
                          }
                          if ((($11_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$3;
                          }
                          $8_1 = 3;
                          $7_1 =
                            ((($10_1 & 63) | 0) << 6) |
                            0 |
                            (((($7_1 << 12) | 0) & 61440) | 0) |
                            0 |
                            (($11_1 & 63) | 0) |
                            0;
                          if ($7_1 >>> 0 <= $6_1 >>> 0) {
                            break label$6;
                          }
                          break label$3;
                        }
                        if ($7_1 >>> 0 > 244 >>> 0) {
                          break label$3;
                        }
                        if ((($1_1 - $0_1) | 0 | 0) < (4 | 0)) {
                          break label$2;
                        }
                        $12_1 = HEAPU8[(($0_1 + 3) | 0) >> 0] | 0;
                        $11_1 = HEAPU8[(($0_1 + 2) | 0) >> 0] | 0;
                        $10_1 = HEAPU8[(($0_1 + 1) | 0) >> 0] | 0;
                        label$14: {
                          label$15: {
                            switch (($7_1 + -240) | 0 | 0) {
                              case 0:
                                if ((((($10_1 + 112) | 0) & 255) | 0) >>> 0 < 48 >>> 0) {
                                  break label$14;
                                }
                                break label$3;
                              case 4:
                                if ((($10_1 & 240) | 0 | 0) == (128 | 0)) {
                                  break label$14;
                                }
                                break label$3;
                              default:
                                break label$15;
                            }
                          }
                          if ((($10_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$3;
                          }
                        }
                        if ((($11_1 & 192) | 0 | 0) != (128 | 0)) {
                          break label$3;
                        }
                        if ((($12_1 & 192) | 0 | 0) != (128 | 0)) {
                          break label$3;
                        }
                        $8_1 = 4;
                        $7_1 =
                          ((($10_1 & 63) | 0) << 12) |
                          0 |
                          (((($7_1 << 18) | 0) & 1835008) | 0) |
                          0 |
                          (((($11_1 << 6) | 0) & 4032) | 0) |
                          0 |
                          (($12_1 & 63) | 0) |
                          0;
                        if ($7_1 >>> 0 > $6_1 >>> 0) {
                          break label$3;
                        }
                      }
                      HEAP32[$3_1 >> 2] = $7_1;
                      HEAP32[$2_1 >> 2] = ($0_1 + $8_1) | 0;
                      $3_1 = ((HEAP32[$5_1 >> 2] | 0) + 4) | 0;
                      HEAP32[$5_1 >> 2] = $3_1;
                      continue label$5;
                    }
                  }
                  $9_1 = $0_1 >>> 0 < $1_1 >>> 0;
                }
                return $9_1 | 0;
              }
              return 1 | 0;
            }

            function $1117($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              HEAP32[$4_1 >> 2] = $2_1;
              return 3 | 0;
            }

            function $1118($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1119($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1120($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              return $1121($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
            }

            function $1121($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $8_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $6_1 = 0,
                $10_1 = 0;
              $5_1 = $0_1;
              label$1: {
                if (!(($4_1 & 4) | 0)) {
                  break label$1;
                }
                $5_1 = $0_1;
                if ((($1_1 - $5_1) | 0 | 0) < (3 | 0)) {
                  break label$1;
                }
                $5_1 = $0_1;
                if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
                  break label$1;
                }
                $5_1 = $0_1;
                if ((HEAPU8[(($5_1 + 1) | 0) >> 0] | 0 | 0) != (187 | 0)) {
                  break label$1;
                }
                $5_1 = (HEAPU8[(($0_1 + 2) | 0) >> 0] | 0 | 0) == (191 | 0) ? ($0_1 + 3) | 0 : $0_1;
              }
              $6_1 = 0;
              label$2: {
                label$3: while (1) {
                  if ($6_1 >>> 0 >= $2_1 >>> 0) {
                    break label$2;
                  }
                  if ($5_1 >>> 0 >= $1_1 >>> 0) {
                    break label$2;
                  }
                  $7_1 = HEAP8[$5_1 >> 0] | 0;
                  $4_1 = ($7_1 & 255) | 0;
                  label$4: {
                    label$5: {
                      if (($7_1 | 0) < (0 | 0)) {
                        break label$5;
                      }
                      $7_1 = 1;
                      if ($4_1 >>> 0 <= $3_1 >>> 0) {
                        break label$4;
                      }
                      break label$2;
                    }
                    if ($4_1 >>> 0 < 194 >>> 0) {
                      break label$2;
                    }
                    label$6: {
                      if ($4_1 >>> 0 > 223 >>> 0) {
                        break label$6;
                      }
                      if ((($1_1 - $5_1) | 0 | 0) < (2 | 0)) {
                        break label$2;
                      }
                      $8_1 = HEAPU8[(($5_1 + 1) | 0) >> 0] | 0;
                      if ((($8_1 & 192) | 0 | 0) != (128 | 0)) {
                        break label$2;
                      }
                      $7_1 = 2;
                      if ((($8_1 & 63) | 0 | (((($4_1 << 6) | 0) & 1984) | 0) | 0) >>> 0 <= $3_1 >>> 0) {
                        break label$4;
                      }
                      break label$2;
                    }
                    label$7: {
                      label$8: {
                        label$9: {
                          if ($4_1 >>> 0 > 239 >>> 0) {
                            break label$9;
                          }
                          if ((($1_1 - $5_1) | 0 | 0) < (3 | 0)) {
                            break label$2;
                          }
                          $9_1 = HEAPU8[(($5_1 + 2) | 0) >> 0] | 0;
                          $8_1 = HEAPU8[(($5_1 + 1) | 0) >> 0] | 0;
                          if (($4_1 | 0) == (237 | 0)) {
                            break label$8;
                          }
                          label$10: {
                            if (($4_1 | 0) != (224 | 0)) {
                              break label$10;
                            }
                            if ((($8_1 & 224) | 0 | 0) == (160 | 0)) {
                              break label$7;
                            }
                            break label$2;
                          }
                          if ((($8_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$2;
                          }
                          break label$7;
                        }
                        if ($4_1 >>> 0 > 244 >>> 0) {
                          break label$2;
                        }
                        if ((($1_1 - $5_1) | 0 | 0) < (4 | 0)) {
                          break label$2;
                        }
                        $10_1 = HEAPU8[(($5_1 + 3) | 0) >> 0] | 0;
                        $9_1 = HEAPU8[(($5_1 + 2) | 0) >> 0] | 0;
                        $8_1 = HEAPU8[(($5_1 + 1) | 0) >> 0] | 0;
                        label$11: {
                          label$12: {
                            switch (($4_1 + -240) | 0 | 0) {
                              case 0:
                                if ((((($8_1 + 112) | 0) & 255) | 0) >>> 0 < 48 >>> 0) {
                                  break label$11;
                                }
                                break label$2;
                              case 4:
                                if ((($8_1 & 240) | 0 | 0) == (128 | 0)) {
                                  break label$11;
                                }
                                break label$2;
                              default:
                                break label$12;
                            }
                          }
                          if ((($8_1 & 192) | 0 | 0) != (128 | 0)) {
                            break label$2;
                          }
                        }
                        if ((($9_1 & 192) | 0 | 0) != (128 | 0)) {
                          break label$2;
                        }
                        if ((($10_1 & 192) | 0 | 0) != (128 | 0)) {
                          break label$2;
                        }
                        $7_1 = 4;
                        if (
                          (((($8_1 & 63) | 0) << 12) |
                            0 |
                            (((($4_1 << 18) | 0) & 1835008) | 0) |
                            0 |
                            (((($9_1 << 6) | 0) & 4032) | 0) |
                            0 |
                            (($10_1 & 63) | 0) |
                            0) >>>
                            0 >
                          $3_1 >>> 0
                        ) {
                          break label$2;
                        }
                        break label$4;
                      }
                      if ((($8_1 & 224) | 0 | 0) != (128 | 0)) {
                        break label$2;
                      }
                    }
                    if ((($9_1 & 192) | 0 | 0) != (128 | 0)) {
                      break label$2;
                    }
                    $7_1 = 3;
                    if (
                      (((($8_1 & 63) | 0) << 6) |
                        0 |
                        (((($4_1 << 12) | 0) & 61440) | 0) |
                        0 |
                        (($9_1 & 63) | 0) |
                        0) >>>
                        0 >
                      $3_1 >>> 0
                    ) {
                      break label$2;
                    }
                  }
                  $6_1 = ($6_1 + 1) | 0;
                  $5_1 = ($5_1 + $7_1) | 0;
                  continue label$3;
                }
              }
              return ($5_1 - $0_1) | 0 | 0;
            }

            function $1122($0_1) {
              $0_1 = $0_1 | 0;
              return 4 | 0;
            }

            function $1123($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 8840;
              $1540(($0_1 + 12) | 0 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1124($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1123($0_1 | 0) | 0 | 0);
            }

            function $1125($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 8880;
              $1540(($0_1 + 16) | 0 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1126($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1125($0_1 | 0) | 0 | 0);
            }

            function $1127($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP8[(($0_1 + 8) | 0) >> 0] | 0 | 0;
            }

            function $1128($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0;
            }

            function $1129($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP8[(($0_1 + 9) | 0) >> 0] | 0 | 0;
            }

            function $1130($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0;
            }

            function $1131($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1533($0_1 | 0, ($1_1 + 12) | 0 | 0) | 0;
            }

            function $1132($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1533($0_1 | 0, ($1_1 + 16) | 0 | 0) | 0;
            }

            function $1133($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $910($0_1 | 0, 8912 | 0) | 0;
            }

            function $1134($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1135($0_1 | 0, 8920 | 0) | 0;
            }

            function $1135($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $426($0_1 | 0, ($2_1 + 8) | 0 | 0, $2_1 | 0) | 0;
              $1556($0_1 | 0, $1_1 | 0, $1136($1_1 | 0) | 0 | 0);
              global$0 = ($2_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1136($0_1) {
              $0_1 = $0_1 | 0;
              return $386($0_1 | 0) | 0 | 0;
            }

            function $1137($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $910($0_1 | 0, 8940 | 0) | 0;
            }

            function $1138($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1135($0_1 | 0, 8948 | 0) | 0;
            }

            function $1139($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1551($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1140($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (($0_1 | 0) == ($1_1 | 0)) {
                  break label$1;
                }
                label$2: while (1) {
                  $1_1 = ($1_1 + -4) | 0;
                  if ($0_1 >>> 0 >= $1_1 >>> 0) {
                    break label$1;
                  }
                  $1357($0_1 | 0, $1_1 | 0);
                  $0_1 = ($0_1 + 4) | 0;
                  continue label$2;
                }
              }
            }

            function $1141($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17904) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17904 | 0) | 0)) {
                  break label$1;
                }
                $1142();
                HEAP32[((0 + 17900) | 0) >> 2] = 18080;
                $1656(17904 | 0);
              }
              return HEAP32[((0 + 17900) | 0) >> 2] | 0 | 0;
            }

            function $1142() {
              var $0_1 = 0;
              label$1: {
                if (((HEAPU8[((0 + 18248) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18248 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = 18080;
                label$2: while (1) {
                  $0_1 = (($453($0_1 | 0) | 0) + 12) | 0;
                  if (($0_1 | 0) != (18248 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$25(35 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18248 | 0);
              }
              $1139(18080 | 0, 13208 | 0) | 0;
              $1139(18092 | 0, 13215 | 0) | 0;
              $1139(18104 | 0, 13222 | 0) | 0;
              $1139(18116 | 0, 13230 | 0) | 0;
              $1139(18128 | 0, 13240 | 0) | 0;
              $1139(18140 | 0, 13249 | 0) | 0;
              $1139(18152 | 0, 13256 | 0) | 0;
              $1139(18164 | 0, 13265 | 0) | 0;
              $1139(18176 | 0, 13269 | 0) | 0;
              $1139(18188 | 0, 13273 | 0) | 0;
              $1139(18200 | 0, 13277 | 0) | 0;
              $1139(18212 | 0, 13281 | 0) | 0;
              $1139(18224 | 0, 13285 | 0) | 0;
              $1139(18236 | 0, 13289 | 0) | 0;
            }

            function $1143($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 18248;
              label$1: while (1) {
                $1_1 = $1540(($1_1 + -12) | 0 | 0) | 0;
                if (($1_1 | 0) != (18080 | 0)) {
                  continue label$1;
                }
                break label$1;
              }
            }

            function $1144($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17912) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17912 | 0) | 0)) {
                  break label$1;
                }
                $1145();
                HEAP32[((0 + 17908) | 0) >> 2] = 18256;
                $1656(17912 | 0);
              }
              return HEAP32[((0 + 17908) | 0) >> 2] | 0 | 0;
            }

            function $1145() {
              var $0_1 = 0;
              label$1: {
                if (((HEAPU8[((0 + 18424) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18424 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = 18256;
                label$2: while (1) {
                  $0_1 = (($729($0_1 | 0) | 0) + 12) | 0;
                  if (($0_1 | 0) != (18424 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$25(36 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18424 | 0);
              }
              $1147(18256 | 0, 13296 | 0) | 0;
              $1147(18268 | 0, 13324 | 0) | 0;
              $1147(18280 | 0, 13352 | 0) | 0;
              $1147(18292 | 0, 13384 | 0) | 0;
              $1147(18304 | 0, 13424 | 0) | 0;
              $1147(18316 | 0, 13460 | 0) | 0;
              $1147(18328 | 0, 13488 | 0) | 0;
              $1147(18340 | 0, 13524 | 0) | 0;
              $1147(18352 | 0, 13540 | 0) | 0;
              $1147(18364 | 0, 13556 | 0) | 0;
              $1147(18376 | 0, 13572 | 0) | 0;
              $1147(18388 | 0, 13588 | 0) | 0;
              $1147(18400 | 0, 13604 | 0) | 0;
              $1147(18412 | 0, 13620 | 0) | 0;
            }

            function $1146($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 18424;
              label$1: while (1) {
                $1_1 = $1560(($1_1 + -12) | 0 | 0) | 0;
                if (($1_1 | 0) != (18256 | 0)) {
                  continue label$1;
                }
                break label$1;
              }
            }

            function $1147($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1568($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1148($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17920) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17920 | 0) | 0)) {
                  break label$1;
                }
                $1149();
                HEAP32[((0 + 17916) | 0) >> 2] = 18432;
                $1656(17920 | 0);
              }
              return HEAP32[((0 + 17916) | 0) >> 2] | 0 | 0;
            }

            function $1149() {
              var $0_1 = 0;
              label$1: {
                if (((HEAPU8[((0 + 18720) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18720 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = 18432;
                label$2: while (1) {
                  $0_1 = (($453($0_1 | 0) | 0) + 12) | 0;
                  if (($0_1 | 0) != (18720 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$25(37 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18720 | 0);
              }
              $1139(18432 | 0, 13636 | 0) | 0;
              $1139(18444 | 0, 13644 | 0) | 0;
              $1139(18456 | 0, 13653 | 0) | 0;
              $1139(18468 | 0, 13659 | 0) | 0;
              $1139(18480 | 0, 13665 | 0) | 0;
              $1139(18492 | 0, 13669 | 0) | 0;
              $1139(18504 | 0, 13674 | 0) | 0;
              $1139(18516 | 0, 13679 | 0) | 0;
              $1139(18528 | 0, 13686 | 0) | 0;
              $1139(18540 | 0, 13696 | 0) | 0;
              $1139(18552 | 0, 13704 | 0) | 0;
              $1139(18564 | 0, 13713 | 0) | 0;
              $1139(18576 | 0, 13722 | 0) | 0;
              $1139(18588 | 0, 13726 | 0) | 0;
              $1139(18600 | 0, 13730 | 0) | 0;
              $1139(18612 | 0, 13734 | 0) | 0;
              $1139(18624 | 0, 13665 | 0) | 0;
              $1139(18636 | 0, 13738 | 0) | 0;
              $1139(18648 | 0, 13742 | 0) | 0;
              $1139(18660 | 0, 13746 | 0) | 0;
              $1139(18672 | 0, 13750 | 0) | 0;
              $1139(18684 | 0, 13754 | 0) | 0;
              $1139(18696 | 0, 13758 | 0) | 0;
              $1139(18708 | 0, 13762 | 0) | 0;
            }

            function $1150($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 18720;
              label$1: while (1) {
                $1_1 = $1540(($1_1 + -12) | 0 | 0) | 0;
                if (($1_1 | 0) != (18432 | 0)) {
                  continue label$1;
                }
                break label$1;
              }
            }

            function $1151($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17928) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17928 | 0) | 0)) {
                  break label$1;
                }
                $1152();
                HEAP32[((0 + 17924) | 0) >> 2] = 18736;
                $1656(17928 | 0);
              }
              return HEAP32[((0 + 17924) | 0) >> 2] | 0 | 0;
            }

            function $1152() {
              var $0_1 = 0;
              label$1: {
                if (((HEAPU8[((0 + 19024) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(19024 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = 18736;
                label$2: while (1) {
                  $0_1 = (($729($0_1 | 0) | 0) + 12) | 0;
                  if (($0_1 | 0) != (19024 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$25(38 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(19024 | 0);
              }
              $1147(18736 | 0, 13768 | 0) | 0;
              $1147(18748 | 0, 13800 | 0) | 0;
              $1147(18760 | 0, 13836 | 0) | 0;
              $1147(18772 | 0, 13860 | 0) | 0;
              $1147(18784 | 0, 13884 | 0) | 0;
              $1147(18796 | 0, 13900 | 0) | 0;
              $1147(18808 | 0, 13920 | 0) | 0;
              $1147(18820 | 0, 13940 | 0) | 0;
              $1147(18832 | 0, 13968 | 0) | 0;
              $1147(18844 | 0, 14008 | 0) | 0;
              $1147(18856 | 0, 14040 | 0) | 0;
              $1147(18868 | 0, 14076 | 0) | 0;
              $1147(18880 | 0, 14112 | 0) | 0;
              $1147(18892 | 0, 14128 | 0) | 0;
              $1147(18904 | 0, 14144 | 0) | 0;
              $1147(18916 | 0, 14160 | 0) | 0;
              $1147(18928 | 0, 13884 | 0) | 0;
              $1147(18940 | 0, 14176 | 0) | 0;
              $1147(18952 | 0, 14192 | 0) | 0;
              $1147(18964 | 0, 14208 | 0) | 0;
              $1147(18976 | 0, 14224 | 0) | 0;
              $1147(18988 | 0, 14240 | 0) | 0;
              $1147(19e3 | 0, 14256 | 0) | 0;
              $1147(19012 | 0, 14272 | 0) | 0;
            }

            function $1153($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 19024;
              label$1: while (1) {
                $1_1 = $1560(($1_1 + -12) | 0 | 0) | 0;
                if (($1_1 | 0) != (18736 | 0)) {
                  continue label$1;
                }
                break label$1;
              }
            }

            function $1154($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17936) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17936 | 0) | 0)) {
                  break label$1;
                }
                $1155();
                HEAP32[((0 + 17932) | 0) >> 2] = 19040;
                $1656(17936 | 0);
              }
              return HEAP32[((0 + 17932) | 0) >> 2] | 0 | 0;
            }

            function $1155() {
              var $0_1 = 0;
              label$1: {
                if (((HEAPU8[((0 + 19064) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(19064 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = 19040;
                label$2: while (1) {
                  $0_1 = (($453($0_1 | 0) | 0) + 12) | 0;
                  if (($0_1 | 0) != (19064 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$25(39 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(19064 | 0);
              }
              $1139(19040 | 0, 14288 | 0) | 0;
              $1139(19052 | 0, 14291 | 0) | 0;
            }

            function $1156($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 19064;
              label$1: while (1) {
                $1_1 = $1540(($1_1 + -12) | 0 | 0) | 0;
                if (($1_1 | 0) != (19040 | 0)) {
                  continue label$1;
                }
                break label$1;
              }
            }

            function $1157($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17944) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17944 | 0) | 0)) {
                  break label$1;
                }
                $1158();
                HEAP32[((0 + 17940) | 0) >> 2] = 19072;
                $1656(17944 | 0);
              }
              return HEAP32[((0 + 17940) | 0) >> 2] | 0 | 0;
            }

            function $1158() {
              var $0_1 = 0;
              label$1: {
                if (((HEAPU8[((0 + 19096) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(19096 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = 19072;
                label$2: while (1) {
                  $0_1 = (($729($0_1 | 0) | 0) + 12) | 0;
                  if (($0_1 | 0) != (19096 | 0)) {
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$25(40 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(19096 | 0);
              }
              $1147(19072 | 0, 14296 | 0) | 0;
              $1147(19084 | 0, 14308 | 0) | 0;
            }

            function $1159($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 19096;
              label$1: while (1) {
                $1_1 = $1560(($1_1 + -12) | 0 | 0) | 0;
                if (($1_1 | 0) != (19072 | 0)) {
                  continue label$1;
                }
                break label$1;
              }
            }

            function $1160($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17960) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17960 | 0) | 0)) {
                  break label$1;
                }
                $910(17948 | 0, 8972 | 0) | 0;
                fimport$25(41 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(17960 | 0);
              }
              return 17948 | 0;
            }

            function $1161($0_1) {
              $0_1 = $0_1 | 0;
              $1540(17948 | 0) | 0;
            }

            function $1162($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17976) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17976 | 0) | 0)) {
                  break label$1;
                }
                $1135(17964 | 0, 8984 | 0) | 0;
                fimport$25(42 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(17976 | 0);
              }
              return 17964 | 0;
            }

            function $1163($0_1) {
              $0_1 = $0_1 | 0;
              $1560(17964 | 0) | 0;
            }

            function $1164($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 17992) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(17992 | 0) | 0)) {
                  break label$1;
                }
                $910(17980 | 0, 9020 | 0) | 0;
                fimport$25(43 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(17992 | 0);
              }
              return 17980 | 0;
            }

            function $1165($0_1) {
              $0_1 = $0_1 | 0;
              $1540(17980 | 0) | 0;
            }

            function $1166($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 18008) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18008 | 0) | 0)) {
                  break label$1;
                }
                $1135(17996 | 0, 9032 | 0) | 0;
                fimport$25(44 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18008 | 0);
              }
              return 17996 | 0;
            }

            function $1167($0_1) {
              $0_1 = $0_1 | 0;
              $1560(17996 | 0) | 0;
            }

            function $1168($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 18024) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18024 | 0) | 0)) {
                  break label$1;
                }
                $910(18012 | 0, 9068 | 0) | 0;
                fimport$25(45 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18024 | 0);
              }
              return 18012 | 0;
            }

            function $1169($0_1) {
              $0_1 = $0_1 | 0;
              $1540(18012 | 0) | 0;
            }

            function $1170($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 18040) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18040 | 0) | 0)) {
                  break label$1;
                }
                $1135(18028 | 0, 9092 | 0) | 0;
                fimport$25(46 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18040 | 0);
              }
              return 18028 | 0;
            }

            function $1171($0_1) {
              $0_1 = $0_1 | 0;
              $1560(18028 | 0) | 0;
            }

            function $1172($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 18056) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18056 | 0) | 0)) {
                  break label$1;
                }
                $910(18044 | 0, 9176 | 0) | 0;
                fimport$25(47 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18056 | 0);
              }
              return 18044 | 0;
            }

            function $1173($0_1) {
              $0_1 = $0_1 | 0;
              $1540(18044 | 0) | 0;
            }

            function $1174($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 18072) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(18072 | 0) | 0)) {
                  break label$1;
                }
                $1135(18060 | 0, 9188 | 0) | 0;
                fimport$25(48 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(18072 | 0);
              }
              return 18060 | 0;
            }

            function $1175($0_1) {
              $0_1 = $0_1 | 0;
              $1560(18060 | 0) | 0;
            }

            function $1176($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1372($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1177($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = 1;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1_1 = (($1226($0_1 | 0) | 0) + -1) | 0;
              }
              return $1_1 | 0;
            }

            function $1178($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $1179($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                $834($0_1 | 0, $1_1 | 0);
                return;
              }
              $836($0_1 | 0, $1_1 | 0);
            }

            function $1180($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($489() | 0 | 0)) {
                  break label$1;
                }
                $385(HEAP32[$0_1 >> 2] | 0 | 0);
              }
              return $0_1 | 0;
            }

            function $1181($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1182($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1183($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1184($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1185($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1186($0_1) {
              $0_1 = $0_1 | 0;
              $1187(($0_1 + 8) | 0 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1187($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1188($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1186($0_1 | 0) | 0 | 0);
            }

            function $1189($0_1) {
              $0_1 = $0_1 | 0;
              $1190(($0_1 + 8) | 0 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1190($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1191($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1189($0_1 | 0) | 0 | 0);
            }

            function $1192($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1193($0_1 | 0) | 0 | 0);
            }

            function $1193($0_1) {
              $0_1 = $0_1 | 0;
              $1180(($0_1 + 8) | 0 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1194($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1195($0_1 | 0) | 0 | 0);
            }

            function $1195($0_1) {
              $0_1 = $0_1 | 0;
              $1180(($0_1 + 8) | 0 | 0) | 0;
              $414($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1196($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1197($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1198($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1199($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1200($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1201($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1202($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1203($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1204($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1205($0_1) {
              $0_1 = $0_1 | 0;
              $414($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1206($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + $1_1) | 0;
              return $0_1 | 0;
            }

            function $1207($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = ((HEAP32[$0_1 >> 2] | 0) + (($1_1 << 2) | 0)) | 0;
              return $0_1 | 0;
            }

            function $1208($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return ((HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0) | 0;
            }

            function $1209($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1210($0_1 | 0, $1_1 | 0, $2_1 | 0);
            }

            function $1210($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1214($1_1 | 0, $2_1 | 0, 1 | 0);
            }

            function $1211($0_1) {
              $0_1 = $0_1 | 0;
              return $1212($0_1 | 0) | 0 | 0;
            }

            function $1212($0_1) {
              $0_1 = $0_1 | 0;
              return $1218($0_1 | 0) | 0 | 0;
            }

            function $1213($0_1) {
              $0_1 = $0_1 | 0;
              return $1219($0_1 | 0) | 0 | 0;
            }

            function $1214($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1215($0_1 | 0, $1_1 | 0, $2_1 | 0);
            }

            function $1215($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1216($0_1 | 0, $1_1 | 0);
            }

            function $1216($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1217($0_1 | 0);
            }

            function $1217($0_1) {
              $0_1 = $0_1 | 0;
              $1572($0_1 | 0);
            }

            function $1218($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1219($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1220($0_1) {
              $0_1 = $0_1 | 0;
              return $1227($0_1 | 0) | 0 | 0;
            }

            function $1221($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1222($0_1 | 0, $1_1 | 0, $2_1 | 0);
            }

            function $1222($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1214($1_1 | 0, ($2_1 << 2) | 0 | 0, 4 | 0);
            }

            function $1223($0_1) {
              $0_1 = $0_1 | 0;
              return $1224($0_1 | 0) | 0 | 0;
            }

            function $1224($0_1) {
              $0_1 = $0_1 | 0;
              return $1228($0_1 | 0) | 0 | 0;
            }

            function $1225($0_1) {
              $0_1 = $0_1 | 0;
              return $1229($0_1 | 0) | 0 | 0;
            }

            function $1226($0_1) {
              $0_1 = $0_1 | 0;
              return ((HEAP32[((($1220($0_1 | 0) | 0) + 8) | 0) >> 2] | 0) & 2147483647) | 0 | 0;
            }

            function $1227($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1228($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1229($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1230($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1231($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1242($0_1 | 0, $1241($1_1 | 0) | 0 | 0) | 0;
              $100($2_1 | 0) | 0;
              $1243(($0_1 + 16) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1232($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              HEAP32[(($1_1 + 12) | 0) >> 2] = $1246($1245($0_1 | 0) | 0 | 0) | 0;
              HEAP32[(($1_1 + 8) | 0) >> 2] = $215() | 0;
              $0_1 = HEAP32[($1082(($1_1 + 12) | 0 | 0, ($1_1 + 8) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1233($0_1) {
              $0_1 = $0_1 | 0;
              return $1248(($0_1 + 16) | 0 | 0) | 0 | 0;
            }

            function $1234($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1247($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
            }

            function $1235($0_1) {
              $0_1 = $0_1 | 0;
              return $1249(($0_1 + 16) | 0 | 0) | 0 | 0;
            }

            function $1236($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1252(
                $0_1 | 0,
                $1250($0_1 | 0) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($1251($0_1 | 0) | 0) << 2) | 0)) | 0 | 0,
                (($1250($0_1 | 0) | 0) + ((($1251($0_1 | 0) | 0) << 2) | 0)) | 0 | 0,
                (($1250($0_1 | 0) | 0) + (($1_1 << 2) | 0)) | 0 | 0
              );
            }

            function $1237($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              $1_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 8) | 0) >> 2] = ($1_1 + (($2_1 << 2) | 0)) | 0;
              return $0_1 | 0;
            }

            function $1238($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1239($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1264($0_1 | 0, $1_1 | 0);
            }

            function $1240($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 4) | 0) >> 2] = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1241($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1242($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1241($1_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = 0;
              return $0_1 | 0;
            }

            function $1243($0_1) {
              $0_1 = $0_1 | 0;
              $1244($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1244($0_1) {
              $0_1 = $0_1 | 0;
              HEAP8[(($0_1 + 112) | 0) >> 0] = 0;
              return $0_1 | 0;
            }

            function $1245($0_1) {
              $0_1 = $0_1 | 0;
              return $1254(($0_1 + 16) | 0 | 0) | 0 | 0;
            }

            function $1246($0_1) {
              $0_1 = $0_1 | 0;
              return $1253($0_1 | 0) | 0 | 0;
            }

            function $1247($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if ($1_1 >>> 0 > 28 >>> 0) {
                  break label$1;
                }
                if (((HEAPU8[(($0_1 + 112) | 0) >> 0] | 0) & 255) | 0) {
                  break label$1;
                }
                HEAP8[(($0_1 + 112) | 0) >> 0] = 1;
                return $0_1 | 0;
              }
              return $1257(($1_1 << 2) | 0 | 0, 4 | 0) | 0 | 0;
            }

            function $1248($0_1) {
              $0_1 = $0_1 | 0;
              return $1258(($0_1 + 16) | 0 | 0) | 0 | 0;
            }

            function $1249($0_1) {
              $0_1 = $0_1 | 0;
              return $1259($0_1 | 0) | 0 | 0;
            }

            function $1250($0_1) {
              $0_1 = $0_1 | 0;
              return $1238(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
            }

            function $1251($0_1) {
              $0_1 = $0_1 | 0;
              return $1260($0_1 | 0) | 0 | 0;
            }

            function $1252($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
            }

            function $1253($0_1) {
              $0_1 = $0_1 | 0;
              return $1255($0_1 | 0) | 0 | 0;
            }

            function $1254($0_1) {
              $0_1 = $0_1 | 0;
              return $1256(($0_1 + 16) | 0 | 0) | 0 | 0;
            }

            function $1255($0_1) {
              $0_1 = $0_1 | 0;
              return 1073741823 | 0;
            }

            function $1256($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1257($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1571($0_1 | 0) | 0 | 0;
            }

            function $1258($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1259($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1260($0_1) {
              $0_1 = $0_1 | 0;
              return (
                ((((HEAP32[($1261($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0)) | 0) >> 2) | 0 | 0
              );
            }

            function $1261($0_1) {
              $0_1 = $0_1 | 0;
              return $1262(($0_1 + 16) | 0 | 0) | 0 | 0;
            }

            function $1262($0_1) {
              $0_1 = $0_1 | 0;
              return $1263($0_1 | 0) | 0 | 0;
            }

            function $1263($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1264($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$1_1 >> 2] = 0;
            }

            function $1265($0_1) {
              $0_1 = $0_1 | 0;
              return (($1267($1266($0_1 | 0) | 0 | 0) | 0) + -16) | 0 | 0;
            }

            function $1266($0_1) {
              $0_1 = $0_1 | 0;
              return $1277($0_1 | 0) | 0 | 0;
            }

            function $1267($0_1) {
              $0_1 = $0_1 | 0;
              return $1276($0_1 | 0) | 0 | 0;
            }

            function $1268($0_1) {
              $0_1 = $0_1 | 0;
              return $1280($0_1 | 0) | 0 | 0;
            }

            function $1269($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $7_1 = 0;
              $1_1 = 10;
              label$1: {
                if ($0_1 >>> 0 < 11 >>> 0) {
                  break label$1;
                }
                $0_1 = $1270(($0_1 + 1) | 0 | 0) | 0;
                $7_1 = $0_1;
                $0_1 = ($0_1 + -1) | 0;
                $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
              }
              return $1_1 | 0;
            }

            function $1270($0_1) {
              $0_1 = $0_1 | 0;
              return ((($0_1 + 15) | 0) & -16) | 0 | 0;
            }

            function $1271($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1272($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
            }

            function $1272($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (($1278($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
                  break label$1;
                }
                $1281(14320 | 0);
                abort();
              }
              return $1257($1_1 | 0, 1 | 0) | 0 | 0;
            }

            function $1273($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[($1213($0_1 | 0) | 0) >> 2] = $1_1;
            }

            function $1274($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[((($1213($0_1 | 0) | 0) + 8) | 0) >> 2] = $1_1 | -2147483648 | 0;
            }

            function $1275($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1276($0_1) {
              $0_1 = $0_1 | 0;
              return $1278($0_1 | 0) | 0 | 0;
            }

            function $1277($0_1) {
              $0_1 = $0_1 | 0;
              return $1279($0_1 | 0) | 0 | 0;
            }

            function $1278($0_1) {
              $0_1 = $0_1 | 0;
              return -1 | 0;
            }

            function $1279($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1280($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1281($0_1) {
              $0_1 = $0_1 | 0;
              fimport$24();
              abort();
            }

            function $1282($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1284($0_1 | 0, $1_1 | 0, $2_1 | 0);
            }

            function $1283($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              label$1: {
                label$2: while (1) {
                  if (($2_1 | 0) == ($1_1 | 0)) {
                    break label$1;
                  }
                  $2_1 = ($2_1 + -4) | 0;
                  $1285($1233($0_1 | 0) | 0 | 0, $1238($2_1 | 0) | 0 | 0);
                  continue label$2;
                }
              }
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
            }

            function $1284($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (($0_1 | 0) != ($1_1 | 0)) {
                  break label$1;
                }
                HEAP8[(($0_1 + 112) | 0) >> 0] = 0;
                return;
              }
              $1214($1_1 | 0, ($2_1 << 2) | 0 | 0, 4 | 0);
            }

            function $1285($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1286($0_1 | 0, $1_1 | 0);
            }

            function $1286($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $1287($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1288($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1289($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1290($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1291($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1292($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 14396;
              return $0_1 | 0;
            }

            function $1293($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 14432;
              return $0_1 | 0;
            }

            function $1294($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = $489() | 0;
              return $0_1 | 0;
            }

            function $1295($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1296($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 12) | 0) >> 2] = $1_1;
              label$1: {
                $3_1 = $1232($0_1 | 0) | 0;
                if ($3_1 >>> 0 < $1_1 >>> 0) {
                  break label$1;
                }
                label$2: {
                  $0_1 = $1251($0_1 | 0) | 0;
                  if ($0_1 >>> 0 >= (($3_1 >>> 1) | 0) >>> 0) {
                    break label$2;
                  }
                  HEAP32[(($2_1 + 8) | 0) >> 2] = ($0_1 << 1) | 0;
                  $3_1 = HEAP32[($1011(($2_1 + 8) | 0 | 0, ($2_1 + 12) | 0 | 0) | 0) >> 2] | 0;
                }
                global$0 = ($2_1 + 16) | 0;
                return $3_1 | 0;
              }
              $1574($0_1 | 0);
              abort();
            }

            function $1297($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $1298($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1299($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1298($1_1 | 0) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1300($0_1) {
              $0_1 = $0_1 | 0;
              $1018($0_1 | 0) | 0;
            }

            function $1301($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1302($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              $5_1 = 0;
              HEAP32[(($4_1 + 12) | 0) >> 2] = 0;
              $1306(($0_1 + 12) | 0 | 0, ($4_1 + 12) | 0 | 0, $3_1 | 0) | 0;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $5_1 = $1234($1307($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
              }
              HEAP32[$0_1 >> 2] = $5_1;
              $2_1 = ($5_1 + (($2_1 << 2) | 0)) | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = $2_1;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $2_1;
              HEAP32[($1308($0_1 | 0) | 0) >> 2] = ($5_1 + (($1_1 << 2) | 0)) | 0;
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1303($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $1_1 = $1309($2_1 | 0, ($0_1 + 8) | 0 | 0, $1_1 | 0) | 0;
              $3_1 = HEAP32[$1_1 >> 2] | 0;
              label$1: {
                label$2: while (1) {
                  if (($3_1 | 0) == (HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 0)) {
                    break label$1;
                  }
                  $1239($1307($0_1 | 0) | 0 | 0, $1238(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
                  $3_1 = ((HEAP32[$1_1 >> 2] | 0) + 4) | 0;
                  HEAP32[$1_1 >> 2] = $3_1;
                  continue label$2;
                }
              }
              $1310($1_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $1304($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $1024($0_1 | 0);
              $2_1 = ($1_1 + 4) | 0;
              $1311(
                $1233($0_1 | 0) | 0 | 0,
                HEAP32[$0_1 >> 2] | 0 | 0,
                HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 0,
                $2_1 | 0
              );
              $1312($0_1 | 0, $2_1 | 0);
              $1312(($0_1 + 4) | 0 | 0, ($1_1 + 8) | 0 | 0);
              $1312($1235($0_1 | 0) | 0 | 0, $1308($1_1 | 0) | 0 | 0);
              HEAP32[$1_1 >> 2] = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
              $1236($0_1 | 0, $972($0_1 | 0) | 0 | 0);
              $975($0_1 | 0);
            }

            function $1305($0_1) {
              $0_1 = $0_1 | 0;
              $1313($0_1 | 0);
              label$1: {
                if (!(HEAP32[$0_1 >> 2] | 0)) {
                  break label$1;
                }
                $1282($1307($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1314($0_1 | 0) | 0 | 0);
              }
              return $0_1 | 0;
            }

            function $1306($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1242($0_1 | 0, $1241($1_1 | 0) | 0 | 0) | 0;
              $1316(($0_1 + 4) | 0 | 0, $1315($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1307($0_1) {
              $0_1 = $0_1 | 0;
              return $1317(($0_1 + 12) | 0 | 0) | 0 | 0;
            }

            function $1308($0_1) {
              $0_1 = $0_1 | 0;
              return $1318(($0_1 + 12) | 0 | 0) | 0 | 0;
            }

            function $1309($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
              $3_1 = HEAP32[$1_1 >> 2] | 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 4) | 0) >> 2] = ($3_1 + (($2_1 << 2) | 0)) | 0;
              return $0_1 | 0;
            }

            function $1310($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[(HEAP32[(($0_1 + 8) | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
              return $0_1 | 0;
            }

            function $1311($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $2_1 = ($2_1 - $1_1) | 0;
              $4_1 = ((HEAP32[$3_1 >> 2] | 0) - $2_1) | 0;
              HEAP32[$3_1 >> 2] = $4_1;
              label$1: {
                if (($2_1 | 0) < (1 | 0)) {
                  break label$1;
                }
                $1707($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              }
            }

            function $1312($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 12) | 0) >> 2] = HEAP32[($1320($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1320($1_1 | 0) | 0) >> 2] | 0;
              HEAP32[$1_1 >> 2] = HEAP32[($1320(($2_1 + 12) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $1313($0_1) {
              $0_1 = $0_1 | 0;
              $1321($0_1 | 0, HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 0);
            }

            function $1314($0_1) {
              $0_1 = $0_1 | 0;
              return (
                ((((HEAP32[($1322($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0)) | 0) >> 2) | 0 | 0
              );
            }

            function $1315($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1316($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1315($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1317($0_1) {
              $0_1 = $0_1 | 0;
              return $1319(($0_1 + 4) | 0 | 0) | 0 | 0;
            }

            function $1318($0_1) {
              $0_1 = $0_1 | 0;
              return $1259($0_1 | 0) | 0 | 0;
            }

            function $1319($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $1320($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1321($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1323($0_1 | 0, $1_1 | 0);
            }

            function $1322($0_1) {
              $0_1 = $0_1 | 0;
              return $1324(($0_1 + 12) | 0 | 0) | 0 | 0;
            }

            function $1323($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0;
              label$1: {
                label$2: while (1) {
                  if ((HEAP32[(($0_1 + 8) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                    break label$1;
                  }
                  $2_1 = $1307($0_1 | 0) | 0;
                  $3_1 = ((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) + -4) | 0;
                  HEAP32[(($0_1 + 8) | 0) >> 2] = $3_1;
                  $1285($2_1 | 0, $1238($3_1 | 0) | 0 | 0);
                  continue label$2;
                }
              }
            }

            function $1324($0_1) {
              $0_1 = $0_1 | 0;
              return $1263($0_1 | 0) | 0 | 0;
            }

            function $1325($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1327($0_1 | 0, $1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1326($0_1) {
              $0_1 = $0_1 | 0;
              $1328($0_1 | 0);
            }

            function $1327($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $1328($0_1) {
              $0_1 = $0_1 | 0;
              $1330($1329(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
            }

            function $1329($0_1) {
              $0_1 = $0_1 | 0;
              return $1332($0_1 | 0) | 0 | 0;
            }

            function $1330($0_1) {
              $0_1 = $0_1 | 0;
              $1331($0_1 | 0);
            }

            function $1331($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
              $2_1 = ((HEAP32[$0_1 >> 2] | 0) + (($1_1 >> 1) | 0)) | 0;
              $0_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              label$1: {
                if (!(($1_1 & 1) | 0)) {
                  break label$1;
                }
                $0_1 = HEAP32[(((HEAP32[$2_1 >> 2] | 0) + $0_1) | 0) >> 2] | 0;
              }
              FUNCTION_TABLE[$0_1 | 0]($2_1);
            }

            function $1332($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $1333($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1334($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1334($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ($1_1 - $0_1) | 0 | 0;
            }

            function $1335($0_1) {
              $0_1 = $0_1 | 0;
              return ($0_1 & 255) | 0 | 0;
            }

            function $1336($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1337($0_1) {
              $0_1 = $0_1 | 0;
              $1344($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1338($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1345($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1339($0_1) {
              $0_1 = $0_1 | 0;
              return (($1347($1346($0_1 | 0) | 0 | 0) | 0) + -16) | 0 | 0;
            }

            function $1340($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $7_1 = 0;
              $1_1 = 1;
              label$1: {
                if ($0_1 >>> 0 < 2 >>> 0) {
                  break label$1;
                }
                $0_1 = $1349(($0_1 + 1) | 0 | 0) | 0;
                $7_1 = $0_1;
                $0_1 = ($0_1 + -1) | 0;
                $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
              }
              return $1_1 | 0;
            }

            function $1341($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1350($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
            }

            function $1342($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[($1225($0_1 | 0) | 0) >> 2] = $1_1;
            }

            function $1343($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[((($1225($0_1 | 0) | 0) + 8) | 0) >> 2] = $1_1 | -2147483648 | 0;
            }

            function $1344($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1345($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((($1_1 - $0_1) | 0) >> 2) | 0 | 0;
            }

            function $1346($0_1) {
              $0_1 = $0_1 | 0;
              return $1352($0_1 | 0) | 0 | 0;
            }

            function $1347($0_1) {
              $0_1 = $0_1 | 0;
              return $1351($0_1 | 0) | 0 | 0;
            }

            function $1348($0_1) {
              $0_1 = $0_1 | 0;
              return $1355($0_1 | 0) | 0 | 0;
            }

            function $1349($0_1) {
              $0_1 = $0_1 | 0;
              return ((($0_1 + 3) | 0) & -4) | 0 | 0;
            }

            function $1350($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (($1353($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
                  break label$1;
                }
                $1281(14320 | 0);
                abort();
              }
              return $1257(($1_1 << 2) | 0 | 0, 4 | 0) | 0 | 0;
            }

            function $1351($0_1) {
              $0_1 = $0_1 | 0;
              return $1353($0_1 | 0) | 0 | 0;
            }

            function $1352($0_1) {
              $0_1 = $0_1 | 0;
              return $1354($0_1 | 0) | 0 | 0;
            }

            function $1353($0_1) {
              $0_1 = $0_1 | 0;
              return 1073741823 | 0;
            }

            function $1354($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1355($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1356($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1357($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1358($0_1 | 0, $1_1 | 0);
            }

            function $1358($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 12) | 0) >> 2] = HEAP32[($1359($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1359($1_1 | 0) | 0) >> 2] | 0;
              HEAP32[$1_1 >> 2] = HEAP32[($1359(($2_1 + 12) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $1359($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1360($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $1364($0_1 | 0, $1363($1_1 | 0) | 0 | 0) | 0;
              $1366(($0_1 + 4) | 0 | 0, $1365($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1361($0_1) {
              $0_1 = $0_1 | 0;
              return $1367($0_1 | 0) | 0 | 0;
            }

            function $1362($0_1) {
              $0_1 = $0_1 | 0;
              return $1368(($0_1 + 4) | 0 | 0) | 0 | 0;
            }

            function $1363($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1364($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1363($1_1 | 0) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1365($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1366($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1365($1_1 | 0) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1367($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1368($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1369($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1370($0_1 | 0, $1_1 | 0);
            }

            function $1370($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1371($1211($1_1 | 0) | 0 | 0) | 0;
              $1211($0_1 | 0) | 0;
            }

            function $1371($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1372($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((($1_1 - $0_1) | 0) >> 2) | 0 | 0;
            }

            function $1373($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1374($0_1 | 0, $1_1 | 0);
            }

            function $1374($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1375($1223($1_1 | 0) | 0 | 0) | 0;
              $1223($0_1 | 0) | 0;
            }

            function $1375($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1376($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $1377($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1378($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 12) | 0) >> 2] = HEAP32[($1377($0_1 | 0) | 0) >> 2] | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1377($1_1 | 0) | 0) >> 2] | 0;
              HEAP32[$1_1 >> 2] = HEAP32[($1377(($2_1 + 12) | 0 | 0) | 0) >> 2] | 0;
              global$0 = ($2_1 + 16) | 0;
            }

            function $1379($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((($1_1 - $0_1) | 0 | 0) / (12 | 0)) | 0 | 0;
            }

            function $1380() {
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = $1382() | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $1381() {
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = $1383() | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $1382() {
              i64toi32_i32$HIGH_BITS = -2147483648;
              return 0 | 0;
            }

            function $1383() {
              i64toi32_i32$HIGH_BITS = 2147483647;
              return -1 | 0;
            }

            function $1384() {
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = $1385() | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $1385() {
              i64toi32_i32$HIGH_BITS = -1;
              return -1 | 0;
            }

            function $1386($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return Math_fround(Math_fround($410($0_1 | 0, $1_1 | 0, $489() | 0 | 0)));
            }

            function $1387($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return +(+$411($0_1 | 0, $1_1 | 0, $489() | 0 | 0));
            }

            function $1388($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                $13_1 = 0,
                $16_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $412($3_1 | 0, $1_1 | 0, $2_1 | 0, $489() | 0 | 0);
              i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
              $13_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $0_1;
              HEAP32[i64toi32_i32$0 >> 2] = $13_1;
              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
              $16_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $0_1;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $16_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              global$0 = ($3_1 + 16) | 0;
            }

            function $1389($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$1_1) {
                  break label$1;
                }
                label$2: {
                  if ($95($498($1_1 | 0) | 0 | 0, $94() | 0 | 0) | 0) {
                    break label$2;
                  }
                  return !(HEAP32[$0_1 >> 2] | 0) | 0;
                }
                HEAP32[$0_1 >> 2] = 0;
              }
              return 1 | 0;
            }

            function $1390($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ((($1_1 - $0_1) | 0 | 0) / (12 | 0)) | 0 | 0;
            }

            function $1391($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$1_1) {
                  break label$1;
                }
                label$2: {
                  if ($606($544($1_1 | 0) | 0 | 0, $605() | 0 | 0) | 0) {
                    break label$2;
                  }
                  return !(HEAP32[$0_1 >> 2] | 0) | 0;
                }
                HEAP32[$0_1 >> 2] = 0;
              }
              return 1 | 0;
            }

            function $1392($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1393($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1394($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1393($1_1 | 0) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1395($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1396($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1397($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1396($1_1 | 0) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1398($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1399($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $691($0_1 | 0, $1_1 | 0);
            }

            function $1400($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1378($0_1 | 0, $1_1 | 0);
            }

            function $1401($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[($1220($0_1 | 0) | 0) >> 2] | 0 | 0;
            }

            function $1402($0_1) {
              $0_1 = $0_1 | 0;
              return $1403($1220($0_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $1403($0_1) {
              $0_1 = $0_1 | 0;
              return $1404($0_1 | 0) | 0 | 0;
            }

            function $1404($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1405($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $2_1;
              label$1: {
                label$2: while (1) {
                  if (($0_1 | 0) == ($1_1 | 0)) {
                    break label$1;
                  }
                  $2_1 = HEAP8[$0_1 >> 0] | 0;
                  $562($561(($3_1 + 8) | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
                  $0_1 = ($0_1 + 1) | 0;
                  $564(($3_1 + 8) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              $0_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1406($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 8) | 0) >> 2] = $2_1;
              label$1: {
                label$2: while (1) {
                  if (($0_1 | 0) == ($1_1 | 0)) {
                    break label$1;
                  }
                  $2_1 = HEAP32[$0_1 >> 2] | 0;
                  $598($597(($3_1 + 8) | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
                  $0_1 = ($0_1 + 4) | 0;
                  $600(($3_1 + 8) | 0 | 0) | 0;
                  continue label$2;
                }
              }
              $0_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1407($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1408($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1412($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1409($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (($1_1 >>> 0 <= $0_1 >>> 0) & ($0_1 >>> 0 < $2_1 >>> 0)) | 0 | 0;
            }

            function $1410($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              $1413($0_1 | 0, ($4_1 + 8) | 0 | 0, $3_1 | 0) | 0;
              $1414($0_1 | 0, $1_1 | 0, $2_1 | 0);
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1411($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (!($104($0_1 | 0) | 0)) {
                  break label$1;
                }
                $772($0_1 | 0, $1_1 | 0);
                return;
              }
              $774($0_1 | 0, $1_1 | 0);
            }

            function $1412($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return ($1_1 - $0_1) | 0 | 0;
            }

            function $1413($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $100($1_1 | 0) | 0;
              $101($0_1 | 0) | 0;
              $1416($0_1 | 0, $1415($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1414($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                $4_1 = $1408($1_1 | 0, $2_1 | 0) | 0;
                if ($4_1 >>> 0 > ($1265($0_1 | 0) | 0) >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($4_1 >>> 0 > 10 >>> 0) {
                      break label$3;
                    }
                    $774($0_1 | 0, $4_1 | 0);
                    $5_1 = $773($0_1 | 0) | 0;
                    break label$2;
                  }
                  $5_1 = $1269($4_1 | 0) | 0;
                  $6_1 = ($5_1 + 1) | 0;
                  $5_1 = $1271($1211($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
                  $1273($0_1 | 0, $5_1 | 0);
                  $1274($0_1 | 0, $6_1 | 0);
                  $772($0_1 | 0, $4_1 | 0);
                }
                label$4: {
                  label$5: while (1) {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    $771($5_1 | 0, $1_1 | 0);
                    $5_1 = ($5_1 + 1) | 0;
                    $1_1 = ($1_1 + 1) | 0;
                    continue label$5;
                  }
                }
                HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                $771($5_1 | 0, ($3_1 + 15) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1415($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1416($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1415($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1417($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1418($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = HEAP32[($1417($1_1 | 0) | 0) >> 2] | 0;
              return $0_1 | 0;
            }

            function $1419($0_1) {
              $0_1 = $0_1 | 0;
              return $1421($0_1 | 0) | 0 | 0;
            }

            function $1420($0_1) {
              $0_1 = $0_1 | 0;
              return $1368(($0_1 + 4) | 0 | 0) | 0 | 0;
            }

            function $1421($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1422($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1423($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return ((HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0)) | 0;
            }

            function $1424($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1425($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return (($1_1 >>> 0 <= $0_1 >>> 0) & ($0_1 >>> 0 < $2_1 >>> 0)) | 0 | 0;
            }

            function $1426($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              $4_1 = (global$0 - 16) | 0;
              global$0 = $4_1;
              $1427($0_1 | 0, ($4_1 + 8) | 0 | 0, $3_1 | 0) | 0;
              $1428($0_1 | 0, $1_1 | 0, $2_1 | 0);
              global$0 = ($4_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1427($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $100($1_1 | 0) | 0;
              $1336($0_1 | 0) | 0;
              $1430($0_1 | 0, $1429($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1428($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                $4_1 = $1176($1_1 | 0, $2_1 | 0) | 0;
                if ($4_1 >>> 0 > ($1339($0_1 | 0) | 0) >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($4_1 >>> 0 > 1 >>> 0) {
                      break label$3;
                    }
                    $836($0_1 | 0, $4_1 | 0);
                    $5_1 = $835($0_1 | 0) | 0;
                    break label$2;
                  }
                  $5_1 = $1340($4_1 | 0) | 0;
                  $6_1 = ($5_1 + 1) | 0;
                  $5_1 = $1341($1223($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
                  $1342($0_1 | 0, $5_1 | 0);
                  $1343($0_1 | 0, $6_1 | 0);
                  $834($0_1 | 0, $4_1 | 0);
                }
                label$4: {
                  label$5: while (1) {
                    if (($1_1 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    $833($5_1 | 0, $1_1 | 0);
                    $5_1 = ($5_1 + 4) | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    continue label$5;
                  }
                }
                HEAP32[(($3_1 + 12) | 0) >> 2] = 0;
                $833($5_1 | 0, ($3_1 + 12) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1429($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1430($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1429($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1431($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return ((HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0)) | 0;
            }

            function $1432() {
              return (($1433() | 0 | 0) > (0 | 0)) | 0;
            }

            function $1433() {
              return $1697() | 0 | 0;
            }

            function $1434($0_1) {
              $0_1 = $0_1 | 0;
              $1435($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1435($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 14788;
              $1436($0_1 | 0, 0 | 0);
              $430(($0_1 + 28) | 0 | 0) | 0;
              $1699(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0);
              $1699(HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0);
              $1699(HEAP32[(($0_1 + 48) | 0) >> 2] | 0 | 0);
              $1699(HEAP32[(($0_1 + 60) | 0) >> 2] | 0 | 0);
              return $0_1 | 0;
            }

            function $1436($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = HEAP32[(($0_1 + 40) | 0) >> 2] | 0;
              label$1: while (1) {
                label$2: {
                  if ($2_1) {
                    break label$2;
                  }
                  return;
                }
                $2_1 = ($2_1 + -1) | 0;
                $3_1 = ($2_1 << 2) | 0;
                FUNCTION_TABLE[HEAP32[(((HEAP32[(($0_1 + 32) | 0) >> 2] | 0) + $3_1) | 0) >> 2] | 0 | 0](
                  $1_1,
                  $0_1,
                  HEAP32[(((HEAP32[(($0_1 + 36) | 0) >> 2] | 0) + $3_1) | 0) >> 2] | 0
                );
                continue label$1;
              }
            }

            function $1437($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1434($0_1 | 0) | 0 | 0);
            }

            function $1438($0_1) {
              $0_1 = $0_1 | 0;
              $1435($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1439($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1438($0_1 | 0) | 0 | 0);
            }

            function $1440($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 14468;
              $430(($0_1 + 4) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1441($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1440($0_1 | 0) | 0 | 0);
            }

            function $1442($0_1) {
              $0_1 = $0_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0;
              HEAP32[$0_1 >> 2] = 14468;
              $1037(($0_1 + 4) | 0 | 0) | 0;
              i64toi32_i32$1 = ($0_1 + 24) | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 0;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = ($0_1 + 16) | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 0;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = i64toi32_i32$0;
              return $0_1 | 0;
            }

            function $1443($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $1444($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $0_1 | 0;
            }

            function $1445($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $1446($0_1 | 0, -1 | 0, -1 | 0) | 0;
            }

            function $1446($0_1, $1_1, $1$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$1 = $0_1;
              HEAP32[((i64toi32_i32$1 + 8) | 0) >> 2] = $1_1;
              HEAP32[((i64toi32_i32$1 + 12) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 0;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              return i64toi32_i32$1 | 0;
            }

            function $1447($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $1446($0_1 | 0, -1 | 0, -1 | 0) | 0;
            }

            function $1448($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1449($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1450($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($4_1 | 0) >= ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    label$4: {
                      $5_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                      $6_1 = HEAP32[(($0_1 + 16) | 0) >> 2] | 0;
                      if ($5_1 >>> 0 >= $6_1 >>> 0) {
                        break label$4;
                      }
                      HEAP32[(($3_1 + 12) | 0) >> 2] = 2147483647;
                      HEAP32[(($3_1 + 8) | 0) >> 2] = ($6_1 - $5_1) | 0;
                      HEAP32[(($3_1 + 4) | 0) >> 2] = ($2_1 - $4_1) | 0;
                      $5_1 =
                        $1451(($3_1 + 12) | 0 | 0, $1451(($3_1 + 8) | 0 | 0, ($3_1 + 4) | 0 | 0) | 0 | 0) | 0;
                      $5_1 = HEAP32[$5_1 >> 2] | 0;
                      $1452($1_1 | 0, HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
                      $1453($0_1 | 0, $5_1 | 0);
                      break label$3;
                    }
                    $5_1 =
                      FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1) | 0;
                    if (($5_1 | 0) == (-1 | 0)) {
                      break label$1;
                    }
                    HEAP8[$1_1 >> 0] = $1454($5_1 | 0) | 0;
                    $5_1 = 1;
                  }
                  $1_1 = ($1_1 + $5_1) | 0;
                  $4_1 = ($5_1 + $4_1) | 0;
                  continue label$2;
                }
              }
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $1451($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1455($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1452($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $1707($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $1453($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = ((HEAP32[(($0_1 + 12) | 0) >> 2] | 0) + $1_1) | 0;
            }

            function $1454($0_1) {
              $0_1 = $0_1 | 0;
              return ((($0_1 << 24) | 0) >> 24) | 0 | 0;
            }

            function $1455($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $3_1 = $1524(($2_1 + 8) | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
              return ($3_1 ? $1_1 : $0_1) | 0;
            }

            function $1456($0_1) {
              $0_1 = $0_1 | 0;
              return $94() | 0 | 0;
            }

            function $1457($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                if (
                  (FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) !=
                  ($94() | 0 | 0)
                ) {
                  break label$1;
                }
                return $94() | 0 | 0;
              }
              $1_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = ($1_1 + 1) | 0;
              return $1335(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
            }

            function $1458($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $94() | 0 | 0;
            }

            function $1459($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $6_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $7_1 = 0,
                $5_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = 0;
              $5_1 = $94() | 0;
              label$1: {
                label$2: while (1) {
                  if (($4_1 | 0) >= ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    $6_1 = HEAP32[(($0_1 + 24) | 0) >> 2] | 0;
                    $7_1 = HEAP32[(($0_1 + 28) | 0) >> 2] | 0;
                    if ($6_1 >>> 0 < $7_1 >>> 0) {
                      break label$3;
                    }
                    if (
                      (((((wasm2js_i32$1 = $0_1), (wasm2js_i32$2 = $1335(HEAP8[$1_1 >> 0] | 0 | 0) | 0)),
                      (wasm2js_i32$0 = HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0)),
                      FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) |
                        0) ==
                      ($5_1 | 0)
                    ) {
                      break label$1;
                    }
                    $4_1 = ($4_1 + 1) | 0;
                    $1_1 = ($1_1 + 1) | 0;
                    continue label$2;
                  }
                  HEAP32[(($3_1 + 12) | 0) >> 2] = ($7_1 - $6_1) | 0;
                  HEAP32[(($3_1 + 8) | 0) >> 2] = ($2_1 - $4_1) | 0;
                  $6_1 = $1451(($3_1 + 12) | 0 | 0, ($3_1 + 8) | 0 | 0) | 0;
                  $6_1 = HEAP32[$6_1 >> 2] | 0;
                  $1452(HEAP32[(($0_1 + 24) | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
                  HEAP32[(($0_1 + 24) | 0) >> 2] = ($6_1 + (HEAP32[(($0_1 + 24) | 0) >> 2] | 0)) | 0;
                  $4_1 = ($6_1 + $4_1) | 0;
                  $1_1 = ($1_1 + $6_1) | 0;
                  continue label$2;
                }
              }
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $1460($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $94() | 0 | 0;
            }

            function $1461($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = 14532;
              $430(($0_1 + 4) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1462($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1461($0_1 | 0) | 0 | 0);
            }

            function $1463($0_1) {
              $0_1 = $0_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0;
              HEAP32[$0_1 >> 2] = 14532;
              $1037(($0_1 + 4) | 0 | 0) | 0;
              i64toi32_i32$1 = ($0_1 + 24) | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 0;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = ($0_1 + 16) | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 0;
              HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$0 = 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = i64toi32_i32$0;
              return $0_1 | 0;
            }

            function $1464($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
            }

            function $1465($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $0_1 | 0;
            }

            function $1466($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $1446($0_1 | 0, -1 | 0, -1 | 0) | 0;
            }

            function $1467($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $1446($0_1 | 0, -1 | 0, -1 | 0) | 0;
            }

            function $1468($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1469($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1470($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $3_1 = 0,
                $4_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = 0;
              label$1: {
                label$2: while (1) {
                  if (($4_1 | 0) >= ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    label$4: {
                      $5_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                      $6_1 = HEAP32[(($0_1 + 16) | 0) >> 2] | 0;
                      if ($5_1 >>> 0 >= $6_1 >>> 0) {
                        break label$4;
                      }
                      HEAP32[(($3_1 + 12) | 0) >> 2] = 2147483647;
                      HEAP32[(($3_1 + 8) | 0) >> 2] = ((($6_1 - $5_1) | 0) >> 2) | 0;
                      HEAP32[(($3_1 + 4) | 0) >> 2] = ($2_1 - $4_1) | 0;
                      $5_1 =
                        $1451(($3_1 + 12) | 0 | 0, $1451(($3_1 + 8) | 0 | 0, ($3_1 + 4) | 0 | 0) | 0 | 0) | 0;
                      $5_1 = HEAP32[$5_1 >> 2] | 0;
                      $1471($1_1 | 0, HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
                      $1472($0_1 | 0, $5_1 | 0);
                      $1_1 = ($1_1 + (($5_1 << 2) | 0)) | 0;
                      break label$3;
                    }
                    $5_1 =
                      FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 40) | 0) >> 2] | 0 | 0]($0_1) | 0;
                    if (($5_1 | 0) == (-1 | 0)) {
                      break label$1;
                    }
                    HEAP32[$1_1 >> 2] = $1473($5_1 | 0) | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    $5_1 = 1;
                  }
                  $4_1 = ($5_1 + $4_1) | 0;
                  continue label$2;
                }
              }
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $1471($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $0_1 = $387($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $1472($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = ((HEAP32[(($0_1 + 12) | 0) >> 2] | 0) + (($1_1 << 2) | 0)) | 0;
            }

            function $1473($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1474($0_1) {
              $0_1 = $0_1 | 0;
              return $605() | 0 | 0;
            }

            function $1475($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                if (
                  (FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 36) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) !=
                  ($605() | 0 | 0)
                ) {
                  break label$1;
                }
                return $605() | 0 | 0;
              }
              $1_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = ($1_1 + 4) | 0;
              return $1392(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
            }

            function $1476($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $605() | 0 | 0;
            }

            function $1477($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $6_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $7_1 = 0,
                $5_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = 0;
              $5_1 = $605() | 0;
              label$1: {
                label$2: while (1) {
                  if (($4_1 | 0) >= ($2_1 | 0)) {
                    break label$1;
                  }
                  label$3: {
                    $6_1 = HEAP32[(($0_1 + 24) | 0) >> 2] | 0;
                    $7_1 = HEAP32[(($0_1 + 28) | 0) >> 2] | 0;
                    if ($6_1 >>> 0 < $7_1 >>> 0) {
                      break label$3;
                    }
                    if (
                      (((((wasm2js_i32$1 = $0_1), (wasm2js_i32$2 = $1392(HEAP32[$1_1 >> 2] | 0 | 0) | 0)),
                      (wasm2js_i32$0 = HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0)),
                      FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) |
                        0) ==
                      ($5_1 | 0)
                    ) {
                      break label$1;
                    }
                    $4_1 = ($4_1 + 1) | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    continue label$2;
                  }
                  HEAP32[(($3_1 + 12) | 0) >> 2] = ((($7_1 - $6_1) | 0) >> 2) | 0;
                  HEAP32[(($3_1 + 8) | 0) >> 2] = ($2_1 - $4_1) | 0;
                  $6_1 = $1451(($3_1 + 12) | 0 | 0, ($3_1 + 8) | 0 | 0) | 0;
                  $6_1 = HEAP32[$6_1 >> 2] | 0;
                  $1471(HEAP32[(($0_1 + 24) | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
                  $7_1 = ($6_1 << 2) | 0;
                  HEAP32[(($0_1 + 24) | 0) >> 2] = ((HEAP32[(($0_1 + 24) | 0) >> 2] | 0) + $7_1) | 0;
                  $4_1 = ($6_1 + $4_1) | 0;
                  $1_1 = ($1_1 + $7_1) | 0;
                  continue label$2;
                }
              }
              global$0 = ($3_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $1478($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $605() | 0 | 0;
            }

            function $1479($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $0_1 | 0;
            }

            function $1480($0_1) {
              $0_1 = $0_1 | 0;
              $0_1 = $1479($0_1 | 0, 14628 | 0) | 0;
              $1434(($0_1 + 8) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1481($0_1) {
              $0_1 = $0_1 | 0;
              return $1480(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0;
            }

            function $1482($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1480($0_1 | 0) | 0 | 0);
            }

            function $1483($0_1) {
              $0_1 = $0_1 | 0;
              $1482(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0);
            }

            function $1484($0_1) {
              $0_1 = $0_1 | 0;
              return $1488($0_1 | 0) | 0 | 0;
            }

            function $1485($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[(($0_1 + 72) | 0) >> 2] | 0 | 0;
            }

            function $1486($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              label$1: {
                if (!($93(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                label$2: {
                  $2_1 = $1489(($1_1 + 8) | 0 | 0, $0_1 | 0) | 0;
                  if (!($81($2_1 | 0) | 0)) {
                    break label$2;
                  }
                  if (
                    ($1490(
                      $93(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0
                    ) |
                      0 |
                      0) !=
                    (-1 | 0)
                  ) {
                    break label$2;
                  }
                  $87(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 1 | 0);
                }
                $1491($2_1 | 0) | 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1487($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1035($0_1 | 0, ($1_1 + 28) | 0 | 0) | 0;
            }

            function $1488($0_1) {
              $0_1 = $0_1 | 0;
              return !(HEAP32[(($0_1 + 16) | 0) >> 2] | 0) | 0;
            }

            function $1489($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
              HEAP8[$0_1 >> 0] = 0;
              label$1: {
                if (!($1484(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                label$2: {
                  if (
                    !($1485(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)
                  ) {
                    break label$2;
                  }
                  $1486(
                    $1485(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0
                  ) | 0;
                }
                HEAP8[$0_1 >> 0] = 1;
              }
              return $0_1 | 0;
            }

            function $1490($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $1491($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (!($93(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (!($1484(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (
                  !(
                    (($83(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0) &
                      8192) |
                    0
                  )
                ) {
                  break label$1;
                }
                if ($1432() | 0) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (
                  ($1490(
                    $93(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0
                  ) |
                    0 |
                    0) !=
                  (-1 | 0)
                ) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                $87(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 1 | 0);
              }
              return $0_1 | 0;
            }

            function $1492($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1_1 = !(HEAP32[(($0_1 + 24) | 0) >> 2] | 0) | $1_1 | 0;
              HEAP32[(($0_1 + 16) | 0) >> 2] = $1_1;
              label$1: {
                if (!(((HEAP32[(($0_1 + 20) | 0) >> 2] | 0) & $1_1) | 0)) {
                  break label$1;
                }
                $1522(14796 | 0);
                abort();
              }
            }

            function $1493($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $0_1 | 0;
            }

            function $1494($0_1) {
              $0_1 = $0_1 | 0;
              $0_1 = $1493($0_1 | 0, 14676 | 0) | 0;
              $1438(($0_1 + 8) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1495($0_1) {
              $0_1 = $0_1 | 0;
              return $1494(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0;
            }

            function $1496($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1494($0_1 | 0) | 0 | 0);
            }

            function $1497($0_1) {
              $0_1 = $0_1 | 0;
              $1496(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0);
            }

            function $1498($0_1) {
              $0_1 = $0_1 | 0;
              return $1488($0_1 | 0) | 0 | 0;
            }

            function $1499($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[(($0_1 + 72) | 0) >> 2] | 0 | 0;
            }

            function $1500($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              label$1: {
                if (!($1502(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                label$2: {
                  $2_1 = $1503(($1_1 + 8) | 0 | 0, $0_1 | 0) | 0;
                  if (!($1504($2_1 | 0) | 0)) {
                    break label$2;
                  }
                  if (
                    ($1505(
                      $1502(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0
                    ) |
                      0 |
                      0) !=
                    (-1 | 0)
                  ) {
                    break label$2;
                  }
                  $1501(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 1 | 0);
                }
                $1506($2_1 | 0) | 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1501($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $96($0_1 | 0, $1_1 | 0);
            }

            function $1502($0_1) {
              $0_1 = $0_1 | 0;
              return $111($0_1 | 0) | 0 | 0;
            }

            function $1503($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
              HEAP8[$0_1 >> 0] = 0;
              label$1: {
                if (!($1498(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                label$2: {
                  if (
                    !($1499(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)
                  ) {
                    break label$2;
                  }
                  $1500(
                    $1499(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0
                  ) | 0;
                }
                HEAP8[$0_1 >> 0] = 1;
              }
              return $0_1 | 0;
            }

            function $1504($0_1) {
              $0_1 = $0_1 | 0;
              return HEAPU8[$0_1 >> 0] | 0 | 0;
            }

            function $1505($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $1506($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (!($1502(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (!($1498(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0)) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (
                  !(
                    (($83(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0) &
                      8192) |
                    0
                  )
                ) {
                  break label$1;
                }
                if ($1432() | 0) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                if (
                  ($1505(
                    $1502(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0
                  ) |
                    0 |
                    0) !=
                  (-1 | 0)
                ) {
                  break label$1;
                }
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                $1501(($1_1 + (HEAP32[(((HEAP32[$1_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 1 | 0);
              }
              return $0_1 | 0;
            }

            function $1507($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $0_1 | 0;
            }

            function $1508($0_1) {
              $0_1 = $0_1 | 0;
              $0_1 = $1507($0_1 | 0, 14724 | 0) | 0;
              $1434(($0_1 + 4) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1509($0_1) {
              $0_1 = $0_1 | 0;
              return $1508(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0;
            }

            function $1510($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1508($0_1 | 0) | 0 | 0);
            }

            function $1511($0_1) {
              $0_1 = $0_1 | 0;
              $1510(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0);
            }

            function $1512($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17672 | 0) | 0 | 0;
            }

            function $1513($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1
                ) |
                0 |
                0
              );
            }

            function $1514($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                $6_1 = 0,
                $4_1 = 0,
                $5_1 = 0,
                $7_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                $3_1 = $1489(($2_1 + 24) | 0 | 0, $0_1 | 0) | 0;
                if (!($81($3_1 | 0) | 0)) {
                  break label$1;
                }
                $83(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0;
                $1487(
                  ($2_1 + 16) | 0 | 0,
                  ($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0
                );
                $4_1 = $1512(($2_1 + 16) | 0 | 0) | 0;
                $430(($2_1 + 16) | 0 | 0) | 0;
                $5_1 = $82(($2_1 + 8) | 0 | 0, $0_1 | 0) | 0;
                $6_1 = ($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0;
                $7_1 = $84($6_1 | 0) | 0;
                HEAP32[(($2_1 + 16) | 0) >> 2] =
                  $1513($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
                if (!($86(($2_1 + 16) | 0 | 0) | 0)) {
                  break label$1;
                }
                $87(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 5 | 0);
              }
              $1491($3_1 | 0) | 0;
              global$0 = ($2_1 + 32) | 0;
              return $0_1 | 0;
            }

            function $1515($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                $4_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                $3_1 = $1489(($2_1 + 8) | 0 | 0, $0_1 | 0) | 0;
                if (!($81($3_1 | 0) | 0)) {
                  break label$1;
                }
                $4_1 = $82($2_1 | 0, $0_1 | 0) | 0;
                $562($561($4_1 | 0) | 0 | 0, $1_1 | 0) | 0;
                if (!($86($4_1 | 0) | 0)) {
                  break label$1;
                }
                $87(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0, 1 | 0);
              }
              $1491($3_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1516($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $0_1 | 0;
            }

            function $1517($0_1) {
              $0_1 = $0_1 | 0;
              $0_1 = $1516($0_1 | 0, 14772 | 0) | 0;
              $1438(($0_1 + 4) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1518($0_1) {
              $0_1 = $0_1 | 0;
              return $1517(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0) | 0 | 0;
            }

            function $1519($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1517($0_1 | 0) | 0 | 0);
            }

            function $1520($0_1) {
              $0_1 = $0_1 | 0;
              $1519(($0_1 + (HEAP32[(((HEAP32[$0_1 >> 2] | 0) + -12) | 0) >> 2] | 0)) | 0 | 0);
            }

            function $1521($0_1) {
              $0_1 = $0_1 | 0;
              $1572($1435($0_1 | 0) | 0 | 0);
            }

            function $1522($0_1) {
              $0_1 = $0_1 | 0;
              fimport$24();
              abort();
            }

            function $1523($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 20) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 24) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 12) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = 4098;
              HEAP32[(($0_1 + 8) | 0) >> 2] = 6;
              HEAP32[(($0_1 + 16) | 0) >> 2] = !$1_1;
              $1708(($0_1 + 32) | 0 | 0, 0 | 0, 40 | 0) | 0;
              $1037(($0_1 + 28) | 0 | 0) | 0;
            }

            function $1524($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return ((HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0)) | 0;
            }

            function $1525($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $3_1 = $0_1;
                label$2: while (1) {
                  HEAP32[$3_1 >> 2] = $1_1;
                  $3_1 = ($3_1 + 4) | 0;
                  $2_1 = ($2_1 + -1) | 0;
                  if ($2_1) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return $0_1 | 0;
            }

            function $1526($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                label$2: {
                  if ((((($0_1 - $1_1) | 0) >> 2) | 0) >>> 0 >= $2_1 >>> 0) {
                    break label$2;
                  }
                  label$3: while (1) {
                    $2_1 = ($2_1 + -1) | 0;
                    $3_1 = ($2_1 << 2) | 0;
                    HEAP32[(($0_1 + $3_1) | 0) >> 2] = HEAP32[(($1_1 + $3_1) | 0) >> 2] | 0;
                    if ($2_1) {
                      continue label$3;
                    }
                    break label$1;
                  }
                }
                if (!$2_1) {
                  break label$1;
                }
                $3_1 = $0_1;
                label$4: while (1) {
                  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                  $3_1 = ($3_1 + 4) | 0;
                  $1_1 = ($1_1 + 4) | 0;
                  $2_1 = ($2_1 + -1) | 0;
                  if ($2_1) {
                    continue label$4;
                  }
                  break label$4;
                }
              }
              return $0_1 | 0;
            }

            function $1527($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1528($0_1) {
              $0_1 = $0_1 | 0;
              return fimport$26($1527(HEAP32[(($0_1 + 60) | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
            }

            function $1529($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if ($0_1) {
                  break label$1;
                }
                return 0 | 0;
              }
              HEAP32[($305() | 0) >> 2] = $0_1;
              return -1 | 0;
            }

            function $1530($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              $4_1 = HEAP32[(($0_1 + 28) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 16) | 0) >> 2] = $4_1;
              $5_1 = HEAP32[(($0_1 + 20) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 28) | 0) >> 2] = $2_1;
              HEAP32[(($3_1 + 24) | 0) >> 2] = $1_1;
              $1_1 = ($5_1 - $4_1) | 0;
              HEAP32[(($3_1 + 20) | 0) >> 2] = $1_1;
              $6_1 = ($1_1 + $2_1) | 0;
              $7_1 = 2;
              $1_1 = ($3_1 + 16) | 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      if (
                        $1529(
                          fimport$27(
                            HEAP32[(($0_1 + 60) | 0) >> 2] | 0 | 0,
                            ($3_1 + 16) | 0 | 0,
                            2 | 0,
                            ($3_1 + 12) | 0 | 0
                          ) |
                            0 |
                            0
                        ) | 0
                      ) {
                        break label$4;
                      }
                      label$5: while (1) {
                        $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
                        if (($6_1 | 0) == ($4_1 | 0)) {
                          break label$3;
                        }
                        if (($4_1 | 0) <= (-1 | 0)) {
                          break label$2;
                        }
                        $8_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                        $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
                        $9_1 = ($1_1 + (($5_1 << 3) | 0)) | 0;
                        $8_1 = ($4_1 - ($5_1 ? $8_1 : 0)) | 0;
                        HEAP32[$9_1 >> 2] = ((HEAP32[$9_1 >> 2] | 0) + $8_1) | 0;
                        $9_1 = ($1_1 + ($5_1 ? 12 : 4)) | 0;
                        HEAP32[$9_1 >> 2] = ((HEAP32[$9_1 >> 2] | 0) - $8_1) | 0;
                        $6_1 = ($6_1 - $4_1) | 0;
                        $1_1 = $5_1 ? ($1_1 + 8) | 0 : $1_1;
                        $7_1 = ($7_1 - $5_1) | 0;
                        if (
                          !(
                            $1529(
                              fimport$27(
                                HEAP32[(($0_1 + 60) | 0) >> 2] | 0 | 0,
                                $1_1 | 0,
                                $7_1 | 0,
                                ($3_1 + 12) | 0 | 0
                              ) |
                                0 |
                                0
                            ) | 0
                          )
                        ) {
                          continue label$5;
                        }
                        break label$5;
                      }
                    }
                    if (($6_1 | 0) != (-1 | 0)) {
                      break label$2;
                    }
                  }
                  $1_1 = HEAP32[(($0_1 + 44) | 0) >> 2] | 0;
                  HEAP32[(($0_1 + 28) | 0) >> 2] = $1_1;
                  HEAP32[(($0_1 + 20) | 0) >> 2] = $1_1;
                  HEAP32[(($0_1 + 16) | 0) >> 2] = ($1_1 + (HEAP32[(($0_1 + 48) | 0) >> 2] | 0)) | 0;
                  $4_1 = $2_1;
                  break label$1;
                }
                $4_1 = 0;
                HEAP32[(($0_1 + 28) | 0) >> 2] = 0;
                HEAP32[(($0_1 + 16) | 0) >> 2] = 0;
                HEAP32[(($0_1 + 20) | 0) >> 2] = 0;
                HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
                if (($7_1 | 0) == (2 | 0)) {
                  break label$1;
                }
                $4_1 = ($2_1 - (HEAP32[(($1_1 + 4) | 0) >> 2] | 0)) | 0;
              }
              global$0 = ($3_1 + 32) | 0;
              return $4_1 | 0;
            }

            function $1531($0_1, $1_1, $1$hi, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                $3_1 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              i64toi32_i32$0 = $1$hi;
              $0_1 =
                $1529(
                  $1729(
                    HEAP32[(($0_1 + 60) | 0) >> 2] | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$0 | 0,
                    ($2_1 & 255) | 0 | 0,
                    ($3_1 + 8) | 0 | 0
                  ) |
                    0 |
                    0
                ) | 0;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] | 0;
              $1_1 = i64toi32_i32$0;
              $1$hi = i64toi32_i32$1;
              global$0 = (i64toi32_i32$2 + 16) | 0;
              i64toi32_i32$1 = -1;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$3 = $0_1 ? -1 : $1_1;
              i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
              return i64toi32_i32$3 | 0;
            }

            function $1532($0_1) {
              $0_1 = $0_1 | 0;
              $1281(15396 | 0);
              abort();
            }

            function $1533($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0,
                i64toi32_i32$1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $1534($1266($1_1 | 0) | 0 | 0);
              $3_1 = $1535($0_1 | 0, ($2_1 + 8) | 0 | 0, $2_1 | 0) | 0;
              label$1: {
                label$2: {
                  if ($104($1_1 | 0) | 0) {
                    break label$2;
                  }
                  $1_1 = $107($1_1 | 0) | 0;
                  $3_1 = $1213($3_1 | 0) | 0;
                  HEAP32[(($3_1 + 8) | 0) >> 2] = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                  HEAP32[(($3_1 + 4) | 0) >> 2] = i64toi32_i32$1;
                  break label$1;
                }
                $1536($0_1 | 0, $99($105($1_1 | 0) | 0 | 0) | 0 | 0, $495($1_1 | 0) | 0 | 0);
              }
              global$0 = ($2_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1534($0_1) {
              $0_1 = $0_1 | 0;
              $1537($0_1 | 0);
            }

            function $1535($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $100($1_1 | 0) | 0;
              $101($0_1 | 0) | 0;
              $1539($0_1 | 0, $1538($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1536($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                if (($1265($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($2_1 >>> 0 > 10 >>> 0) {
                      break label$3;
                    }
                    $774($0_1 | 0, $2_1 | 0);
                    $4_1 = $773($0_1 | 0) | 0;
                    break label$2;
                  }
                  $4_1 = $1269($2_1 | 0) | 0;
                  $5_1 = ($4_1 + 1) | 0;
                  $4_1 = $1271($1211($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
                  $1273($0_1 | 0, $4_1 | 0);
                  $1274($0_1 | 0, $5_1 | 0);
                  $772($0_1 | 0, $2_1 | 0);
                }
                $1452($1275($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                $771(($4_1 + $2_1) | 0 | 0, ($3_1 + 15) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1537($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $1538($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1539($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1538($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1540($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($104($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1209($1211($0_1 | 0) | 0 | 0, $770($0_1 | 0) | 0 | 0, $492($0_1 | 0) | 0 | 0);
              }
              return $0_1 | 0;
            }

            function $1541($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  $4_1 = $454($0_1 | 0) | 0;
                  if ($4_1 >>> 0 < $2_1 >>> 0) {
                    break label$2;
                  }
                  $4_1 = $1275($493($0_1 | 0) | 0 | 0) | 0;
                  $1542($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
                  HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                  $771(($4_1 + $2_1) | 0 | 0, ($3_1 + 15) | 0 | 0);
                  $1411($0_1 | 0, $2_1 | 0);
                  $1376($0_1 | 0, $2_1 | 0);
                  break label$1;
                }
                $5_1 = $444($0_1 | 0) | 0;
                $1543(
                  $0_1 | 0,
                  $4_1 | 0,
                  ($2_1 - $4_1) | 0 | 0,
                  $5_1 | 0,
                  0 | 0,
                  $5_1 | 0,
                  $2_1 | 0,
                  $1_1 | 0
                );
              }
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1542($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $1709($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $1543($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0,
                $9_1 = 0,
                $10_1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              label$1: {
                $9_1 = $1265($0_1 | 0) | 0;
                if ((($9_1 + (($1_1 ^ -1) | 0)) | 0) >>> 0 < $2_1 >>> 0) {
                  break label$1;
                }
                $10_1 = $493($0_1 | 0) | 0;
                label$2: {
                  label$3: {
                    if ((((($9_1 >>> 1) | 0) + -16) | 0) >>> 0 <= $1_1 >>> 0) {
                      break label$3;
                    }
                    HEAP32[(($8_1 + 8) | 0) >> 2] = ($1_1 << 1) | 0;
                    HEAP32[(($8_1 + 12) | 0) >> 2] = ($2_1 + $1_1) | 0;
                    $2_1 =
                      $1269(HEAP32[($1011(($8_1 + 12) | 0 | 0, ($8_1 + 8) | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
                    break label$2;
                  }
                  $2_1 = ($9_1 + -1) | 0;
                }
                $9_1 = ($2_1 + 1) | 0;
                $2_1 = $1271($1211($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
                $769($0_1 | 0);
                label$4: {
                  if (!$4_1) {
                    break label$4;
                  }
                  $1452($1275($2_1 | 0) | 0 | 0, $1275($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
                }
                label$5: {
                  if (!$6_1) {
                    break label$5;
                  }
                  $1452((($1275($2_1 | 0) | 0) + $4_1) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
                }
                label$6: {
                  $3_1 = ($3_1 - $5_1) | 0;
                  $7_1 = ($3_1 - $4_1) | 0;
                  if (!$7_1) {
                    break label$6;
                  }
                  $1452(
                    (((($1275($2_1 | 0) | 0) + $4_1) | 0) + $6_1) | 0 | 0,
                    (((($1275($10_1 | 0) | 0) + $4_1) | 0) + $5_1) | 0 | 0,
                    $7_1 | 0
                  ) | 0;
                }
                label$7: {
                  $4_1 = ($1_1 + 1) | 0;
                  if (($4_1 | 0) == (11 | 0)) {
                    break label$7;
                  }
                  $1209($1211($0_1 | 0) | 0 | 0, $10_1 | 0, $4_1 | 0);
                }
                $1273($0_1 | 0, $2_1 | 0);
                $1274($0_1 | 0, $9_1 | 0);
                $4_1 = ($3_1 + $6_1) | 0;
                $772($0_1 | 0, $4_1 | 0);
                HEAP8[(($8_1 + 7) | 0) >> 0] = 0;
                $771(($2_1 + $4_1) | 0 | 0, ($8_1 + 7) | 0 | 0);
                global$0 = ($8_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1544($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                $3_1 = $444($0_1 | 0) | 0;
                if ($3_1 >>> 0 >= $1_1 >>> 0) {
                  break label$1;
                }
                $1545($0_1 | 0, ($1_1 - $3_1) | 0 | 0, $2_1 | 0) | 0;
                return;
              }
              $1546($0_1 | 0, $1_1 | 0);
            }

            function $1545($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $4_1 = $454($0_1 | 0) | 0;
                $5_1 = $444($0_1 | 0) | 0;
                $6_1 = ($5_1 + $1_1) | 0;
                label$2: {
                  if ((($4_1 - $5_1) | 0) >>> 0 >= $1_1 >>> 0) {
                    break label$2;
                  }
                  $1547($0_1 | 0, $4_1 | 0, ($6_1 - $4_1) | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
                }
                $4_1 = $493($0_1 | 0) | 0;
                $1548((($1275($4_1 | 0) | 0) + $5_1) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                $1411($0_1 | 0, $6_1 | 0);
                HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                $771(($4_1 + $6_1) | 0 | 0, ($3_1 + 15) | 0 | 0);
              }
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1546($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  if (!($104($0_1 | 0) | 0)) {
                    break label$2;
                  }
                  $3_1 = $770($0_1 | 0) | 0;
                  HEAP8[(($2_1 + 15) | 0) >> 0] = 0;
                  $771(($3_1 + $1_1) | 0 | 0, ($2_1 + 15) | 0 | 0);
                  $772($0_1 | 0, $1_1 | 0);
                  break label$1;
                }
                $3_1 = $773($0_1 | 0) | 0;
                HEAP8[(($2_1 + 14) | 0) >> 0] = 0;
                $771(($3_1 + $1_1) | 0 | 0, ($2_1 + 14) | 0 | 0);
                $774($0_1 | 0, $1_1 | 0);
              }
              $1376($0_1 | 0, $1_1 | 0);
              global$0 = ($2_1 + 16) | 0;
            }

            function $1547($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0;
              $7_1 = (global$0 - 16) | 0;
              global$0 = $7_1;
              label$1: {
                $8_1 = $1265($0_1 | 0) | 0;
                if ((($8_1 - $1_1) | 0) >>> 0 < $2_1 >>> 0) {
                  break label$1;
                }
                $9_1 = $493($0_1 | 0) | 0;
                label$2: {
                  label$3: {
                    if ((((($8_1 >>> 1) | 0) + -16) | 0) >>> 0 <= $1_1 >>> 0) {
                      break label$3;
                    }
                    HEAP32[(($7_1 + 8) | 0) >> 2] = ($1_1 << 1) | 0;
                    HEAP32[(($7_1 + 12) | 0) >> 2] = ($2_1 + $1_1) | 0;
                    $2_1 =
                      $1269(HEAP32[($1011(($7_1 + 12) | 0 | 0, ($7_1 + 8) | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
                    break label$2;
                  }
                  $2_1 = ($8_1 + -1) | 0;
                }
                $8_1 = ($2_1 + 1) | 0;
                $2_1 = $1271($1211($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
                $769($0_1 | 0);
                label$4: {
                  if (!$4_1) {
                    break label$4;
                  }
                  $1452($1275($2_1 | 0) | 0 | 0, $1275($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
                }
                label$5: {
                  $3_1 = ((($3_1 - $5_1) | 0) - $4_1) | 0;
                  if (!$3_1) {
                    break label$5;
                  }
                  $1452(
                    (((($1275($2_1 | 0) | 0) + $4_1) | 0) + $6_1) | 0 | 0,
                    (((($1275($9_1 | 0) | 0) + $4_1) | 0) + $5_1) | 0 | 0,
                    $3_1 | 0
                  ) | 0;
                }
                label$6: {
                  $1_1 = ($1_1 + 1) | 0;
                  if (($1_1 | 0) == (11 | 0)) {
                    break label$6;
                  }
                  $1209($1211($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
                }
                $1273($0_1 | 0, $2_1 | 0);
                $1274($0_1 | 0, $8_1 | 0);
                global$0 = ($7_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1548($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $1708($0_1 | 0, $1335($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $1549($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  $4_1 = $454($0_1 | 0) | 0;
                  $5_1 = $444($0_1 | 0) | 0;
                  if ((($4_1 - $5_1) | 0) >>> 0 < $2_1 >>> 0) {
                    break label$2;
                  }
                  if (!$2_1) {
                    break label$1;
                  }
                  $4_1 = $1275($493($0_1 | 0) | 0 | 0) | 0;
                  $1452(($4_1 + $5_1) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                  $2_1 = ($5_1 + $2_1) | 0;
                  $1411($0_1 | 0, $2_1 | 0);
                  HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                  $771(($4_1 + $2_1) | 0 | 0, ($3_1 + 15) | 0 | 0);
                  break label$1;
                }
                $1543(
                  $0_1 | 0,
                  $4_1 | 0,
                  ((($5_1 + $2_1) | 0) - $4_1) | 0 | 0,
                  $5_1 | 0,
                  $5_1 | 0,
                  0 | 0,
                  $2_1 | 0,
                  $1_1 | 0
                );
              }
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1550($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP8[(($2_1 + 15) | 0) >> 0] = $1_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (!($104($0_1 | 0) | 0)) {
                          break label$5;
                        }
                        $1_1 = $492($0_1 | 0) | 0;
                        $3_1 = $495($0_1 | 0) | 0;
                        $4_1 = ($1_1 + -1) | 0;
                        if (($3_1 | 0) == ($4_1 | 0)) {
                          break label$4;
                        }
                        break label$2;
                      }
                      $3_1 = 10;
                      $4_1 = 10;
                      $1_1 = $496($0_1 | 0) | 0;
                      if (($1_1 | 0) != (10 | 0)) {
                        break label$3;
                      }
                    }
                    $1547($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
                    $1_1 = $3_1;
                    if ($104($0_1 | 0) | 0) {
                      break label$2;
                    }
                  }
                  $4_1 = $773($0_1 | 0) | 0;
                  $774($0_1 | 0, ($1_1 + 1) | 0 | 0);
                  break label$1;
                }
                $4_1 = $770($0_1 | 0) | 0;
                $772($0_1 | 0, ($3_1 + 1) | 0 | 0);
                $1_1 = $3_1;
              }
              $0_1 = ($4_1 + $1_1) | 0;
              $771($0_1 | 0, ($2_1 + 15) | 0 | 0);
              HEAP8[(($2_1 + 14) | 0) >> 0] = 0;
              $771(($0_1 + 1) | 0 | 0, ($2_1 + 14) | 0 | 0);
              global$0 = ($2_1 + 16) | 0;
            }

            function $1551($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1541($0_1 | 0, $1_1 | 0, $78($1_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $1552($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                if (($1265($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($1_1 >>> 0 > 10 >>> 0) {
                      break label$3;
                    }
                    $774($0_1 | 0, $1_1 | 0);
                    $4_1 = $773($0_1 | 0) | 0;
                    break label$2;
                  }
                  $4_1 = $1269($1_1 | 0) | 0;
                  $5_1 = ($4_1 + 1) | 0;
                  $4_1 = $1271($1211($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
                  $1273($0_1 | 0, $4_1 | 0);
                  $1274($0_1 | 0, $5_1 | 0);
                  $772($0_1 | 0, $1_1 | 0);
                }
                $1548($1275($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                HEAP8[(($3_1 + 15) | 0) >> 0] = 0;
                $771(($4_1 + $1_1) | 0 | 0, ($3_1 + 15) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1553($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0,
                i64toi32_i32$1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $1554($1346($1_1 | 0) | 0 | 0);
              $3_1 = $1555($0_1 | 0, ($2_1 + 8) | 0 | 0, $2_1 | 0) | 0;
              label$1: {
                label$2: {
                  if ($665($1_1 | 0) | 0) {
                    break label$2;
                  }
                  $1_1 = $1220($1_1 | 0) | 0;
                  $3_1 = $1225($3_1 | 0) | 0;
                  HEAP32[(($3_1 + 8) | 0) >> 2] = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                  HEAP32[(($3_1 + 4) | 0) >> 2] = i64toi32_i32$1;
                  break label$1;
                }
                $1556($0_1 | 0, $664($1401($1_1 | 0) | 0 | 0) | 0 | 0, $666($1_1 | 0) | 0 | 0);
              }
              global$0 = ($2_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1554($0_1) {
              $0_1 = $0_1 | 0;
              $1557($0_1 | 0);
            }

            function $1555($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $100($1_1 | 0) | 0;
              $1336($0_1 | 0) | 0;
              $1559($0_1 | 0, $1558($2_1 | 0) | 0 | 0) | 0;
              return $0_1 | 0;
            }

            function $1556($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                if (($1339($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($2_1 >>> 0 > 1 >>> 0) {
                      break label$3;
                    }
                    $836($0_1 | 0, $2_1 | 0);
                    $4_1 = $835($0_1 | 0) | 0;
                    break label$2;
                  }
                  $4_1 = $1340($2_1 | 0) | 0;
                  $5_1 = ($4_1 + 1) | 0;
                  $4_1 = $1341($1223($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
                  $1342($0_1 | 0, $4_1 | 0);
                  $1343($0_1 | 0, $5_1 | 0);
                  $834($0_1 | 0, $2_1 | 0);
                }
                $1471($1356($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                HEAP32[(($3_1 + 12) | 0) >> 2] = 0;
                $833(($4_1 + (($2_1 << 2) | 0)) | 0 | 0, ($3_1 + 12) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1557($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $1558($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1559($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1558($1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1560($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($665($0_1 | 0) | 0)) {
                  break label$1;
                }
                $1221($1223($0_1 | 0) | 0 | 0, $832($0_1 | 0) | 0 | 0, $1226($0_1 | 0) | 0 | 0);
              }
              return $0_1 | 0;
            }

            function $1561($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  $4_1 = $1177($0_1 | 0) | 0;
                  if ($4_1 >>> 0 < $2_1 >>> 0) {
                    break label$2;
                  }
                  $4_1 = $1356($601($0_1 | 0) | 0 | 0) | 0;
                  $1562($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
                  HEAP32[(($3_1 + 12) | 0) >> 2] = 0;
                  $833(($4_1 + (($2_1 << 2) | 0)) | 0 | 0, ($3_1 + 12) | 0 | 0);
                  $1179($0_1 | 0, $2_1 | 0);
                  $1178($0_1 | 0, $2_1 | 0);
                  break label$1;
                }
                $5_1 = $514($0_1 | 0) | 0;
                $1563(
                  $0_1 | 0,
                  $4_1 | 0,
                  ($2_1 - $4_1) | 0 | 0,
                  $5_1 | 0,
                  0 | 0,
                  $5_1 | 0,
                  $2_1 | 0,
                  $1_1 | 0
                );
              }
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1562($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $0_1 = $1526($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $1563($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              var $8_1 = 0,
                $9_1 = 0,
                $10_1 = 0;
              $8_1 = (global$0 - 16) | 0;
              global$0 = $8_1;
              label$1: {
                $9_1 = $1339($0_1 | 0) | 0;
                if ((($9_1 + (($1_1 ^ -1) | 0)) | 0) >>> 0 < $2_1 >>> 0) {
                  break label$1;
                }
                $10_1 = $601($0_1 | 0) | 0;
                label$2: {
                  label$3: {
                    if ((((($9_1 >>> 1) | 0) + -16) | 0) >>> 0 <= $1_1 >>> 0) {
                      break label$3;
                    }
                    HEAP32[(($8_1 + 8) | 0) >> 2] = ($1_1 << 1) | 0;
                    HEAP32[(($8_1 + 12) | 0) >> 2] = ($2_1 + $1_1) | 0;
                    $2_1 =
                      $1340(HEAP32[($1011(($8_1 + 12) | 0 | 0, ($8_1 + 8) | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
                    break label$2;
                  }
                  $2_1 = ($9_1 + -1) | 0;
                }
                $9_1 = ($2_1 + 1) | 0;
                $2_1 = $1341($1223($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
                $831($0_1 | 0);
                label$4: {
                  if (!$4_1) {
                    break label$4;
                  }
                  $1471($1356($2_1 | 0) | 0 | 0, $1356($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
                }
                label$5: {
                  if (!$6_1) {
                    break label$5;
                  }
                  $1471((($1356($2_1 | 0) | 0) + (($4_1 << 2) | 0)) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
                }
                label$6: {
                  $3_1 = ($3_1 - $5_1) | 0;
                  $7_1 = ($3_1 - $4_1) | 0;
                  if (!$7_1) {
                    break label$6;
                  }
                  $4_1 = ($4_1 << 2) | 0;
                  $1471(
                    (((($1356($2_1 | 0) | 0) + $4_1) | 0) + (($6_1 << 2) | 0)) | 0 | 0,
                    (((($1356($10_1 | 0) | 0) + $4_1) | 0) + (($5_1 << 2) | 0)) | 0 | 0,
                    $7_1 | 0
                  ) | 0;
                }
                label$7: {
                  $1_1 = ($1_1 + 1) | 0;
                  if (($1_1 | 0) == (2 | 0)) {
                    break label$7;
                  }
                  $1221($1223($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
                }
                $1342($0_1 | 0, $2_1 | 0);
                $1343($0_1 | 0, $9_1 | 0);
                $1_1 = ($3_1 + $6_1) | 0;
                $834($0_1 | 0, $1_1 | 0);
                HEAP32[(($8_1 + 4) | 0) >> 2] = 0;
                $833(($2_1 + (($1_1 << 2) | 0)) | 0 | 0, ($8_1 + 4) | 0 | 0);
                global$0 = ($8_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1564($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0;
              $7_1 = (global$0 - 16) | 0;
              global$0 = $7_1;
              label$1: {
                $8_1 = $1339($0_1 | 0) | 0;
                if ((($8_1 - $1_1) | 0) >>> 0 < $2_1 >>> 0) {
                  break label$1;
                }
                $9_1 = $601($0_1 | 0) | 0;
                label$2: {
                  label$3: {
                    if ((((($8_1 >>> 1) | 0) + -16) | 0) >>> 0 <= $1_1 >>> 0) {
                      break label$3;
                    }
                    HEAP32[(($7_1 + 8) | 0) >> 2] = ($1_1 << 1) | 0;
                    HEAP32[(($7_1 + 12) | 0) >> 2] = ($2_1 + $1_1) | 0;
                    $2_1 =
                      $1340(HEAP32[($1011(($7_1 + 12) | 0 | 0, ($7_1 + 8) | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
                    break label$2;
                  }
                  $2_1 = ($8_1 + -1) | 0;
                }
                $8_1 = ($2_1 + 1) | 0;
                $2_1 = $1341($1223($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
                $831($0_1 | 0);
                label$4: {
                  if (!$4_1) {
                    break label$4;
                  }
                  $1471($1356($2_1 | 0) | 0 | 0, $1356($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
                }
                label$5: {
                  $3_1 = ((($3_1 - $5_1) | 0) - $4_1) | 0;
                  if (!$3_1) {
                    break label$5;
                  }
                  $4_1 = ($4_1 << 2) | 0;
                  $1471(
                    (((($1356($2_1 | 0) | 0) + $4_1) | 0) + (($6_1 << 2) | 0)) | 0 | 0,
                    (((($1356($9_1 | 0) | 0) + $4_1) | 0) + (($5_1 << 2) | 0)) | 0 | 0,
                    $3_1 | 0
                  ) | 0;
                }
                label$6: {
                  $1_1 = ($1_1 + 1) | 0;
                  if (($1_1 | 0) == (2 | 0)) {
                    break label$6;
                  }
                  $1221($1223($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
                }
                $1342($0_1 | 0, $2_1 | 0);
                $1343($0_1 | 0, $8_1 | 0);
                global$0 = ($7_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1565($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $0_1 = $1525($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
              }
              return $0_1 | 0;
            }

            function $1566($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $3_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  $4_1 = $1177($0_1 | 0) | 0;
                  $5_1 = $514($0_1 | 0) | 0;
                  if ((($4_1 - $5_1) | 0) >>> 0 < $2_1 >>> 0) {
                    break label$2;
                  }
                  if (!$2_1) {
                    break label$1;
                  }
                  $4_1 = $1356($601($0_1 | 0) | 0 | 0) | 0;
                  $1471(($4_1 + (($5_1 << 2) | 0)) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                  $2_1 = ($5_1 + $2_1) | 0;
                  $1179($0_1 | 0, $2_1 | 0);
                  HEAP32[(($3_1 + 12) | 0) >> 2] = 0;
                  $833(($4_1 + (($2_1 << 2) | 0)) | 0 | 0, ($3_1 + 12) | 0 | 0);
                  break label$1;
                }
                $1563(
                  $0_1 | 0,
                  $4_1 | 0,
                  ((($5_1 + $2_1) | 0) - $4_1) | 0 | 0,
                  $5_1 | 0,
                  $5_1 | 0,
                  0 | 0,
                  $2_1 | 0,
                  $1_1 | 0
                );
              }
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1567($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $4_1 = 0,
                $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              HEAP32[(($2_1 + 12) | 0) >> 2] = $1_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        if (!($665($0_1 | 0) | 0)) {
                          break label$5;
                        }
                        $1_1 = $1226($0_1 | 0) | 0;
                        $3_1 = $666($0_1 | 0) | 0;
                        $4_1 = ($1_1 + -1) | 0;
                        if (($3_1 | 0) == ($4_1 | 0)) {
                          break label$4;
                        }
                        break label$2;
                      }
                      $3_1 = 1;
                      $4_1 = 1;
                      $1_1 = $667($0_1 | 0) | 0;
                      if (($1_1 | 0) != (1 | 0)) {
                        break label$3;
                      }
                    }
                    $1564($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
                    $1_1 = $3_1;
                    if ($665($0_1 | 0) | 0) {
                      break label$2;
                    }
                  }
                  $4_1 = $835($0_1 | 0) | 0;
                  $836($0_1 | 0, ($1_1 + 1) | 0 | 0);
                  break label$1;
                }
                $4_1 = $832($0_1 | 0) | 0;
                $834($0_1 | 0, ($3_1 + 1) | 0 | 0);
                $1_1 = $3_1;
              }
              $0_1 = ($4_1 + (($1_1 << 2) | 0)) | 0;
              $833($0_1 | 0, ($2_1 + 12) | 0 | 0);
              HEAP32[(($2_1 + 8) | 0) >> 2] = 0;
              $833(($0_1 + 4) | 0 | 0, ($2_1 + 8) | 0 | 0);
              global$0 = ($2_1 + 16) | 0;
            }

            function $1568($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1561($0_1 | 0, $1_1 | 0, $1136($1_1 | 0) | 0 | 0) | 0 | 0;
            }

            function $1569($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              label$1: {
                if (($1339($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
                  break label$1;
                }
                label$2: {
                  label$3: {
                    if ($1_1 >>> 0 > 1 >>> 0) {
                      break label$3;
                    }
                    $836($0_1 | 0, $1_1 | 0);
                    $4_1 = $835($0_1 | 0) | 0;
                    break label$2;
                  }
                  $4_1 = $1340($1_1 | 0) | 0;
                  $5_1 = ($4_1 + 1) | 0;
                  $4_1 = $1341($1223($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
                  $1342($0_1 | 0, $4_1 | 0);
                  $1343($0_1 | 0, $5_1 | 0);
                  $834($0_1 | 0, $1_1 | 0);
                }
                $1565($1356($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
                HEAP32[(($3_1 + 12) | 0) >> 2] = 0;
                $833(($4_1 + (($1_1 << 2) | 0)) | 0 | 0, ($3_1 + 12) | 0 | 0);
                global$0 = ($3_1 + 16) | 0;
                return;
              }
              $1532($0_1 | 0);
              abort();
            }

            function $1570() {
              fimport$24();
              abort();
            }

            function $1571($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = $0_1 ? $0_1 : 1;
              label$1: {
                label$2: while (1) {
                  $0_1 = $1698($1_1 | 0) | 0;
                  if ($0_1) {
                    break label$1;
                  }
                  label$3: {
                    $0_1 = $1663() | 0;
                    if (!$0_1) {
                      break label$3;
                    }
                    FUNCTION_TABLE[$0_1 | 0]();
                    continue label$2;
                  }
                  break label$2;
                }
                fimport$24();
                abort();
              }
              return $0_1 | 0;
            }

            function $1572($0_1) {
              $0_1 = $0_1 | 0;
              $1699($0_1 | 0);
            }

            function $1573($0_1) {
              $0_1 = $0_1 | 0;
              $1572($0_1 | 0);
            }

            function $1574($0_1) {
              $0_1 = $0_1 | 0;
              $1281(15409 | 0);
              abort();
            }

            function $1575($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 32) | 0;
              global$0 = $3_1;
              HEAP32[(($3_1 + 16) | 0) >> 2] = $1_1;
              $4_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 20) | 0) >> 2] = ($2_1 - (($4_1 | 0) != (0 | 0))) | 0;
              $5_1 = HEAP32[(($0_1 + 44) | 0) >> 2] | 0;
              HEAP32[(($3_1 + 28) | 0) >> 2] = $4_1;
              HEAP32[(($3_1 + 24) | 0) >> 2] = $5_1;
              $4_1 = -1;
              label$1: {
                label$2: {
                  label$3: {
                    if (
                      $1529(
                        fimport$28(
                          HEAP32[(($0_1 + 60) | 0) >> 2] | 0 | 0,
                          ($3_1 + 16) | 0 | 0,
                          2 | 0,
                          ($3_1 + 12) | 0 | 0
                        ) |
                          0 |
                          0
                      ) | 0
                    ) {
                      break label$3;
                    }
                    $4_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
                    if (($4_1 | 0) > (0 | 0)) {
                      break label$2;
                    }
                  }
                  HEAP32[$0_1 >> 2] = ((($4_1 & 48) | 0) ^ 16) | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
                  break label$1;
                }
                $6_1 = HEAP32[(($3_1 + 20) | 0) >> 2] | 0;
                if ($4_1 >>> 0 <= $6_1 >>> 0) {
                  break label$1;
                }
                $5_1 = HEAP32[(($0_1 + 44) | 0) >> 2] | 0;
                HEAP32[(($0_1 + 4) | 0) >> 2] = $5_1;
                HEAP32[(($0_1 + 8) | 0) >> 2] = ($5_1 + (($4_1 - $6_1) | 0)) | 0;
                label$4: {
                  if (!(HEAP32[(($0_1 + 48) | 0) >> 2] | 0)) {
                    break label$4;
                  }
                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($5_1 + 1) | 0;
                  HEAP8[(((($2_1 + $1_1) | 0) + -1) | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
                }
                $4_1 = $2_1;
              }
              global$0 = ($3_1 + 32) | 0;
              return $4_1 | 0;
            }

            function $1576($0_1) {
              $0_1 = $0_1 | 0;
              return 0 | 0;
            }

            function $1577($0_1, $1_1, $1$hi, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              i64toi32_i32$HIGH_BITS = 0;
              return 0 | 0;
            }

            function $1578($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $4_1 = 0,
                $3_1 = 0;
              $2_1 = -1;
              label$1: {
                if (($0_1 | 0) == (-1 | 0)) {
                  break label$1;
                }
                $3_1 = 0;
                label$2: {
                  if ((HEAP32[(($1_1 + 76) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                    break label$2;
                  }
                  $3_1 = $1713($1_1 | 0) | 0;
                }
                label$3: {
                  label$4: {
                    label$5: {
                      $4_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      if ($4_1) {
                        break label$5;
                      }
                      $297($1_1 | 0) | 0;
                      $4_1 = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      if (!$4_1) {
                        break label$4;
                      }
                    }
                    if ($4_1 >>> 0 > (((HEAP32[(($1_1 + 44) | 0) >> 2] | 0) + -8) | 0) >>> 0) {
                      break label$3;
                    }
                  }
                  if (!$3_1) {
                    break label$1;
                  }
                  $1714($1_1 | 0);
                  return -1 | 0;
                }
                $2_1 = ($4_1 + -1) | 0;
                HEAP32[(($1_1 + 4) | 0) >> 2] = $2_1;
                HEAP8[$2_1 >> 0] = $0_1;
                HEAP32[$1_1 >> 2] = ((HEAP32[$1_1 >> 2] | 0) & -17) | 0;
                label$6: {
                  if (!$3_1) {
                    break label$6;
                  }
                  $1714($1_1 | 0);
                }
                $2_1 = $0_1;
              }
              return $2_1 | 0;
            }

            function $1579($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              label$1: {
                label$2: {
                  if ((HEAP32[(($0_1 + 76) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                    break label$2;
                  }
                  if ($1713($0_1 | 0) | 0) {
                    break label$1;
                  }
                }
                label$3: {
                  $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                  if ($1_1 >>> 0 >= (HEAP32[(($0_1 + 8) | 0) >> 2] | 0) >>> 0) {
                    break label$3;
                  }
                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($1_1 + 1) | 0;
                  return HEAPU8[$1_1 >> 0] | 0 | 0;
                }
                return $298($0_1 | 0) | 0 | 0;
              }
              label$4: {
                label$5: {
                  $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                  if ($1_1 >>> 0 >= (HEAP32[(($0_1 + 8) | 0) >> 2] | 0) >>> 0) {
                    break label$5;
                  }
                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($1_1 + 1) | 0;
                  $1_1 = HEAPU8[$1_1 >> 0] | 0;
                  break label$4;
                }
                $1_1 = $298($0_1 | 0) | 0;
              }
              $1714($0_1 | 0);
              return $1_1 | 0;
            }

            function $1580($0_1) {
              $0_1 = $0_1 | 0;
              var $2_1 = 0,
                $1_1 = 0;
              label$1: {
                label$2: {
                  if (!$0_1) {
                    break label$2;
                  }
                  label$3: {
                    if ((HEAP32[(($0_1 + 76) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                      break label$3;
                    }
                    return $1581($0_1 | 0) | 0 | 0;
                  }
                  $1_1 = $1713($0_1 | 0) | 0;
                  $2_1 = $1581($0_1 | 0) | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $1714($0_1 | 0);
                  return $2_1 | 0;
                }
                $2_1 = 0;
                label$4: {
                  if (!(HEAP32[((0 + 17448) | 0) >> 2] | 0)) {
                    break label$4;
                  }
                  $2_1 = $1580(HEAP32[((0 + 17448) | 0) >> 2] | 0 | 0) | 0;
                }
                label$5: {
                  $0_1 = HEAP32[($295() | 0) >> 2] | 0;
                  if (!$0_1) {
                    break label$5;
                  }
                  label$6: while (1) {
                    $1_1 = 0;
                    label$7: {
                      if ((HEAP32[(($0_1 + 76) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                        break label$7;
                      }
                      $1_1 = $1713($0_1 | 0) | 0;
                    }
                    label$8: {
                      if (
                        (HEAP32[(($0_1 + 20) | 0) >> 2] | 0) >>> 0 <=
                        (HEAP32[(($0_1 + 28) | 0) >> 2] | 0) >>> 0
                      ) {
                        break label$8;
                      }
                      $2_1 = $1581($0_1 | 0) | 0 | $2_1 | 0;
                    }
                    label$9: {
                      if (!$1_1) {
                        break label$9;
                      }
                      $1714($0_1 | 0);
                    }
                    $0_1 = HEAP32[(($0_1 + 56) | 0) >> 2] | 0;
                    if ($0_1) {
                      continue label$6;
                    }
                    break label$6;
                  }
                }
                $296();
              }
              return $2_1 | 0;
            }

            function $1581($0_1) {
              $0_1 = $0_1 | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                $1_1 = 0,
                $2_1 = 0;
              label$1: {
                if (
                  (HEAP32[(($0_1 + 20) | 0) >> 2] | 0) >>> 0 <=
                  (HEAP32[(($0_1 + 28) | 0) >> 2] | 0) >>> 0
                ) {
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
                if (HEAP32[(($0_1 + 20) | 0) >> 2] | 0) {
                  break label$1;
                }
                return -1 | 0;
              }
              label$2: {
                $1_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                $2_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                if ($1_1 >>> 0 >= $2_1 >>> 0) {
                  break label$2;
                }
                i64toi32_i32$1 = ($1_1 - $2_1) | 0;
                i64toi32_i32$0 = (i64toi32_i32$1 >> 31) | 0;
                i64toi32_i32$0 =
                  FUNCTION_TABLE[HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0](
                    $0_1,
                    i64toi32_i32$1,
                    i64toi32_i32$0,
                    1
                  ) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              }
              HEAP32[(($0_1 + 28) | 0) >> 2] = 0;
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$1 = 0;
              HEAP32[(($0_1 + 16) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 20) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$1 = 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = i64toi32_i32$1;
              return 0 | 0;
            }

            function $1582() {
              $1583(22384 | 0) | 0;
            }

            function $1583($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (((HEAPU8[((0 + 22744) | 0) >> 0] | 0) & 1) | 0) {
                  break label$1;
                }
                if (!($1648(22744 | 0) | 0)) {
                  break label$1;
                }
                $1584(22740 | 0) | 0;
                fimport$25(330 | 0, 0 | 0, 1024 | 0) | 0;
                $1656(22744 | 0);
              }
              return $0_1 | 0;
            }

            function $1584($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAP32[((0 + 15416) | 0) >> 2] | 0;
              $1585(22388 | 0, $1_1 | 0, 22444 | 0) | 0;
              $1586(21704 | 0, 22388 | 0) | 0;
              $1587(22452 | 0, $1_1 | 0, 22508 | 0) | 0;
              $1588(21792 | 0, 22452 | 0) | 0;
              $1_1 = HEAP32[((0 + 15420) | 0) >> 2] | 0;
              $1589(22516 | 0, $1_1 | 0, 22564 | 0) | 0;
              $1590(21880 | 0, 22516 | 0) | 0;
              $1591(22572 | 0, $1_1 | 0, 22620 | 0) | 0;
              $1592(21964 | 0, 22572 | 0) | 0;
              $1_1 = HEAP32[((0 + 15392) | 0) >> 2] | 0;
              $1589(22628 | 0, $1_1 | 0, 22676 | 0) | 0;
              $1590(22048 | 0, 22628 | 0) | 0;
              $1590(
                22216 | 0,
                $93(((HEAP32[(((HEAP32[((0 + 22048) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 22048) | 0 | 0) |
                  0 |
                  0
              ) | 0;
              $1591(22684 | 0, $1_1 | 0, 22732 | 0) | 0;
              $1592(22132 | 0, 22684 | 0) | 0;
              $1592(
                22300 | 0,
                $1502(
                  ((HEAP32[(((HEAP32[((0 + 22132) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 22132) | 0 | 0
                ) |
                  0 |
                  0
              ) | 0;
              $1593(
                ((HEAP32[(((HEAP32[((0 + 21704) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 21704) | 0 | 0,
                21880 | 0
              ) | 0;
              $1594(
                ((HEAP32[(((HEAP32[((0 + 21792) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 21792) | 0 | 0,
                21964 | 0
              ) | 0;
              $1595(((HEAP32[(((HEAP32[((0 + 22048) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 22048) | 0 | 0) |
                0;
              $1595(((HEAP32[(((HEAP32[((0 + 22132) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 22132) | 0 | 0) |
                0;
              $1593(
                ((HEAP32[(((HEAP32[((0 + 22048) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 22048) | 0 | 0,
                21880 | 0
              ) | 0;
              $1594(
                ((HEAP32[(((HEAP32[((0 + 22132) | 0) >> 2] | 0) + -12) | 0) >> 2] | 0) + 22132) | 0 | 0,
                21964 | 0
              ) | 0;
              return $0_1 | 0;
            }

            function $1585($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = $1442($0_1 | 0) | 0;
              HEAP32[(($0_1 + 40) | 0) >> 2] = $2_1;
              HEAP32[(($0_1 + 32) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = 15432;
              $1_1 = $94() | 0;
              HEAP8[(($0_1 + 52) | 0) >> 0] = 0;
              HEAP32[(($0_1 + 48) | 0) >> 2] = $1_1;
              $1596(($3_1 + 8) | 0 | 0, $4_1 | 0);
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 8) | 0) >> 2] | 0 | 0]($0_1, ($3_1 + 8) | 0);
              $430(($3_1 + 8) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1586($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = $1597(($0_1 + 8) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = (14588 + 12) | 0;
              HEAP32[$2_1 >> 2] = (14588 + 32) | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = 0;
              $1598(($0_1 + (HEAP32[((0 + 14588) | 0) >> 2] | 0)) | 0 | 0, $1_1 | 0);
              return $0_1 | 0;
            }

            function $1587($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = $1463($0_1 | 0) | 0;
              HEAP32[(($0_1 + 40) | 0) >> 2] = $2_1;
              HEAP32[(($0_1 + 32) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = 15572;
              $1_1 = $605() | 0;
              HEAP8[(($0_1 + 52) | 0) >> 0] = 0;
              HEAP32[(($0_1 + 48) | 0) >> 2] = $1_1;
              $1599(($3_1 + 8) | 0 | 0, $4_1 | 0);
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 8) | 0) >> 2] | 0 | 0]($0_1, ($3_1 + 8) | 0);
              $430(($3_1 + 8) | 0 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1588($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = $1600(($0_1 + 8) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = (14636 + 12) | 0;
              HEAP32[$2_1 >> 2] = (14636 + 32) | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = 0;
              $1601(($0_1 + (HEAP32[((0 + 14636) | 0) >> 2] | 0)) | 0 | 0, $1_1 | 0);
              return $0_1 | 0;
            }

            function $1589($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = $1442($0_1 | 0) | 0;
              HEAP32[(($0_1 + 32) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = 15672;
              $1596(($3_1 + 8) | 0 | 0, $4_1 | 0);
              $1_1 = $1602(($3_1 + 8) | 0 | 0) | 0;
              $430(($3_1 + 8) | 0 | 0) | 0;
              HEAP32[(($0_1 + 40) | 0) >> 2] = $2_1;
              HEAP32[(($0_1 + 36) | 0) >> 2] = $1_1;
              HEAP8[(($0_1 + 44) | 0) >> 0] = $1603($1_1 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1590($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = $1597(($0_1 + 4) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = (14684 + 12) | 0;
              HEAP32[$2_1 >> 2] = (14684 + 32) | 0;
              $1598(($0_1 + (HEAP32[((0 + 14684) | 0) >> 2] | 0)) | 0 | 0, $1_1 | 0);
              return $0_1 | 0;
            }

            function $1591($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 16) | 0;
              global$0 = $3_1;
              $4_1 = $1463($0_1 | 0) | 0;
              HEAP32[(($0_1 + 32) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = 15776;
              $1599(($3_1 + 8) | 0 | 0, $4_1 | 0);
              $1_1 = $1604(($3_1 + 8) | 0 | 0) | 0;
              $430(($3_1 + 8) | 0 | 0) | 0;
              HEAP32[(($0_1 + 40) | 0) >> 2] = $2_1;
              HEAP32[(($0_1 + 36) | 0) >> 2] = $1_1;
              HEAP8[(($0_1 + 44) | 0) >> 0] = $1605($1_1 | 0) | 0;
              global$0 = ($3_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1592($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = $1600(($0_1 + 4) | 0 | 0) | 0;
              HEAP32[$0_1 >> 2] = (14732 + 12) | 0;
              HEAP32[$2_1 >> 2] = (14732 + 32) | 0;
              $1601(($0_1 + (HEAP32[((0 + 14732) | 0) >> 2] | 0)) | 0 | 0, $1_1 | 0);
              return $0_1 | 0;
            }

            function $1593($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[(($0_1 + 72) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 72) | 0) >> 2] = $1_1;
              return $2_1 | 0;
            }

            function $1594($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[(($0_1 + 72) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 72) | 0) >> 2] = $1_1;
              return $2_1 | 0;
            }

            function $1595($0_1) {
              $0_1 = $0_1 | 0;
              $1606($0_1 | 0, 8192 | 0) | 0;
              return $0_1 | 0;
            }

            function $1596($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1035($0_1 | 0, ($1_1 + 4) | 0 | 0) | 0;
            }

            function $1597($0_1) {
              $0_1 = $0_1 | 0;
              $1621($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = (14840 + 8) | 0;
              return $0_1 | 0;
            }

            function $1598($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1523($0_1 | 0, $1_1 | 0);
              HEAP32[(($0_1 + 72) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 76) | 0) >> 2] = $94() | 0;
            }

            function $1599($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1035($0_1 | 0, ($1_1 + 4) | 0 | 0) | 0;
            }

            function $1600($0_1) {
              $0_1 = $0_1 | 0;
              $1621($0_1 | 0) | 0;
              HEAP32[$0_1 >> 2] = (14912 + 8) | 0;
              return $0_1 | 0;
            }

            function $1601($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1523($0_1 | 0, $1_1 | 0);
              HEAP32[(($0_1 + 72) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 76) | 0) >> 2] = $605() | 0;
            }

            function $1602($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17852 | 0) | 0 | 0;
            }

            function $1603($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $1604($0_1) {
              $0_1 = $0_1 | 0;
              return $435($0_1 | 0, 17860 | 0) | 0 | 0;
            }

            function $1605($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $1606($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0;
              $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $2_1 | $1_1 | 0;
              return $2_1 | 0;
            }

            function $1607($0_1) {
              $0_1 = $0_1 | 0;
              $1486(21880 | 0) | 0;
              $1500(21964 | 0) | 0;
              $1486(22216 | 0) | 0;
              $1500(22300 | 0) | 0;
              return $0_1 | 0;
            }

            function $1608($0_1) {
              $0_1 = $0_1 | 0;
              $1607(22740 | 0) | 0;
            }

            function $1609($0_1) {
              $0_1 = $0_1 | 0;
              $1440($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1610($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1_1 = $1602($1_1 | 0) | 0;
              HEAP32[(($0_1 + 36) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 44) | 0) >> 2] = $1611($1_1 | 0) | 0;
              HEAP8[(($0_1 + 53) | 0) >> 0] = $1603(HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0) | 0;
              label$1: {
                if ((HEAP32[(($0_1 + 44) | 0) >> 2] | 0 | 0) < (9 | 0)) {
                  break label$1;
                }
                $701(15524 | 0);
                abort();
              }
            }

            function $1611($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $1612($0_1) {
              $0_1 = $0_1 | 0;
              return $1613($0_1 | 0, 0 | 0) | 0 | 0;
            }

            function $1613($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                $5_1 = 0,
                $4_1 = 0,
                i64toi32_i32$0 = 0,
                $6_1 = 0,
                i64toi32_i32$1 = 0,
                $7_1 = 0,
                $7$hi = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  if (!(HEAPU8[(($0_1 + 52) | 0) >> 0] | 0)) {
                    break label$2;
                  }
                  $3_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $4_1 = $94() | 0;
                  HEAP8[(($0_1 + 52) | 0) >> 0] = 0;
                  HEAP32[(($0_1 + 48) | 0) >> 2] = $4_1;
                  break label$1;
                }
                HEAP32[(($2_1 + 24) | 0) >> 2] = 1;
                $3_1 = 0;
                $5_1 = HEAP32[($1617(($2_1 + 24) | 0 | 0, ($0_1 + 44) | 0 | 0) | 0) >> 2] | 0;
                $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
                label$3: {
                  label$4: {
                    label$5: while (1) {
                      if (($3_1 | 0) == ($6_1 | 0)) {
                        break label$4;
                      }
                      $4_1 = $1579(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0;
                      if (($4_1 | 0) == (-1 | 0)) {
                        break label$3;
                      }
                      HEAP8[(((($2_1 + 24) | 0) + $3_1) | 0) >> 0] = $4_1;
                      $3_1 = ($3_1 + 1) | 0;
                      continue label$5;
                    }
                  }
                  label$6: {
                    label$7: {
                      if (!(HEAPU8[(($0_1 + 53) | 0) >> 0] | 0)) {
                        break label$7;
                      }
                      HEAP8[(($2_1 + 23) | 0) >> 0] = HEAPU8[(($2_1 + 24) | 0) >> 0] | 0;
                      break label$6;
                    }
                    $6_1 = ((($2_1 + 23) | 0) + 1) | 0;
                    label$8: {
                      label$9: while (1) {
                        $3_1 = HEAP32[(($0_1 + 40) | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
                        $7_1 = i64toi32_i32$0;
                        $7$hi = i64toi32_i32$1;
                        label$10: {
                          $4_1 = ((($2_1 + 24) | 0) + $5_1) | 0;
                          switch (
                            (($1618(
                              HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                              $3_1 | 0,
                              ($2_1 + 24) | 0 | 0,
                              $4_1 | 0,
                              ($2_1 + 16) | 0 | 0,
                              ($2_1 + 23) | 0 | 0,
                              $6_1 | 0,
                              ($2_1 + 12) | 0 | 0
                            ) |
                              0) +
                              -1) |
                            0 |
                            0
                          ) {
                            case 0:
                              break label$10;
                            case 1:
                              break label$3;
                            case 2:
                              break label$8;
                            default:
                              break label$6;
                          }
                        }
                        i64toi32_i32$1 = $7$hi;
                        i64toi32_i32$0 = HEAP32[(($0_1 + 40) | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$0 >> 2] = $7_1;
                        HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                        if (($5_1 | 0) == (8 | 0)) {
                          break label$3;
                        }
                        $3_1 = $1579(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0;
                        if (($3_1 | 0) == (-1 | 0)) {
                          break label$3;
                        }
                        HEAP8[$4_1 >> 0] = $3_1;
                        $5_1 = ($5_1 + 1) | 0;
                        continue label$9;
                      }
                    }
                    HEAP8[(($2_1 + 23) | 0) >> 0] = HEAPU8[(($2_1 + 24) | 0) >> 0] | 0;
                  }
                  label$11: {
                    label$12: {
                      if ($1_1) {
                        break label$12;
                      }
                      label$13: while (1) {
                        if (($5_1 | 0) < (1 | 0)) {
                          break label$11;
                        }
                        $5_1 = ($5_1 + -1) | 0;
                        if (
                          ($1578(
                            $1335(HEAP8[(((($2_1 + 24) | 0) + $5_1) | 0) >> 0] | 0 | 0) | 0 | 0,
                            HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0
                          ) |
                            0 |
                            0) ==
                          (-1 | 0)
                        ) {
                          break label$3;
                        }
                        continue label$13;
                      }
                    }
                    HEAP32[(($0_1 + 48) | 0) >> 2] = $1335(HEAP8[(($2_1 + 23) | 0) >> 0] | 0 | 0) | 0;
                  }
                  $3_1 = $1335(HEAP8[(($2_1 + 23) | 0) >> 0] | 0 | 0) | 0;
                  break label$1;
                }
                $3_1 = $94() | 0;
              }
              global$0 = ($2_1 + 32) | 0;
              return $3_1 | 0;
            }

            function $1614($0_1) {
              $0_1 = $0_1 | 0;
              return $1613($0_1 | 0, 1 | 0) | 0 | 0;
            }

            function $1615($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                $4_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              $3_1 = $95($1_1 | 0, $94() | 0 | 0) | 0;
              $4_1 = HEAPU8[(($0_1 + 52) | 0) >> 0] | 0;
              label$1: {
                label$2: {
                  if (!$3_1) {
                    break label$2;
                  }
                  $3_1 = $1_1;
                  if (($4_1 & 255) | 0) {
                    break label$1;
                  }
                  $3_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
                  HEAP8[(($0_1 + 52) | 0) >> 0] = (($95($3_1 | 0, $94() | 0 | 0) | 0) ^ 1) | 0;
                  break label$1;
                }
                label$3: {
                  if (!(($4_1 & 255) | 0)) {
                    break label$3;
                  }
                  HEAP8[(($2_1 + 19) | 0) >> 0] = $1454(HEAP32[(($0_1 + 48) | 0) >> 2] | 0 | 0) | 0;
                  label$4: {
                    label$5: {
                      switch (
                        (($1616(
                          HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                          HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0,
                          ($2_1 + 19) | 0 | 0,
                          ((($2_1 + 19) | 0) + 1) | 0 | 0,
                          ($2_1 + 12) | 0 | 0,
                          ($2_1 + 24) | 0 | 0,
                          ($2_1 + 32) | 0 | 0,
                          ($2_1 + 20) | 0 | 0
                        ) |
                          0) +
                          -1) |
                        0 |
                        0
                      ) {
                        case 2:
                          $3_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
                          HEAP32[(($2_1 + 20) | 0) >> 2] = ((($2_1 + 24) | 0) + 1) | 0;
                          HEAP8[(($2_1 + 24) | 0) >> 0] = $3_1;
                        default:
                          label$8: while (1) {
                            label$9: {
                              $3_1 = HEAP32[(($2_1 + 20) | 0) >> 2] | 0;
                              if ($3_1 >>> 0 > (($2_1 + 24) | 0) >>> 0) {
                                break label$9;
                              }
                              $4_1 = 1;
                              break label$4;
                            }
                            $3_1 = ($3_1 + -1) | 0;
                            HEAP32[(($2_1 + 20) | 0) >> 2] = $3_1;
                            if (
                              ($1578(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                                0 |
                                0) !=
                              (-1 | 0)
                            ) {
                              continue label$8;
                            }
                            break label$8;
                          }
                          break;
                        case 0:
                        case 1:
                          break label$5;
                      }
                    }
                    $4_1 = 0;
                    $3_1 = $94() | 0;
                  }
                  if (!$4_1) {
                    break label$1;
                  }
                }
                HEAP8[(($0_1 + 52) | 0) >> 0] = 1;
                HEAP32[(($0_1 + 48) | 0) >> 2] = $1_1;
                $3_1 = $1_1;
              }
              global$0 = ($2_1 + 32) | 0;
              return $3_1 | 0;
            }

            function $1616($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1,
                  $5_1,
                  $6_1,
                  $7_1
                ) |
                0 |
                0
              );
            }

            function $1617($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              return $1619($0_1 | 0, $1_1 | 0) | 0 | 0;
            }

            function $1618($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1,
                  $5_1,
                  $6_1,
                  $7_1
                ) |
                0 |
                0
              );
            }

            function $1619($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              $2_1 = (global$0 - 16) | 0;
              global$0 = $2_1;
              $3_1 = $1620(($2_1 + 8) | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
              global$0 = ($2_1 + 16) | 0;
              return ($3_1 ? $1_1 : $0_1) | 0;
            }

            function $1620($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return ((HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0)) | 0;
            }

            function $1621($0_1) {
              $0_1 = $0_1 | 0;
              HEAP32[$0_1 >> 2] = (14780 + 8) | 0;
              return $0_1 | 0;
            }

            function $1622($0_1) {
              $0_1 = $0_1 | 0;
              $1461($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1623($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1_1 = $1604($1_1 | 0) | 0;
              HEAP32[(($0_1 + 36) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 44) | 0) >> 2] = $1624($1_1 | 0) | 0;
              HEAP8[(($0_1 + 53) | 0) >> 0] = $1605(HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0) | 0;
              label$1: {
                if ((HEAP32[(($0_1 + 44) | 0) >> 2] | 0 | 0) < (9 | 0)) {
                  break label$1;
                }
                $701(15524 | 0);
                abort();
              }
            }

            function $1624($0_1) {
              $0_1 = $0_1 | 0;
              return FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
            }

            function $1625($0_1) {
              $0_1 = $0_1 | 0;
              return $1626($0_1 | 0, 0 | 0) | 0 | 0;
            }

            function $1626($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                $5_1 = 0,
                $4_1 = 0,
                i64toi32_i32$0 = 0,
                $6_1 = 0,
                i64toi32_i32$1 = 0,
                $7_1 = 0,
                $7$hi = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  if (!(HEAPU8[(($0_1 + 52) | 0) >> 0] | 0)) {
                    break label$2;
                  }
                  $3_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $4_1 = $605() | 0;
                  HEAP8[(($0_1 + 52) | 0) >> 0] = 0;
                  HEAP32[(($0_1 + 48) | 0) >> 2] = $4_1;
                  break label$1;
                }
                HEAP32[(($2_1 + 24) | 0) >> 2] = 1;
                $3_1 = 0;
                $5_1 = HEAP32[($1617(($2_1 + 24) | 0 | 0, ($0_1 + 44) | 0 | 0) | 0) >> 2] | 0;
                $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
                label$3: {
                  label$4: {
                    label$5: while (1) {
                      if (($3_1 | 0) == ($6_1 | 0)) {
                        break label$4;
                      }
                      $4_1 = $1579(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0;
                      if (($4_1 | 0) == (-1 | 0)) {
                        break label$3;
                      }
                      HEAP8[(((($2_1 + 24) | 0) + $3_1) | 0) >> 0] = $4_1;
                      $3_1 = ($3_1 + 1) | 0;
                      continue label$5;
                    }
                  }
                  label$6: {
                    label$7: {
                      if (!(HEAPU8[(($0_1 + 53) | 0) >> 0] | 0)) {
                        break label$7;
                      }
                      HEAP32[(($2_1 + 20) | 0) >> 2] = HEAP8[(($2_1 + 24) | 0) >> 0] | 0;
                      break label$6;
                    }
                    $6_1 = ($2_1 + 24) | 0;
                    label$8: {
                      label$9: while (1) {
                        $3_1 = HEAP32[(($0_1 + 40) | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
                        $7_1 = i64toi32_i32$0;
                        $7$hi = i64toi32_i32$1;
                        label$10: {
                          $4_1 = ((($2_1 + 24) | 0) + $5_1) | 0;
                          switch (
                            (($1630(
                              HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                              $3_1 | 0,
                              ($2_1 + 24) | 0 | 0,
                              $4_1 | 0,
                              ($2_1 + 16) | 0 | 0,
                              ($2_1 + 20) | 0 | 0,
                              $6_1 | 0,
                              ($2_1 + 12) | 0 | 0
                            ) |
                              0) +
                              -1) |
                            0 |
                            0
                          ) {
                            case 0:
                              break label$10;
                            case 1:
                              break label$3;
                            case 2:
                              break label$8;
                            default:
                              break label$6;
                          }
                        }
                        i64toi32_i32$1 = $7$hi;
                        i64toi32_i32$0 = HEAP32[(($0_1 + 40) | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$0 >> 2] = $7_1;
                        HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                        if (($5_1 | 0) == (8 | 0)) {
                          break label$3;
                        }
                        $3_1 = $1579(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0;
                        if (($3_1 | 0) == (-1 | 0)) {
                          break label$3;
                        }
                        HEAP8[$4_1 >> 0] = $3_1;
                        $5_1 = ($5_1 + 1) | 0;
                        continue label$9;
                      }
                    }
                    HEAP32[(($2_1 + 20) | 0) >> 2] = HEAP8[(($2_1 + 24) | 0) >> 0] | 0;
                  }
                  label$11: {
                    label$12: {
                      if ($1_1) {
                        break label$12;
                      }
                      label$13: while (1) {
                        if (($5_1 | 0) < (1 | 0)) {
                          break label$11;
                        }
                        $5_1 = ($5_1 + -1) | 0;
                        if (
                          ($1578(
                            $1392(HEAP8[(((($2_1 + 24) | 0) + $5_1) | 0) >> 0] | 0 | 0) | 0 | 0,
                            HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0
                          ) |
                            0 |
                            0) ==
                          (-1 | 0)
                        ) {
                          break label$3;
                        }
                        continue label$13;
                      }
                    }
                    HEAP32[(($0_1 + 48) | 0) >> 2] = $1392(HEAP32[(($2_1 + 20) | 0) >> 2] | 0 | 0) | 0;
                  }
                  $3_1 = $1392(HEAP32[(($2_1 + 20) | 0) >> 2] | 0 | 0) | 0;
                  break label$1;
                }
                $3_1 = $605() | 0;
              }
              global$0 = ($2_1 + 32) | 0;
              return $3_1 | 0;
            }

            function $1627($0_1) {
              $0_1 = $0_1 | 0;
              return $1626($0_1 | 0, 1 | 0) | 0 | 0;
            }

            function $1628($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0,
                $4_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              $3_1 = $606($1_1 | 0, $605() | 0 | 0) | 0;
              $4_1 = HEAPU8[(($0_1 + 52) | 0) >> 0] | 0;
              label$1: {
                label$2: {
                  if (!$3_1) {
                    break label$2;
                  }
                  $3_1 = $1_1;
                  if (($4_1 & 255) | 0) {
                    break label$1;
                  }
                  $3_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
                  HEAP8[(($0_1 + 52) | 0) >> 0] = (($606($3_1 | 0, $605() | 0 | 0) | 0) ^ 1) | 0;
                  break label$1;
                }
                label$3: {
                  if (!(($4_1 & 255) | 0)) {
                    break label$3;
                  }
                  HEAP32[(($2_1 + 16) | 0) >> 2] = $1473(HEAP32[(($0_1 + 48) | 0) >> 2] | 0 | 0) | 0;
                  label$4: {
                    label$5: {
                      switch (
                        (($1629(
                          HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                          HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0,
                          ($2_1 + 16) | 0 | 0,
                          ($2_1 + 20) | 0 | 0,
                          ($2_1 + 12) | 0 | 0,
                          ($2_1 + 24) | 0 | 0,
                          ($2_1 + 32) | 0 | 0,
                          ($2_1 + 20) | 0 | 0
                        ) |
                          0) +
                          -1) |
                        0 |
                        0
                      ) {
                        case 2:
                          $3_1 = HEAP32[(($0_1 + 48) | 0) >> 2] | 0;
                          HEAP32[(($2_1 + 20) | 0) >> 2] = ($2_1 + 25) | 0;
                          HEAP8[(($2_1 + 24) | 0) >> 0] = $3_1;
                        default:
                          label$8: while (1) {
                            label$9: {
                              $3_1 = HEAP32[(($2_1 + 20) | 0) >> 2] | 0;
                              if ($3_1 >>> 0 > (($2_1 + 24) | 0) >>> 0) {
                                break label$9;
                              }
                              $4_1 = 1;
                              break label$4;
                            }
                            $3_1 = ($3_1 + -1) | 0;
                            HEAP32[(($2_1 + 20) | 0) >> 2] = $3_1;
                            if (
                              ($1578(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                                0 |
                                0) !=
                              (-1 | 0)
                            ) {
                              continue label$8;
                            }
                            break label$8;
                          }
                          break;
                        case 0:
                        case 1:
                          break label$5;
                      }
                    }
                    $4_1 = 0;
                    $3_1 = $605() | 0;
                  }
                  if (!$4_1) {
                    break label$1;
                  }
                }
                HEAP8[(($0_1 + 52) | 0) >> 0] = 1;
                HEAP32[(($0_1 + 48) | 0) >> 2] = $1_1;
                $3_1 = $1_1;
              }
              global$0 = ($2_1 + 32) | 0;
              return $3_1 | 0;
            }

            function $1629($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 12) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1,
                  $5_1,
                  $6_1,
                  $7_1
                ) |
                0 |
                0
              );
            }

            function $1630($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 16) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1,
                  $5_1,
                  $6_1,
                  $7_1
                ) |
                0 |
                0
              );
            }

            function $1631($0_1) {
              $0_1 = $0_1 | 0;
              $1440($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1632($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1) | 0;
              $1_1 = $1602($1_1 | 0) | 0;
              HEAP32[(($0_1 + 36) | 0) >> 2] = $1_1;
              HEAP8[(($0_1 + 44) | 0) >> 0] = $1603($1_1 | 0) | 0;
            }

            function $1633($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $4_1 = 0,
                $5_1 = 0,
                $2_1 = 0,
                $3_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $2_1 = ($1_1 + 16) | 0;
              label$1: {
                label$2: while (1) {
                  $3_1 =
                    $1634(
                      HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                      HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0,
                      ($1_1 + 8) | 0 | 0,
                      $2_1 | 0,
                      ($1_1 + 4) | 0 | 0
                    ) | 0;
                  $4_1 = -1;
                  $5_1 = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) - (($1_1 + 8) | 0)) | 0;
                  if (
                    ($1712(($1_1 + 8) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                      0 |
                      0) !=
                    ($5_1 | 0)
                  ) {
                    break label$1;
                  }
                  label$3: {
                    switch (($3_1 + -1) | 0 | 0) {
                      case 1:
                        break label$1;
                      case 0:
                        continue label$2;
                      default:
                        break label$3;
                    }
                  }
                  break label$2;
                }
                $4_1 = $1580(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $1634($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1
                ) |
                0 |
                0
              );
            }

            function $1635($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0;
              label$1: {
                label$2: {
                  if (HEAPU8[(($0_1 + 44) | 0) >> 0] | 0) {
                    break label$2;
                  }
                  $3_1 = 0;
                  $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
                  label$3: while (1) {
                    if (($3_1 | 0) == ($2_1 | 0)) {
                      break label$1;
                    }
                    label$4: {
                      if (
                        (((((wasm2js_i32$1 = $0_1), (wasm2js_i32$2 = $1335(HEAP8[$1_1 >> 0] | 0 | 0) | 0)),
                        (wasm2js_i32$0 = HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0)),
                        FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) |
                          0) !=
                        ($94() | 0 | 0)
                      ) {
                        break label$4;
                      }
                      return $3_1 | 0;
                    }
                    $1_1 = ($1_1 + 1) | 0;
                    $3_1 = ($3_1 + 1) | 0;
                    continue label$3;
                  }
                }
                $2_1 = $1712($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0;
              }
              return $2_1 | 0;
            }

            function $1636($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $3_1 = 0,
                $4_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  label$3: {
                    if ($95($1_1 | 0, $94() | 0 | 0) | 0) {
                      break label$3;
                    }
                    HEAP8[(($2_1 + 23) | 0) >> 0] = $1454($1_1 | 0) | 0;
                    label$4: {
                      if (!(HEAPU8[(($0_1 + 44) | 0) >> 0] | 0)) {
                        break label$4;
                      }
                      if (
                        ($1712(($2_1 + 23) | 0 | 0, 1 | 0, 1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                          0 |
                          0) !=
                        (1 | 0)
                      ) {
                        break label$2;
                      }
                      break label$3;
                    }
                    HEAP32[(($2_1 + 16) | 0) >> 2] = ($2_1 + 24) | 0;
                    $3_1 = ($2_1 + 32) | 0;
                    $4_1 = ((($2_1 + 23) | 0) + 1) | 0;
                    $5_1 = ($2_1 + 23) | 0;
                    label$5: while (1) {
                      $6_1 =
                        $1616(
                          HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                          HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0,
                          $5_1 | 0,
                          $4_1 | 0,
                          ($2_1 + 12) | 0 | 0,
                          ($2_1 + 24) | 0 | 0,
                          $3_1 | 0,
                          ($2_1 + 16) | 0 | 0
                        ) | 0;
                      if ((HEAP32[(($2_1 + 12) | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
                        break label$2;
                      }
                      label$6: {
                        if (($6_1 | 0) != (3 | 0)) {
                          break label$6;
                        }
                        if (
                          ($1712($5_1 | 0, 1 | 0, 1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0 | 0) ==
                          (1 | 0)
                        ) {
                          break label$3;
                        }
                        break label$2;
                      }
                      if ($6_1 >>> 0 > 1 >>> 0) {
                        break label$2;
                      }
                      $5_1 = ((HEAP32[(($2_1 + 16) | 0) >> 2] | 0) - (($2_1 + 24) | 0)) | 0;
                      if (
                        ($1712(($2_1 + 24) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                          0 |
                          0) !=
                        ($5_1 | 0)
                      ) {
                        break label$2;
                      }
                      $5_1 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
                      if (($6_1 | 0) == (1 | 0)) {
                        continue label$5;
                      }
                      break label$5;
                    }
                  }
                  $0_1 = $1637($1_1 | 0) | 0;
                  break label$1;
                }
                $0_1 = $94() | 0;
              }
              global$0 = ($2_1 + 32) | 0;
              return $0_1 | 0;
            }

            function $1637($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($95($0_1 | 0, $94() | 0 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = (($94() | 0) ^ -1) | 0;
              }
              return $0_1 | 0;
            }

            function $1638($0_1) {
              $0_1 = $0_1 | 0;
              $1461($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1639($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0]($0_1) | 0;
              $1_1 = $1604($1_1 | 0) | 0;
              HEAP32[(($0_1 + 36) | 0) >> 2] = $1_1;
              HEAP8[(($0_1 + 44) | 0) >> 0] = $1605($1_1 | 0) | 0;
            }

            function $1640($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $4_1 = 0,
                $5_1 = 0,
                $2_1 = 0,
                $3_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $2_1 = ($1_1 + 16) | 0;
              label$1: {
                label$2: while (1) {
                  $3_1 =
                    $1641(
                      HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                      HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0,
                      ($1_1 + 8) | 0 | 0,
                      $2_1 | 0,
                      ($1_1 + 4) | 0 | 0
                    ) | 0;
                  $4_1 = -1;
                  $5_1 = ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0) - (($1_1 + 8) | 0)) | 0;
                  if (
                    ($1712(($1_1 + 8) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                      0 |
                      0) !=
                    ($5_1 | 0)
                  ) {
                    break label$1;
                  }
                  label$3: {
                    switch (($3_1 + -1) | 0 | 0) {
                      case 1:
                        break label$1;
                      case 0:
                        continue label$2;
                      default:
                        break label$3;
                    }
                  }
                  break label$2;
                }
                $4_1 = $1580(HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $4_1 | 0;
            }

            function $1641($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              return (
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1
                ) |
                0 |
                0
              );
            }

            function $1642($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0;
              label$1: {
                label$2: {
                  if (HEAPU8[(($0_1 + 44) | 0) >> 0] | 0) {
                    break label$2;
                  }
                  $3_1 = 0;
                  $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
                  label$3: while (1) {
                    if (($3_1 | 0) == ($2_1 | 0)) {
                      break label$1;
                    }
                    label$4: {
                      if (
                        (((((wasm2js_i32$1 = $0_1), (wasm2js_i32$2 = $1392(HEAP32[$1_1 >> 2] | 0 | 0) | 0)),
                        (wasm2js_i32$0 = HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 52) | 0) >> 2] | 0 | 0)),
                        FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) |
                          0) !=
                        ($605() | 0 | 0)
                      ) {
                        break label$4;
                      }
                      return $3_1 | 0;
                    }
                    $1_1 = ($1_1 + 4) | 0;
                    $3_1 = ($3_1 + 1) | 0;
                    continue label$3;
                  }
                }
                $2_1 = $1712($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0;
              }
              return $2_1 | 0;
            }

            function $1643($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $3_1 = 0,
                $4_1 = 0;
              $2_1 = (global$0 - 32) | 0;
              global$0 = $2_1;
              label$1: {
                label$2: {
                  label$3: {
                    if ($606($1_1 | 0, $605() | 0 | 0) | 0) {
                      break label$3;
                    }
                    HEAP32[(($2_1 + 20) | 0) >> 2] = $1473($1_1 | 0) | 0;
                    label$4: {
                      if (!(HEAPU8[(($0_1 + 44) | 0) >> 0] | 0)) {
                        break label$4;
                      }
                      if (
                        ($1712(($2_1 + 20) | 0 | 0, 4 | 0, 1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                          0 |
                          0) !=
                        (1 | 0)
                      ) {
                        break label$2;
                      }
                      break label$3;
                    }
                    HEAP32[(($2_1 + 16) | 0) >> 2] = ($2_1 + 24) | 0;
                    $3_1 = ($2_1 + 32) | 0;
                    $4_1 = ($2_1 + 24) | 0;
                    $5_1 = ($2_1 + 20) | 0;
                    label$5: while (1) {
                      $6_1 =
                        $1629(
                          HEAP32[(($0_1 + 36) | 0) >> 2] | 0 | 0,
                          HEAP32[(($0_1 + 40) | 0) >> 2] | 0 | 0,
                          $5_1 | 0,
                          $4_1 | 0,
                          ($2_1 + 12) | 0 | 0,
                          ($2_1 + 24) | 0 | 0,
                          $3_1 | 0,
                          ($2_1 + 16) | 0 | 0
                        ) | 0;
                      if ((HEAP32[(($2_1 + 12) | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
                        break label$2;
                      }
                      label$6: {
                        if (($6_1 | 0) != (3 | 0)) {
                          break label$6;
                        }
                        if (
                          ($1712($5_1 | 0, 1 | 0, 1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) | 0 | 0) ==
                          (1 | 0)
                        ) {
                          break label$3;
                        }
                        break label$2;
                      }
                      if ($6_1 >>> 0 > 1 >>> 0) {
                        break label$2;
                      }
                      $5_1 = ((HEAP32[(($2_1 + 16) | 0) >> 2] | 0) - (($2_1 + 24) | 0)) | 0;
                      if (
                        ($1712(($2_1 + 24) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[(($0_1 + 32) | 0) >> 2] | 0 | 0) |
                          0 |
                          0) !=
                        ($5_1 | 0)
                      ) {
                        break label$2;
                      }
                      $5_1 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
                      if (($6_1 | 0) == (1 | 0)) {
                        continue label$5;
                      }
                      break label$5;
                    }
                  }
                  $0_1 = $1644($1_1 | 0) | 0;
                  break label$1;
                }
                $0_1 = $605() | 0;
              }
              global$0 = ($2_1 + 32) | 0;
              return $0_1 | 0;
            }

            function $1644($0_1) {
              $0_1 = $0_1 | 0;
              label$1: {
                if (!($606($0_1 | 0, $605() | 0 | 0) | 0)) {
                  break label$1;
                }
                $0_1 = (($605() | 0) ^ -1) | 0;
              }
              return $0_1 | 0;
            }

            function $1645() {
              $1582();
            }

            function $1646() {}

            function $1647($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              abort();
            }

            function $1648($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $0_1 = $1650($1649($1_1 | 0, $0_1 | 0) | 0 | 0) | 0;
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1649($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1651($0_1 | 0, $1_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1650($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $2_1 = 0;
              label$1: {
                if ($1653($1652(($1_1 + 8) | 0 | 0, HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
                  break label$1;
                }
                $2_1 = $1655($1654($0_1 | 0) | 0 | 0) | 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $2_1 | 0;
            }

            function $1651($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[(($0_1 + 12) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1;
              HEAP32[$0_1 >> 2] = $1_1;
              HEAP32[(($0_1 + 8) | 0) >> 2] = ($1_1 + 1) | 0;
              return $0_1 | 0;
            }

            function $1652($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              HEAP32[$0_1 >> 2] = $1_1;
              return $0_1 | 0;
            }

            function $1653($0_1) {
              $0_1 = $0_1 | 0;
              return $1660(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
            }

            function $1654($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1655($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = 0;
              label$1: {
                label$2: {
                  $2_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                  $0_1 = HEAPU8[$2_1 >> 0] | 0;
                  if (($0_1 | 0) == (1 | 0)) {
                    break label$2;
                  }
                  if (($0_1 & 2) | 0) {
                    break label$1;
                  }
                  HEAP8[$2_1 >> 0] = 2;
                  $1_1 = 1;
                }
                return $1_1 | 0;
              }
              $1647(15872 | 0, 0 | 0);
              abort();
            }

            function $1656($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $1657($1649($1_1 | 0, $0_1 | 0) | 0 | 0);
              global$0 = ($1_1 + 16) | 0;
            }

            function $1657($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              $1658($1652(($1_1 + 8) | 0 | 0, HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 0) | 0 | 0);
              $1659($1654($0_1 | 0) | 0 | 0);
              global$0 = ($1_1 + 16) | 0;
            }

            function $1658($0_1) {
              $0_1 = $0_1 | 0;
              $1661(HEAP32[$0_1 >> 2] | 0 | 0);
            }

            function $1659($0_1) {
              $0_1 = $0_1 | 0;
              HEAP8[(HEAP32[(($0_1 + 8) | 0) >> 2] | 0) >> 0] = 1;
            }

            function $1660($0_1) {
              $0_1 = $0_1 | 0;
              return HEAPU8[$0_1 >> 0] | 0 | 0;
            }

            function $1661($0_1) {
              $0_1 = $0_1 | 0;
              HEAP8[$0_1 >> 0] = 1;
            }

            function $1662($0_1) {
              $0_1 = $0_1 | 0;
              return HEAP32[$0_1 >> 2] | 0 | 0;
            }

            function $1663() {
              return $1662(22748 | 0) | 0 | 0;
            }

            function $1664() {
              $1647(15926 | 0, 0 | 0);
              abort();
            }

            function $1665($0_1) {
              $0_1 = $0_1 | 0;
              return $0_1 | 0;
            }

            function $1666($0_1) {
              $0_1 = $0_1 | 0;
              $1665($0_1 | 0) | 0;
              return $0_1 | 0;
            }

            function $1667($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $1668($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $1669($0_1) {
              $0_1 = $0_1 | 0;
              $1666($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1670($0_1) {
              $0_1 = $0_1 | 0;
              $1666($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1671($0_1) {
              $0_1 = $0_1 | 0;
              $1666($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1672($0_1) {
              $0_1 = $0_1 | 0;
              $1666($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1673($0_1) {
              $0_1 = $0_1 | 0;
              $1666($0_1 | 0) | 0;
              $1572($0_1 | 0);
            }

            function $1674($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              return $1675($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
            }

            function $1675($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              label$1: {
                if ($2_1) {
                  break label$1;
                }
                return (
                  ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 0) == (HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 0)) | 0
                );
              }
              label$2: {
                if (($0_1 | 0) != ($1_1 | 0)) {
                  break label$2;
                }
                return 1 | 0;
              }
              return !($339($159($0_1 | 0) | 0 | 0, $159($1_1 | 0) | 0 | 0) | 0) | 0;
            }

            function $1676($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = (global$0 - 64) | 0;
              global$0 = $3_1;
              $4_1 = 1;
              label$1: {
                if ($1675($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
                  break label$1;
                }
                $4_1 = 0;
                if (!$1_1) {
                  break label$1;
                }
                $4_1 = 0;
                $1_1 = $1677($1_1 | 0, 16016 | 0, 16064 | 0, 0 | 0) | 0;
                if (!$1_1) {
                  break label$1;
                }
                $1708(($3_1 + 8) | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
                HEAP32[(($3_1 + 56) | 0) >> 2] = 1;
                HEAP32[(($3_1 + 20) | 0) >> 2] = -1;
                HEAP32[(($3_1 + 16) | 0) >> 2] = $0_1;
                HEAP32[(($3_1 + 8) | 0) >> 2] = $1_1;
                FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0](
                  $1_1,
                  ($3_1 + 8) | 0,
                  HEAP32[$2_1 >> 2] | 0,
                  1
                );
                label$2: {
                  $4_1 = HEAP32[(($3_1 + 32) | 0) >> 2] | 0;
                  if (($4_1 | 0) != (1 | 0)) {
                    break label$2;
                  }
                  HEAP32[$2_1 >> 2] = HEAP32[(($3_1 + 24) | 0) >> 2] | 0;
                }
                $4_1 = ($4_1 | 0) == (1 | 0);
              }
              global$0 = ($3_1 + 64) | 0;
              return $4_1 | 0;
            }

            function $1677($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $6_1 = 0,
                $5_1 = 0,
                wasm2js_i32$0 = 0,
                wasm2js_i32$1 = 0,
                wasm2js_i32$2 = 0,
                wasm2js_i32$3 = 0,
                wasm2js_i32$4 = 0,
                wasm2js_i32$5 = 0,
                wasm2js_i32$6 = 0,
                wasm2js_i32$7 = 0,
                wasm2js_i32$8 = 0;
              $4_1 = (global$0 - 64) | 0;
              global$0 = $4_1;
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              $6_1 = HEAP32[(($5_1 + -4) | 0) >> 2] | 0;
              $5_1 = HEAP32[(($5_1 + -8) | 0) >> 2] | 0;
              HEAP32[(($4_1 + 20) | 0) >> 2] = $3_1;
              HEAP32[(($4_1 + 16) | 0) >> 2] = $1_1;
              HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
              HEAP32[(($4_1 + 8) | 0) >> 2] = $2_1;
              $1_1 = 0;
              $1708(($4_1 + 24) | 0 | 0, 0 | 0, 39 | 0) | 0;
              $0_1 = ($0_1 + $5_1) | 0;
              label$1: {
                label$2: {
                  if (!($1675($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
                    break label$2;
                  }
                  HEAP32[(($4_1 + 56) | 0) >> 2] = 1;
                  FUNCTION_TABLE[HEAP32[(((HEAP32[$6_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                    $6_1,
                    ($4_1 + 8) | 0,
                    $0_1,
                    $0_1,
                    1,
                    0
                  );
                  $1_1 = (HEAP32[(($4_1 + 32) | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
                  break label$1;
                }
                FUNCTION_TABLE[HEAP32[(((HEAP32[$6_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0](
                  $6_1,
                  ($4_1 + 8) | 0,
                  $0_1,
                  1,
                  0
                );
                label$3: {
                  switch (HEAP32[(($4_1 + 44) | 0) >> 2] | 0 | 0) {
                    case 0:
                      $1_1 =
                        ((wasm2js_i32$0 =
                          ((wasm2js_i32$3 =
                            ((wasm2js_i32$6 = HEAP32[(($4_1 + 28) | 0) >> 2] | 0),
                            (wasm2js_i32$7 = 0),
                            (wasm2js_i32$8 = (HEAP32[(($4_1 + 40) | 0) >> 2] | 0 | 0) == (1 | 0)),
                            wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7)),
                          (wasm2js_i32$4 = 0),
                          (wasm2js_i32$5 = (HEAP32[(($4_1 + 36) | 0) >> 2] | 0 | 0) == (1 | 0)),
                          wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4)),
                        (wasm2js_i32$1 = 0),
                        (wasm2js_i32$2 = (HEAP32[(($4_1 + 48) | 0) >> 2] | 0 | 0) == (1 | 0)),
                        wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                      break label$1;
                    case 1:
                      break label$3;
                    default:
                      break label$1;
                  }
                }
                label$5: {
                  if ((HEAP32[(($4_1 + 32) | 0) >> 2] | 0 | 0) == (1 | 0)) {
                    break label$5;
                  }
                  if (HEAP32[(($4_1 + 48) | 0) >> 2] | 0) {
                    break label$1;
                  }
                  if ((HEAP32[(($4_1 + 36) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$1;
                  }
                  if ((HEAP32[(($4_1 + 40) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$1;
                  }
                }
                $1_1 = HEAP32[(($4_1 + 24) | 0) >> 2] | 0;
              }
              global$0 = ($4_1 + 64) | 0;
              return $1_1 | 0;
            }

            function $1678($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0;
              label$1: {
                $4_1 = HEAP32[(($1_1 + 16) | 0) >> 2] | 0;
                if ($4_1) {
                  break label$1;
                }
                HEAP32[(($1_1 + 36) | 0) >> 2] = 1;
                HEAP32[(($1_1 + 24) | 0) >> 2] = $3_1;
                HEAP32[(($1_1 + 16) | 0) >> 2] = $2_1;
                return;
              }
              label$2: {
                label$3: {
                  if (($4_1 | 0) != ($2_1 | 0)) {
                    break label$3;
                  }
                  if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) != (2 | 0)) {
                    break label$2;
                  }
                  HEAP32[(($1_1 + 24) | 0) >> 2] = $3_1;
                  return;
                }
                HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                HEAP32[(($1_1 + 24) | 0) >> 2] = 2;
                HEAP32[(($1_1 + 36) | 0) >> 2] = ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0) + 1) | 0;
              }
            }

            function $1679($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
                  break label$1;
                }
                $1678($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
              }
            }

            function $1680($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
                  break label$1;
                }
                $1678($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
                return;
              }
              $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0](
                $0_1,
                $1_1,
                $2_1,
                $3_1
              );
            }

            function $1681($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $5_1 = 0,
                $4_1 = 0;
              $4_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              label$1: {
                label$2: {
                  if ($2_1) {
                    break label$2;
                  }
                  $5_1 = 0;
                  break label$1;
                }
                $5_1 = ($4_1 >> 8) | 0;
                if (!(($4_1 & 1) | 0)) {
                  break label$1;
                }
                $5_1 = HEAP32[(((HEAP32[$2_1 >> 2] | 0) + $5_1) | 0) >> 2] | 0;
              }
              $0_1 = HEAP32[$0_1 >> 2] | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0](
                $0_1,
                $1_1,
                ($2_1 + $5_1) | 0,
                ($4_1 & 2) | 0 ? $3_1 : 2
              );
            }

            function $1682($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
                  break label$1;
                }
                $1678($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
                return;
              }
              $4_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
              $5_1 = ($0_1 + 16) | 0;
              $1681($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
              label$2: {
                if (($4_1 | 0) < (2 | 0)) {
                  break label$2;
                }
                $4_1 = ($5_1 + (($4_1 << 3) | 0)) | 0;
                $0_1 = ($0_1 + 24) | 0;
                label$3: while (1) {
                  $1681($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
                  $0_1 = ($0_1 + 8) | 0;
                  if ($0_1 >>> 0 >= $4_1 >>> 0) {
                    break label$2;
                  }
                  if (!(((HEAPU8[(($1_1 + 54) | 0) >> 0] | 0) & 255) | 0)) {
                    continue label$3;
                  }
                  break label$3;
                }
              }
            }

            function $1683($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0;
              $3_1 = 1;
              label$1: {
                label$2: {
                  if (((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 24) | 0) {
                    break label$2;
                  }
                  $3_1 = 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $4_1 = $1677($1_1 | 0, 16016 | 0, 16112 | 0, 0 | 0) | 0;
                  if (!$4_1) {
                    break label$1;
                  }
                  $3_1 = (((HEAPU8[(($4_1 + 8) | 0) >> 0] | 0) & 24) | 0 | 0) != (0 | 0);
                }
                $3_1 = $1675($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
              }
              return $3_1 | 0;
            }

            function $1684($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $5_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $6_1 = 0;
              $3_1 = (global$0 - 64) | 0;
              global$0 = $3_1;
              label$1: {
                label$2: {
                  if (!($1675($1_1 | 0, 16380 | 0, 0 | 0) | 0)) {
                    break label$2;
                  }
                  HEAP32[$2_1 >> 2] = 0;
                  $4_1 = 1;
                  break label$1;
                }
                label$3: {
                  if (!($1683($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
                    break label$3;
                  }
                  $4_1 = 1;
                  $1_1 = HEAP32[$2_1 >> 2] | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                  break label$1;
                }
                label$4: {
                  if (!$1_1) {
                    break label$4;
                  }
                  $4_1 = 0;
                  $1_1 = $1677($1_1 | 0, 16016 | 0, 16160 | 0, 0 | 0) | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  label$5: {
                    $5_1 = HEAP32[$2_1 >> 2] | 0;
                    if (!$5_1) {
                      break label$5;
                    }
                    HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
                  }
                  $5_1 = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                  $6_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                  if (((($5_1 & (($6_1 ^ -1) | 0)) | 0) & 7) | 0) {
                    break label$1;
                  }
                  if (((((($5_1 ^ -1) | 0) & $6_1) | 0) & 96) | 0) {
                    break label$1;
                  }
                  $4_1 = 1;
                  if (
                    $1675(
                      HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0,
                      HEAP32[(($1_1 + 12) | 0) >> 2] | 0 | 0,
                      0 | 0
                    ) | 0
                  ) {
                    break label$1;
                  }
                  label$6: {
                    if (!($1675(HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0, 16368 | 0, 0 | 0) | 0)) {
                      break label$6;
                    }
                    $1_1 = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
                    if (!$1_1) {
                      break label$1;
                    }
                    $4_1 = !($1677($1_1 | 0, 16016 | 0, 16212 | 0, 0 | 0) | 0);
                    break label$1;
                  }
                  $5_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                  if (!$5_1) {
                    break label$4;
                  }
                  $4_1 = 0;
                  label$7: {
                    $5_1 = $1677($5_1 | 0, 16016 | 0, 16160 | 0, 0 | 0) | 0;
                    if (!$5_1) {
                      break label$7;
                    }
                    if (!(((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 1) | 0)) {
                      break label$1;
                    }
                    $4_1 = $1685($5_1 | 0, HEAP32[(($1_1 + 12) | 0) >> 2] | 0 | 0) | 0;
                    break label$1;
                  }
                  $5_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                  if (!$5_1) {
                    break label$1;
                  }
                  $4_1 = 0;
                  label$8: {
                    $5_1 = $1677($5_1 | 0, 16016 | 0, 16272 | 0, 0 | 0) | 0;
                    if (!$5_1) {
                      break label$8;
                    }
                    if (!(((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 1) | 0)) {
                      break label$1;
                    }
                    $4_1 = $1686($5_1 | 0, HEAP32[(($1_1 + 12) | 0) >> 2] | 0 | 0) | 0;
                    break label$1;
                  }
                  $0_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                  if (!$0_1) {
                    break label$1;
                  }
                  $4_1 = 0;
                  $0_1 = $1677($0_1 | 0, 16016 | 0, 16064 | 0, 0 | 0) | 0;
                  if (!$0_1) {
                    break label$1;
                  }
                  $1_1 = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $4_1 = 0;
                  $1_1 = $1677($1_1 | 0, 16016 | 0, 16064 | 0, 0 | 0) | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  $1708(($3_1 + 8) | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
                  HEAP32[(($3_1 + 56) | 0) >> 2] = 1;
                  HEAP32[(($3_1 + 20) | 0) >> 2] = -1;
                  HEAP32[(($3_1 + 16) | 0) >> 2] = $0_1;
                  HEAP32[(($3_1 + 8) | 0) >> 2] = $1_1;
                  FUNCTION_TABLE[HEAP32[(((HEAP32[$1_1 >> 2] | 0) + 28) | 0) >> 2] | 0 | 0](
                    $1_1,
                    ($3_1 + 8) | 0,
                    HEAP32[$2_1 >> 2] | 0,
                    1
                  );
                  label$9: {
                    $1_1 = HEAP32[(($3_1 + 32) | 0) >> 2] | 0;
                    if (($1_1 | 0) != (1 | 0)) {
                      break label$9;
                    }
                    if (!(HEAP32[$2_1 >> 2] | 0)) {
                      break label$9;
                    }
                    HEAP32[$2_1 >> 2] = HEAP32[(($3_1 + 24) | 0) >> 2] | 0;
                  }
                  $4_1 = ($1_1 | 0) == (1 | 0);
                  break label$1;
                }
                $4_1 = 0;
              }
              global$0 = ($3_1 + 64) | 0;
              return $4_1 | 0;
            }

            function $1685($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $2_1 = 0;
              label$1: {
                label$2: while (1) {
                  label$3: {
                    if ($1_1) {
                      break label$3;
                    }
                    return 0 | 0;
                  }
                  $2_1 = 0;
                  $1_1 = $1677($1_1 | 0, 16016 | 0, 16160 | 0, 0 | 0) | 0;
                  if (!$1_1) {
                    break label$1;
                  }
                  if (
                    ((HEAP32[(($1_1 + 8) | 0) >> 2] | 0) & (((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) ^ -1) | 0)) |
                    0
                  ) {
                    break label$1;
                  }
                  label$4: {
                    if (
                      !(
                        $1675(
                          HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0,
                          HEAP32[(($1_1 + 12) | 0) >> 2] | 0 | 0,
                          0 | 0
                        ) | 0
                      )
                    ) {
                      break label$4;
                    }
                    return 1 | 0;
                  }
                  if (!(((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 1) | 0)) {
                    break label$1;
                  }
                  $3_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                  if (!$3_1) {
                    break label$1;
                  }
                  label$5: {
                    $3_1 = $1677($3_1 | 0, 16016 | 0, 16160 | 0, 0 | 0) | 0;
                    if (!$3_1) {
                      break label$5;
                    }
                    $1_1 = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
                    $0_1 = $3_1;
                    continue label$2;
                  }
                  break label$2;
                }
                $0_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                if (!$0_1) {
                  break label$1;
                }
                $2_1 = 0;
                $0_1 = $1677($0_1 | 0, 16016 | 0, 16272 | 0, 0 | 0) | 0;
                if (!$0_1) {
                  break label$1;
                }
                $2_1 = $1686($0_1 | 0, HEAP32[(($1_1 + 12) | 0) >> 2] | 0 | 0) | 0;
              }
              return $2_1 | 0;
            }

            function $1686($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              label$1: {
                if (!$1_1) {
                  break label$1;
                }
                $1_1 = $1677($1_1 | 0, 16016 | 0, 16272 | 0, 0 | 0) | 0;
                if (!$1_1) {
                  break label$1;
                }
                if (
                  ((HEAP32[(($1_1 + 8) | 0) >> 2] | 0) & (((HEAP32[(($0_1 + 8) | 0) >> 2] | 0) ^ -1) | 0)) |
                  0
                ) {
                  break label$1;
                }
                if (
                  !(
                    $1675(
                      HEAP32[(($0_1 + 12) | 0) >> 2] | 0 | 0,
                      HEAP32[(($1_1 + 12) | 0) >> 2] | 0 | 0,
                      0 | 0
                    ) | 0
                  )
                ) {
                  break label$1;
                }
                return (
                  $1675(
                    HEAP32[(($0_1 + 16) | 0) >> 2] | 0 | 0,
                    HEAP32[(($1_1 + 16) | 0) >> 2] | 0 | 0,
                    0 | 0
                  ) |
                  0 |
                  0
                );
              }
              return 0 | 0;
            }

            function $1687($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              HEAP8[(($1_1 + 53) | 0) >> 0] = 1;
              label$1: {
                if ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
                  break label$1;
                }
                HEAP8[(($1_1 + 52) | 0) >> 0] = 1;
                label$2: {
                  $3_1 = HEAP32[(($1_1 + 16) | 0) >> 2] | 0;
                  if ($3_1) {
                    break label$2;
                  }
                  HEAP32[(($1_1 + 36) | 0) >> 2] = 1;
                  HEAP32[(($1_1 + 24) | 0) >> 2] = $4_1;
                  HEAP32[(($1_1 + 16) | 0) >> 2] = $2_1;
                  if (($4_1 | 0) != (1 | 0)) {
                    break label$1;
                  }
                  if ((HEAP32[(($1_1 + 48) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$1;
                  }
                  HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                  return;
                }
                label$3: {
                  if (($3_1 | 0) != ($2_1 | 0)) {
                    break label$3;
                  }
                  label$4: {
                    $3_1 = HEAP32[(($1_1 + 24) | 0) >> 2] | 0;
                    if (($3_1 | 0) != (2 | 0)) {
                      break label$4;
                    }
                    HEAP32[(($1_1 + 24) | 0) >> 2] = $4_1;
                    $3_1 = $4_1;
                  }
                  if ((HEAP32[(($1_1 + 48) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$1;
                  }
                  if (($3_1 | 0) != (1 | 0)) {
                    break label$1;
                  }
                  HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                  return;
                }
                HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                HEAP32[(($1_1 + 36) | 0) >> 2] = ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0) + 1) | 0;
              }
            }

            function $1688($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              label$1: {
                if ((HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                  break label$1;
                }
                if ((HEAP32[(($1_1 + 28) | 0) >> 2] | 0 | 0) == (1 | 0)) {
                  break label$1;
                }
                HEAP32[(($1_1 + 28) | 0) >> 2] = $3_1;
              }
            }

            function $1689($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $8_1 = 0,
                $6_1 = 0,
                $7_1 = 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
                  break label$1;
                }
                $1688($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
                return;
              }
              label$2: {
                label$3: {
                  if (!($1675($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
                    break label$3;
                  }
                  label$4: {
                    label$5: {
                      if ((HEAP32[(($1_1 + 16) | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
                        break label$5;
                      }
                      if ((HEAP32[(($1_1 + 20) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                        break label$4;
                      }
                    }
                    if (($3_1 | 0) != (1 | 0)) {
                      break label$2;
                    }
                    HEAP32[(($1_1 + 32) | 0) >> 2] = 1;
                    return;
                  }
                  HEAP32[(($1_1 + 32) | 0) >> 2] = $3_1;
                  label$6: {
                    if ((HEAP32[(($1_1 + 44) | 0) >> 2] | 0 | 0) == (4 | 0)) {
                      break label$6;
                    }
                    $5_1 = ($0_1 + 16) | 0;
                    $3_1 = ($5_1 + (((HEAP32[(($0_1 + 12) | 0) >> 2] | 0) << 3) | 0)) | 0;
                    $6_1 = 0;
                    $7_1 = 0;
                    label$7: {
                      label$8: {
                        label$9: {
                          label$10: while (1) {
                            if ($5_1 >>> 0 >= $3_1 >>> 0) {
                              break label$9;
                            }
                            HEAP16[(($1_1 + 52) | 0) >> 1] = 0;
                            $1690($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
                            if (HEAPU8[(($1_1 + 54) | 0) >> 0] | 0) {
                              break label$9;
                            }
                            label$11: {
                              if (!(HEAPU8[(($1_1 + 53) | 0) >> 0] | 0)) {
                                break label$11;
                              }
                              label$12: {
                                if (!(HEAPU8[(($1_1 + 52) | 0) >> 0] | 0)) {
                                  break label$12;
                                }
                                $8_1 = 1;
                                if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) == (1 | 0)) {
                                  break label$8;
                                }
                                $6_1 = 1;
                                $7_1 = 1;
                                $8_1 = 1;
                                if (((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 2) | 0) {
                                  break label$11;
                                }
                                break label$8;
                              }
                              $6_1 = 1;
                              $8_1 = $7_1;
                              if (!(((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 1) | 0)) {
                                break label$8;
                              }
                            }
                            $5_1 = ($5_1 + 8) | 0;
                            continue label$10;
                          }
                        }
                        $5_1 = 4;
                        $8_1 = $7_1;
                        if (!(($6_1 & 1) | 0)) {
                          break label$7;
                        }
                      }
                      $5_1 = 3;
                    }
                    HEAP32[(($1_1 + 44) | 0) >> 2] = $5_1;
                    if (($8_1 & 1) | 0) {
                      break label$2;
                    }
                  }
                  HEAP32[(($1_1 + 20) | 0) >> 2] = $2_1;
                  HEAP32[(($1_1 + 40) | 0) >> 2] = ((HEAP32[(($1_1 + 40) | 0) >> 2] | 0) + 1) | 0;
                  if ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$2;
                  }
                  if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) != (2 | 0)) {
                    break label$2;
                  }
                  HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                  return;
                }
                $5_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                $8_1 = ($0_1 + 16) | 0;
                $1691($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
                if (($5_1 | 0) < (2 | 0)) {
                  break label$2;
                }
                $8_1 = ($8_1 + (($5_1 << 3) | 0)) | 0;
                $5_1 = ($0_1 + 24) | 0;
                label$13: {
                  label$14: {
                    $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                    if (($0_1 & 2) | 0) {
                      break label$14;
                    }
                    if ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                      break label$13;
                    }
                  }
                  label$15: while (1) {
                    if (HEAPU8[(($1_1 + 54) | 0) >> 0] | 0) {
                      break label$2;
                    }
                    $1691($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
                    $5_1 = ($5_1 + 8) | 0;
                    if ($5_1 >>> 0 < $8_1 >>> 0) {
                      continue label$15;
                    }
                    break label$2;
                  }
                }
                label$16: {
                  if (($0_1 & 1) | 0) {
                    break label$16;
                  }
                  label$17: while (1) {
                    if (HEAPU8[(($1_1 + 54) | 0) >> 0] | 0) {
                      break label$2;
                    }
                    if ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0 | 0) == (1 | 0)) {
                      break label$2;
                    }
                    $1691($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
                    $5_1 = ($5_1 + 8) | 0;
                    if ($5_1 >>> 0 < $8_1 >>> 0) {
                      continue label$17;
                    }
                    break label$2;
                  }
                }
                label$18: while (1) {
                  if (HEAPU8[(($1_1 + 54) | 0) >> 0] | 0) {
                    break label$2;
                  }
                  label$19: {
                    if ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                      break label$19;
                    }
                    if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) == (1 | 0)) {
                      break label$2;
                    }
                  }
                  $1691($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
                  $5_1 = ($5_1 + 8) | 0;
                  if ($5_1 >>> 0 < $8_1 >>> 0) {
                    continue label$18;
                  }
                  break label$18;
                }
              }
            }

            function $1690($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $6_1 = 0,
                $7_1 = 0;
              $6_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              $7_1 = ($6_1 >> 8) | 0;
              label$1: {
                if (!(($6_1 & 1) | 0)) {
                  break label$1;
                }
                $7_1 = HEAP32[(((HEAP32[$3_1 >> 2] | 0) + $7_1) | 0) >> 2] | 0;
              }
              $0_1 = HEAP32[$0_1 >> 2] | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                $0_1,
                $1_1,
                $2_1,
                ($3_1 + $7_1) | 0,
                ($6_1 & 2) | 0 ? $4_1 : 2,
                $5_1
              );
            }

            function $1691($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var $5_1 = 0,
                $6_1 = 0;
              $5_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              $6_1 = ($5_1 >> 8) | 0;
              label$1: {
                if (!(($5_1 & 1) | 0)) {
                  break label$1;
                }
                $6_1 = HEAP32[(((HEAP32[$2_1 >> 2] | 0) + $6_1) | 0) >> 2] | 0;
              }
              $0_1 = HEAP32[$0_1 >> 2] | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0](
                $0_1,
                $1_1,
                ($2_1 + $6_1) | 0,
                ($5_1 & 2) | 0 ? $3_1 : 2,
                $4_1
              );
            }

            function $1692($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
                  break label$1;
                }
                $1688($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
                return;
              }
              label$2: {
                label$3: {
                  if (!($1675($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
                    break label$3;
                  }
                  label$4: {
                    label$5: {
                      if ((HEAP32[(($1_1 + 16) | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
                        break label$5;
                      }
                      if ((HEAP32[(($1_1 + 20) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                        break label$4;
                      }
                    }
                    if (($3_1 | 0) != (1 | 0)) {
                      break label$2;
                    }
                    HEAP32[(($1_1 + 32) | 0) >> 2] = 1;
                    return;
                  }
                  HEAP32[(($1_1 + 32) | 0) >> 2] = $3_1;
                  label$6: {
                    if ((HEAP32[(($1_1 + 44) | 0) >> 2] | 0 | 0) == (4 | 0)) {
                      break label$6;
                    }
                    HEAP16[(($1_1 + 52) | 0) >> 1] = 0;
                    $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                    FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                      $0_1,
                      $1_1,
                      $2_1,
                      $2_1,
                      1,
                      $4_1
                    );
                    label$7: {
                      if (!(HEAPU8[(($1_1 + 53) | 0) >> 0] | 0)) {
                        break label$7;
                      }
                      HEAP32[(($1_1 + 44) | 0) >> 2] = 3;
                      if (!(HEAPU8[(($1_1 + 52) | 0) >> 0] | 0)) {
                        break label$6;
                      }
                      break label$2;
                    }
                    HEAP32[(($1_1 + 44) | 0) >> 2] = 4;
                  }
                  HEAP32[(($1_1 + 20) | 0) >> 2] = $2_1;
                  HEAP32[(($1_1 + 40) | 0) >> 2] = ((HEAP32[(($1_1 + 40) | 0) >> 2] | 0) + 1) | 0;
                  if ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$2;
                  }
                  if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) != (2 | 0)) {
                    break label$2;
                  }
                  HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                  return;
                }
                $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 24) | 0) >> 2] | 0 | 0](
                  $0_1,
                  $1_1,
                  $2_1,
                  $3_1,
                  $4_1
                );
              }
            }

            function $1693($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
                  break label$1;
                }
                $1688($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
                return;
              }
              label$2: {
                if (!($1675($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
                  break label$2;
                }
                label$3: {
                  label$4: {
                    if ((HEAP32[(($1_1 + 16) | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
                      break label$4;
                    }
                    if ((HEAP32[(($1_1 + 20) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                      break label$3;
                    }
                  }
                  if (($3_1 | 0) != (1 | 0)) {
                    break label$2;
                  }
                  HEAP32[(($1_1 + 32) | 0) >> 2] = 1;
                  return;
                }
                HEAP32[(($1_1 + 20) | 0) >> 2] = $2_1;
                HEAP32[(($1_1 + 32) | 0) >> 2] = $3_1;
                HEAP32[(($1_1 + 40) | 0) >> 2] = ((HEAP32[(($1_1 + 40) | 0) >> 2] | 0) + 1) | 0;
                label$5: {
                  if ((HEAP32[(($1_1 + 36) | 0) >> 2] | 0 | 0) != (1 | 0)) {
                    break label$5;
                  }
                  if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) != (2 | 0)) {
                    break label$5;
                  }
                  HEAP8[(($1_1 + 54) | 0) >> 0] = 1;
                }
                HEAP32[(($1_1 + 44) | 0) >> 2] = 4;
              }
            }

            function $1694($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var $7_1 = 0,
                $6_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $11_1 = 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
                  break label$1;
                }
                $1687($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
                return;
              }
              $6_1 = HEAPU8[(($1_1 + 53) | 0) >> 0] | 0;
              $7_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
              HEAP8[(($1_1 + 53) | 0) >> 0] = 0;
              $8_1 = HEAPU8[(($1_1 + 52) | 0) >> 0] | 0;
              HEAP8[(($1_1 + 52) | 0) >> 0] = 0;
              $9_1 = ($0_1 + 16) | 0;
              $1690($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
              $10_1 = HEAPU8[(($1_1 + 53) | 0) >> 0] | 0;
              $6_1 = $6_1 | $10_1 | 0;
              $11_1 = HEAPU8[(($1_1 + 52) | 0) >> 0] | 0;
              $8_1 = $8_1 | $11_1 | 0;
              label$2: {
                if (($7_1 | 0) < (2 | 0)) {
                  break label$2;
                }
                $9_1 = ($9_1 + (($7_1 << 3) | 0)) | 0;
                $7_1 = ($0_1 + 24) | 0;
                label$3: while (1) {
                  if (HEAPU8[(($1_1 + 54) | 0) >> 0] | 0) {
                    break label$2;
                  }
                  label$4: {
                    label$5: {
                      if (!(($11_1 & 255) | 0)) {
                        break label$5;
                      }
                      if ((HEAP32[(($1_1 + 24) | 0) >> 2] | 0 | 0) == (1 | 0)) {
                        break label$2;
                      }
                      if (((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 2) | 0) {
                        break label$4;
                      }
                      break label$2;
                    }
                    if (!(($10_1 & 255) | 0)) {
                      break label$4;
                    }
                    if (!(((HEAPU8[(($0_1 + 8) | 0) >> 0] | 0) & 1) | 0)) {
                      break label$2;
                    }
                  }
                  HEAP16[(($1_1 + 52) | 0) >> 1] = 0;
                  $1690($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
                  $10_1 = HEAPU8[(($1_1 + 53) | 0) >> 0] | 0;
                  $6_1 = $10_1 | $6_1 | 0;
                  $11_1 = HEAPU8[(($1_1 + 52) | 0) >> 0] | 0;
                  $8_1 = $11_1 | $8_1 | 0;
                  $7_1 = ($7_1 + 8) | 0;
                  if ($7_1 >>> 0 < $9_1 >>> 0) {
                    continue label$3;
                  }
                  break label$3;
                }
              }
              HEAP8[(($1_1 + 53) | 0) >> 0] = (($6_1 & 255) | 0 | 0) != (0 | 0);
              HEAP8[(($1_1 + 52) | 0) >> 0] = (($8_1 & 255) | 0 | 0) != (0 | 0);
            }

            function $1695($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
                  break label$1;
                }
                $1687($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
                return;
              }
              $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
              FUNCTION_TABLE[HEAP32[(((HEAP32[$0_1 >> 2] | 0) + 20) | 0) >> 2] | 0 | 0](
                $0_1,
                $1_1,
                $2_1,
                $3_1,
                $4_1,
                $5_1
              );
            }

            function $1696($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              label$1: {
                if (!($1675($0_1 | 0, HEAP32[(($1_1 + 8) | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
                  break label$1;
                }
                $1687($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
              }
            }

            function $1697() {
              return 0 | 0;
            }

            function $1698($0_1) {
              $0_1 = $0_1 | 0;
              var $4_1 = 0,
                $5_1 = 0,
                $6_1 = 0,
                $3_1 = 0,
                $8_1 = 0,
                $2_1 = 0,
                $12_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$2 = 0,
                $10_1 = 0,
                $11_1 = 0,
                $1_1 = 0,
                $80_1 = 0,
                $93_1 = 0,
                $104_1 = 0,
                $112_1 = 0,
                $120_1 = 0,
                $211_1 = 0,
                $222_1 = 0,
                $230_1 = 0,
                $238_1 = 0,
                $273_1 = 0,
                $344_1 = 0,
                $351_1 = 0,
                $358_1 = 0,
                $449_1 = 0,
                $460_1 = 0,
                $468_1 = 0,
                $476_1 = 0,
                $1170_1 = 0,
                $1177_1 = 0,
                $1184_1 = 0,
                $1306_1 = 0,
                $1308_1 = 0,
                $1369_1 = 0,
                $1376_1 = 0,
                $1383_1 = 0,
                $1616_1 = 0,
                $1623_1 = 0,
                $1630_1 = 0;
              $1_1 = (global$0 - 16) | 0;
              global$0 = $1_1;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          label$7: {
                            label$8: {
                              label$9: {
                                label$10: {
                                  label$11: {
                                    label$12: {
                                      label$13: {
                                        if ($0_1 >>> 0 > 244 >>> 0) {
                                          break label$13;
                                        }
                                        label$14: {
                                          $2_1 = HEAP32[((0 + 22752) | 0) >> 2] | 0;
                                          $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ((($0_1 + 11) | 0) & -8) | 0;
                                          $4_1 = ($3_1 >>> 3) | 0;
                                          $0_1 = ($2_1 >>> $4_1) | 0;
                                          if (!(($0_1 & 3) | 0)) {
                                            break label$14;
                                          }
                                          $5_1 = ((((($0_1 ^ -1) | 0) & 1) | 0) + $4_1) | 0;
                                          $6_1 = ($5_1 << 3) | 0;
                                          $4_1 = HEAP32[(($6_1 + 22800) | 0) >> 2] | 0;
                                          $0_1 = ($4_1 + 8) | 0;
                                          label$15: {
                                            label$16: {
                                              $3_1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
                                              $6_1 = ($6_1 + 22792) | 0;
                                              if (($3_1 | 0) != ($6_1 | 0)) {
                                                break label$16;
                                              }
                                              HEAP32[((0 + 22752) | 0) >> 2] =
                                                ($2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) | 0;
                                              break label$15;
                                            }
                                            HEAP32[(($3_1 + 12) | 0) >> 2] = $6_1;
                                            HEAP32[(($6_1 + 8) | 0) >> 2] = $3_1;
                                          }
                                          $5_1 = ($5_1 << 3) | 0;
                                          HEAP32[(($4_1 + 4) | 0) >> 2] = $5_1 | 3 | 0;
                                          $4_1 = ($4_1 + $5_1) | 0;
                                          HEAP32[(($4_1 + 4) | 0) >> 2] =
                                            HEAP32[(($4_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                                          break label$1;
                                        }
                                        $7_1 = HEAP32[((0 + 22760) | 0) >> 2] | 0;
                                        if ($3_1 >>> 0 <= $7_1 >>> 0) {
                                          break label$12;
                                        }
                                        label$17: {
                                          if (!$0_1) {
                                            break label$17;
                                          }
                                          label$18: {
                                            label$19: {
                                              $80_1 = ($0_1 << $4_1) | 0;
                                              $0_1 = (2 << $4_1) | 0;
                                              $0_1 = ($80_1 & ($0_1 | ((0 - $0_1) | 0) | 0)) | 0;
                                              $0_1 = ((($0_1 & ((0 - $0_1) | 0)) | 0) + -1) | 0;
                                              $93_1 = $0_1;
                                              $0_1 = ((($0_1 >>> 12) | 0) & 16) | 0;
                                              $4_1 = ($93_1 >>> $0_1) | 0;
                                              $5_1 = ((($4_1 >>> 5) | 0) & 8) | 0;
                                              $104_1 = $5_1 | $0_1 | 0;
                                              $0_1 = ($4_1 >>> $5_1) | 0;
                                              $4_1 = ((($0_1 >>> 2) | 0) & 4) | 0;
                                              $112_1 = $104_1 | $4_1 | 0;
                                              $0_1 = ($0_1 >>> $4_1) | 0;
                                              $4_1 = ((($0_1 >>> 1) | 0) & 2) | 0;
                                              $120_1 = $112_1 | $4_1 | 0;
                                              $0_1 = ($0_1 >>> $4_1) | 0;
                                              $4_1 = ((($0_1 >>> 1) | 0) & 1) | 0;
                                              $5_1 = (($120_1 | $4_1 | 0) + (($0_1 >>> $4_1) | 0)) | 0;
                                              $6_1 = ($5_1 << 3) | 0;
                                              $4_1 = HEAP32[(($6_1 + 22800) | 0) >> 2] | 0;
                                              $0_1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
                                              $6_1 = ($6_1 + 22792) | 0;
                                              if (($0_1 | 0) != ($6_1 | 0)) {
                                                break label$19;
                                              }
                                              $2_1 = ($2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) | 0;
                                              HEAP32[((0 + 22752) | 0) >> 2] = $2_1;
                                              break label$18;
                                            }
                                            HEAP32[(($0_1 + 12) | 0) >> 2] = $6_1;
                                            HEAP32[(($6_1 + 8) | 0) >> 2] = $0_1;
                                          }
                                          $0_1 = ($4_1 + 8) | 0;
                                          HEAP32[(($4_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                                          $6_1 = ($4_1 + $3_1) | 0;
                                          $8_1 = ($5_1 << 3) | 0;
                                          $5_1 = ($8_1 - $3_1) | 0;
                                          HEAP32[(($6_1 + 4) | 0) >> 2] = $5_1 | 1 | 0;
                                          HEAP32[(($4_1 + $8_1) | 0) >> 2] = $5_1;
                                          label$20: {
                                            if (!$7_1) {
                                              break label$20;
                                            }
                                            $8_1 = ($7_1 >>> 3) | 0;
                                            $3_1 = ((($8_1 << 3) | 0) + 22792) | 0;
                                            $4_1 = HEAP32[((0 + 22772) | 0) >> 2] | 0;
                                            label$21: {
                                              label$22: {
                                                $8_1 = (1 << $8_1) | 0;
                                                if (($2_1 & $8_1) | 0) {
                                                  break label$22;
                                                }
                                                HEAP32[((0 + 22752) | 0) >> 2] = $2_1 | $8_1 | 0;
                                                $8_1 = $3_1;
                                                break label$21;
                                              }
                                              $8_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
                                            }
                                            HEAP32[(($3_1 + 8) | 0) >> 2] = $4_1;
                                            HEAP32[(($8_1 + 12) | 0) >> 2] = $4_1;
                                            HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
                                            HEAP32[(($4_1 + 8) | 0) >> 2] = $8_1;
                                          }
                                          HEAP32[((0 + 22772) | 0) >> 2] = $6_1;
                                          HEAP32[((0 + 22760) | 0) >> 2] = $5_1;
                                          break label$1;
                                        }
                                        $9_1 = HEAP32[((0 + 22756) | 0) >> 2] | 0;
                                        if (!$9_1) {
                                          break label$12;
                                        }
                                        $0_1 = ((($9_1 & ((0 - $9_1) | 0)) | 0) + -1) | 0;
                                        $211_1 = $0_1;
                                        $0_1 = ((($0_1 >>> 12) | 0) & 16) | 0;
                                        $4_1 = ($211_1 >>> $0_1) | 0;
                                        $5_1 = ((($4_1 >>> 5) | 0) & 8) | 0;
                                        $222_1 = $5_1 | $0_1 | 0;
                                        $0_1 = ($4_1 >>> $5_1) | 0;
                                        $4_1 = ((($0_1 >>> 2) | 0) & 4) | 0;
                                        $230_1 = $222_1 | $4_1 | 0;
                                        $0_1 = ($0_1 >>> $4_1) | 0;
                                        $4_1 = ((($0_1 >>> 1) | 0) & 2) | 0;
                                        $238_1 = $230_1 | $4_1 | 0;
                                        $0_1 = ($0_1 >>> $4_1) | 0;
                                        $4_1 = ((($0_1 >>> 1) | 0) & 1) | 0;
                                        $6_1 =
                                          HEAP32[
                                            ((((((($238_1 | $4_1 | 0) + (($0_1 >>> $4_1) | 0)) | 0) << 2) |
                                              0) +
                                              23056) |
                                              0) >>
                                              2
                                          ] | 0;
                                        $4_1 = ((((HEAP32[(($6_1 + 4) | 0) >> 2] | 0) & -8) | 0) - $3_1) | 0;
                                        $5_1 = $6_1;
                                        label$23: {
                                          label$24: while (1) {
                                            label$25: {
                                              $0_1 = HEAP32[(($5_1 + 16) | 0) >> 2] | 0;
                                              if ($0_1) {
                                                break label$25;
                                              }
                                              $0_1 = HEAP32[(($5_1 + 20) | 0) >> 2] | 0;
                                              if (!$0_1) {
                                                break label$23;
                                              }
                                            }
                                            $5_1 =
                                              ((((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) & -8) | 0) - $3_1) | 0;
                                            $273_1 = $5_1;
                                            $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                                            $4_1 = $5_1 ? $273_1 : $4_1;
                                            $6_1 = $5_1 ? $0_1 : $6_1;
                                            $5_1 = $0_1;
                                            continue label$24;
                                          }
                                        }
                                        $10_1 = ($6_1 + $3_1) | 0;
                                        if ($10_1 >>> 0 <= $6_1 >>> 0) {
                                          break label$11;
                                        }
                                        $11_1 = HEAP32[(($6_1 + 24) | 0) >> 2] | 0;
                                        label$26: {
                                          $8_1 = HEAP32[(($6_1 + 12) | 0) >> 2] | 0;
                                          if (($8_1 | 0) == ($6_1 | 0)) {
                                            break label$26;
                                          }
                                          $0_1 = HEAP32[(($6_1 + 8) | 0) >> 2] | 0;
                                          HEAP32[((0 + 22768) | 0) >> 2] | 0;
                                          HEAP32[(($0_1 + 12) | 0) >> 2] = $8_1;
                                          HEAP32[(($8_1 + 8) | 0) >> 2] = $0_1;
                                          break label$2;
                                        }
                                        label$27: {
                                          $5_1 = ($6_1 + 20) | 0;
                                          $0_1 = HEAP32[$5_1 >> 2] | 0;
                                          if ($0_1) {
                                            break label$27;
                                          }
                                          $0_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                                          if (!$0_1) {
                                            break label$10;
                                          }
                                          $5_1 = ($6_1 + 16) | 0;
                                        }
                                        label$28: while (1) {
                                          $12_1 = $5_1;
                                          $8_1 = $0_1;
                                          $5_1 = ($0_1 + 20) | 0;
                                          $0_1 = HEAP32[$5_1 >> 2] | 0;
                                          if ($0_1) {
                                            continue label$28;
                                          }
                                          $5_1 = ($8_1 + 16) | 0;
                                          $0_1 = HEAP32[(($8_1 + 16) | 0) >> 2] | 0;
                                          if ($0_1) {
                                            continue label$28;
                                          }
                                          break label$28;
                                        }
                                        HEAP32[$12_1 >> 2] = 0;
                                        break label$2;
                                      }
                                      $3_1 = -1;
                                      if ($0_1 >>> 0 > -65 >>> 0) {
                                        break label$12;
                                      }
                                      $0_1 = ($0_1 + 11) | 0;
                                      $3_1 = ($0_1 & -8) | 0;
                                      $7_1 = HEAP32[((0 + 22756) | 0) >> 2] | 0;
                                      if (!$7_1) {
                                        break label$12;
                                      }
                                      $12_1 = 31;
                                      label$29: {
                                        if ($3_1 >>> 0 > 16777215 >>> 0) {
                                          break label$29;
                                        }
                                        $0_1 = ($0_1 >>> 8) | 0;
                                        $344_1 = $0_1;
                                        $0_1 = ((((($0_1 + 1048320) | 0) >>> 16) | 0) & 8) | 0;
                                        $4_1 = ($344_1 << $0_1) | 0;
                                        $351_1 = $4_1;
                                        $4_1 = ((((($4_1 + 520192) | 0) >>> 16) | 0) & 4) | 0;
                                        $5_1 = ($351_1 << $4_1) | 0;
                                        $358_1 = $5_1;
                                        $5_1 = ((((($5_1 + 245760) | 0) >>> 16) | 0) & 2) | 0;
                                        $0_1 =
                                          ((((($358_1 << $5_1) | 0) >>> 15) | 0) -
                                            ($0_1 | $4_1 | 0 | $5_1 | 0)) |
                                          0;
                                        $12_1 =
                                          ((($0_1 << 1) |
                                            0 |
                                            (((($3_1 >>> (($0_1 + 21) | 0)) | 0) & 1) | 0) |
                                            0) +
                                            28) |
                                          0;
                                      }
                                      $4_1 = (0 - $3_1) | 0;
                                      label$30: {
                                        label$31: {
                                          label$32: {
                                            label$33: {
                                              $5_1 = HEAP32[(((($12_1 << 2) | 0) + 23056) | 0) >> 2] | 0;
                                              if ($5_1) {
                                                break label$33;
                                              }
                                              $0_1 = 0;
                                              $8_1 = 0;
                                              break label$32;
                                            }
                                            $0_1 = 0;
                                            $6_1 =
                                              ($3_1 <<
                                                (($12_1 | 0) == (31 | 0)
                                                  ? 0
                                                  : (25 - (($12_1 >>> 1) | 0)) | 0)) |
                                              0;
                                            $8_1 = 0;
                                            label$34: while (1) {
                                              label$35: {
                                                $2_1 =
                                                  ((((HEAP32[(($5_1 + 4) | 0) >> 2] | 0) & -8) | 0) - $3_1) |
                                                  0;
                                                if ($2_1 >>> 0 >= $4_1 >>> 0) {
                                                  break label$35;
                                                }
                                                $4_1 = $2_1;
                                                $8_1 = $5_1;
                                                if ($4_1) {
                                                  break label$35;
                                                }
                                                $4_1 = 0;
                                                $8_1 = $5_1;
                                                $0_1 = $5_1;
                                                break label$31;
                                              }
                                              $2_1 = HEAP32[(($5_1 + 20) | 0) >> 2] | 0;
                                              $5_1 =
                                                HEAP32[
                                                  (((($5_1 + (((($6_1 >>> 29) | 0) & 4) | 0)) | 0) + 16) |
                                                    0) >>
                                                    2
                                                ] | 0;
                                              $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                                              $6_1 = ($6_1 << 1) | 0;
                                              if ($5_1) {
                                                continue label$34;
                                              }
                                              break label$34;
                                            }
                                          }
                                          label$36: {
                                            if ($0_1 | $8_1 | 0) {
                                              break label$36;
                                            }
                                            $0_1 = (2 << $12_1) | 0;
                                            $0_1 = (($0_1 | ((0 - $0_1) | 0) | 0) & $7_1) | 0;
                                            if (!$0_1) {
                                              break label$12;
                                            }
                                            $0_1 = ((($0_1 & ((0 - $0_1) | 0)) | 0) + -1) | 0;
                                            $449_1 = $0_1;
                                            $0_1 = ((($0_1 >>> 12) | 0) & 16) | 0;
                                            $5_1 = ($449_1 >>> $0_1) | 0;
                                            $6_1 = ((($5_1 >>> 5) | 0) & 8) | 0;
                                            $460_1 = $6_1 | $0_1 | 0;
                                            $0_1 = ($5_1 >>> $6_1) | 0;
                                            $5_1 = ((($0_1 >>> 2) | 0) & 4) | 0;
                                            $468_1 = $460_1 | $5_1 | 0;
                                            $0_1 = ($0_1 >>> $5_1) | 0;
                                            $5_1 = ((($0_1 >>> 1) | 0) & 2) | 0;
                                            $476_1 = $468_1 | $5_1 | 0;
                                            $0_1 = ($0_1 >>> $5_1) | 0;
                                            $5_1 = ((($0_1 >>> 1) | 0) & 1) | 0;
                                            $0_1 =
                                              HEAP32[
                                                ((((((($476_1 | $5_1 | 0) + (($0_1 >>> $5_1) | 0)) | 0) <<
                                                  2) |
                                                  0) +
                                                  23056) |
                                                  0) >>
                                                  2
                                              ] | 0;
                                          }
                                          if (!$0_1) {
                                            break label$30;
                                          }
                                        }
                                        label$37: while (1) {
                                          $2_1 =
                                            ((((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) & -8) | 0) - $3_1) | 0;
                                          $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
                                          label$38: {
                                            $5_1 = HEAP32[(($0_1 + 16) | 0) >> 2] | 0;
                                            if ($5_1) {
                                              break label$38;
                                            }
                                            $5_1 = HEAP32[(($0_1 + 20) | 0) >> 2] | 0;
                                          }
                                          $4_1 = $6_1 ? $2_1 : $4_1;
                                          $8_1 = $6_1 ? $0_1 : $8_1;
                                          $0_1 = $5_1;
                                          if ($0_1) {
                                            continue label$37;
                                          }
                                          break label$37;
                                        }
                                      }
                                      if (!$8_1) {
                                        break label$12;
                                      }
                                      if (
                                        $4_1 >>> 0 >=
                                        (((HEAP32[((0 + 22760) | 0) >> 2] | 0) - $3_1) | 0) >>> 0
                                      ) {
                                        break label$12;
                                      }
                                      $12_1 = ($8_1 + $3_1) | 0;
                                      if ($12_1 >>> 0 <= $8_1 >>> 0) {
                                        break label$11;
                                      }
                                      $9_1 = HEAP32[(($8_1 + 24) | 0) >> 2] | 0;
                                      label$39: {
                                        $6_1 = HEAP32[(($8_1 + 12) | 0) >> 2] | 0;
                                        if (($6_1 | 0) == ($8_1 | 0)) {
                                          break label$39;
                                        }
                                        $0_1 = HEAP32[(($8_1 + 8) | 0) >> 2] | 0;
                                        HEAP32[((0 + 22768) | 0) >> 2] | 0;
                                        HEAP32[(($0_1 + 12) | 0) >> 2] = $6_1;
                                        HEAP32[(($6_1 + 8) | 0) >> 2] = $0_1;
                                        break label$3;
                                      }
                                      label$40: {
                                        $5_1 = ($8_1 + 20) | 0;
                                        $0_1 = HEAP32[$5_1 >> 2] | 0;
                                        if ($0_1) {
                                          break label$40;
                                        }
                                        $0_1 = HEAP32[(($8_1 + 16) | 0) >> 2] | 0;
                                        if (!$0_1) {
                                          break label$9;
                                        }
                                        $5_1 = ($8_1 + 16) | 0;
                                      }
                                      label$41: while (1) {
                                        $2_1 = $5_1;
                                        $6_1 = $0_1;
                                        $5_1 = ($0_1 + 20) | 0;
                                        $0_1 = HEAP32[$5_1 >> 2] | 0;
                                        if ($0_1) {
                                          continue label$41;
                                        }
                                        $5_1 = ($6_1 + 16) | 0;
                                        $0_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                                        if ($0_1) {
                                          continue label$41;
                                        }
                                        break label$41;
                                      }
                                      HEAP32[$2_1 >> 2] = 0;
                                      break label$3;
                                    }
                                    label$42: {
                                      $0_1 = HEAP32[((0 + 22760) | 0) >> 2] | 0;
                                      if ($0_1 >>> 0 < $3_1 >>> 0) {
                                        break label$42;
                                      }
                                      $4_1 = HEAP32[((0 + 22772) | 0) >> 2] | 0;
                                      label$43: {
                                        label$44: {
                                          $5_1 = ($0_1 - $3_1) | 0;
                                          if ($5_1 >>> 0 < 16 >>> 0) {
                                            break label$44;
                                          }
                                          HEAP32[((0 + 22760) | 0) >> 2] = $5_1;
                                          $6_1 = ($4_1 + $3_1) | 0;
                                          HEAP32[((0 + 22772) | 0) >> 2] = $6_1;
                                          HEAP32[(($6_1 + 4) | 0) >> 2] = $5_1 | 1 | 0;
                                          HEAP32[(($4_1 + $0_1) | 0) >> 2] = $5_1;
                                          HEAP32[(($4_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                                          break label$43;
                                        }
                                        HEAP32[((0 + 22772) | 0) >> 2] = 0;
                                        HEAP32[((0 + 22760) | 0) >> 2] = 0;
                                        HEAP32[(($4_1 + 4) | 0) >> 2] = $0_1 | 3 | 0;
                                        $0_1 = ($4_1 + $0_1) | 0;
                                        HEAP32[(($0_1 + 4) | 0) >> 2] =
                                          HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                                      }
                                      $0_1 = ($4_1 + 8) | 0;
                                      break label$1;
                                    }
                                    label$45: {
                                      $6_1 = HEAP32[((0 + 22764) | 0) >> 2] | 0;
                                      if ($6_1 >>> 0 <= $3_1 >>> 0) {
                                        break label$45;
                                      }
                                      $4_1 = ($6_1 - $3_1) | 0;
                                      HEAP32[((0 + 22764) | 0) >> 2] = $4_1;
                                      $0_1 = HEAP32[((0 + 22776) | 0) >> 2] | 0;
                                      $5_1 = ($0_1 + $3_1) | 0;
                                      HEAP32[((0 + 22776) | 0) >> 2] = $5_1;
                                      HEAP32[(($5_1 + 4) | 0) >> 2] = $4_1 | 1 | 0;
                                      HEAP32[(($0_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                                      $0_1 = ($0_1 + 8) | 0;
                                      break label$1;
                                    }
                                    label$46: {
                                      label$47: {
                                        if (!(HEAP32[((0 + 23224) | 0) >> 2] | 0)) {
                                          break label$47;
                                        }
                                        $4_1 = HEAP32[((0 + 23232) | 0) >> 2] | 0;
                                        break label$46;
                                      }
                                      i64toi32_i32$1 = 0;
                                      i64toi32_i32$0 = -1;
                                      HEAP32[((i64toi32_i32$1 + 23236) | 0) >> 2] = -1;
                                      HEAP32[((i64toi32_i32$1 + 23240) | 0) >> 2] = i64toi32_i32$0;
                                      i64toi32_i32$1 = 0;
                                      i64toi32_i32$0 = 4096;
                                      HEAP32[((i64toi32_i32$1 + 23228) | 0) >> 2] = 4096;
                                      HEAP32[((i64toi32_i32$1 + 23232) | 0) >> 2] = i64toi32_i32$0;
                                      HEAP32[((0 + 23224) | 0) >> 2] =
                                        ((((($1_1 + 12) | 0) & -16) | 0) ^ 1431655768) | 0;
                                      HEAP32[((0 + 23244) | 0) >> 2] = 0;
                                      HEAP32[((0 + 23196) | 0) >> 2] = 0;
                                      $4_1 = 4096;
                                    }
                                    $0_1 = 0;
                                    $7_1 = ($3_1 + 47) | 0;
                                    $2_1 = ($4_1 + $7_1) | 0;
                                    $12_1 = (0 - $4_1) | 0;
                                    $8_1 = ($2_1 & $12_1) | 0;
                                    if ($8_1 >>> 0 <= $3_1 >>> 0) {
                                      break label$1;
                                    }
                                    $0_1 = 0;
                                    label$48: {
                                      $4_1 = HEAP32[((0 + 23192) | 0) >> 2] | 0;
                                      if (!$4_1) {
                                        break label$48;
                                      }
                                      $5_1 = HEAP32[((0 + 23184) | 0) >> 2] | 0;
                                      $9_1 = ($5_1 + $8_1) | 0;
                                      if ($9_1 >>> 0 <= $5_1 >>> 0) {
                                        break label$1;
                                      }
                                      if ($9_1 >>> 0 > $4_1 >>> 0) {
                                        break label$1;
                                      }
                                    }
                                    if (((HEAPU8[((0 + 23196) | 0) >> 0] | 0) & 4) | 0) {
                                      break label$6;
                                    }
                                    label$49: {
                                      label$50: {
                                        label$51: {
                                          $4_1 = HEAP32[((0 + 22776) | 0) >> 2] | 0;
                                          if (!$4_1) {
                                            break label$51;
                                          }
                                          $0_1 = 23200;
                                          label$52: while (1) {
                                            label$53: {
                                              $5_1 = HEAP32[$0_1 >> 2] | 0;
                                              if ($5_1 >>> 0 > $4_1 >>> 0) {
                                                break label$53;
                                              }
                                              if (
                                                (($5_1 + (HEAP32[(($0_1 + 4) | 0) >> 2] | 0)) | 0) >>> 0 >
                                                $4_1 >>> 0
                                              ) {
                                                break label$50;
                                              }
                                            }
                                            $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                                            if ($0_1) {
                                              continue label$52;
                                            }
                                            break label$52;
                                          }
                                        }
                                        $6_1 = $1703(0 | 0) | 0;
                                        if (($6_1 | 0) == (-1 | 0)) {
                                          break label$7;
                                        }
                                        $2_1 = $8_1;
                                        label$54: {
                                          $0_1 = HEAP32[((0 + 23228) | 0) >> 2] | 0;
                                          $4_1 = ($0_1 + -1) | 0;
                                          if (!(($4_1 & $6_1) | 0)) {
                                            break label$54;
                                          }
                                          $2_1 =
                                            ((($8_1 - $6_1) | 0) +
                                              (((($4_1 + $6_1) | 0) & ((0 - $0_1) | 0)) | 0)) |
                                            0;
                                        }
                                        if ($2_1 >>> 0 <= $3_1 >>> 0) {
                                          break label$7;
                                        }
                                        if ($2_1 >>> 0 > 2147483646 >>> 0) {
                                          break label$7;
                                        }
                                        label$55: {
                                          $0_1 = HEAP32[((0 + 23192) | 0) >> 2] | 0;
                                          if (!$0_1) {
                                            break label$55;
                                          }
                                          $4_1 = HEAP32[((0 + 23184) | 0) >> 2] | 0;
                                          $5_1 = ($4_1 + $2_1) | 0;
                                          if ($5_1 >>> 0 <= $4_1 >>> 0) {
                                            break label$7;
                                          }
                                          if ($5_1 >>> 0 > $0_1 >>> 0) {
                                            break label$7;
                                          }
                                        }
                                        $0_1 = $1703($2_1 | 0) | 0;
                                        if (($0_1 | 0) != ($6_1 | 0)) {
                                          break label$49;
                                        }
                                        break label$5;
                                      }
                                      $2_1 = ((($2_1 - $6_1) | 0) & $12_1) | 0;
                                      if ($2_1 >>> 0 > 2147483646 >>> 0) {
                                        break label$7;
                                      }
                                      $6_1 = $1703($2_1 | 0) | 0;
                                      if (
                                        ($6_1 | 0) ==
                                        (((HEAP32[$0_1 >> 2] | 0) + (HEAP32[(($0_1 + 4) | 0) >> 2] | 0)) |
                                          0 |
                                          0)
                                      ) {
                                        break label$8;
                                      }
                                      $0_1 = $6_1;
                                    }
                                    label$56: {
                                      if ((($3_1 + 48) | 0) >>> 0 <= $2_1 >>> 0) {
                                        break label$56;
                                      }
                                      if (($0_1 | 0) == (-1 | 0)) {
                                        break label$56;
                                      }
                                      label$57: {
                                        $4_1 = HEAP32[((0 + 23232) | 0) >> 2] | 0;
                                        $4_1 = ((((($7_1 - $2_1) | 0) + $4_1) | 0) & ((0 - $4_1) | 0)) | 0;
                                        if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                                          break label$57;
                                        }
                                        $6_1 = $0_1;
                                        break label$5;
                                      }
                                      label$58: {
                                        if (($1703($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                                          break label$58;
                                        }
                                        $2_1 = ($4_1 + $2_1) | 0;
                                        $6_1 = $0_1;
                                        break label$5;
                                      }
                                      $1703((0 - $2_1) | 0 | 0) | 0;
                                      break label$7;
                                    }
                                    $6_1 = $0_1;
                                    if (($0_1 | 0) != (-1 | 0)) {
                                      break label$5;
                                    }
                                    break label$7;
                                  }
                                  abort();
                                }
                                $8_1 = 0;
                                break label$2;
                              }
                              $6_1 = 0;
                              break label$3;
                            }
                            if (($6_1 | 0) != (-1 | 0)) {
                              break label$5;
                            }
                          }
                          HEAP32[((0 + 23196) | 0) >> 2] = HEAP32[((0 + 23196) | 0) >> 2] | 0 | 4 | 0;
                        }
                        if ($8_1 >>> 0 > 2147483646 >>> 0) {
                          break label$4;
                        }
                        $6_1 = $1703($8_1 | 0) | 0;
                        $0_1 = $1703(0 | 0) | 0;
                        if ($6_1 >>> 0 >= $0_1 >>> 0) {
                          break label$4;
                        }
                        if (($6_1 | 0) == (-1 | 0)) {
                          break label$4;
                        }
                        if (($0_1 | 0) == (-1 | 0)) {
                          break label$4;
                        }
                        $2_1 = ($0_1 - $6_1) | 0;
                        if ($2_1 >>> 0 <= (($3_1 + 40) | 0) >>> 0) {
                          break label$4;
                        }
                      }
                      $0_1 = ((HEAP32[((0 + 23184) | 0) >> 2] | 0) + $2_1) | 0;
                      HEAP32[((0 + 23184) | 0) >> 2] = $0_1;
                      label$59: {
                        if ($0_1 >>> 0 <= (HEAP32[((0 + 23188) | 0) >> 2] | 0) >>> 0) {
                          break label$59;
                        }
                        HEAP32[((0 + 23188) | 0) >> 2] = $0_1;
                      }
                      label$60: {
                        label$61: {
                          label$62: {
                            label$63: {
                              $4_1 = HEAP32[((0 + 22776) | 0) >> 2] | 0;
                              if (!$4_1) {
                                break label$63;
                              }
                              $0_1 = 23200;
                              label$64: while (1) {
                                $5_1 = HEAP32[$0_1 >> 2] | 0;
                                $8_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                                if (($6_1 | 0) == (($5_1 + $8_1) | 0 | 0)) {
                                  break label$62;
                                }
                                $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                                if ($0_1) {
                                  continue label$64;
                                }
                                break label$61;
                              }
                            }
                            label$65: {
                              label$66: {
                                $0_1 = HEAP32[((0 + 22768) | 0) >> 2] | 0;
                                if (!$0_1) {
                                  break label$66;
                                }
                                if ($6_1 >>> 0 >= $0_1 >>> 0) {
                                  break label$65;
                                }
                              }
                              HEAP32[((0 + 22768) | 0) >> 2] = $6_1;
                            }
                            $0_1 = 0;
                            HEAP32[((0 + 23204) | 0) >> 2] = $2_1;
                            HEAP32[((0 + 23200) | 0) >> 2] = $6_1;
                            HEAP32[((0 + 22784) | 0) >> 2] = -1;
                            HEAP32[((0 + 22788) | 0) >> 2] = HEAP32[((0 + 23224) | 0) >> 2] | 0;
                            HEAP32[((0 + 23212) | 0) >> 2] = 0;
                            label$67: while (1) {
                              $4_1 = ($0_1 << 3) | 0;
                              $5_1 = ($4_1 + 22792) | 0;
                              HEAP32[(($4_1 + 22800) | 0) >> 2] = $5_1;
                              HEAP32[(($4_1 + 22804) | 0) >> 2] = $5_1;
                              $0_1 = ($0_1 + 1) | 0;
                              if (($0_1 | 0) != (32 | 0)) {
                                continue label$67;
                              }
                              break label$67;
                            }
                            $0_1 = ($2_1 + -40) | 0;
                            $4_1 = ((($6_1 + 8) | 0) & 7) | 0 ? (((-8 - $6_1) | 0) & 7) | 0 : 0;
                            $5_1 = ($0_1 - $4_1) | 0;
                            HEAP32[((0 + 22764) | 0) >> 2] = $5_1;
                            $4_1 = ($6_1 + $4_1) | 0;
                            HEAP32[((0 + 22776) | 0) >> 2] = $4_1;
                            HEAP32[(($4_1 + 4) | 0) >> 2] = $5_1 | 1 | 0;
                            HEAP32[(((($6_1 + $0_1) | 0) + 4) | 0) >> 2] = 40;
                            HEAP32[((0 + 22780) | 0) >> 2] = HEAP32[((0 + 23240) | 0) >> 2] | 0;
                            break label$60;
                          }
                          if ($6_1 >>> 0 <= $4_1 >>> 0) {
                            break label$61;
                          }
                          if ($5_1 >>> 0 > $4_1 >>> 0) {
                            break label$61;
                          }
                          if (((HEAP32[(($0_1 + 12) | 0) >> 2] | 0) & 8) | 0) {
                            break label$61;
                          }
                          HEAP32[(($0_1 + 4) | 0) >> 2] = ($8_1 + $2_1) | 0;
                          $0_1 = ((($4_1 + 8) | 0) & 7) | 0 ? (((-8 - $4_1) | 0) & 7) | 0 : 0;
                          $5_1 = ($4_1 + $0_1) | 0;
                          HEAP32[((0 + 22776) | 0) >> 2] = $5_1;
                          $6_1 = ((HEAP32[((0 + 22764) | 0) >> 2] | 0) + $2_1) | 0;
                          $0_1 = ($6_1 - $0_1) | 0;
                          HEAP32[((0 + 22764) | 0) >> 2] = $0_1;
                          HEAP32[(($5_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                          HEAP32[(((($4_1 + $6_1) | 0) + 4) | 0) >> 2] = 40;
                          HEAP32[((0 + 22780) | 0) >> 2] = HEAP32[((0 + 23240) | 0) >> 2] | 0;
                          break label$60;
                        }
                        label$68: {
                          $8_1 = HEAP32[((0 + 22768) | 0) >> 2] | 0;
                          if ($6_1 >>> 0 >= $8_1 >>> 0) {
                            break label$68;
                          }
                          HEAP32[((0 + 22768) | 0) >> 2] = $6_1;
                          $8_1 = $6_1;
                        }
                        $5_1 = ($6_1 + $2_1) | 0;
                        $0_1 = 23200;
                        label$69: {
                          label$70: {
                            label$71: {
                              label$72: {
                                label$73: {
                                  label$74: {
                                    label$75: {
                                      label$76: while (1) {
                                        if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                                          break label$75;
                                        }
                                        $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                                        if ($0_1) {
                                          continue label$76;
                                        }
                                        break label$74;
                                      }
                                    }
                                    if (!(((HEAPU8[(($0_1 + 12) | 0) >> 0] | 0) & 8) | 0)) {
                                      break label$73;
                                    }
                                  }
                                  $0_1 = 23200;
                                  label$77: while (1) {
                                    label$78: {
                                      $5_1 = HEAP32[$0_1 >> 2] | 0;
                                      if ($5_1 >>> 0 > $4_1 >>> 0) {
                                        break label$78;
                                      }
                                      $5_1 = ($5_1 + (HEAP32[(($0_1 + 4) | 0) >> 2] | 0)) | 0;
                                      if ($5_1 >>> 0 > $4_1 >>> 0) {
                                        break label$72;
                                      }
                                    }
                                    $0_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                                    continue label$77;
                                  }
                                }
                                HEAP32[$0_1 >> 2] = $6_1;
                                HEAP32[(($0_1 + 4) | 0) >> 2] =
                                  ((HEAP32[(($0_1 + 4) | 0) >> 2] | 0) + $2_1) | 0;
                                $12_1 =
                                  ($6_1 + (((($6_1 + 8) | 0) & 7) | 0 ? (((-8 - $6_1) | 0) & 7) | 0 : 0)) | 0;
                                HEAP32[(($12_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                                $2_1 =
                                  ($5_1 + (((($5_1 + 8) | 0) & 7) | 0 ? (((-8 - $5_1) | 0) & 7) | 0 : 0)) | 0;
                                $5_1 = ((($2_1 - $12_1) | 0) - $3_1) | 0;
                                $3_1 = ($12_1 + $3_1) | 0;
                                label$79: {
                                  if (($4_1 | 0) != ($2_1 | 0)) {
                                    break label$79;
                                  }
                                  HEAP32[((0 + 22776) | 0) >> 2] = $3_1;
                                  $0_1 = ((HEAP32[((0 + 22764) | 0) >> 2] | 0) + $5_1) | 0;
                                  HEAP32[((0 + 22764) | 0) >> 2] = $0_1;
                                  HEAP32[(($3_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                                  break label$70;
                                }
                                label$80: {
                                  if ((HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                                    break label$80;
                                  }
                                  HEAP32[((0 + 22772) | 0) >> 2] = $3_1;
                                  $0_1 = ((HEAP32[((0 + 22760) | 0) >> 2] | 0) + $5_1) | 0;
                                  HEAP32[((0 + 22760) | 0) >> 2] = $0_1;
                                  HEAP32[(($3_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                                  HEAP32[(($3_1 + $0_1) | 0) >> 2] = $0_1;
                                  break label$70;
                                }
                                label$81: {
                                  $0_1 = HEAP32[(($2_1 + 4) | 0) >> 2] | 0;
                                  if ((($0_1 & 3) | 0 | 0) != (1 | 0)) {
                                    break label$81;
                                  }
                                  $7_1 = ($0_1 & -8) | 0;
                                  label$82: {
                                    label$83: {
                                      if ($0_1 >>> 0 > 255 >>> 0) {
                                        break label$83;
                                      }
                                      $4_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
                                      $8_1 = ($0_1 >>> 3) | 0;
                                      $6_1 = ((($8_1 << 3) | 0) + 22792) | 0;
                                      label$84: {
                                        $0_1 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
                                        if (($0_1 | 0) != ($4_1 | 0)) {
                                          break label$84;
                                        }
                                        HEAP32[((0 + 22752) | 0) >> 2] =
                                          ((HEAP32[((0 + 22752) | 0) >> 2] | 0) &
                                            (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0)) |
                                          0;
                                        break label$82;
                                      }
                                      HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
                                      HEAP32[(($0_1 + 8) | 0) >> 2] = $4_1;
                                      break label$82;
                                    }
                                    $9_1 = HEAP32[(($2_1 + 24) | 0) >> 2] | 0;
                                    label$85: {
                                      label$86: {
                                        $6_1 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
                                        if (($6_1 | 0) == ($2_1 | 0)) {
                                          break label$86;
                                        }
                                        $0_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
                                        HEAP32[(($0_1 + 12) | 0) >> 2] = $6_1;
                                        HEAP32[(($6_1 + 8) | 0) >> 2] = $0_1;
                                        break label$85;
                                      }
                                      label$87: {
                                        $0_1 = ($2_1 + 20) | 0;
                                        $4_1 = HEAP32[$0_1 >> 2] | 0;
                                        if ($4_1) {
                                          break label$87;
                                        }
                                        $0_1 = ($2_1 + 16) | 0;
                                        $4_1 = HEAP32[$0_1 >> 2] | 0;
                                        if ($4_1) {
                                          break label$87;
                                        }
                                        $6_1 = 0;
                                        break label$85;
                                      }
                                      label$88: while (1) {
                                        $8_1 = $0_1;
                                        $6_1 = $4_1;
                                        $0_1 = ($4_1 + 20) | 0;
                                        $4_1 = HEAP32[$0_1 >> 2] | 0;
                                        if ($4_1) {
                                          continue label$88;
                                        }
                                        $0_1 = ($6_1 + 16) | 0;
                                        $4_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                                        if ($4_1) {
                                          continue label$88;
                                        }
                                        break label$88;
                                      }
                                      HEAP32[$8_1 >> 2] = 0;
                                    }
                                    if (!$9_1) {
                                      break label$82;
                                    }
                                    label$89: {
                                      label$90: {
                                        $4_1 = HEAP32[(($2_1 + 28) | 0) >> 2] | 0;
                                        $0_1 = ((($4_1 << 2) | 0) + 23056) | 0;
                                        if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                                          break label$90;
                                        }
                                        HEAP32[$0_1 >> 2] = $6_1;
                                        if ($6_1) {
                                          break label$89;
                                        }
                                        HEAP32[((0 + 22756) | 0) >> 2] =
                                          ((HEAP32[((0 + 22756) | 0) >> 2] | 0) &
                                            (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0)) |
                                          0;
                                        break label$82;
                                      }
                                      HEAP32[
                                        (($9_1 +
                                          ((HEAP32[(($9_1 + 16) | 0) >> 2] | 0 | 0) == ($2_1 | 0)
                                            ? 16
                                            : 20)) |
                                          0) >>
                                          2
                                      ] = $6_1;
                                      if (!$6_1) {
                                        break label$82;
                                      }
                                    }
                                    HEAP32[(($6_1 + 24) | 0) >> 2] = $9_1;
                                    label$91: {
                                      $0_1 = HEAP32[(($2_1 + 16) | 0) >> 2] | 0;
                                      if (!$0_1) {
                                        break label$91;
                                      }
                                      HEAP32[(($6_1 + 16) | 0) >> 2] = $0_1;
                                      HEAP32[(($0_1 + 24) | 0) >> 2] = $6_1;
                                    }
                                    $0_1 = HEAP32[(($2_1 + 20) | 0) >> 2] | 0;
                                    if (!$0_1) {
                                      break label$82;
                                    }
                                    HEAP32[(($6_1 + 20) | 0) >> 2] = $0_1;
                                    HEAP32[(($0_1 + 24) | 0) >> 2] = $6_1;
                                  }
                                  $5_1 = ($7_1 + $5_1) | 0;
                                  $2_1 = ($2_1 + $7_1) | 0;
                                }
                                HEAP32[(($2_1 + 4) | 0) >> 2] =
                                  ((HEAP32[(($2_1 + 4) | 0) >> 2] | 0) & -2) | 0;
                                HEAP32[(($3_1 + 4) | 0) >> 2] = $5_1 | 1 | 0;
                                HEAP32[(($3_1 + $5_1) | 0) >> 2] = $5_1;
                                label$92: {
                                  if ($5_1 >>> 0 > 255 >>> 0) {
                                    break label$92;
                                  }
                                  $4_1 = ($5_1 >>> 3) | 0;
                                  $0_1 = ((($4_1 << 3) | 0) + 22792) | 0;
                                  label$93: {
                                    label$94: {
                                      $5_1 = HEAP32[((0 + 22752) | 0) >> 2] | 0;
                                      $4_1 = (1 << $4_1) | 0;
                                      if (($5_1 & $4_1) | 0) {
                                        break label$94;
                                      }
                                      HEAP32[((0 + 22752) | 0) >> 2] = $5_1 | $4_1 | 0;
                                      $4_1 = $0_1;
                                      break label$93;
                                    }
                                    $4_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                                  }
                                  HEAP32[(($0_1 + 8) | 0) >> 2] = $3_1;
                                  HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
                                  HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
                                  HEAP32[(($3_1 + 8) | 0) >> 2] = $4_1;
                                  break label$70;
                                }
                                $0_1 = 31;
                                label$95: {
                                  if ($5_1 >>> 0 > 16777215 >>> 0) {
                                    break label$95;
                                  }
                                  $0_1 = ($5_1 >>> 8) | 0;
                                  $1170_1 = $0_1;
                                  $0_1 = ((((($0_1 + 1048320) | 0) >>> 16) | 0) & 8) | 0;
                                  $4_1 = ($1170_1 << $0_1) | 0;
                                  $1177_1 = $4_1;
                                  $4_1 = ((((($4_1 + 520192) | 0) >>> 16) | 0) & 4) | 0;
                                  $6_1 = ($1177_1 << $4_1) | 0;
                                  $1184_1 = $6_1;
                                  $6_1 = ((((($6_1 + 245760) | 0) >>> 16) | 0) & 2) | 0;
                                  $0_1 =
                                    ((((($1184_1 << $6_1) | 0) >>> 15) | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0)) |
                                    0;
                                  $0_1 =
                                    ((($0_1 << 1) | 0 | (((($5_1 >>> (($0_1 + 21) | 0)) | 0) & 1) | 0) | 0) +
                                      28) |
                                    0;
                                }
                                HEAP32[(($3_1 + 28) | 0) >> 2] = $0_1;
                                i64toi32_i32$1 = $3_1;
                                i64toi32_i32$0 = 0;
                                HEAP32[(($3_1 + 16) | 0) >> 2] = 0;
                                HEAP32[(($3_1 + 20) | 0) >> 2] = i64toi32_i32$0;
                                $4_1 = ((($0_1 << 2) | 0) + 23056) | 0;
                                label$96: {
                                  label$97: {
                                    $6_1 = HEAP32[((0 + 22756) | 0) >> 2] | 0;
                                    $8_1 = (1 << $0_1) | 0;
                                    if (($6_1 & $8_1) | 0) {
                                      break label$97;
                                    }
                                    HEAP32[((0 + 22756) | 0) >> 2] = $6_1 | $8_1 | 0;
                                    HEAP32[$4_1 >> 2] = $3_1;
                                    HEAP32[(($3_1 + 24) | 0) >> 2] = $4_1;
                                    break label$96;
                                  }
                                  $0_1 =
                                    ($5_1 << (($0_1 | 0) == (31 | 0) ? 0 : (25 - (($0_1 >>> 1) | 0)) | 0)) |
                                    0;
                                  $6_1 = HEAP32[$4_1 >> 2] | 0;
                                  label$98: while (1) {
                                    $4_1 = $6_1;
                                    if ((((HEAP32[(($4_1 + 4) | 0) >> 2] | 0) & -8) | 0 | 0) == ($5_1 | 0)) {
                                      break label$71;
                                    }
                                    $6_1 = ($0_1 >>> 29) | 0;
                                    $0_1 = ($0_1 << 1) | 0;
                                    $8_1 = ((($4_1 + (($6_1 & 4) | 0)) | 0) + 16) | 0;
                                    $6_1 = HEAP32[$8_1 >> 2] | 0;
                                    if ($6_1) {
                                      continue label$98;
                                    }
                                    break label$98;
                                  }
                                  HEAP32[$8_1 >> 2] = $3_1;
                                  HEAP32[(($3_1 + 24) | 0) >> 2] = $4_1;
                                }
                                HEAP32[(($3_1 + 12) | 0) >> 2] = $3_1;
                                HEAP32[(($3_1 + 8) | 0) >> 2] = $3_1;
                                break label$70;
                              }
                              $0_1 = ($2_1 + -40) | 0;
                              $8_1 = ((($6_1 + 8) | 0) & 7) | 0 ? (((-8 - $6_1) | 0) & 7) | 0 : 0;
                              $12_1 = ($0_1 - $8_1) | 0;
                              HEAP32[((0 + 22764) | 0) >> 2] = $12_1;
                              $8_1 = ($6_1 + $8_1) | 0;
                              HEAP32[((0 + 22776) | 0) >> 2] = $8_1;
                              HEAP32[(($8_1 + 4) | 0) >> 2] = $12_1 | 1 | 0;
                              HEAP32[(((($6_1 + $0_1) | 0) + 4) | 0) >> 2] = 40;
                              HEAP32[((0 + 22780) | 0) >> 2] = HEAP32[((0 + 23240) | 0) >> 2] | 0;
                              $0_1 =
                                ((($5_1 + (((($5_1 + -39) | 0) & 7) | 0 ? (((39 - $5_1) | 0) & 7) | 0 : 0)) |
                                  0) +
                                  -47) |
                                0;
                              $8_1 = $0_1 >>> 0 < (($4_1 + 16) | 0) >>> 0 ? $4_1 : $0_1;
                              HEAP32[(($8_1 + 4) | 0) >> 2] = 27;
                              i64toi32_i32$2 = 0;
                              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 23208) | 0) >> 2] | 0;
                              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 23212) | 0) >> 2] | 0;
                              $1306_1 = i64toi32_i32$0;
                              i64toi32_i32$0 = ($8_1 + 16) | 0;
                              HEAP32[i64toi32_i32$0 >> 2] = $1306_1;
                              HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] = i64toi32_i32$1;
                              i64toi32_i32$2 = 0;
                              i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 23200) | 0) >> 2] | 0;
                              i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 23204) | 0) >> 2] | 0;
                              $1308_1 = i64toi32_i32$1;
                              i64toi32_i32$1 = $8_1;
                              HEAP32[(($8_1 + 8) | 0) >> 2] = $1308_1;
                              HEAP32[(($8_1 + 12) | 0) >> 2] = i64toi32_i32$0;
                              HEAP32[((0 + 23208) | 0) >> 2] = ($8_1 + 8) | 0;
                              HEAP32[((0 + 23204) | 0) >> 2] = $2_1;
                              HEAP32[((0 + 23200) | 0) >> 2] = $6_1;
                              HEAP32[((0 + 23212) | 0) >> 2] = 0;
                              $0_1 = ($8_1 + 24) | 0;
                              label$99: while (1) {
                                HEAP32[(($0_1 + 4) | 0) >> 2] = 7;
                                $6_1 = ($0_1 + 8) | 0;
                                $0_1 = ($0_1 + 4) | 0;
                                if ($5_1 >>> 0 > $6_1 >>> 0) {
                                  continue label$99;
                                }
                                break label$99;
                              }
                              if (($8_1 | 0) == ($4_1 | 0)) {
                                break label$60;
                              }
                              HEAP32[(($8_1 + 4) | 0) >> 2] = ((HEAP32[(($8_1 + 4) | 0) >> 2] | 0) & -2) | 0;
                              $2_1 = ($8_1 - $4_1) | 0;
                              HEAP32[(($4_1 + 4) | 0) >> 2] = $2_1 | 1 | 0;
                              HEAP32[$8_1 >> 2] = $2_1;
                              label$100: {
                                if ($2_1 >>> 0 > 255 >>> 0) {
                                  break label$100;
                                }
                                $5_1 = ($2_1 >>> 3) | 0;
                                $0_1 = ((($5_1 << 3) | 0) + 22792) | 0;
                                label$101: {
                                  label$102: {
                                    $6_1 = HEAP32[((0 + 22752) | 0) >> 2] | 0;
                                    $5_1 = (1 << $5_1) | 0;
                                    if (($6_1 & $5_1) | 0) {
                                      break label$102;
                                    }
                                    HEAP32[((0 + 22752) | 0) >> 2] = $6_1 | $5_1 | 0;
                                    $5_1 = $0_1;
                                    break label$101;
                                  }
                                  $5_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                                }
                                HEAP32[(($0_1 + 8) | 0) >> 2] = $4_1;
                                HEAP32[(($5_1 + 12) | 0) >> 2] = $4_1;
                                HEAP32[(($4_1 + 12) | 0) >> 2] = $0_1;
                                HEAP32[(($4_1 + 8) | 0) >> 2] = $5_1;
                                break label$60;
                              }
                              $0_1 = 31;
                              label$103: {
                                if ($2_1 >>> 0 > 16777215 >>> 0) {
                                  break label$103;
                                }
                                $0_1 = ($2_1 >>> 8) | 0;
                                $1369_1 = $0_1;
                                $0_1 = ((((($0_1 + 1048320) | 0) >>> 16) | 0) & 8) | 0;
                                $5_1 = ($1369_1 << $0_1) | 0;
                                $1376_1 = $5_1;
                                $5_1 = ((((($5_1 + 520192) | 0) >>> 16) | 0) & 4) | 0;
                                $6_1 = ($1376_1 << $5_1) | 0;
                                $1383_1 = $6_1;
                                $6_1 = ((((($6_1 + 245760) | 0) >>> 16) | 0) & 2) | 0;
                                $0_1 =
                                  ((((($1383_1 << $6_1) | 0) >>> 15) | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0)) | 0;
                                $0_1 =
                                  ((($0_1 << 1) | 0 | (((($2_1 >>> (($0_1 + 21) | 0)) | 0) & 1) | 0) | 0) +
                                    28) |
                                  0;
                              }
                              i64toi32_i32$1 = $4_1;
                              i64toi32_i32$0 = 0;
                              HEAP32[(($4_1 + 16) | 0) >> 2] = 0;
                              HEAP32[(($4_1 + 20) | 0) >> 2] = i64toi32_i32$0;
                              HEAP32[(($4_1 + 28) | 0) >> 2] = $0_1;
                              $5_1 = ((($0_1 << 2) | 0) + 23056) | 0;
                              label$104: {
                                label$105: {
                                  $6_1 = HEAP32[((0 + 22756) | 0) >> 2] | 0;
                                  $8_1 = (1 << $0_1) | 0;
                                  if (($6_1 & $8_1) | 0) {
                                    break label$105;
                                  }
                                  HEAP32[((0 + 22756) | 0) >> 2] = $6_1 | $8_1 | 0;
                                  HEAP32[$5_1 >> 2] = $4_1;
                                  HEAP32[(($4_1 + 24) | 0) >> 2] = $5_1;
                                  break label$104;
                                }
                                $0_1 =
                                  ($2_1 << (($0_1 | 0) == (31 | 0) ? 0 : (25 - (($0_1 >>> 1) | 0)) | 0)) | 0;
                                $6_1 = HEAP32[$5_1 >> 2] | 0;
                                label$106: while (1) {
                                  $5_1 = $6_1;
                                  if ((((HEAP32[(($5_1 + 4) | 0) >> 2] | 0) & -8) | 0 | 0) == ($2_1 | 0)) {
                                    break label$69;
                                  }
                                  $6_1 = ($0_1 >>> 29) | 0;
                                  $0_1 = ($0_1 << 1) | 0;
                                  $8_1 = ((($5_1 + (($6_1 & 4) | 0)) | 0) + 16) | 0;
                                  $6_1 = HEAP32[$8_1 >> 2] | 0;
                                  if ($6_1) {
                                    continue label$106;
                                  }
                                  break label$106;
                                }
                                HEAP32[$8_1 >> 2] = $4_1;
                                HEAP32[(($4_1 + 24) | 0) >> 2] = $5_1;
                              }
                              HEAP32[(($4_1 + 12) | 0) >> 2] = $4_1;
                              HEAP32[(($4_1 + 8) | 0) >> 2] = $4_1;
                              break label$60;
                            }
                            $0_1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
                            HEAP32[(($0_1 + 12) | 0) >> 2] = $3_1;
                            HEAP32[(($4_1 + 8) | 0) >> 2] = $3_1;
                            HEAP32[(($3_1 + 24) | 0) >> 2] = 0;
                            HEAP32[(($3_1 + 12) | 0) >> 2] = $4_1;
                            HEAP32[(($3_1 + 8) | 0) >> 2] = $0_1;
                          }
                          $0_1 = ($12_1 + 8) | 0;
                          break label$1;
                        }
                        $0_1 = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
                        HEAP32[(($0_1 + 12) | 0) >> 2] = $4_1;
                        HEAP32[(($5_1 + 8) | 0) >> 2] = $4_1;
                        HEAP32[(($4_1 + 24) | 0) >> 2] = 0;
                        HEAP32[(($4_1 + 12) | 0) >> 2] = $5_1;
                        HEAP32[(($4_1 + 8) | 0) >> 2] = $0_1;
                      }
                      $0_1 = HEAP32[((0 + 22764) | 0) >> 2] | 0;
                      if ($0_1 >>> 0 <= $3_1 >>> 0) {
                        break label$4;
                      }
                      $4_1 = ($0_1 - $3_1) | 0;
                      HEAP32[((0 + 22764) | 0) >> 2] = $4_1;
                      $0_1 = HEAP32[((0 + 22776) | 0) >> 2] | 0;
                      $5_1 = ($0_1 + $3_1) | 0;
                      HEAP32[((0 + 22776) | 0) >> 2] = $5_1;
                      HEAP32[(($5_1 + 4) | 0) >> 2] = $4_1 | 1 | 0;
                      HEAP32[(($0_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                      $0_1 = ($0_1 + 8) | 0;
                      break label$1;
                    }
                    HEAP32[($305() | 0) >> 2] = 48;
                    $0_1 = 0;
                    break label$1;
                  }
                  label$107: {
                    if (!$9_1) {
                      break label$107;
                    }
                    label$108: {
                      label$109: {
                        $5_1 = HEAP32[(($8_1 + 28) | 0) >> 2] | 0;
                        $0_1 = ((($5_1 << 2) | 0) + 23056) | 0;
                        if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
                          break label$109;
                        }
                        HEAP32[$0_1 >> 2] = $6_1;
                        if ($6_1) {
                          break label$108;
                        }
                        $7_1 = ($7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) | 0;
                        HEAP32[((0 + 22756) | 0) >> 2] = $7_1;
                        break label$107;
                      }
                      HEAP32[
                        (($9_1 + ((HEAP32[(($9_1 + 16) | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20)) | 0) >> 2
                      ] = $6_1;
                      if (!$6_1) {
                        break label$107;
                      }
                    }
                    HEAP32[(($6_1 + 24) | 0) >> 2] = $9_1;
                    label$110: {
                      $0_1 = HEAP32[(($8_1 + 16) | 0) >> 2] | 0;
                      if (!$0_1) {
                        break label$110;
                      }
                      HEAP32[(($6_1 + 16) | 0) >> 2] = $0_1;
                      HEAP32[(($0_1 + 24) | 0) >> 2] = $6_1;
                    }
                    $0_1 = HEAP32[(($8_1 + 20) | 0) >> 2] | 0;
                    if (!$0_1) {
                      break label$107;
                    }
                    HEAP32[(($6_1 + 20) | 0) >> 2] = $0_1;
                    HEAP32[(($0_1 + 24) | 0) >> 2] = $6_1;
                  }
                  label$111: {
                    label$112: {
                      if ($4_1 >>> 0 > 15 >>> 0) {
                        break label$112;
                      }
                      $0_1 = ($4_1 + $3_1) | 0;
                      HEAP32[(($8_1 + 4) | 0) >> 2] = $0_1 | 3 | 0;
                      $0_1 = ($8_1 + $0_1) | 0;
                      HEAP32[(($0_1 + 4) | 0) >> 2] = HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                      break label$111;
                    }
                    HEAP32[(($8_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                    HEAP32[(($12_1 + 4) | 0) >> 2] = $4_1 | 1 | 0;
                    HEAP32[(($12_1 + $4_1) | 0) >> 2] = $4_1;
                    label$113: {
                      if ($4_1 >>> 0 > 255 >>> 0) {
                        break label$113;
                      }
                      $4_1 = ($4_1 >>> 3) | 0;
                      $0_1 = ((($4_1 << 3) | 0) + 22792) | 0;
                      label$114: {
                        label$115: {
                          $5_1 = HEAP32[((0 + 22752) | 0) >> 2] | 0;
                          $4_1 = (1 << $4_1) | 0;
                          if (($5_1 & $4_1) | 0) {
                            break label$115;
                          }
                          HEAP32[((0 + 22752) | 0) >> 2] = $5_1 | $4_1 | 0;
                          $4_1 = $0_1;
                          break label$114;
                        }
                        $4_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                      }
                      HEAP32[(($0_1 + 8) | 0) >> 2] = $12_1;
                      HEAP32[(($4_1 + 12) | 0) >> 2] = $12_1;
                      HEAP32[(($12_1 + 12) | 0) >> 2] = $0_1;
                      HEAP32[(($12_1 + 8) | 0) >> 2] = $4_1;
                      break label$111;
                    }
                    $0_1 = 31;
                    label$116: {
                      if ($4_1 >>> 0 > 16777215 >>> 0) {
                        break label$116;
                      }
                      $0_1 = ($4_1 >>> 8) | 0;
                      $1616_1 = $0_1;
                      $0_1 = ((((($0_1 + 1048320) | 0) >>> 16) | 0) & 8) | 0;
                      $5_1 = ($1616_1 << $0_1) | 0;
                      $1623_1 = $5_1;
                      $5_1 = ((((($5_1 + 520192) | 0) >>> 16) | 0) & 4) | 0;
                      $3_1 = ($1623_1 << $5_1) | 0;
                      $1630_1 = $3_1;
                      $3_1 = ((((($3_1 + 245760) | 0) >>> 16) | 0) & 2) | 0;
                      $0_1 = ((((($1630_1 << $3_1) | 0) >>> 15) | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0)) | 0;
                      $0_1 =
                        ((($0_1 << 1) | 0 | (((($4_1 >>> (($0_1 + 21) | 0)) | 0) & 1) | 0) | 0) + 28) | 0;
                    }
                    HEAP32[(($12_1 + 28) | 0) >> 2] = $0_1;
                    i64toi32_i32$1 = $12_1;
                    i64toi32_i32$0 = 0;
                    HEAP32[(($12_1 + 16) | 0) >> 2] = 0;
                    HEAP32[(($12_1 + 20) | 0) >> 2] = i64toi32_i32$0;
                    $5_1 = ((($0_1 << 2) | 0) + 23056) | 0;
                    label$117: {
                      label$118: {
                        label$119: {
                          $3_1 = (1 << $0_1) | 0;
                          if (($7_1 & $3_1) | 0) {
                            break label$119;
                          }
                          HEAP32[((0 + 22756) | 0) >> 2] = $7_1 | $3_1 | 0;
                          HEAP32[$5_1 >> 2] = $12_1;
                          HEAP32[(($12_1 + 24) | 0) >> 2] = $5_1;
                          break label$118;
                        }
                        $0_1 = ($4_1 << (($0_1 | 0) == (31 | 0) ? 0 : (25 - (($0_1 >>> 1) | 0)) | 0)) | 0;
                        $3_1 = HEAP32[$5_1 >> 2] | 0;
                        label$120: while (1) {
                          $5_1 = $3_1;
                          if ((((HEAP32[(($5_1 + 4) | 0) >> 2] | 0) & -8) | 0 | 0) == ($4_1 | 0)) {
                            break label$117;
                          }
                          $3_1 = ($0_1 >>> 29) | 0;
                          $0_1 = ($0_1 << 1) | 0;
                          $6_1 = ((($5_1 + (($3_1 & 4) | 0)) | 0) + 16) | 0;
                          $3_1 = HEAP32[$6_1 >> 2] | 0;
                          if ($3_1) {
                            continue label$120;
                          }
                          break label$120;
                        }
                        HEAP32[$6_1 >> 2] = $12_1;
                        HEAP32[(($12_1 + 24) | 0) >> 2] = $5_1;
                      }
                      HEAP32[(($12_1 + 12) | 0) >> 2] = $12_1;
                      HEAP32[(($12_1 + 8) | 0) >> 2] = $12_1;
                      break label$111;
                    }
                    $0_1 = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
                    HEAP32[(($0_1 + 12) | 0) >> 2] = $12_1;
                    HEAP32[(($5_1 + 8) | 0) >> 2] = $12_1;
                    HEAP32[(($12_1 + 24) | 0) >> 2] = 0;
                    HEAP32[(($12_1 + 12) | 0) >> 2] = $5_1;
                    HEAP32[(($12_1 + 8) | 0) >> 2] = $0_1;
                  }
                  $0_1 = ($8_1 + 8) | 0;
                  break label$1;
                }
                label$121: {
                  if (!$11_1) {
                    break label$121;
                  }
                  label$122: {
                    label$123: {
                      $5_1 = HEAP32[(($6_1 + 28) | 0) >> 2] | 0;
                      $0_1 = ((($5_1 << 2) | 0) + 23056) | 0;
                      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
                        break label$123;
                      }
                      HEAP32[$0_1 >> 2] = $8_1;
                      if ($8_1) {
                        break label$122;
                      }
                      HEAP32[((0 + 22756) | 0) >> 2] = ($9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) | 0;
                      break label$121;
                    }
                    HEAP32[
                      (($11_1 + ((HEAP32[(($11_1 + 16) | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20)) | 0) >> 2
                    ] = $8_1;
                    if (!$8_1) {
                      break label$121;
                    }
                  }
                  HEAP32[(($8_1 + 24) | 0) >> 2] = $11_1;
                  label$124: {
                    $0_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                    if (!$0_1) {
                      break label$124;
                    }
                    HEAP32[(($8_1 + 16) | 0) >> 2] = $0_1;
                    HEAP32[(($0_1 + 24) | 0) >> 2] = $8_1;
                  }
                  $0_1 = HEAP32[(($6_1 + 20) | 0) >> 2] | 0;
                  if (!$0_1) {
                    break label$121;
                  }
                  HEAP32[(($8_1 + 20) | 0) >> 2] = $0_1;
                  HEAP32[(($0_1 + 24) | 0) >> 2] = $8_1;
                }
                label$125: {
                  label$126: {
                    if ($4_1 >>> 0 > 15 >>> 0) {
                      break label$126;
                    }
                    $0_1 = ($4_1 + $3_1) | 0;
                    HEAP32[(($6_1 + 4) | 0) >> 2] = $0_1 | 3 | 0;
                    $0_1 = ($6_1 + $0_1) | 0;
                    HEAP32[(($0_1 + 4) | 0) >> 2] = HEAP32[(($0_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                    break label$125;
                  }
                  HEAP32[(($6_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                  HEAP32[(($10_1 + 4) | 0) >> 2] = $4_1 | 1 | 0;
                  HEAP32[(($10_1 + $4_1) | 0) >> 2] = $4_1;
                  label$127: {
                    if (!$7_1) {
                      break label$127;
                    }
                    $3_1 = ($7_1 >>> 3) | 0;
                    $5_1 = ((($3_1 << 3) | 0) + 22792) | 0;
                    $0_1 = HEAP32[((0 + 22772) | 0) >> 2] | 0;
                    label$128: {
                      label$129: {
                        $3_1 = (1 << $3_1) | 0;
                        if (($3_1 & $2_1) | 0) {
                          break label$129;
                        }
                        HEAP32[((0 + 22752) | 0) >> 2] = $3_1 | $2_1 | 0;
                        $3_1 = $5_1;
                        break label$128;
                      }
                      $3_1 = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
                    }
                    HEAP32[(($5_1 + 8) | 0) >> 2] = $0_1;
                    HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
                    HEAP32[(($0_1 + 12) | 0) >> 2] = $5_1;
                    HEAP32[(($0_1 + 8) | 0) >> 2] = $3_1;
                  }
                  HEAP32[((0 + 22772) | 0) >> 2] = $10_1;
                  HEAP32[((0 + 22760) | 0) >> 2] = $4_1;
                }
                $0_1 = ($6_1 + 8) | 0;
              }
              global$0 = ($1_1 + 16) | 0;
              return $0_1 | 0;
            }

            function $1699($0_1) {
              $0_1 = $0_1 | 0;
              var $2_1 = 0,
                $6_1 = 0,
                $1_1 = 0,
                $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $379_1 = 0,
                $386_1 = 0,
                $393_1 = 0;
              label$1: {
                if (!$0_1) {
                  break label$1;
                }
                $1_1 = ($0_1 + -8) | 0;
                $2_1 = HEAP32[(($0_1 + -4) | 0) >> 2] | 0;
                $0_1 = ($2_1 & -8) | 0;
                $3_1 = ($1_1 + $0_1) | 0;
                label$2: {
                  if (($2_1 & 1) | 0) {
                    break label$2;
                  }
                  if (!(($2_1 & 3) | 0)) {
                    break label$1;
                  }
                  $2_1 = HEAP32[$1_1 >> 2] | 0;
                  $1_1 = ($1_1 - $2_1) | 0;
                  $4_1 = HEAP32[((0 + 22768) | 0) >> 2] | 0;
                  if ($1_1 >>> 0 < $4_1 >>> 0) {
                    break label$1;
                  }
                  $0_1 = ($2_1 + $0_1) | 0;
                  label$3: {
                    if ((HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
                      break label$3;
                    }
                    label$4: {
                      if ($2_1 >>> 0 > 255 >>> 0) {
                        break label$4;
                      }
                      $4_1 = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                      $5_1 = ($2_1 >>> 3) | 0;
                      $6_1 = ((($5_1 << 3) | 0) + 22792) | 0;
                      label$5: {
                        $2_1 = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
                        if (($2_1 | 0) != ($4_1 | 0)) {
                          break label$5;
                        }
                        HEAP32[((0 + 22752) | 0) >> 2] =
                          ((HEAP32[((0 + 22752) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) |
                          0;
                        break label$2;
                      }
                      HEAP32[(($4_1 + 12) | 0) >> 2] = $2_1;
                      HEAP32[(($2_1 + 8) | 0) >> 2] = $4_1;
                      break label$2;
                    }
                    $7_1 = HEAP32[(($1_1 + 24) | 0) >> 2] | 0;
                    label$6: {
                      label$7: {
                        $6_1 = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
                        if (($6_1 | 0) == ($1_1 | 0)) {
                          break label$7;
                        }
                        $2_1 = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                        HEAP32[(($2_1 + 12) | 0) >> 2] = $6_1;
                        HEAP32[(($6_1 + 8) | 0) >> 2] = $2_1;
                        break label$6;
                      }
                      label$8: {
                        $2_1 = ($1_1 + 20) | 0;
                        $4_1 = HEAP32[$2_1 >> 2] | 0;
                        if ($4_1) {
                          break label$8;
                        }
                        $2_1 = ($1_1 + 16) | 0;
                        $4_1 = HEAP32[$2_1 >> 2] | 0;
                        if ($4_1) {
                          break label$8;
                        }
                        $6_1 = 0;
                        break label$6;
                      }
                      label$9: while (1) {
                        $5_1 = $2_1;
                        $6_1 = $4_1;
                        $2_1 = ($6_1 + 20) | 0;
                        $4_1 = HEAP32[$2_1 >> 2] | 0;
                        if ($4_1) {
                          continue label$9;
                        }
                        $2_1 = ($6_1 + 16) | 0;
                        $4_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$9;
                        }
                        break label$9;
                      }
                      HEAP32[$5_1 >> 2] = 0;
                    }
                    if (!$7_1) {
                      break label$2;
                    }
                    label$10: {
                      label$11: {
                        $4_1 = HEAP32[(($1_1 + 28) | 0) >> 2] | 0;
                        $2_1 = ((($4_1 << 2) | 0) + 23056) | 0;
                        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
                          break label$11;
                        }
                        HEAP32[$2_1 >> 2] = $6_1;
                        if ($6_1) {
                          break label$10;
                        }
                        HEAP32[((0 + 22756) | 0) >> 2] =
                          ((HEAP32[((0 + 22756) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0)) |
                          0;
                        break label$2;
                      }
                      HEAP32[
                        (($7_1 + ((HEAP32[(($7_1 + 16) | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20)) | 0) >> 2
                      ] = $6_1;
                      if (!$6_1) {
                        break label$2;
                      }
                    }
                    HEAP32[(($6_1 + 24) | 0) >> 2] = $7_1;
                    label$12: {
                      $2_1 = HEAP32[(($1_1 + 16) | 0) >> 2] | 0;
                      if (!$2_1) {
                        break label$12;
                      }
                      HEAP32[(($6_1 + 16) | 0) >> 2] = $2_1;
                      HEAP32[(($2_1 + 24) | 0) >> 2] = $6_1;
                    }
                    $2_1 = HEAP32[(($1_1 + 20) | 0) >> 2] | 0;
                    if (!$2_1) {
                      break label$2;
                    }
                    HEAP32[(($6_1 + 20) | 0) >> 2] = $2_1;
                    HEAP32[(($2_1 + 24) | 0) >> 2] = $6_1;
                    break label$2;
                  }
                  $2_1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
                  if ((($2_1 & 3) | 0 | 0) != (3 | 0)) {
                    break label$2;
                  }
                  HEAP32[((0 + 22760) | 0) >> 2] = $0_1;
                  HEAP32[(($3_1 + 4) | 0) >> 2] = ($2_1 & -2) | 0;
                  HEAP32[(($1_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                  HEAP32[(($1_1 + $0_1) | 0) >> 2] = $0_1;
                  return;
                }
                if ($3_1 >>> 0 <= $1_1 >>> 0) {
                  break label$1;
                }
                $2_1 = HEAP32[(($3_1 + 4) | 0) >> 2] | 0;
                if (!(($2_1 & 1) | 0)) {
                  break label$1;
                }
                label$13: {
                  label$14: {
                    if (($2_1 & 2) | 0) {
                      break label$14;
                    }
                    label$15: {
                      if ((HEAP32[((0 + 22776) | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
                        break label$15;
                      }
                      HEAP32[((0 + 22776) | 0) >> 2] = $1_1;
                      $0_1 = ((HEAP32[((0 + 22764) | 0) >> 2] | 0) + $0_1) | 0;
                      HEAP32[((0 + 22764) | 0) >> 2] = $0_1;
                      HEAP32[(($1_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                      if (($1_1 | 0) != (HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0)) {
                        break label$1;
                      }
                      HEAP32[((0 + 22760) | 0) >> 2] = 0;
                      HEAP32[((0 + 22772) | 0) >> 2] = 0;
                      return;
                    }
                    label$16: {
                      if ((HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
                        break label$16;
                      }
                      HEAP32[((0 + 22772) | 0) >> 2] = $1_1;
                      $0_1 = ((HEAP32[((0 + 22760) | 0) >> 2] | 0) + $0_1) | 0;
                      HEAP32[((0 + 22760) | 0) >> 2] = $0_1;
                      HEAP32[(($1_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                      HEAP32[(($1_1 + $0_1) | 0) >> 2] = $0_1;
                      return;
                    }
                    $0_1 = ((($2_1 & -8) | 0) + $0_1) | 0;
                    label$17: {
                      label$18: {
                        if ($2_1 >>> 0 > 255 >>> 0) {
                          break label$18;
                        }
                        $4_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
                        $5_1 = ($2_1 >>> 3) | 0;
                        $6_1 = ((($5_1 << 3) | 0) + 22792) | 0;
                        label$19: {
                          $2_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
                          if (($2_1 | 0) != ($4_1 | 0)) {
                            break label$19;
                          }
                          HEAP32[((0 + 22752) | 0) >> 2] =
                            ((HEAP32[((0 + 22752) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) |
                            0;
                          break label$17;
                        }
                        HEAP32[(($4_1 + 12) | 0) >> 2] = $2_1;
                        HEAP32[(($2_1 + 8) | 0) >> 2] = $4_1;
                        break label$17;
                      }
                      $7_1 = HEAP32[(($3_1 + 24) | 0) >> 2] | 0;
                      label$20: {
                        label$21: {
                          $6_1 = HEAP32[(($3_1 + 12) | 0) >> 2] | 0;
                          if (($6_1 | 0) == ($3_1 | 0)) {
                            break label$21;
                          }
                          $2_1 = HEAP32[(($3_1 + 8) | 0) >> 2] | 0;
                          HEAP32[((0 + 22768) | 0) >> 2] | 0;
                          HEAP32[(($2_1 + 12) | 0) >> 2] = $6_1;
                          HEAP32[(($6_1 + 8) | 0) >> 2] = $2_1;
                          break label$20;
                        }
                        label$22: {
                          $2_1 = ($3_1 + 20) | 0;
                          $4_1 = HEAP32[$2_1 >> 2] | 0;
                          if ($4_1) {
                            break label$22;
                          }
                          $2_1 = ($3_1 + 16) | 0;
                          $4_1 = HEAP32[$2_1 >> 2] | 0;
                          if ($4_1) {
                            break label$22;
                          }
                          $6_1 = 0;
                          break label$20;
                        }
                        label$23: while (1) {
                          $5_1 = $2_1;
                          $6_1 = $4_1;
                          $2_1 = ($6_1 + 20) | 0;
                          $4_1 = HEAP32[$2_1 >> 2] | 0;
                          if ($4_1) {
                            continue label$23;
                          }
                          $2_1 = ($6_1 + 16) | 0;
                          $4_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                          if ($4_1) {
                            continue label$23;
                          }
                          break label$23;
                        }
                        HEAP32[$5_1 >> 2] = 0;
                      }
                      if (!$7_1) {
                        break label$17;
                      }
                      label$24: {
                        label$25: {
                          $4_1 = HEAP32[(($3_1 + 28) | 0) >> 2] | 0;
                          $2_1 = ((($4_1 << 2) | 0) + 23056) | 0;
                          if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
                            break label$25;
                          }
                          HEAP32[$2_1 >> 2] = $6_1;
                          if ($6_1) {
                            break label$24;
                          }
                          HEAP32[((0 + 22756) | 0) >> 2] =
                            ((HEAP32[((0 + 22756) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0)) |
                            0;
                          break label$17;
                        }
                        HEAP32[
                          (($7_1 + ((HEAP32[(($7_1 + 16) | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20)) | 0) >>
                            2
                        ] = $6_1;
                        if (!$6_1) {
                          break label$17;
                        }
                      }
                      HEAP32[(($6_1 + 24) | 0) >> 2] = $7_1;
                      label$26: {
                        $2_1 = HEAP32[(($3_1 + 16) | 0) >> 2] | 0;
                        if (!$2_1) {
                          break label$26;
                        }
                        HEAP32[(($6_1 + 16) | 0) >> 2] = $2_1;
                        HEAP32[(($2_1 + 24) | 0) >> 2] = $6_1;
                      }
                      $2_1 = HEAP32[(($3_1 + 20) | 0) >> 2] | 0;
                      if (!$2_1) {
                        break label$17;
                      }
                      HEAP32[(($6_1 + 20) | 0) >> 2] = $2_1;
                      HEAP32[(($2_1 + 24) | 0) >> 2] = $6_1;
                    }
                    HEAP32[(($1_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                    HEAP32[(($1_1 + $0_1) | 0) >> 2] = $0_1;
                    if (($1_1 | 0) != (HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0)) {
                      break label$13;
                    }
                    HEAP32[((0 + 22760) | 0) >> 2] = $0_1;
                    return;
                  }
                  HEAP32[(($3_1 + 4) | 0) >> 2] = ($2_1 & -2) | 0;
                  HEAP32[(($1_1 + 4) | 0) >> 2] = $0_1 | 1 | 0;
                  HEAP32[(($1_1 + $0_1) | 0) >> 2] = $0_1;
                }
                label$27: {
                  if ($0_1 >>> 0 > 255 >>> 0) {
                    break label$27;
                  }
                  $2_1 = ($0_1 >>> 3) | 0;
                  $0_1 = ((($2_1 << 3) | 0) + 22792) | 0;
                  label$28: {
                    label$29: {
                      $4_1 = HEAP32[((0 + 22752) | 0) >> 2] | 0;
                      $2_1 = (1 << $2_1) | 0;
                      if (($4_1 & $2_1) | 0) {
                        break label$29;
                      }
                      HEAP32[((0 + 22752) | 0) >> 2] = $4_1 | $2_1 | 0;
                      $2_1 = $0_1;
                      break label$28;
                    }
                    $2_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                  }
                  HEAP32[(($0_1 + 8) | 0) >> 2] = $1_1;
                  HEAP32[(($2_1 + 12) | 0) >> 2] = $1_1;
                  HEAP32[(($1_1 + 12) | 0) >> 2] = $0_1;
                  HEAP32[(($1_1 + 8) | 0) >> 2] = $2_1;
                  return;
                }
                $2_1 = 31;
                label$30: {
                  if ($0_1 >>> 0 > 16777215 >>> 0) {
                    break label$30;
                  }
                  $2_1 = ($0_1 >>> 8) | 0;
                  $379_1 = $2_1;
                  $2_1 = ((((($2_1 + 1048320) | 0) >>> 16) | 0) & 8) | 0;
                  $4_1 = ($379_1 << $2_1) | 0;
                  $386_1 = $4_1;
                  $4_1 = ((((($4_1 + 520192) | 0) >>> 16) | 0) & 4) | 0;
                  $6_1 = ($386_1 << $4_1) | 0;
                  $393_1 = $6_1;
                  $6_1 = ((((($6_1 + 245760) | 0) >>> 16) | 0) & 2) | 0;
                  $2_1 = ((((($393_1 << $6_1) | 0) >>> 15) | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0)) | 0;
                  $2_1 = ((($2_1 << 1) | 0 | (((($0_1 >>> (($2_1 + 21) | 0)) | 0) & 1) | 0) | 0) + 28) | 0;
                }
                HEAP32[(($1_1 + 16) | 0) >> 2] = 0;
                HEAP32[(($1_1 + 20) | 0) >> 2] = 0;
                HEAP32[(($1_1 + 28) | 0) >> 2] = $2_1;
                $4_1 = ((($2_1 << 2) | 0) + 23056) | 0;
                label$31: {
                  label$32: {
                    label$33: {
                      label$34: {
                        $6_1 = HEAP32[((0 + 22756) | 0) >> 2] | 0;
                        $3_1 = (1 << $2_1) | 0;
                        if (($6_1 & $3_1) | 0) {
                          break label$34;
                        }
                        HEAP32[((0 + 22756) | 0) >> 2] = $6_1 | $3_1 | 0;
                        HEAP32[$4_1 >> 2] = $1_1;
                        HEAP32[(($1_1 + 24) | 0) >> 2] = $4_1;
                        break label$33;
                      }
                      $2_1 = ($0_1 << (($2_1 | 0) == (31 | 0) ? 0 : (25 - (($2_1 >>> 1) | 0)) | 0)) | 0;
                      $6_1 = HEAP32[$4_1 >> 2] | 0;
                      label$35: while (1) {
                        $4_1 = $6_1;
                        if ((((HEAP32[(($6_1 + 4) | 0) >> 2] | 0) & -8) | 0 | 0) == ($0_1 | 0)) {
                          break label$32;
                        }
                        $6_1 = ($2_1 >>> 29) | 0;
                        $2_1 = ($2_1 << 1) | 0;
                        $3_1 = ((($4_1 + (($6_1 & 4) | 0)) | 0) + 16) | 0;
                        $6_1 = HEAP32[$3_1 >> 2] | 0;
                        if ($6_1) {
                          continue label$35;
                        }
                        break label$35;
                      }
                      HEAP32[$3_1 >> 2] = $1_1;
                      HEAP32[(($1_1 + 24) | 0) >> 2] = $4_1;
                    }
                    HEAP32[(($1_1 + 12) | 0) >> 2] = $1_1;
                    HEAP32[(($1_1 + 8) | 0) >> 2] = $1_1;
                    break label$31;
                  }
                  $0_1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
                  HEAP32[(($0_1 + 12) | 0) >> 2] = $1_1;
                  HEAP32[(($4_1 + 8) | 0) >> 2] = $1_1;
                  HEAP32[(($1_1 + 24) | 0) >> 2] = 0;
                  HEAP32[(($1_1 + 12) | 0) >> 2] = $4_1;
                  HEAP32[(($1_1 + 8) | 0) >> 2] = $0_1;
                }
                $1_1 = ((HEAP32[((0 + 22784) | 0) >> 2] | 0) + -1) | 0;
                HEAP32[((0 + 22784) | 0) >> 2] = $1_1 ? $1_1 : -1;
              }
            }

            function $1700($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $2_1 = 0,
                $3_1 = 0;
              label$1: {
                if ($0_1) {
                  break label$1;
                }
                return $1698($1_1 | 0) | 0 | 0;
              }
              label$2: {
                if ($1_1 >>> 0 < -64 >>> 0) {
                  break label$2;
                }
                HEAP32[($305() | 0) >> 2] = 48;
                return 0 | 0;
              }
              label$3: {
                $2_1 =
                  $1701(
                    ($0_1 + -8) | 0 | 0,
                    ($1_1 >>> 0 < 11 >>> 0 ? 16 : ((($1_1 + 11) | 0) & -8) | 0) | 0
                  ) | 0;
                if (!$2_1) {
                  break label$3;
                }
                return ($2_1 + 8) | 0 | 0;
              }
              label$4: {
                $2_1 = $1698($1_1 | 0) | 0;
                if ($2_1) {
                  break label$4;
                }
                return 0 | 0;
              }
              $3_1 = HEAP32[(($0_1 + -4) | 0) >> 2] | 0;
              $3_1 = ((($3_1 & 3) | 0 ? -4 : -8) + (($3_1 & -8) | 0)) | 0;
              $1707($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
              $1699($0_1 | 0);
              return $2_1 | 0;
            }

            function $1701($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $6_1 = 0,
                $5_1 = 0,
                $2_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $8_1 = 0;
              $2_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
              $3_1 = ($2_1 & -8) | 0;
              label$1: {
                label$2: {
                  if (($2_1 & 3) | 0) {
                    break label$2;
                  }
                  label$3: {
                    if ($1_1 >>> 0 >= 256 >>> 0) {
                      break label$3;
                    }
                    return 0 | 0;
                  }
                  label$4: {
                    if ($3_1 >>> 0 < (($1_1 + 4) | 0) >>> 0) {
                      break label$4;
                    }
                    $4_1 = $0_1;
                    if (
                      (($3_1 - $1_1) | 0) >>> 0 <=
                      (((HEAP32[((0 + 23232) | 0) >> 2] | 0) << 1) | 0) >>> 0
                    ) {
                      break label$1;
                    }
                  }
                  return 0 | 0;
                }
                $5_1 = ($0_1 + $3_1) | 0;
                label$5: {
                  label$6: {
                    if ($3_1 >>> 0 < $1_1 >>> 0) {
                      break label$6;
                    }
                    $3_1 = ($3_1 - $1_1) | 0;
                    if ($3_1 >>> 0 < 16 >>> 0) {
                      break label$5;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 & 1) | 0 | $1_1 | 0 | 2 | 0;
                    $1_1 = ($0_1 + $1_1) | 0;
                    HEAP32[(($1_1 + 4) | 0) >> 2] = $3_1 | 3 | 0;
                    HEAP32[(($5_1 + 4) | 0) >> 2] = HEAP32[(($5_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                    $1702($1_1 | 0, $3_1 | 0);
                    break label$5;
                  }
                  $4_1 = 0;
                  label$7: {
                    if ((HEAP32[((0 + 22776) | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
                      break label$7;
                    }
                    $3_1 = ((HEAP32[((0 + 22764) | 0) >> 2] | 0) + $3_1) | 0;
                    if ($3_1 >>> 0 <= $1_1 >>> 0) {
                      break label$1;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 & 1) | 0 | $1_1 | 0 | 2 | 0;
                    $2_1 = ($0_1 + $1_1) | 0;
                    $1_1 = ($3_1 - $1_1) | 0;
                    HEAP32[(($2_1 + 4) | 0) >> 2] = $1_1 | 1 | 0;
                    HEAP32[((0 + 22764) | 0) >> 2] = $1_1;
                    HEAP32[((0 + 22776) | 0) >> 2] = $2_1;
                    break label$5;
                  }
                  label$8: {
                    if ((HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
                      break label$8;
                    }
                    $4_1 = 0;
                    $3_1 = ((HEAP32[((0 + 22760) | 0) >> 2] | 0) + $3_1) | 0;
                    if ($3_1 >>> 0 < $1_1 >>> 0) {
                      break label$1;
                    }
                    label$9: {
                      label$10: {
                        $4_1 = ($3_1 - $1_1) | 0;
                        if ($4_1 >>> 0 < 16 >>> 0) {
                          break label$10;
                        }
                        HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 & 1) | 0 | $1_1 | 0 | 2 | 0;
                        $1_1 = ($0_1 + $1_1) | 0;
                        HEAP32[(($1_1 + 4) | 0) >> 2] = $4_1 | 1 | 0;
                        $3_1 = ($0_1 + $3_1) | 0;
                        HEAP32[$3_1 >> 2] = $4_1;
                        HEAP32[(($3_1 + 4) | 0) >> 2] = ((HEAP32[(($3_1 + 4) | 0) >> 2] | 0) & -2) | 0;
                        break label$9;
                      }
                      HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 & 1) | 0 | $3_1 | 0 | 2 | 0;
                      $1_1 = ($0_1 + $3_1) | 0;
                      HEAP32[(($1_1 + 4) | 0) >> 2] = HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                      $4_1 = 0;
                      $1_1 = 0;
                    }
                    HEAP32[((0 + 22772) | 0) >> 2] = $1_1;
                    HEAP32[((0 + 22760) | 0) >> 2] = $4_1;
                    break label$5;
                  }
                  $4_1 = 0;
                  $6_1 = HEAP32[(($5_1 + 4) | 0) >> 2] | 0;
                  if (($6_1 & 2) | 0) {
                    break label$1;
                  }
                  $7_1 = ((($6_1 & -8) | 0) + $3_1) | 0;
                  if ($7_1 >>> 0 < $1_1 >>> 0) {
                    break label$1;
                  }
                  $8_1 = ($7_1 - $1_1) | 0;
                  label$11: {
                    label$12: {
                      if ($6_1 >>> 0 > 255 >>> 0) {
                        break label$12;
                      }
                      $3_1 = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
                      $9_1 = ($6_1 >>> 3) | 0;
                      $6_1 = ((($9_1 << 3) | 0) + 22792) | 0;
                      label$13: {
                        $4_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
                        if (($4_1 | 0) != ($3_1 | 0)) {
                          break label$13;
                        }
                        HEAP32[((0 + 22752) | 0) >> 2] =
                          ((HEAP32[((0 + 22752) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0)) |
                          0;
                        break label$11;
                      }
                      HEAP32[(($3_1 + 12) | 0) >> 2] = $4_1;
                      HEAP32[(($4_1 + 8) | 0) >> 2] = $3_1;
                      break label$11;
                    }
                    $10_1 = HEAP32[(($5_1 + 24) | 0) >> 2] | 0;
                    label$14: {
                      label$15: {
                        $6_1 = HEAP32[(($5_1 + 12) | 0) >> 2] | 0;
                        if (($6_1 | 0) == ($5_1 | 0)) {
                          break label$15;
                        }
                        $3_1 = HEAP32[(($5_1 + 8) | 0) >> 2] | 0;
                        HEAP32[((0 + 22768) | 0) >> 2] | 0;
                        HEAP32[(($3_1 + 12) | 0) >> 2] = $6_1;
                        HEAP32[(($6_1 + 8) | 0) >> 2] = $3_1;
                        break label$14;
                      }
                      label$16: {
                        $3_1 = ($5_1 + 20) | 0;
                        $4_1 = HEAP32[$3_1 >> 2] | 0;
                        if ($4_1) {
                          break label$16;
                        }
                        $3_1 = ($5_1 + 16) | 0;
                        $4_1 = HEAP32[$3_1 >> 2] | 0;
                        if ($4_1) {
                          break label$16;
                        }
                        $6_1 = 0;
                        break label$14;
                      }
                      label$17: while (1) {
                        $9_1 = $3_1;
                        $6_1 = $4_1;
                        $3_1 = ($6_1 + 20) | 0;
                        $4_1 = HEAP32[$3_1 >> 2] | 0;
                        if ($4_1) {
                          continue label$17;
                        }
                        $3_1 = ($6_1 + 16) | 0;
                        $4_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$17;
                        }
                        break label$17;
                      }
                      HEAP32[$9_1 >> 2] = 0;
                    }
                    if (!$10_1) {
                      break label$11;
                    }
                    label$18: {
                      label$19: {
                        $4_1 = HEAP32[(($5_1 + 28) | 0) >> 2] | 0;
                        $3_1 = ((($4_1 << 2) | 0) + 23056) | 0;
                        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                          break label$19;
                        }
                        HEAP32[$3_1 >> 2] = $6_1;
                        if ($6_1) {
                          break label$18;
                        }
                        HEAP32[((0 + 22756) | 0) >> 2] =
                          ((HEAP32[((0 + 22756) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0)) |
                          0;
                        break label$11;
                      }
                      HEAP32[
                        (($10_1 + ((HEAP32[(($10_1 + 16) | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20)) | 0) >>
                          2
                      ] = $6_1;
                      if (!$6_1) {
                        break label$11;
                      }
                    }
                    HEAP32[(($6_1 + 24) | 0) >> 2] = $10_1;
                    label$20: {
                      $3_1 = HEAP32[(($5_1 + 16) | 0) >> 2] | 0;
                      if (!$3_1) {
                        break label$20;
                      }
                      HEAP32[(($6_1 + 16) | 0) >> 2] = $3_1;
                      HEAP32[(($3_1 + 24) | 0) >> 2] = $6_1;
                    }
                    $3_1 = HEAP32[(($5_1 + 20) | 0) >> 2] | 0;
                    if (!$3_1) {
                      break label$11;
                    }
                    HEAP32[(($6_1 + 20) | 0) >> 2] = $3_1;
                    HEAP32[(($3_1 + 24) | 0) >> 2] = $6_1;
                  }
                  label$21: {
                    if ($8_1 >>> 0 > 15 >>> 0) {
                      break label$21;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 & 1) | 0 | $7_1 | 0 | 2 | 0;
                    $1_1 = ($0_1 + $7_1) | 0;
                    HEAP32[(($1_1 + 4) | 0) >> 2] = HEAP32[(($1_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                    break label$5;
                  }
                  HEAP32[(($0_1 + 4) | 0) >> 2] = ($2_1 & 1) | 0 | $1_1 | 0 | 2 | 0;
                  $1_1 = ($0_1 + $1_1) | 0;
                  HEAP32[(($1_1 + 4) | 0) >> 2] = $8_1 | 3 | 0;
                  $3_1 = ($0_1 + $7_1) | 0;
                  HEAP32[(($3_1 + 4) | 0) >> 2] = HEAP32[(($3_1 + 4) | 0) >> 2] | 0 | 1 | 0;
                  $1702($1_1 | 0, $8_1 | 0);
                }
                $4_1 = $0_1;
              }
              return $4_1 | 0;
            }

            function $1702($0_1, $1_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              var $3_1 = 0,
                $6_1 = 0,
                $4_1 = 0,
                $2_1 = 0,
                $5_1 = 0,
                $7_1 = 0,
                $360_1 = 0,
                $367_1 = 0,
                $374_1 = 0;
              $2_1 = ($0_1 + $1_1) | 0;
              label$1: {
                label$2: {
                  $3_1 = HEAP32[(($0_1 + 4) | 0) >> 2] | 0;
                  if (($3_1 & 1) | 0) {
                    break label$2;
                  }
                  if (!(($3_1 & 3) | 0)) {
                    break label$1;
                  }
                  $3_1 = HEAP32[$0_1 >> 2] | 0;
                  $1_1 = ($3_1 + $1_1) | 0;
                  label$3: {
                    label$4: {
                      $0_1 = ($0_1 - $3_1) | 0;
                      if ((HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
                        break label$4;
                      }
                      label$5: {
                        if ($3_1 >>> 0 > 255 >>> 0) {
                          break label$5;
                        }
                        $4_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                        $5_1 = ($3_1 >>> 3) | 0;
                        $6_1 = ((($5_1 << 3) | 0) + 22792) | 0;
                        $3_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                        if (($3_1 | 0) != ($4_1 | 0)) {
                          break label$3;
                        }
                        HEAP32[((0 + 22752) | 0) >> 2] =
                          ((HEAP32[((0 + 22752) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) |
                          0;
                        break label$2;
                      }
                      $7_1 = HEAP32[(($0_1 + 24) | 0) >> 2] | 0;
                      label$6: {
                        label$7: {
                          $6_1 = HEAP32[(($0_1 + 12) | 0) >> 2] | 0;
                          if (($6_1 | 0) == ($0_1 | 0)) {
                            break label$7;
                          }
                          $3_1 = HEAP32[(($0_1 + 8) | 0) >> 2] | 0;
                          HEAP32[((0 + 22768) | 0) >> 2] | 0;
                          HEAP32[(($3_1 + 12) | 0) >> 2] = $6_1;
                          HEAP32[(($6_1 + 8) | 0) >> 2] = $3_1;
                          break label$6;
                        }
                        label$8: {
                          $3_1 = ($0_1 + 20) | 0;
                          $4_1 = HEAP32[$3_1 >> 2] | 0;
                          if ($4_1) {
                            break label$8;
                          }
                          $3_1 = ($0_1 + 16) | 0;
                          $4_1 = HEAP32[$3_1 >> 2] | 0;
                          if ($4_1) {
                            break label$8;
                          }
                          $6_1 = 0;
                          break label$6;
                        }
                        label$9: while (1) {
                          $5_1 = $3_1;
                          $6_1 = $4_1;
                          $3_1 = ($6_1 + 20) | 0;
                          $4_1 = HEAP32[$3_1 >> 2] | 0;
                          if ($4_1) {
                            continue label$9;
                          }
                          $3_1 = ($6_1 + 16) | 0;
                          $4_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                          if ($4_1) {
                            continue label$9;
                          }
                          break label$9;
                        }
                        HEAP32[$5_1 >> 2] = 0;
                      }
                      if (!$7_1) {
                        break label$2;
                      }
                      label$10: {
                        label$11: {
                          $4_1 = HEAP32[(($0_1 + 28) | 0) >> 2] | 0;
                          $3_1 = ((($4_1 << 2) | 0) + 23056) | 0;
                          if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
                            break label$11;
                          }
                          HEAP32[$3_1 >> 2] = $6_1;
                          if ($6_1) {
                            break label$10;
                          }
                          HEAP32[((0 + 22756) | 0) >> 2] =
                            ((HEAP32[((0 + 22756) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0)) |
                            0;
                          break label$2;
                        }
                        HEAP32[
                          (($7_1 + ((HEAP32[(($7_1 + 16) | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20)) | 0) >>
                            2
                        ] = $6_1;
                        if (!$6_1) {
                          break label$2;
                        }
                      }
                      HEAP32[(($6_1 + 24) | 0) >> 2] = $7_1;
                      label$12: {
                        $3_1 = HEAP32[(($0_1 + 16) | 0) >> 2] | 0;
                        if (!$3_1) {
                          break label$12;
                        }
                        HEAP32[(($6_1 + 16) | 0) >> 2] = $3_1;
                        HEAP32[(($3_1 + 24) | 0) >> 2] = $6_1;
                      }
                      $3_1 = HEAP32[(($0_1 + 20) | 0) >> 2] | 0;
                      if (!$3_1) {
                        break label$2;
                      }
                      HEAP32[(($6_1 + 20) | 0) >> 2] = $3_1;
                      HEAP32[(($3_1 + 24) | 0) >> 2] = $6_1;
                      break label$2;
                    }
                    $3_1 = HEAP32[(($2_1 + 4) | 0) >> 2] | 0;
                    if ((($3_1 & 3) | 0 | 0) != (3 | 0)) {
                      break label$2;
                    }
                    HEAP32[((0 + 22760) | 0) >> 2] = $1_1;
                    HEAP32[(($2_1 + 4) | 0) >> 2] = ($3_1 & -2) | 0;
                    HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1 | 1 | 0;
                    HEAP32[$2_1 >> 2] = $1_1;
                    return;
                  }
                  HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
                  HEAP32[(($3_1 + 8) | 0) >> 2] = $4_1;
                }
                label$13: {
                  label$14: {
                    $3_1 = HEAP32[(($2_1 + 4) | 0) >> 2] | 0;
                    if (($3_1 & 2) | 0) {
                      break label$14;
                    }
                    label$15: {
                      if ((HEAP32[((0 + 22776) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                        break label$15;
                      }
                      HEAP32[((0 + 22776) | 0) >> 2] = $0_1;
                      $1_1 = ((HEAP32[((0 + 22764) | 0) >> 2] | 0) + $1_1) | 0;
                      HEAP32[((0 + 22764) | 0) >> 2] = $1_1;
                      HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1 | 1 | 0;
                      if (($0_1 | 0) != (HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0)) {
                        break label$1;
                      }
                      HEAP32[((0 + 22760) | 0) >> 2] = 0;
                      HEAP32[((0 + 22772) | 0) >> 2] = 0;
                      return;
                    }
                    label$16: {
                      if ((HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
                        break label$16;
                      }
                      HEAP32[((0 + 22772) | 0) >> 2] = $0_1;
                      $1_1 = ((HEAP32[((0 + 22760) | 0) >> 2] | 0) + $1_1) | 0;
                      HEAP32[((0 + 22760) | 0) >> 2] = $1_1;
                      HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1 | 1 | 0;
                      HEAP32[(($0_1 + $1_1) | 0) >> 2] = $1_1;
                      return;
                    }
                    $1_1 = ((($3_1 & -8) | 0) + $1_1) | 0;
                    label$17: {
                      label$18: {
                        if ($3_1 >>> 0 > 255 >>> 0) {
                          break label$18;
                        }
                        $4_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
                        $5_1 = ($3_1 >>> 3) | 0;
                        $6_1 = ((($5_1 << 3) | 0) + 22792) | 0;
                        label$19: {
                          $3_1 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
                          if (($3_1 | 0) != ($4_1 | 0)) {
                            break label$19;
                          }
                          HEAP32[((0 + 22752) | 0) >> 2] =
                            ((HEAP32[((0 + 22752) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0)) |
                            0;
                          break label$17;
                        }
                        HEAP32[(($4_1 + 12) | 0) >> 2] = $3_1;
                        HEAP32[(($3_1 + 8) | 0) >> 2] = $4_1;
                        break label$17;
                      }
                      $7_1 = HEAP32[(($2_1 + 24) | 0) >> 2] | 0;
                      label$20: {
                        label$21: {
                          $6_1 = HEAP32[(($2_1 + 12) | 0) >> 2] | 0;
                          if (($6_1 | 0) == ($2_1 | 0)) {
                            break label$21;
                          }
                          $3_1 = HEAP32[(($2_1 + 8) | 0) >> 2] | 0;
                          HEAP32[((0 + 22768) | 0) >> 2] | 0;
                          HEAP32[(($3_1 + 12) | 0) >> 2] = $6_1;
                          HEAP32[(($6_1 + 8) | 0) >> 2] = $3_1;
                          break label$20;
                        }
                        label$22: {
                          $4_1 = ($2_1 + 20) | 0;
                          $3_1 = HEAP32[$4_1 >> 2] | 0;
                          if ($3_1) {
                            break label$22;
                          }
                          $4_1 = ($2_1 + 16) | 0;
                          $3_1 = HEAP32[$4_1 >> 2] | 0;
                          if ($3_1) {
                            break label$22;
                          }
                          $6_1 = 0;
                          break label$20;
                        }
                        label$23: while (1) {
                          $5_1 = $4_1;
                          $6_1 = $3_1;
                          $4_1 = ($3_1 + 20) | 0;
                          $3_1 = HEAP32[$4_1 >> 2] | 0;
                          if ($3_1) {
                            continue label$23;
                          }
                          $4_1 = ($6_1 + 16) | 0;
                          $3_1 = HEAP32[(($6_1 + 16) | 0) >> 2] | 0;
                          if ($3_1) {
                            continue label$23;
                          }
                          break label$23;
                        }
                        HEAP32[$5_1 >> 2] = 0;
                      }
                      if (!$7_1) {
                        break label$17;
                      }
                      label$24: {
                        label$25: {
                          $4_1 = HEAP32[(($2_1 + 28) | 0) >> 2] | 0;
                          $3_1 = ((($4_1 << 2) | 0) + 23056) | 0;
                          if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                            break label$25;
                          }
                          HEAP32[$3_1 >> 2] = $6_1;
                          if ($6_1) {
                            break label$24;
                          }
                          HEAP32[((0 + 22756) | 0) >> 2] =
                            ((HEAP32[((0 + 22756) | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0)) |
                            0;
                          break label$17;
                        }
                        HEAP32[
                          (($7_1 + ((HEAP32[(($7_1 + 16) | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20)) | 0) >>
                            2
                        ] = $6_1;
                        if (!$6_1) {
                          break label$17;
                        }
                      }
                      HEAP32[(($6_1 + 24) | 0) >> 2] = $7_1;
                      label$26: {
                        $3_1 = HEAP32[(($2_1 + 16) | 0) >> 2] | 0;
                        if (!$3_1) {
                          break label$26;
                        }
                        HEAP32[(($6_1 + 16) | 0) >> 2] = $3_1;
                        HEAP32[(($3_1 + 24) | 0) >> 2] = $6_1;
                      }
                      $3_1 = HEAP32[(($2_1 + 20) | 0) >> 2] | 0;
                      if (!$3_1) {
                        break label$17;
                      }
                      HEAP32[(($6_1 + 20) | 0) >> 2] = $3_1;
                      HEAP32[(($3_1 + 24) | 0) >> 2] = $6_1;
                    }
                    HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1 | 1 | 0;
                    HEAP32[(($0_1 + $1_1) | 0) >> 2] = $1_1;
                    if (($0_1 | 0) != (HEAP32[((0 + 22772) | 0) >> 2] | 0 | 0)) {
                      break label$13;
                    }
                    HEAP32[((0 + 22760) | 0) >> 2] = $1_1;
                    return;
                  }
                  HEAP32[(($2_1 + 4) | 0) >> 2] = ($3_1 & -2) | 0;
                  HEAP32[(($0_1 + 4) | 0) >> 2] = $1_1 | 1 | 0;
                  HEAP32[(($0_1 + $1_1) | 0) >> 2] = $1_1;
                }
                label$27: {
                  if ($1_1 >>> 0 > 255 >>> 0) {
                    break label$27;
                  }
                  $3_1 = ($1_1 >>> 3) | 0;
                  $1_1 = ((($3_1 << 3) | 0) + 22792) | 0;
                  label$28: {
                    label$29: {
                      $4_1 = HEAP32[((0 + 22752) | 0) >> 2] | 0;
                      $3_1 = (1 << $3_1) | 0;
                      if (($4_1 & $3_1) | 0) {
                        break label$29;
                      }
                      HEAP32[((0 + 22752) | 0) >> 2] = $4_1 | $3_1 | 0;
                      $3_1 = $1_1;
                      break label$28;
                    }
                    $3_1 = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                  }
                  HEAP32[(($1_1 + 8) | 0) >> 2] = $0_1;
                  HEAP32[(($3_1 + 12) | 0) >> 2] = $0_1;
                  HEAP32[(($0_1 + 12) | 0) >> 2] = $1_1;
                  HEAP32[(($0_1 + 8) | 0) >> 2] = $3_1;
                  return;
                }
                $3_1 = 31;
                label$30: {
                  if ($1_1 >>> 0 > 16777215 >>> 0) {
                    break label$30;
                  }
                  $3_1 = ($1_1 >>> 8) | 0;
                  $360_1 = $3_1;
                  $3_1 = ((((($3_1 + 1048320) | 0) >>> 16) | 0) & 8) | 0;
                  $4_1 = ($360_1 << $3_1) | 0;
                  $367_1 = $4_1;
                  $4_1 = ((((($4_1 + 520192) | 0) >>> 16) | 0) & 4) | 0;
                  $6_1 = ($367_1 << $4_1) | 0;
                  $374_1 = $6_1;
                  $6_1 = ((((($6_1 + 245760) | 0) >>> 16) | 0) & 2) | 0;
                  $3_1 = ((((($374_1 << $6_1) | 0) >>> 15) | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0)) | 0;
                  $3_1 = ((($3_1 << 1) | 0 | (((($1_1 >>> (($3_1 + 21) | 0)) | 0) & 1) | 0) | 0) + 28) | 0;
                }
                HEAP32[(($0_1 + 16) | 0) >> 2] = 0;
                HEAP32[(($0_1 + 20) | 0) >> 2] = 0;
                HEAP32[(($0_1 + 28) | 0) >> 2] = $3_1;
                $4_1 = ((($3_1 << 2) | 0) + 23056) | 0;
                label$31: {
                  label$32: {
                    label$33: {
                      $6_1 = HEAP32[((0 + 22756) | 0) >> 2] | 0;
                      $2_1 = (1 << $3_1) | 0;
                      if (($6_1 & $2_1) | 0) {
                        break label$33;
                      }
                      HEAP32[((0 + 22756) | 0) >> 2] = $6_1 | $2_1 | 0;
                      HEAP32[$4_1 >> 2] = $0_1;
                      HEAP32[(($0_1 + 24) | 0) >> 2] = $4_1;
                      break label$32;
                    }
                    $3_1 = ($1_1 << (($3_1 | 0) == (31 | 0) ? 0 : (25 - (($3_1 >>> 1) | 0)) | 0)) | 0;
                    $6_1 = HEAP32[$4_1 >> 2] | 0;
                    label$34: while (1) {
                      $4_1 = $6_1;
                      if ((((HEAP32[(($6_1 + 4) | 0) >> 2] | 0) & -8) | 0 | 0) == ($1_1 | 0)) {
                        break label$31;
                      }
                      $6_1 = ($3_1 >>> 29) | 0;
                      $3_1 = ($3_1 << 1) | 0;
                      $2_1 = ((($4_1 + (($6_1 & 4) | 0)) | 0) + 16) | 0;
                      $6_1 = HEAP32[$2_1 >> 2] | 0;
                      if ($6_1) {
                        continue label$34;
                      }
                      break label$34;
                    }
                    HEAP32[$2_1 >> 2] = $0_1;
                    HEAP32[(($0_1 + 24) | 0) >> 2] = $4_1;
                  }
                  HEAP32[(($0_1 + 12) | 0) >> 2] = $0_1;
                  HEAP32[(($0_1 + 8) | 0) >> 2] = $0_1;
                  return;
                }
                $1_1 = HEAP32[(($4_1 + 8) | 0) >> 2] | 0;
                HEAP32[(($1_1 + 12) | 0) >> 2] = $0_1;
                HEAP32[(($4_1 + 8) | 0) >> 2] = $0_1;
                HEAP32[(($0_1 + 24) | 0) >> 2] = 0;
                HEAP32[(($0_1 + 12) | 0) >> 2] = $4_1;
                HEAP32[(($0_1 + 8) | 0) >> 2] = $1_1;
              }
            }

            function $1703($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0;
              $1_1 = HEAP32[((0 + 17452) | 0) >> 2] | 0;
              $2_1 = ((($0_1 + 3) | 0) & -4) | 0;
              $0_1 = ($1_1 + $2_1) | 0;
              label$1: {
                label$2: {
                  if (($2_1 | 0) < (1 | 0)) {
                    break label$2;
                  }
                  if ($0_1 >>> 0 <= $1_1 >>> 0) {
                    break label$1;
                  }
                }
                label$3: {
                  if ($0_1 >>> 0 <= ((__wasm_memory_size() << 16) | 0) >>> 0) {
                    break label$3;
                  }
                  if (!(fimport$29($0_1 | 0) | 0)) {
                    break label$1;
                  }
                }
                HEAP32[((0 + 17452) | 0) >> 2] = $0_1;
                return $1_1 | 0;
              }
              HEAP32[($305() | 0) >> 2] = 48;
              return -1 | 0;
            }

            function $1704($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $4$hi = $4$hi | 0;
              var i64toi32_i32$3 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$4 = 0,
                $5_1 = 0,
                i64toi32_i32$5 = 0,
                $10$hi = 0,
                $10_1 = 0,
                $9$hi = 0,
                $8_1 = 0,
                $9_1 = 0,
                $6_1 = 0,
                i64toi32_i32$6 = 0,
                $11$hi = 0,
                $64_1 = 0,
                $7_1 = 0,
                $65_1 = 0,
                $66_1 = 0,
                $67_1 = 0,
                $68_1 = 0,
                $70_1 = 0,
                $11_1 = 0,
                $71_1 = 0,
                $72_1 = 0,
                $73_1 = 0,
                $74_1 = 0,
                $75_1 = 0,
                $76_1 = 0,
                $77_1 = 0,
                $78_1 = 0,
                $79_1 = 0,
                $80_1 = 0,
                $81_1 = 0,
                $82_1 = 0,
                $83_1 = 0,
                $84_1 = 0,
                $85_1 = 0,
                $86_1 = 0,
                $52_1 = 0,
                $52$hi = 0,
                $55$hi = 0,
                $57_1 = 0,
                $57$hi = 0,
                $59_1 = 0,
                $59$hi = 0,
                $60_1 = 0,
                $60$hi = 0,
                $67$hi = 0,
                $69_1 = 0,
                $69$hi = 0,
                $131$hi = 0,
                $134_1 = 0,
                $135$hi = 0,
                $156_1 = 0,
                $156$hi = 0,
                $158$hi = 0,
                $161_1 = 0,
                $161$hi = 0,
                $163$hi = 0,
                $175$hi = 0,
                $178_1 = 0,
                $179$hi = 0,
                $208_1 = 0,
                $208$hi = 0,
                $210$hi = 0,
                $219_1 = 0,
                $220_1 = 0,
                $220$hi = 0,
                $222_1 = 0,
                $222$hi = 0,
                $228$hi = 0,
                $229_1 = 0,
                $229$hi = 0,
                $236_1 = 0,
                $236$hi = 0,
                $241$hi = 0;
              $5_1 = (global$0 - 128) | 0;
              global$0 = $5_1;
              label$1: {
                label$2: {
                  label$3: {
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$1 = $4$hi;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 0;
                    if (
                      !(
                        $313(
                          $3_1 | 0,
                          i64toi32_i32$0 | 0,
                          $4_1 | 0,
                          i64toi32_i32$1 | 0,
                          0 | 0,
                          i64toi32_i32$2 | 0,
                          0 | 0,
                          i64toi32_i32$3 | 0
                        ) | 0
                      )
                    ) {
                      break label$3;
                    }
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$3 = $4$hi;
                    i64toi32_i32$3 = $3$hi;
                    i64toi32_i32$2 = $4$hi;
                    $6_1 = $1706($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
                    i64toi32_i32$2 = $2$hi;
                    i64toi32_i32$1 = $2_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 48;
                    i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $64_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                      $64_1 =
                        (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                          ((32 - i64toi32_i32$4) | 0)) |
                        0 |
                        ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                        0;
                    }
                    $7_1 = $64_1;
                    $8_1 = ($7_1 & 32767) | 0;
                    if (($8_1 | 0) == (32767 | 0)) {
                      break label$3;
                    }
                    if ($6_1) {
                      break label$2;
                    }
                  }
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$0 = $4$hi;
                  $308(
                    ($5_1 + 16) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$3 | 0,
                    $2_1 | 0,
                    i64toi32_i32$1 | 0,
                    $3_1 | 0,
                    i64toi32_i32$2 | 0,
                    $4_1 | 0,
                    i64toi32_i32$0 | 0
                  );
                  i64toi32_i32$1 = $5_1;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$1 + 16) | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 20) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$0;
                  $4$hi = i64toi32_i32$2;
                  i64toi32_i32$1 = (((i64toi32_i32$1 + 16) | 0) + 8) | 0;
                  i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $3_1 = i64toi32_i32$2;
                  $3$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$0 = $3$hi;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$2 = $3$hi;
                  i64toi32_i32$1 = i64toi32_i32$0;
                  i64toi32_i32$3 = i64toi32_i32$2;
                  $320(
                    $5_1 | 0,
                    $4_1 | 0,
                    i64toi32_i32$0 | 0,
                    $3_1 | 0,
                    i64toi32_i32$3 | 0,
                    $4_1 | 0,
                    i64toi32_i32$0 | 0,
                    $3_1 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$2 = ($5_1 + 8) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$3;
                  $2$hi = i64toi32_i32$1;
                  i64toi32_i32$2 = $5_1;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$1;
                  $4$hi = i64toi32_i32$3;
                  break label$1;
                }
                label$4: {
                  i64toi32_i32$3 = $1$hi;
                  $52_1 = $1_1;
                  $52$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$2 = $8_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$0 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                    $65_1 = 0;
                  } else {
                    i64toi32_i32$1 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                      0;
                    $65_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                  }
                  $55$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$3 = $2_1;
                  i64toi32_i32$2 = 65535;
                  i64toi32_i32$0 = -1;
                  i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                  $57_1 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                  $57$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $55$hi;
                  i64toi32_i32$1 = $65_1;
                  i64toi32_i32$3 = $57$hi;
                  i64toi32_i32$0 = $57_1;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                  $9$hi = i64toi32_i32$3;
                  $59_1 = $9_1;
                  $59$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $3$hi;
                  $60_1 = $3_1;
                  $60$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$0 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $66_1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                    $66_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $6_1 = ($66_1 & 32767) | 0;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = $6_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$0 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                    $67_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                      0;
                    $67_1 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                  }
                  $67$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $4$hi;
                  i64toi32_i32$1 = $4_1;
                  i64toi32_i32$3 = 65535;
                  i64toi32_i32$0 = -1;
                  i64toi32_i32$3 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                  $69_1 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                  $69$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $67$hi;
                  i64toi32_i32$2 = $67_1;
                  i64toi32_i32$1 = $69$hi;
                  i64toi32_i32$0 = $69_1;
                  i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                  $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                  $10$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $52$hi;
                  i64toi32_i32$2 = $59$hi;
                  i64toi32_i32$3 = $60$hi;
                  i64toi32_i32$0 = $10$hi;
                  if (
                    ($313(
                      $52_1 | 0,
                      i64toi32_i32$1 | 0,
                      $59_1 | 0,
                      i64toi32_i32$2 | 0,
                      $60_1 | 0,
                      i64toi32_i32$3 | 0,
                      $10_1 | 0,
                      i64toi32_i32$0 | 0
                    ) |
                      0 |
                      0) >
                    (0 | 0)
                  ) {
                    break label$4;
                  }
                  label$5: {
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$0 = $9$hi;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$0 = $10$hi;
                    i64toi32_i32$0 = $1$hi;
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$1 = $10$hi;
                    if (
                      !(
                        $313(
                          $1_1 | 0,
                          i64toi32_i32$0 | 0,
                          $9_1 | 0,
                          i64toi32_i32$3 | 0,
                          $3_1 | 0,
                          i64toi32_i32$2 | 0,
                          $10_1 | 0,
                          i64toi32_i32$1 | 0
                        ) | 0
                      )
                    ) {
                      break label$5;
                    }
                    i64toi32_i32$1 = $1$hi;
                    $4_1 = $1_1;
                    $4$hi = i64toi32_i32$1;
                    break label$1;
                  }
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$0 = 0;
                  $308(
                    ($5_1 + 112) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$1 | 0,
                    $2_1 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$3 | 0,
                    0 | 0,
                    i64toi32_i32$0 | 0
                  );
                  i64toi32_i32$2 = ($5_1 + 120) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$0;
                  $2$hi = i64toi32_i32$3;
                  i64toi32_i32$2 = $5_1;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 112) | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 116) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$3;
                  $4$hi = i64toi32_i32$0;
                  break label$1;
                }
                label$6: {
                  label$7: {
                    if (!$8_1) {
                      break label$7;
                    }
                    i64toi32_i32$0 = $1$hi;
                    $4_1 = $1_1;
                    $4$hi = i64toi32_i32$0;
                    break label$6;
                  }
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$0 = $9$hi;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$3 = $9$hi;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 1081540608;
                  $308(
                    ($5_1 + 96) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$0 | 0,
                    $9_1 | 0,
                    i64toi32_i32$3 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$3 = ($5_1 + 104) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                  $9_1 = i64toi32_i32$1;
                  $9$hi = i64toi32_i32$2;
                  i64toi32_i32$3 = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$0 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $68_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                    $68_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$3 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $8_1 = ($68_1 + -120) | 0;
                  i64toi32_i32$2 = $5_1;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 96) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$2 + 100) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$1;
                  $4$hi = i64toi32_i32$3;
                }
                label$8: {
                  if ($6_1) {
                    break label$8;
                  }
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$3 = $10$hi;
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$1 = $10$hi;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$0 = 1081540608;
                  $308(
                    ($5_1 + 80) | 0 | 0,
                    $3_1 | 0,
                    i64toi32_i32$3 | 0,
                    $10_1 | 0,
                    i64toi32_i32$1 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$0 | 0
                  );
                  i64toi32_i32$1 = ($5_1 + 88) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                  $10_1 = i64toi32_i32$0;
                  $10$hi = i64toi32_i32$2;
                  i64toi32_i32$1 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$3 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $70_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$0 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                    $70_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $6_1 = ($70_1 + -120) | 0;
                  i64toi32_i32$2 = $5_1;
                  i64toi32_i32$0 = HEAP32[((i64toi32_i32$2 + 80) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$2 + 84) | 0) >> 2] | 0;
                  $3_1 = i64toi32_i32$0;
                  $3$hi = i64toi32_i32$1;
                }
                i64toi32_i32$1 = $10$hi;
                i64toi32_i32$2 = $10_1;
                i64toi32_i32$0 = 65535;
                i64toi32_i32$3 = -1;
                i64toi32_i32$0 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
                i64toi32_i32$2 = 65536;
                i64toi32_i32$3 = 0;
                i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                $11$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $9$hi;
                i64toi32_i32$0 = $9_1;
                i64toi32_i32$1 = 65535;
                i64toi32_i32$3 = -1;
                i64toi32_i32$1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                i64toi32_i32$2 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
                i64toi32_i32$0 = 65536;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $9$hi = i64toi32_i32$0;
                label$9: {
                  if (($8_1 | 0) <= ($6_1 | 0)) {
                    break label$9;
                  }
                  label$10: while (1) {
                    label$11: {
                      label$12: {
                        i64toi32_i32$0 = $9$hi;
                        i64toi32_i32$0 = $11$hi;
                        i64toi32_i32$0 = $9$hi;
                        i64toi32_i32$1 = $9_1;
                        i64toi32_i32$2 = $11$hi;
                        i64toi32_i32$3 = $11_1;
                        i64toi32_i32$4 = (i64toi32_i32$1 - i64toi32_i32$3) | 0;
                        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
                        i64toi32_i32$5 = (i64toi32_i32$6 + i64toi32_i32$2) | 0;
                        i64toi32_i32$5 = (i64toi32_i32$0 - i64toi32_i32$5) | 0;
                        $131$hi = i64toi32_i32$5;
                        i64toi32_i32$5 = $4$hi;
                        i64toi32_i32$5 = $3$hi;
                        i64toi32_i32$5 = $4$hi;
                        i64toi32_i32$0 = $4_1;
                        i64toi32_i32$1 = $3$hi;
                        i64toi32_i32$3 = $3_1;
                        $134_1 =
                          ($4$hi >>> 0 < i64toi32_i32$1 >>> 0) |
                          (((($4$hi | 0) == (i64toi32_i32$1 | 0)) &
                            (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0)) |
                            0) |
                          0;
                        i64toi32_i32$0 = 0;
                        $135$hi = i64toi32_i32$0;
                        i64toi32_i32$0 = $131$hi;
                        i64toi32_i32$3 = i64toi32_i32$4;
                        i64toi32_i32$5 = $135$hi;
                        i64toi32_i32$1 = $134_1;
                        i64toi32_i32$2 = (i64toi32_i32$3 - i64toi32_i32$1) | 0;
                        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
                        i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$5) | 0;
                        i64toi32_i32$4 = (i64toi32_i32$0 - i64toi32_i32$4) | 0;
                        $10_1 = i64toi32_i32$2;
                        $10$hi = i64toi32_i32$4;
                        i64toi32_i32$0 = i64toi32_i32$2;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$1 = 0;
                        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
                          $71_1 = 1;
                        } else {
                          if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
                            if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
                              $72_1 = 0;
                            } else {
                              $72_1 = 1;
                            }
                            $73_1 = $72_1;
                          } else {
                            $73_1 = 0;
                          }
                          $71_1 = $73_1;
                        }
                        if ($71_1) {
                          break label$12;
                        }
                        label$13: {
                          i64toi32_i32$0 = $10$hi;
                          i64toi32_i32$0 = $4$hi;
                          i64toi32_i32$0 = $3$hi;
                          i64toi32_i32$0 = $4$hi;
                          i64toi32_i32$1 = $4_1;
                          i64toi32_i32$4 = $3$hi;
                          i64toi32_i32$3 = $3_1;
                          i64toi32_i32$5 = (i64toi32_i32$1 - i64toi32_i32$3) | 0;
                          i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
                          i64toi32_i32$2 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                          i64toi32_i32$2 = (i64toi32_i32$0 - i64toi32_i32$2) | 0;
                          $4_1 = i64toi32_i32$5;
                          $4$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $10$hi;
                          i64toi32_i32$0 = $10_1;
                          i64toi32_i32$1 = $4$hi;
                          i64toi32_i32$3 = $4_1;
                          i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                          i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                          i64toi32_i32$0 = 0;
                          i64toi32_i32$3 = 0;
                          if (
                            ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0)) |
                            ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0)) |
                            0
                          ) {
                            break label$13;
                          }
                          i64toi32_i32$2 = $1$hi;
                          i64toi32_i32$2 = $2$hi;
                          i64toi32_i32$2 = $1$hi;
                          i64toi32_i32$1 = $2$hi;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 0;
                          $308(
                            ($5_1 + 32) | 0 | 0,
                            $1_1 | 0,
                            i64toi32_i32$2 | 0,
                            $2_1 | 0,
                            i64toi32_i32$1 | 0,
                            0 | 0,
                            i64toi32_i32$3 | 0,
                            0 | 0,
                            i64toi32_i32$0 | 0
                          );
                          i64toi32_i32$1 = ($5_1 + 40) | 0;
                          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 4) | 0) >> 2] | 0;
                          $2_1 = i64toi32_i32$0;
                          $2$hi = i64toi32_i32$3;
                          i64toi32_i32$1 = $5_1;
                          i64toi32_i32$3 = HEAP32[((i64toi32_i32$1 + 32) | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[((i64toi32_i32$1 + 36) | 0) >> 2] | 0;
                          $4_1 = i64toi32_i32$3;
                          $4$hi = i64toi32_i32$0;
                          break label$1;
                        }
                        i64toi32_i32$0 = $10$hi;
                        i64toi32_i32$1 = $10_1;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$2 = 1;
                        i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                        if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                          i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                          $74_1 = 0;
                        } else {
                          i64toi32_i32$3 =
                            (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                              ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                            0 |
                            ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                            0;
                          $74_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                        }
                        $156_1 = $74_1;
                        $156$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $4$hi;
                        i64toi32_i32$0 = $4_1;
                        i64toi32_i32$1 = 0;
                        i64toi32_i32$2 = 63;
                        i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                        if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                          i64toi32_i32$1 = 0;
                          $75_1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                        } else {
                          i64toi32_i32$1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                          $75_1 =
                            (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                              ((32 - i64toi32_i32$4) | 0)) |
                            0 |
                            ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                            0;
                        }
                        $158$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = $156$hi;
                        i64toi32_i32$3 = $156_1;
                        i64toi32_i32$0 = $158$hi;
                        i64toi32_i32$2 = $75_1;
                        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                        $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                        $9$hi = i64toi32_i32$0;
                        break label$11;
                      }
                      i64toi32_i32$0 = $9$hi;
                      i64toi32_i32$1 = $9_1;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = 1;
                      i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                        $76_1 = 0;
                      } else {
                        i64toi32_i32$3 =
                          (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                            ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                          0 |
                          ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                          0;
                        $76_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                      }
                      $161_1 = $76_1;
                      $161$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $4$hi;
                      i64toi32_i32$0 = $4_1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$2 = 63;
                      i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $77_1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                      } else {
                        i64toi32_i32$1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                        $77_1 =
                          (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                            ((32 - i64toi32_i32$4) | 0)) |
                          0 |
                          ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                          0;
                      }
                      $163$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $161$hi;
                      i64toi32_i32$3 = $161_1;
                      i64toi32_i32$0 = $163$hi;
                      i64toi32_i32$2 = $77_1;
                      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                      $9$hi = i64toi32_i32$0;
                    }
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$1 = $4_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$2 = 1;
                    i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                      $78_1 = 0;
                    } else {
                      i64toi32_i32$3 =
                        (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                          ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                        0;
                      $78_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                    }
                    $4_1 = $78_1;
                    $4$hi = i64toi32_i32$3;
                    $8_1 = ($8_1 + -1) | 0;
                    if (($8_1 | 0) > ($6_1 | 0)) {
                      continue label$10;
                    }
                    break label$10;
                  }
                  $8_1 = $6_1;
                }
                label$14: {
                  label$15: {
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$3 = $11$hi;
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$0 = $9_1;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$2 = $11_1;
                    i64toi32_i32$4 = (i64toi32_i32$0 - i64toi32_i32$2) | 0;
                    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
                    i64toi32_i32$5 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                    i64toi32_i32$5 = (i64toi32_i32$3 - i64toi32_i32$5) | 0;
                    $175$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$5 = $3$hi;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$3 = $4_1;
                    i64toi32_i32$0 = $3$hi;
                    i64toi32_i32$2 = $3_1;
                    $178_1 =
                      ($4$hi >>> 0 < i64toi32_i32$0 >>> 0) |
                      (((($4$hi | 0) == (i64toi32_i32$0 | 0)) &
                        (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0)) |
                        0) |
                      0;
                    i64toi32_i32$3 = 0;
                    $179$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $175$hi;
                    i64toi32_i32$2 = i64toi32_i32$4;
                    i64toi32_i32$5 = $179$hi;
                    i64toi32_i32$0 = $178_1;
                    i64toi32_i32$1 = (i64toi32_i32$2 - i64toi32_i32$0) | 0;
                    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
                    i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$5) | 0;
                    i64toi32_i32$4 = (i64toi32_i32$3 - i64toi32_i32$4) | 0;
                    $10_1 = i64toi32_i32$1;
                    $10$hi = i64toi32_i32$4;
                    i64toi32_i32$3 = i64toi32_i32$1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = 0;
                    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
                      $79_1 = 1;
                    } else {
                      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
                        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                          $80_1 = 0;
                        } else {
                          $80_1 = 1;
                        }
                        $81_1 = $80_1;
                      } else {
                        $81_1 = 0;
                      }
                      $79_1 = $81_1;
                    }
                    if ($79_1) {
                      break label$15;
                    }
                    i64toi32_i32$3 = $9$hi;
                    $10_1 = $9_1;
                    $10$hi = i64toi32_i32$3;
                    break label$14;
                  }
                  i64toi32_i32$3 = $10$hi;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$0 = $4_1;
                  i64toi32_i32$4 = $3$hi;
                  i64toi32_i32$2 = $3_1;
                  i64toi32_i32$5 = (i64toi32_i32$0 - i64toi32_i32$2) | 0;
                  i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
                  i64toi32_i32$1 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                  i64toi32_i32$1 = (i64toi32_i32$3 - i64toi32_i32$1) | 0;
                  $4_1 = i64toi32_i32$5;
                  $4$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $10$hi;
                  i64toi32_i32$3 = $10_1;
                  i64toi32_i32$0 = $4$hi;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                  i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$2 = 0;
                  if (
                    ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0)) |
                    ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0)) |
                    0
                  ) {
                    break label$14;
                  }
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$1 = $2$hi;
                  i64toi32_i32$1 = $1$hi;
                  i64toi32_i32$0 = $2$hi;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 0;
                  $308(
                    ($5_1 + 48) | 0 | 0,
                    $1_1 | 0,
                    i64toi32_i32$1 | 0,
                    $2_1 | 0,
                    i64toi32_i32$0 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$3 | 0
                  );
                  i64toi32_i32$0 = ($5_1 + 56) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$3;
                  $2$hi = i64toi32_i32$2;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$0 + 48) | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[((i64toi32_i32$0 + 52) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$2;
                  $4$hi = i64toi32_i32$3;
                  break label$1;
                }
                label$16: {
                  i64toi32_i32$3 = $10$hi;
                  i64toi32_i32$0 = $10_1;
                  i64toi32_i32$2 = 65535;
                  i64toi32_i32$1 = -1;
                  if (
                    (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0) |
                    ((((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0)) &
                      (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0)) |
                      0) |
                    0
                  ) {
                    break label$16;
                  }
                  label$17: while (1) {
                    i64toi32_i32$0 = $4$hi;
                    i64toi32_i32$1 = $4_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$2 = 63;
                    i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $82_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                    } else {
                      i64toi32_i32$3 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                      $82_1 =
                        (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                          ((32 - i64toi32_i32$4) | 0)) |
                        0 |
                        ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                        0;
                    }
                    $3_1 = $82_1;
                    $3$hi = i64toi32_i32$3;
                    $8_1 = ($8_1 + -1) | 0;
                    i64toi32_i32$3 = $4$hi;
                    i64toi32_i32$0 = $4_1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = 1;
                    i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                      $83_1 = 0;
                    } else {
                      i64toi32_i32$1 =
                        (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                          ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                        0;
                      $83_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                    }
                    $4_1 = $83_1;
                    $4$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $3$hi;
                    $208_1 = $3_1;
                    $208$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $10$hi;
                    i64toi32_i32$3 = $10_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$2 = 1;
                    i64toi32_i32$4 = (i64toi32_i32$2 & 31) | 0;
                    if (32 >>> 0 <= ((i64toi32_i32$2 & 63) | 0) >>> 0) {
                      i64toi32_i32$0 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                      $84_1 = 0;
                    } else {
                      i64toi32_i32$0 =
                        (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                          ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                        0 |
                        ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                        0;
                      $84_1 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                    }
                    $210$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $208$hi;
                    i64toi32_i32$1 = $208_1;
                    i64toi32_i32$3 = $210$hi;
                    i64toi32_i32$2 = $84_1;
                    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                    $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                    $10$hi = i64toi32_i32$3;
                    i64toi32_i32$0 = $10_1;
                    i64toi32_i32$1 = 65536;
                    i64toi32_i32$2 = 0;
                    if (
                      (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) |
                      ((((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0)) &
                        (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0)) |
                        0) |
                      0
                    ) {
                      continue label$17;
                    }
                    break label$17;
                  }
                }
                $6_1 = ($7_1 & 32768) | 0;
                label$18: {
                  if (($8_1 | 0) > (0 | 0)) {
                    break label$18;
                  }
                  $219_1 = ($5_1 + 64) | 0;
                  i64toi32_i32$0 = $4$hi;
                  $220_1 = $4_1;
                  $220$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $10$hi;
                  i64toi32_i32$2 = $10_1;
                  i64toi32_i32$3 = 65535;
                  i64toi32_i32$1 = -1;
                  i64toi32_i32$3 = (i64toi32_i32$0 & i64toi32_i32$3) | 0;
                  $222_1 = (i64toi32_i32$2 & i64toi32_i32$1) | 0;
                  $222$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$0 = ($8_1 + 120) | 0 | $6_1 | 0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$1 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$1 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                    $85_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$0 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                      0;
                    $85_1 = (i64toi32_i32$0 << i64toi32_i32$4) | 0;
                  }
                  $228$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $222$hi;
                  i64toi32_i32$3 = $222_1;
                  i64toi32_i32$0 = $228$hi;
                  i64toi32_i32$1 = $85_1;
                  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                  $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                  $229$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $220$hi;
                  i64toi32_i32$3 = $229$hi;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 1065811968;
                  $308(
                    $219_1 | 0,
                    $220_1 | 0,
                    i64toi32_i32$0 | 0,
                    $229_1 | 0,
                    i64toi32_i32$3 | 0,
                    0 | 0,
                    i64toi32_i32$2 | 0,
                    0 | 0,
                    i64toi32_i32$1 | 0
                  );
                  i64toi32_i32$3 = ($5_1 + 72) | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$3 + 4) | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$1;
                  $2$hi = i64toi32_i32$2;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$2 = HEAP32[((i64toi32_i32$3 + 64) | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[((i64toi32_i32$3 + 68) | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$2;
                  $4$hi = i64toi32_i32$1;
                  break label$1;
                }
                i64toi32_i32$1 = $10$hi;
                i64toi32_i32$3 = $10_1;
                i64toi32_i32$2 = 65535;
                i64toi32_i32$0 = -1;
                i64toi32_i32$2 = (i64toi32_i32$1 & i64toi32_i32$2) | 0;
                $236_1 = (i64toi32_i32$3 & i64toi32_i32$0) | 0;
                $236$hi = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = $8_1 | $6_1 | 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 48;
                i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                  i64toi32_i32$3 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                  $86_1 = 0;
                } else {
                  i64toi32_i32$3 =
                    (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                      ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                    0 |
                    ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                    0;
                  $86_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                }
                $241$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $236$hi;
                i64toi32_i32$2 = $236_1;
                i64toi32_i32$1 = $241$hi;
                i64toi32_i32$0 = $86_1;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                $2$hi = i64toi32_i32$1;
              }
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$2 = $0_1;
              HEAP32[i64toi32_i32$2 >> 2] = $4_1;
              HEAP32[((i64toi32_i32$2 + 4) | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $2$hi;
              HEAP32[((i64toi32_i32$2 + 8) | 0) >> 2] = $2_1;
              HEAP32[((i64toi32_i32$2 + 12) | 0) >> 2] = i64toi32_i32$1;
              global$0 = ($5_1 + 128) | 0;
            }

            function $1705($0_1, $1_1) {
              $0_1 = +$0_1;
              $1_1 = $1_1 | 0;
              var i64toi32_i32$4 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                $8_1 = 0,
                $32_1 = 0.0,
                i64toi32_i32$0 = 0;
              label$1: {
                label$2: {
                  if (($1_1 | 0) < (1024 | 0)) {
                    break label$2;
                  }
                  $0_1 = $0_1 * 8988465674311579538646525.0e283;
                  label$3: {
                    if (($1_1 | 0) >= (2047 | 0)) {
                      break label$3;
                    }
                    $1_1 = ($1_1 + -1023) | 0;
                    break label$1;
                  }
                  $0_1 = $0_1 * 8988465674311579538646525.0e283;
                  $1_1 = ((($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046) | 0;
                  break label$1;
                }
                if (($1_1 | 0) > (-1023 | 0)) {
                  break label$1;
                }
                $0_1 = $0_1 * 2.2250738585072014e-308;
                label$4: {
                  if (($1_1 | 0) <= (-2045 | 0)) {
                    break label$4;
                  }
                  $1_1 = ($1_1 + 1022) | 0;
                  break label$1;
                }
                $0_1 = $0_1 * 2.2250738585072014e-308;
                $1_1 = ((($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044) | 0;
              }
              $32_1 = $0_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = ($1_1 + 1023) | 0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 52;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $8_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $8_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
              wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
              return +($32_1 * +wasm2js_scratch_load_f64());
            }

            function $1706($0_1, $0$hi, $1_1, $1$hi) {
              $0_1 = $0_1 | 0;
              $0$hi = $0$hi | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              var i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$4 = 0,
                $2$hi = 0,
                $2_1 = 0,
                $13_1 = 0,
                $3_1 = 0,
                $4_1 = 0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = 65535;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = (i64toi32_i32$0 & i64toi32_i32$1) | 0;
              $2_1 = (i64toi32_i32$2 & i64toi32_i32$3) | 0;
              $2$hi = i64toi32_i32$1;
              label$1: {
                label$2: {
                  i64toi32_i32$1 = i64toi32_i32$0;
                  i64toi32_i32$0 = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 48;
                  i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $13_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                    $13_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  $3_1 = ($13_1 & 32767) | 0;
                  if (($3_1 | 0) == (32767 | 0)) {
                    break label$2;
                  }
                  $4_1 = 4;
                  if ($3_1) {
                    break label$1;
                  }
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$2 = $0$hi;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$1 = $2_1;
                  i64toi32_i32$0 = $0$hi;
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                  return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
                }
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$0 = $0$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$1 = $0$hi;
                i64toi32_i32$3 = $0_1;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
              }
              return $4_1 | 0;
            }

            function $1707($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $4_1 = 0,
                $3_1 = 0,
                $5_1 = 0;
              label$1: {
                if ($2_1 >>> 0 < 512 >>> 0) {
                  break label$1;
                }
                fimport$30($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
                return $0_1 | 0;
              }
              $3_1 = ($0_1 + $2_1) | 0;
              label$2: {
                label$3: {
                  if (((($1_1 ^ $0_1) | 0) & 3) | 0) {
                    break label$3;
                  }
                  label$4: {
                    label$5: {
                      if (($2_1 | 0) >= (1 | 0)) {
                        break label$5;
                      }
                      $2_1 = $0_1;
                      break label$4;
                    }
                    label$6: {
                      if (($0_1 & 3) | 0) {
                        break label$6;
                      }
                      $2_1 = $0_1;
                      break label$4;
                    }
                    $2_1 = $0_1;
                    label$7: while (1) {
                      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                      $1_1 = ($1_1 + 1) | 0;
                      $2_1 = ($2_1 + 1) | 0;
                      if ($2_1 >>> 0 >= $3_1 >>> 0) {
                        break label$4;
                      }
                      if (($2_1 & 3) | 0) {
                        continue label$7;
                      }
                      break label$7;
                    }
                  }
                  label$8: {
                    $4_1 = ($3_1 & -4) | 0;
                    if ($4_1 >>> 0 < 64 >>> 0) {
                      break label$8;
                    }
                    $5_1 = ($4_1 + -64) | 0;
                    if ($2_1 >>> 0 > $5_1 >>> 0) {
                      break label$8;
                    }
                    label$9: while (1) {
                      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[(($2_1 + 4) | 0) >> 2] = HEAP32[(($1_1 + 4) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 8) | 0) >> 2] = HEAP32[(($1_1 + 8) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 12) | 0) >> 2] = HEAP32[(($1_1 + 12) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 16) | 0) >> 2] = HEAP32[(($1_1 + 16) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 20) | 0) >> 2] = HEAP32[(($1_1 + 20) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 24) | 0) >> 2] = HEAP32[(($1_1 + 24) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 28) | 0) >> 2] = HEAP32[(($1_1 + 28) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 32) | 0) >> 2] = HEAP32[(($1_1 + 32) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 36) | 0) >> 2] = HEAP32[(($1_1 + 36) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 40) | 0) >> 2] = HEAP32[(($1_1 + 40) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 44) | 0) >> 2] = HEAP32[(($1_1 + 44) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 48) | 0) >> 2] = HEAP32[(($1_1 + 48) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 52) | 0) >> 2] = HEAP32[(($1_1 + 52) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 56) | 0) >> 2] = HEAP32[(($1_1 + 56) | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 60) | 0) >> 2] = HEAP32[(($1_1 + 60) | 0) >> 2] | 0;
                      $1_1 = ($1_1 + 64) | 0;
                      $2_1 = ($2_1 + 64) | 0;
                      if ($2_1 >>> 0 <= $5_1 >>> 0) {
                        continue label$9;
                      }
                      break label$9;
                    }
                  }
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$2;
                  }
                  label$10: while (1) {
                    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    $2_1 = ($2_1 + 4) | 0;
                    if ($2_1 >>> 0 < $4_1 >>> 0) {
                      continue label$10;
                    }
                    break label$2;
                  }
                }
                label$11: {
                  if ($3_1 >>> 0 >= 4 >>> 0) {
                    break label$11;
                  }
                  $2_1 = $0_1;
                  break label$2;
                }
                label$12: {
                  $4_1 = ($3_1 + -4) | 0;
                  if ($4_1 >>> 0 >= $0_1 >>> 0) {
                    break label$12;
                  }
                  $2_1 = $0_1;
                  break label$2;
                }
                $2_1 = $0_1;
                label$13: while (1) {
                  HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                  HEAP8[(($2_1 + 1) | 0) >> 0] = HEAPU8[(($1_1 + 1) | 0) >> 0] | 0;
                  HEAP8[(($2_1 + 2) | 0) >> 0] = HEAPU8[(($1_1 + 2) | 0) >> 0] | 0;
                  HEAP8[(($2_1 + 3) | 0) >> 0] = HEAPU8[(($1_1 + 3) | 0) >> 0] | 0;
                  $1_1 = ($1_1 + 4) | 0;
                  $2_1 = ($2_1 + 4) | 0;
                  if ($2_1 >>> 0 <= $4_1 >>> 0) {
                    continue label$13;
                  }
                  break label$13;
                }
              }
              label$14: {
                if ($2_1 >>> 0 >= $3_1 >>> 0) {
                  break label$14;
                }
                label$15: while (1) {
                  HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  $2_1 = ($2_1 + 1) | 0;
                  if (($2_1 | 0) != ($3_1 | 0)) {
                    continue label$15;
                  }
                  break label$15;
                }
              }
              return $0_1 | 0;
            }

            function $1708($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                i64toi32_i32$0 = 0,
                $4_1 = 0,
                i64toi32_i32$1 = 0,
                $6_1 = 0,
                $5_1 = 0,
                $6$hi = 0;
              label$1: {
                if (!$2_1) {
                  break label$1;
                }
                $3_1 = ($2_1 + $0_1) | 0;
                HEAP8[(($3_1 + -1) | 0) >> 0] = $1_1;
                HEAP8[$0_1 >> 0] = $1_1;
                if ($2_1 >>> 0 < 3 >>> 0) {
                  break label$1;
                }
                HEAP8[(($3_1 + -2) | 0) >> 0] = $1_1;
                HEAP8[(($0_1 + 1) | 0) >> 0] = $1_1;
                HEAP8[(($3_1 + -3) | 0) >> 0] = $1_1;
                HEAP8[(($0_1 + 2) | 0) >> 0] = $1_1;
                if ($2_1 >>> 0 < 7 >>> 0) {
                  break label$1;
                }
                HEAP8[(($3_1 + -4) | 0) >> 0] = $1_1;
                HEAP8[(($0_1 + 3) | 0) >> 0] = $1_1;
                if ($2_1 >>> 0 < 9 >>> 0) {
                  break label$1;
                }
                $4_1 = (((0 - $0_1) | 0) & 3) | 0;
                $3_1 = ($0_1 + $4_1) | 0;
                $1_1 = Math_imul(($1_1 & 255) | 0, 16843009);
                HEAP32[$3_1 >> 2] = $1_1;
                $4_1 = ((($2_1 - $4_1) | 0) & -4) | 0;
                $2_1 = ($3_1 + $4_1) | 0;
                HEAP32[(($2_1 + -4) | 0) >> 2] = $1_1;
                if ($4_1 >>> 0 < 9 >>> 0) {
                  break label$1;
                }
                HEAP32[(($3_1 + 8) | 0) >> 2] = $1_1;
                HEAP32[(($3_1 + 4) | 0) >> 2] = $1_1;
                HEAP32[(($2_1 + -8) | 0) >> 2] = $1_1;
                HEAP32[(($2_1 + -12) | 0) >> 2] = $1_1;
                if ($4_1 >>> 0 < 25 >>> 0) {
                  break label$1;
                }
                HEAP32[(($3_1 + 24) | 0) >> 2] = $1_1;
                HEAP32[(($3_1 + 20) | 0) >> 2] = $1_1;
                HEAP32[(($3_1 + 16) | 0) >> 2] = $1_1;
                HEAP32[(($3_1 + 12) | 0) >> 2] = $1_1;
                HEAP32[(($2_1 + -16) | 0) >> 2] = $1_1;
                HEAP32[(($2_1 + -20) | 0) >> 2] = $1_1;
                HEAP32[(($2_1 + -24) | 0) >> 2] = $1_1;
                HEAP32[(($2_1 + -28) | 0) >> 2] = $1_1;
                $5_1 = ($3_1 & 4) | 0 | 24 | 0;
                $2_1 = ($4_1 - $5_1) | 0;
                if ($2_1 >>> 0 < 32 >>> 0) {
                  break label$1;
                }
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = 1;
                i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $6_1 = i64toi32_i32$1;
                $6$hi = i64toi32_i32$0;
                $1_1 = ($3_1 + $5_1) | 0;
                label$2: while (1) {
                  i64toi32_i32$0 = $6$hi;
                  i64toi32_i32$1 = $1_1;
                  HEAP32[(($1_1 + 24) | 0) >> 2] = $6_1;
                  HEAP32[(($1_1 + 28) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$1 = $1_1;
                  HEAP32[(($1_1 + 16) | 0) >> 2] = $6_1;
                  HEAP32[(($1_1 + 20) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$1 = $1_1;
                  HEAP32[(($1_1 + 8) | 0) >> 2] = $6_1;
                  HEAP32[(($1_1 + 12) | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$1 = $1_1;
                  HEAP32[$1_1 >> 2] = $6_1;
                  HEAP32[(($1_1 + 4) | 0) >> 2] = i64toi32_i32$0;
                  $1_1 = ($1_1 + 32) | 0;
                  $2_1 = ($2_1 + -32) | 0;
                  if ($2_1 >>> 0 > 31 >>> 0) {
                    continue label$2;
                  }
                  break label$2;
                }
              }
              return $0_1 | 0;
            }

            function $1709($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0;
              label$1: {
                if (($0_1 | 0) == ($1_1 | 0)) {
                  break label$1;
                }
                label$2: {
                  if ((((($1_1 - $0_1) | 0) - $2_1) | 0) >>> 0 > ((0 - (($2_1 << 1) | 0)) | 0) >>> 0) {
                    break label$2;
                  }
                  return $1707($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
                }
                $3_1 = ((($1_1 ^ $0_1) | 0) & 3) | 0;
                label$3: {
                  label$4: {
                    label$5: {
                      if ($0_1 >>> 0 >= $1_1 >>> 0) {
                        break label$5;
                      }
                      label$6: {
                        if (!$3_1) {
                          break label$6;
                        }
                        $3_1 = $0_1;
                        break label$3;
                      }
                      label$7: {
                        if (($0_1 & 3) | 0) {
                          break label$7;
                        }
                        $3_1 = $0_1;
                        break label$4;
                      }
                      $3_1 = $0_1;
                      label$8: while (1) {
                        if (!$2_1) {
                          break label$1;
                        }
                        HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                        $1_1 = ($1_1 + 1) | 0;
                        $2_1 = ($2_1 + -1) | 0;
                        $3_1 = ($3_1 + 1) | 0;
                        if (!(($3_1 & 3) | 0)) {
                          break label$4;
                        }
                        continue label$8;
                      }
                    }
                    label$9: {
                      if ($3_1) {
                        break label$9;
                      }
                      label$10: {
                        if (!(((($0_1 + $2_1) | 0) & 3) | 0)) {
                          break label$10;
                        }
                        label$11: while (1) {
                          if (!$2_1) {
                            break label$1;
                          }
                          $2_1 = ($2_1 + -1) | 0;
                          $3_1 = ($0_1 + $2_1) | 0;
                          HEAP8[$3_1 >> 0] = HEAPU8[(($1_1 + $2_1) | 0) >> 0] | 0;
                          if (($3_1 & 3) | 0) {
                            continue label$11;
                          }
                          break label$11;
                        }
                      }
                      if ($2_1 >>> 0 <= 3 >>> 0) {
                        break label$9;
                      }
                      label$12: while (1) {
                        $2_1 = ($2_1 + -4) | 0;
                        HEAP32[(($0_1 + $2_1) | 0) >> 2] = HEAP32[(($1_1 + $2_1) | 0) >> 2] | 0;
                        if ($2_1 >>> 0 > 3 >>> 0) {
                          continue label$12;
                        }
                        break label$12;
                      }
                    }
                    if (!$2_1) {
                      break label$1;
                    }
                    label$13: while (1) {
                      $2_1 = ($2_1 + -1) | 0;
                      HEAP8[(($0_1 + $2_1) | 0) >> 0] = HEAPU8[(($1_1 + $2_1) | 0) >> 0] | 0;
                      if ($2_1) {
                        continue label$13;
                      }
                      break label$1;
                    }
                  }
                  if ($2_1 >>> 0 <= 3 >>> 0) {
                    break label$3;
                  }
                  label$14: while (1) {
                    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                    $1_1 = ($1_1 + 4) | 0;
                    $3_1 = ($3_1 + 4) | 0;
                    $2_1 = ($2_1 + -4) | 0;
                    if ($2_1 >>> 0 > 3 >>> 0) {
                      continue label$14;
                    }
                    break label$14;
                  }
                }
                if (!$2_1) {
                  break label$1;
                }
                label$15: while (1) {
                  HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                  $3_1 = ($3_1 + 1) | 0;
                  $1_1 = ($1_1 + 1) | 0;
                  $2_1 = ($2_1 + -1) | 0;
                  if ($2_1) {
                    continue label$15;
                  }
                  break label$15;
                }
              }
              return $0_1 | 0;
            }

            function $1710($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = HEAPU8[(($0_1 + 74) | 0) >> 0] | 0;
              HEAP8[(($0_1 + 74) | 0) >> 0] = ($1_1 + -1) | 0 | $1_1 | 0;
              label$1: {
                $1_1 = HEAP32[$0_1 >> 2] | 0;
                if (!(($1_1 & 8) | 0)) {
                  break label$1;
                }
                HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
                return -1 | 0;
              }
              HEAP32[(($0_1 + 4) | 0) >> 2] = 0;
              HEAP32[(($0_1 + 8) | 0) >> 2] = 0;
              $1_1 = HEAP32[(($0_1 + 44) | 0) >> 2] | 0;
              HEAP32[(($0_1 + 28) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 20) | 0) >> 2] = $1_1;
              HEAP32[(($0_1 + 16) | 0) >> 2] = ($1_1 + (HEAP32[(($0_1 + 48) | 0) >> 2] | 0)) | 0;
              return 0 | 0;
            }

            function $1711($0_1, $1_1, $2_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              var $3_1 = 0,
                $4_1 = 0,
                $5_1 = 0;
              label$1: {
                label$2: {
                  $3_1 = HEAP32[(($2_1 + 16) | 0) >> 2] | 0;
                  if ($3_1) {
                    break label$2;
                  }
                  $4_1 = 0;
                  if ($1710($2_1 | 0) | 0) {
                    break label$1;
                  }
                  $3_1 = HEAP32[(($2_1 + 16) | 0) >> 2] | 0;
                }
                label$3: {
                  $5_1 = HEAP32[(($2_1 + 20) | 0) >> 2] | 0;
                  if ((($3_1 - $5_1) | 0) >>> 0 >= $1_1 >>> 0) {
                    break label$3;
                  }
                  return FUNCTION_TABLE[HEAP32[(($2_1 + 36) | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
                }
                label$4: {
                  label$5: {
                    if ((HEAP8[(($2_1 + 75) | 0) >> 0] | 0 | 0) >= (0 | 0)) {
                      break label$5;
                    }
                    $3_1 = 0;
                    break label$4;
                  }
                  $4_1 = $1_1;
                  label$6: while (1) {
                    label$7: {
                      $3_1 = $4_1;
                      if ($3_1) {
                        break label$7;
                      }
                      $3_1 = 0;
                      break label$4;
                    }
                    $4_1 = ($3_1 + -1) | 0;
                    if ((HEAPU8[(($0_1 + $4_1) | 0) >> 0] | 0 | 0) != (10 | 0)) {
                      continue label$6;
                    }
                    break label$6;
                  }
                  $4_1 = FUNCTION_TABLE[HEAP32[(($2_1 + 36) | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
                  if ($4_1 >>> 0 < $3_1 >>> 0) {
                    break label$1;
                  }
                  $0_1 = ($0_1 + $3_1) | 0;
                  $1_1 = ($1_1 - $3_1) | 0;
                  $5_1 = HEAP32[(($2_1 + 20) | 0) >> 2] | 0;
                }
                $1707($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
                HEAP32[(($2_1 + 20) | 0) >> 2] = ((HEAP32[(($2_1 + 20) | 0) >> 2] | 0) + $1_1) | 0;
                $4_1 = ($3_1 + $1_1) | 0;
              }
              return $4_1 | 0;
            }

            function $1712($0_1, $1_1, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var $4_1 = 0,
                $5_1 = 0;
              $4_1 = Math_imul($2_1, $1_1);
              label$1: {
                label$2: {
                  if ((HEAP32[(($3_1 + 76) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                    break label$2;
                  }
                  $0_1 = $1711($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
                  break label$1;
                }
                $5_1 = $1713($3_1 | 0) | 0;
                $0_1 = $1711($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
                if (!$5_1) {
                  break label$1;
                }
                $1714($3_1 | 0);
              }
              label$3: {
                if (($0_1 | 0) != ($4_1 | 0)) {
                  break label$3;
                }
                return ($1_1 ? $2_1 : 0) | 0;
              }
              return (($0_1 >>> 0) / ($1_1 >>> 0)) | 0 | 0;
            }

            function $1713($0_1) {
              $0_1 = $0_1 | 0;
              return 1 | 0;
            }

            function $1714($0_1) {
              $0_1 = $0_1 | 0;
            }

            function $1715($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0,
                $2_1 = 0,
                $3_1 = 0;
              $1_1 = $0_1;
              label$1: {
                label$2: {
                  if (!(($0_1 & 3) | 0)) {
                    break label$2;
                  }
                  label$3: {
                    if (HEAPU8[$0_1 >> 0] | 0) {
                      break label$3;
                    }
                    return ($0_1 - $0_1) | 0 | 0;
                  }
                  $1_1 = $0_1;
                  label$4: while (1) {
                    $1_1 = ($1_1 + 1) | 0;
                    if (!(($1_1 & 3) | 0)) {
                      break label$2;
                    }
                    if (HEAPU8[$1_1 >> 0] | 0) {
                      continue label$4;
                    }
                    break label$1;
                  }
                }
                label$5: while (1) {
                  $2_1 = $1_1;
                  $1_1 = ($1_1 + 4) | 0;
                  $3_1 = HEAP32[$2_1 >> 2] | 0;
                  if (!(((((($3_1 ^ -1) | 0) & (($3_1 + -16843009) | 0)) | 0) & -2139062144) | 0)) {
                    continue label$5;
                  }
                  break label$5;
                }
                label$6: {
                  if (($3_1 & 255) | 0) {
                    break label$6;
                  }
                  return ($2_1 - $0_1) | 0 | 0;
                }
                label$7: while (1) {
                  $3_1 = HEAPU8[(($2_1 + 1) | 0) >> 0] | 0;
                  $1_1 = ($2_1 + 1) | 0;
                  $2_1 = $1_1;
                  if ($3_1) {
                    continue label$7;
                  }
                  break label$7;
                }
              }
              return ($1_1 - $0_1) | 0 | 0;
            }

            function $1716() {
              return global$0 | 0;
            }

            function $1717($0_1) {
              $0_1 = $0_1 | 0;
              global$0 = $0_1;
            }

            function $1718($0_1) {
              $0_1 = $0_1 | 0;
              var $1_1 = 0;
              $1_1 = (((global$0 - $0_1) | 0) & -16) | 0;
              global$0 = $1_1;
              return $1_1 | 0;
            }

            function $1719($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $5$hi = $5$hi | 0;
              var i64toi32_i32$0 = 0;
              i64toi32_i32$0 = $5$hi;
              return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
            }

            function $1720($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $5$hi = $5$hi | 0;
              $6_1 = $6_1 | 0;
              $6$hi = $6$hi | 0;
              var i64toi32_i32$0 = 0;
              i64toi32_i32$0 = $5$hi;
              i64toi32_i32$0 = $6$hi;
              i64toi32_i32$0 = $5$hi;
              return (
                FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0
              );
            }

            function $1721($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $6$hi = $6$hi | 0;
              $7_1 = $7_1 | 0;
              $7$hi = $7$hi | 0;
              var i64toi32_i32$0 = 0;
              i64toi32_i32$0 = $6$hi;
              i64toi32_i32$0 = $7$hi;
              i64toi32_i32$0 = $6$hi;
              return (
                FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) |
                0 |
                0
              );
            }

            function $1722($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $3$hi = $3$hi | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              var i64toi32_i32$0 = 0;
              i64toi32_i32$0 = $3$hi;
              FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
            }

            function $1723($0_1, $1_1, $2_1, $2$hi, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $2$hi = $2$hi | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$0 | 0;
            }

            function $1724($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $20_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $11_1 = 0,
                $13_1 = 0,
                $13$hi = 0,
                $16$hi = 0;
              $7_1 = $0_1;
              $8_1 = $1_1;
              $9_1 = $2_1;
              $10_1 = $3_1;
              $11_1 = $4_1;
              i64toi32_i32$0 = 0;
              $13_1 = $5_1;
              $13$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $6_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $20_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $20_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              $16$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $13$hi;
              i64toi32_i32$0 = $13_1;
              i64toi32_i32$2 = $16$hi;
              i64toi32_i32$3 = $20_1;
              i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
              return (
                $1719(
                  $7_1 | 0,
                  $8_1 | 0,
                  $9_1 | 0,
                  $10_1 | 0,
                  $11_1 | 0,
                  i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0,
                  i64toi32_i32$2 | 0
                ) |
                0 |
                0
              );
            }

            function $1725($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $29_1 = 0,
                $30_1 = 0,
                $9_1 = 0,
                $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $15_1 = 0,
                $15$hi = 0,
                $18$hi = 0,
                $19_1 = 0,
                $19$hi = 0,
                $21_1 = 0,
                $21$hi = 0,
                $24$hi = 0,
                $25_1 = 0,
                $25$hi = 0;
              $9_1 = $0_1;
              $10_1 = $1_1;
              $11_1 = $2_1;
              $12_1 = $3_1;
              $13_1 = $4_1;
              i64toi32_i32$0 = 0;
              $15_1 = $5_1;
              $15$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $6_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $29_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $29_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              $18$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $15$hi;
              i64toi32_i32$0 = $15_1;
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$3 = $29_1;
              i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
              $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
              $19$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $21_1 = $7_1;
              $21$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = $8_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                $30_1 = 0;
              } else {
                i64toi32_i32$0 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                  0;
                $30_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
              }
              $24$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $21$hi;
              i64toi32_i32$2 = $21_1;
              i64toi32_i32$1 = $24$hi;
              i64toi32_i32$3 = $30_1;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $25$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$2 = $25$hi;
              return (
                $1720(
                  $9_1 | 0,
                  $10_1 | 0,
                  $11_1 | 0,
                  $12_1 | 0,
                  $13_1 | 0,
                  $19_1 | 0,
                  i64toi32_i32$1 | 0,
                  $25_1 | 0,
                  i64toi32_i32$2 | 0
                ) |
                0 |
                0
              );
            }

            function $1726($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              $7_1 = $7_1 | 0;
              $8_1 = $8_1 | 0;
              $9_1 = $9_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $31_1 = 0,
                $32_1 = 0,
                $10_1 = 0,
                $11_1 = 0,
                $12_1 = 0,
                $13_1 = 0,
                $14_1 = 0,
                $15_1 = 0,
                $17_1 = 0,
                $17$hi = 0,
                $20$hi = 0,
                $21_1 = 0,
                $21$hi = 0,
                $23_1 = 0,
                $23$hi = 0,
                $26$hi = 0,
                $27_1 = 0,
                $27$hi = 0;
              $10_1 = $0_1;
              $11_1 = $1_1;
              $12_1 = $2_1;
              $13_1 = $3_1;
              $14_1 = $4_1;
              $15_1 = $5_1;
              i64toi32_i32$0 = 0;
              $17_1 = $6_1;
              $17$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $31_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $31_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              $20$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $17$hi;
              i64toi32_i32$0 = $17_1;
              i64toi32_i32$2 = $20$hi;
              i64toi32_i32$3 = $31_1;
              i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
              $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
              $21$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $23_1 = $8_1;
              $23$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = $9_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                $32_1 = 0;
              } else {
                i64toi32_i32$0 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                  0;
                $32_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
              }
              $26$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $23$hi;
              i64toi32_i32$2 = $23_1;
              i64toi32_i32$1 = $26$hi;
              i64toi32_i32$3 = $32_1;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $27$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $21$hi;
              i64toi32_i32$2 = $27$hi;
              return (
                $1721(
                  $10_1 | 0,
                  $11_1 | 0,
                  $12_1 | 0,
                  $13_1 | 0,
                  $14_1 | 0,
                  $15_1 | 0,
                  $21_1 | 0,
                  i64toi32_i32$1 | 0,
                  $27_1 | 0,
                  i64toi32_i32$2 | 0
                ) |
                0 |
                0
              );
            }

            function $1727($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              $5_1 = $5_1 | 0;
              $6_1 = $6_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$3 = 0,
                $18_1 = 0,
                $7_1 = 0,
                $8_1 = 0,
                $9_1 = 0,
                $11_1 = 0,
                $11$hi = 0,
                $14$hi = 0;
              $7_1 = $0_1;
              $8_1 = $1_1;
              $9_1 = $2_1;
              i64toi32_i32$0 = 0;
              $11_1 = $3_1;
              $11$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $18_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $18_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              $14$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $11$hi;
              i64toi32_i32$0 = $11_1;
              i64toi32_i32$2 = $14$hi;
              i64toi32_i32$3 = $18_1;
              i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
              $1722(
                $7_1 | 0,
                $8_1 | 0,
                $9_1 | 0,
                i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0,
                i64toi32_i32$2 | 0,
                $5_1 | 0,
                $6_1 | 0
              );
            }

            function $1728($0_1, $1_1, $2_1, $3_1, $4_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              $4_1 = $4_1 | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                $17_1 = 0,
                $18_1 = 0,
                $6_1 = 0,
                $7_1 = 0,
                $9_1 = 0,
                $9$hi = 0,
                $12$hi = 0,
                $5_1 = 0,
                $5$hi = 0;
              $6_1 = $0_1;
              $7_1 = $1_1;
              i64toi32_i32$0 = 0;
              $9_1 = $2_1;
              $9$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                $17_1 = 0;
              } else {
                i64toi32_i32$1 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$0 << i64toi32_i32$4) | 0) |
                  0;
                $17_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
              }
              $12$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $9$hi;
              i64toi32_i32$0 = $9_1;
              i64toi32_i32$2 = $12$hi;
              i64toi32_i32$3 = $17_1;
              i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
              i64toi32_i32$2 =
                $1723(
                  $6_1 | 0,
                  $7_1 | 0,
                  i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0,
                  i64toi32_i32$2 | 0,
                  $4_1 | 0
                ) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $5_1 = i64toi32_i32$2;
              $5$hi = i64toi32_i32$0;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $18_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$2 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $18_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$1 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              fimport$31($18_1 | 0);
              i64toi32_i32$2 = $5$hi;
              return $5_1 | 0;
            }

            function $1729($0_1, $1_1, $1$hi, $2_1, $3_1) {
              $0_1 = $0_1 | 0;
              $1_1 = $1_1 | 0;
              $1$hi = $1$hi | 0;
              $2_1 = $2_1 | 0;
              $3_1 = $3_1 | 0;
              var i64toi32_i32$4 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$3 = 0,
                $12_1 = 0,
                $4_1 = 0,
                $6_1 = 0,
                i64toi32_i32$2 = 0;
              $4_1 = $0_1;
              i64toi32_i32$0 = $1$hi;
              $6_1 = $1_1;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $12_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $12_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              return fimport$32($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
            }

            function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(
              var$0,
              var$0$hi,
              var$1,
              var$1$hi
            ) {
              var$0 = var$0 | 0;
              var$0$hi = var$0$hi | 0;
              var$1 = var$1 | 0;
              var$1$hi = var$1$hi | 0;
              var i64toi32_i32$4 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0,
                var$2 = 0,
                i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                var$3 = 0,
                var$4 = 0,
                var$5 = 0,
                $21_1 = 0,
                $22_1 = 0,
                var$6 = 0,
                $24_1 = 0,
                $17_1 = 0,
                $18_1 = 0,
                $23_1 = 0,
                $29_1 = 0,
                $45_1 = 0,
                $56$hi = 0,
                $62$hi = 0;
              i64toi32_i32$0 = var$1$hi;
              var$2 = var$1;
              var$4 = (var$2 >>> 16) | 0;
              i64toi32_i32$0 = var$0$hi;
              var$3 = var$0;
              var$5 = (var$3 >>> 16) | 0;
              $17_1 = Math_imul(var$4, var$5);
              $18_1 = var$2;
              i64toi32_i32$2 = var$3;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $21_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                $21_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $23_1 = ($17_1 + Math_imul($18_1, $21_1)) | 0;
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $22_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
              } else {
                i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                $22_1 =
                  (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                    ((32 - i64toi32_i32$4) | 0)) |
                  0 |
                  ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                  0;
              }
              $29_1 = ($23_1 + Math_imul($22_1, var$3)) | 0;
              var$2 = (var$2 & 65535) | 0;
              var$3 = (var$3 & 65535) | 0;
              var$6 = Math_imul(var$2, var$3);
              var$2 = (((var$6 >>> 16) | 0) + Math_imul(var$2, var$5)) | 0;
              $45_1 = ($29_1 + ((var$2 >>> 16) | 0)) | 0;
              var$2 = (((var$2 & 65535) | 0) + Math_imul(var$4, var$3)) | 0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = ($45_1 + ((var$2 >>> 16) | 0)) | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
              if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                i64toi32_i32$0 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
                $24_1 = 0;
              } else {
                i64toi32_i32$0 =
                  (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                    ((i64toi32_i32$1 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                  0 |
                  ((i64toi32_i32$2 << i64toi32_i32$4) | 0) |
                  0;
                $24_1 = (i64toi32_i32$1 << i64toi32_i32$4) | 0;
              }
              $56$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $62$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $56$hi;
              i64toi32_i32$2 = $24_1;
              i64toi32_i32$1 = $62$hi;
              i64toi32_i32$3 = (var$2 << 16) | 0 | ((var$6 & 65535) | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
              return i64toi32_i32$2 | 0;
            }

            function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(
              var$0,
              var$0$hi,
              var$1,
              var$1$hi
            ) {
              var$0 = var$0 | 0;
              var$0$hi = var$0$hi | 0;
              var$1 = var$1 | 0;
              var$1$hi = var$1$hi | 0;
              var i64toi32_i32$2 = 0,
                i64toi32_i32$3 = 0,
                i64toi32_i32$4 = 0,
                i64toi32_i32$1 = 0,
                i64toi32_i32$0 = 0,
                i64toi32_i32$5 = 0,
                var$2 = 0,
                var$3 = 0,
                var$4 = 0,
                var$5 = 0,
                var$5$hi = 0,
                var$6 = 0,
                var$6$hi = 0,
                i64toi32_i32$6 = 0,
                $37_1 = 0,
                $38_1 = 0,
                $39_1 = 0,
                $40_1 = 0,
                $41_1 = 0,
                $42_1 = 0,
                $43_1 = 0,
                $44_1 = 0,
                var$8$hi = 0,
                $45_1 = 0,
                $46_1 = 0,
                $47_1 = 0,
                $48_1 = 0,
                var$7$hi = 0,
                $49_1 = 0,
                $63$hi = 0,
                $65_1 = 0,
                $65$hi = 0,
                $120$hi = 0,
                $129$hi = 0,
                $134$hi = 0,
                var$8 = 0,
                $140_1 = 0,
                $140$hi = 0,
                $142$hi = 0,
                $144_1 = 0,
                $144$hi = 0,
                $151_1 = 0,
                $151$hi = 0,
                $154$hi = 0,
                var$7 = 0,
                $165$hi = 0;
              label$1: {
                label$2: {
                  label$3: {
                    label$4: {
                      label$5: {
                        label$6: {
                          label$7: {
                            label$8: {
                              label$9: {
                                label$10: {
                                  label$11: {
                                    i64toi32_i32$0 = var$0$hi;
                                    i64toi32_i32$2 = var$0;
                                    i64toi32_i32$1 = 0;
                                    i64toi32_i32$3 = 32;
                                    i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                                    if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                                      i64toi32_i32$1 = 0;
                                      $37_1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                                    } else {
                                      i64toi32_i32$1 = (i64toi32_i32$0 >>> i64toi32_i32$4) | 0;
                                      $37_1 =
                                        (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$0) | 0) <<
                                          ((32 - i64toi32_i32$4) | 0)) |
                                        0 |
                                        ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                                        0;
                                    }
                                    var$2 = $37_1;
                                    if (var$2) {
                                      block: {
                                        i64toi32_i32$1 = var$1$hi;
                                        var$3 = var$1;
                                        if (!var$3) {
                                          break label$11;
                                        }
                                        i64toi32_i32$1 = var$1$hi;
                                        i64toi32_i32$0 = var$1;
                                        i64toi32_i32$2 = 0;
                                        i64toi32_i32$3 = 32;
                                        i64toi32_i32$4 = (i64toi32_i32$3 & 31) | 0;
                                        if (32 >>> 0 <= ((i64toi32_i32$3 & 63) | 0) >>> 0) {
                                          i64toi32_i32$2 = 0;
                                          $38_1 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                                        } else {
                                          i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$4) | 0;
                                          $38_1 =
                                            (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$1) |
                                              0) <<
                                              ((32 - i64toi32_i32$4) | 0)) |
                                            0 |
                                            ((i64toi32_i32$0 >>> i64toi32_i32$4) | 0) |
                                            0;
                                        }
                                        var$4 = $38_1;
                                        if (!var$4) {
                                          break label$9;
                                        }
                                        var$2 = (Math_clz32(var$4) - Math_clz32(var$2)) | 0;
                                        if (var$2 >>> 0 <= 31 >>> 0) {
                                          break label$8;
                                        }
                                        break label$2;
                                      }
                                    }
                                    i64toi32_i32$2 = var$1$hi;
                                    i64toi32_i32$1 = var$1;
                                    i64toi32_i32$0 = 1;
                                    i64toi32_i32$3 = 0;
                                    if (
                                      (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) |
                                      ((((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0)) &
                                        (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0)) |
                                        0) |
                                      0
                                    ) {
                                      break label$2;
                                    }
                                    i64toi32_i32$1 = var$0$hi;
                                    var$2 = var$0;
                                    i64toi32_i32$1 = var$1$hi;
                                    var$3 = var$1;
                                    var$2 = ((var$2 >>> 0) / (var$3 >>> 0)) | 0;
                                    i64toi32_i32$1 = 0;
                                    __wasm_intrinsics_temp_i64 = (var$0 - Math_imul(var$2, var$3)) | 0;
                                    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = 0;
                                    i64toi32_i32$2 = var$2;
                                    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                                    return i64toi32_i32$2 | 0;
                                  }
                                  i64toi32_i32$2 = var$1$hi;
                                  i64toi32_i32$3 = var$1;
                                  i64toi32_i32$1 = 0;
                                  i64toi32_i32$0 = 32;
                                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                                    i64toi32_i32$1 = 0;
                                    $39_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                                  } else {
                                    i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                                    $39_1 =
                                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                                        ((32 - i64toi32_i32$4) | 0)) |
                                      0 |
                                      ((i64toi32_i32$3 >>> i64toi32_i32$4) | 0) |
                                      0;
                                  }
                                  var$3 = $39_1;
                                  i64toi32_i32$1 = var$0$hi;
                                  if (!var$0) {
                                    break label$7;
                                  }
                                  if (!var$3) {
                                    break label$6;
                                  }
                                  var$4 = (var$3 + -1) | 0;
                                  if ((var$4 & var$3) | 0) {
                                    break label$6;
                                  }
                                  i64toi32_i32$1 = 0;
                                  i64toi32_i32$2 = (var$4 & var$2) | 0;
                                  i64toi32_i32$3 = 0;
                                  i64toi32_i32$0 = 32;
                                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                                    i64toi32_i32$3 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                                    $40_1 = 0;
                                  } else {
                                    i64toi32_i32$3 =
                                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                                        ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                                      0 |
                                      ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                                      0;
                                    $40_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                                  }
                                  $63$hi = i64toi32_i32$3;
                                  i64toi32_i32$3 = var$0$hi;
                                  i64toi32_i32$1 = var$0;
                                  i64toi32_i32$2 = 0;
                                  i64toi32_i32$0 = -1;
                                  i64toi32_i32$2 = (i64toi32_i32$3 & i64toi32_i32$2) | 0;
                                  $65_1 = (i64toi32_i32$1 & i64toi32_i32$0) | 0;
                                  $65$hi = i64toi32_i32$2;
                                  i64toi32_i32$2 = $63$hi;
                                  i64toi32_i32$3 = $40_1;
                                  i64toi32_i32$1 = $65$hi;
                                  i64toi32_i32$0 = $65_1;
                                  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                                  __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                                  __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                                  i64toi32_i32$1 = 0;
                                  i64toi32_i32$3 =
                                    (var$2 >>> (((__wasm_ctz_i32(var$3 | 0) | 0) & 31) | 0)) | 0;
                                  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                                  return i64toi32_i32$3 | 0;
                                }
                              }
                              var$4 = (var$3 + -1) | 0;
                              if (!((var$4 & var$3) | 0)) {
                                break label$5;
                              }
                              var$2 = (((Math_clz32(var$3) + 33) | 0) - Math_clz32(var$2)) | 0;
                              var$3 = (0 - var$2) | 0;
                              break label$3;
                            }
                            var$3 = (63 - var$2) | 0;
                            var$2 = (var$2 + 1) | 0;
                            break label$3;
                          }
                          var$4 = ((var$2 >>> 0) / (var$3 >>> 0)) | 0;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$2 = (var$2 - Math_imul(var$4, var$3)) | 0;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$0 = 32;
                          i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                            i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                            $41_1 = 0;
                          } else {
                            i64toi32_i32$1 =
                              (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                                ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                              0 |
                              ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                              0;
                            $41_1 = (i64toi32_i32$2 << i64toi32_i32$4) | 0;
                          }
                          __wasm_intrinsics_temp_i64 = $41_1;
                          __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$2 = var$4;
                          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                          return i64toi32_i32$2 | 0;
                        }
                        var$2 = (Math_clz32(var$3) - Math_clz32(var$2)) | 0;
                        if (var$2 >>> 0 < 31 >>> 0) {
                          break label$4;
                        }
                        break label$2;
                      }
                      i64toi32_i32$2 = var$0$hi;
                      i64toi32_i32$2 = 0;
                      __wasm_intrinsics_temp_i64 = (var$4 & var$0) | 0;
                      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
                      if ((var$3 | 0) == (1 | 0)) {
                        break label$1;
                      }
                      i64toi32_i32$2 = var$0$hi;
                      i64toi32_i32$2 = 0;
                      $120$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = var$0$hi;
                      i64toi32_i32$3 = var$0;
                      i64toi32_i32$1 = $120$hi;
                      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
                      i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                      if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $42_1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                      } else {
                        i64toi32_i32$1 = (i64toi32_i32$2 >>> i64toi32_i32$4) | 0;
                        $42_1 =
                          (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$2) | 0) <<
                            ((32 - i64toi32_i32$4) | 0)) |
                          0 |
                          ((i64toi32_i32$3 >>> i64toi32_i32$4) | 0) |
                          0;
                      }
                      i64toi32_i32$3 = $42_1;
                      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                      return i64toi32_i32$3 | 0;
                    }
                    var$3 = (63 - var$2) | 0;
                    var$2 = (var$2 + 1) | 0;
                  }
                  i64toi32_i32$3 = var$0$hi;
                  i64toi32_i32$3 = 0;
                  $129$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = var$0$hi;
                  i64toi32_i32$2 = var$0;
                  i64toi32_i32$1 = $129$hi;
                  i64toi32_i32$0 = (var$2 & 63) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $43_1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                  } else {
                    i64toi32_i32$1 = (i64toi32_i32$3 >>> i64toi32_i32$4) | 0;
                    $43_1 =
                      (((((((1 << i64toi32_i32$4) | 0) - 1) | 0) & i64toi32_i32$3) | 0) <<
                        ((32 - i64toi32_i32$4) | 0)) |
                      0 |
                      ((i64toi32_i32$2 >>> i64toi32_i32$4) | 0) |
                      0;
                  }
                  var$5 = $43_1;
                  var$5$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = var$0$hi;
                  i64toi32_i32$1 = 0;
                  $134$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = var$0$hi;
                  i64toi32_i32$3 = var$0;
                  i64toi32_i32$2 = $134$hi;
                  i64toi32_i32$0 = (var$3 & 63) | 0;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                    $44_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$3 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$1 << i64toi32_i32$4) | 0) |
                      0;
                    $44_1 = (i64toi32_i32$3 << i64toi32_i32$4) | 0;
                  }
                  var$0 = $44_1;
                  var$0$hi = i64toi32_i32$2;
                  label$13: {
                    if (var$2) {
                      block3: {
                        i64toi32_i32$2 = var$1$hi;
                        i64toi32_i32$1 = var$1;
                        i64toi32_i32$3 = -1;
                        i64toi32_i32$0 = -1;
                        i64toi32_i32$4 = (i64toi32_i32$1 + i64toi32_i32$0) | 0;
                        i64toi32_i32$5 = (i64toi32_i32$2 + i64toi32_i32$3) | 0;
                        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                          i64toi32_i32$5 = (i64toi32_i32$5 + 1) | 0;
                        }
                        var$8 = i64toi32_i32$4;
                        var$8$hi = i64toi32_i32$5;
                        label$15: while (1) {
                          i64toi32_i32$5 = var$5$hi;
                          i64toi32_i32$2 = var$5;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$0 = 1;
                          i64toi32_i32$3 = (i64toi32_i32$0 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                            i64toi32_i32$1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                            $45_1 = 0;
                          } else {
                            i64toi32_i32$1 =
                              (((((1 << i64toi32_i32$3) | 0) - 1) | 0) &
                                ((i64toi32_i32$2 >>> ((32 - i64toi32_i32$3) | 0)) | 0)) |
                              0 |
                              ((i64toi32_i32$5 << i64toi32_i32$3) | 0) |
                              0;
                            $45_1 = (i64toi32_i32$2 << i64toi32_i32$3) | 0;
                          }
                          $140_1 = $45_1;
                          $140$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = var$0$hi;
                          i64toi32_i32$5 = var$0;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = 63;
                          i64toi32_i32$3 = (i64toi32_i32$0 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                            i64toi32_i32$2 = 0;
                            $46_1 = (i64toi32_i32$1 >>> i64toi32_i32$3) | 0;
                          } else {
                            i64toi32_i32$2 = (i64toi32_i32$1 >>> i64toi32_i32$3) | 0;
                            $46_1 =
                              (((((((1 << i64toi32_i32$3) | 0) - 1) | 0) & i64toi32_i32$1) | 0) <<
                                ((32 - i64toi32_i32$3) | 0)) |
                              0 |
                              ((i64toi32_i32$5 >>> i64toi32_i32$3) | 0) |
                              0;
                          }
                          $142$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $140$hi;
                          i64toi32_i32$1 = $140_1;
                          i64toi32_i32$5 = $142$hi;
                          i64toi32_i32$0 = $46_1;
                          i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                          var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                          var$5$hi = i64toi32_i32$5;
                          $144_1 = var$5;
                          $144$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = var$8$hi;
                          i64toi32_i32$5 = var$5$hi;
                          i64toi32_i32$5 = var$8$hi;
                          i64toi32_i32$2 = var$8;
                          i64toi32_i32$1 = var$5$hi;
                          i64toi32_i32$0 = var$5;
                          i64toi32_i32$3 = (i64toi32_i32$2 - i64toi32_i32$0) | 0;
                          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
                          i64toi32_i32$4 = (i64toi32_i32$6 + i64toi32_i32$1) | 0;
                          i64toi32_i32$4 = (i64toi32_i32$5 - i64toi32_i32$4) | 0;
                          i64toi32_i32$5 = i64toi32_i32$3;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = 63;
                          i64toi32_i32$1 = (i64toi32_i32$0 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                            i64toi32_i32$2 = (i64toi32_i32$4 >> 31) | 0;
                            $47_1 = (i64toi32_i32$4 >> i64toi32_i32$1) | 0;
                          } else {
                            i64toi32_i32$2 = (i64toi32_i32$4 >> i64toi32_i32$1) | 0;
                            $47_1 =
                              (((((((1 << i64toi32_i32$1) | 0) - 1) | 0) & i64toi32_i32$4) | 0) <<
                                ((32 - i64toi32_i32$1) | 0)) |
                              0 |
                              ((i64toi32_i32$5 >>> i64toi32_i32$1) | 0) |
                              0;
                          }
                          var$6 = $47_1;
                          var$6$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = var$1$hi;
                          i64toi32_i32$2 = var$6$hi;
                          i64toi32_i32$4 = var$6;
                          i64toi32_i32$5 = var$1$hi;
                          i64toi32_i32$0 = var$1;
                          i64toi32_i32$5 = (i64toi32_i32$2 & i64toi32_i32$5) | 0;
                          $151_1 = (i64toi32_i32$4 & i64toi32_i32$0) | 0;
                          $151$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $144$hi;
                          i64toi32_i32$2 = $144_1;
                          i64toi32_i32$4 = $151$hi;
                          i64toi32_i32$0 = $151_1;
                          i64toi32_i32$1 = (i64toi32_i32$2 - i64toi32_i32$0) | 0;
                          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
                          i64toi32_i32$3 = (i64toi32_i32$6 + i64toi32_i32$4) | 0;
                          i64toi32_i32$3 = (i64toi32_i32$5 - i64toi32_i32$3) | 0;
                          var$5 = i64toi32_i32$1;
                          var$5$hi = i64toi32_i32$3;
                          i64toi32_i32$3 = var$0$hi;
                          i64toi32_i32$5 = var$0;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$0 = 1;
                          i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                          if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                            i64toi32_i32$2 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                            $48_1 = 0;
                          } else {
                            i64toi32_i32$2 =
                              (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                                ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                              0 |
                              ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                              0;
                            $48_1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                          }
                          $154$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = var$7$hi;
                          i64toi32_i32$2 = $154$hi;
                          i64toi32_i32$3 = $48_1;
                          i64toi32_i32$5 = var$7$hi;
                          i64toi32_i32$0 = var$7;
                          i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                          var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                          var$0$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = var$6$hi;
                          i64toi32_i32$2 = var$6;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 1;
                          i64toi32_i32$3 = (i64toi32_i32$5 & i64toi32_i32$3) | 0;
                          var$6 = (i64toi32_i32$2 & i64toi32_i32$0) | 0;
                          var$6$hi = i64toi32_i32$3;
                          var$7 = var$6;
                          var$7$hi = i64toi32_i32$3;
                          var$2 = (var$2 + -1) | 0;
                          if (var$2) {
                            continue label$15;
                          }
                          break label$15;
                        }
                        break label$13;
                      }
                    }
                  }
                  i64toi32_i32$3 = var$5$hi;
                  __wasm_intrinsics_temp_i64 = var$5;
                  __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = var$0$hi;
                  i64toi32_i32$5 = var$0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$0 = 1;
                  i64toi32_i32$4 = (i64toi32_i32$0 & 31) | 0;
                  if (32 >>> 0 <= ((i64toi32_i32$0 & 63) | 0) >>> 0) {
                    i64toi32_i32$2 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                    $49_1 = 0;
                  } else {
                    i64toi32_i32$2 =
                      (((((1 << i64toi32_i32$4) | 0) - 1) | 0) &
                        ((i64toi32_i32$5 >>> ((32 - i64toi32_i32$4) | 0)) | 0)) |
                      0 |
                      ((i64toi32_i32$3 << i64toi32_i32$4) | 0) |
                      0;
                    $49_1 = (i64toi32_i32$5 << i64toi32_i32$4) | 0;
                  }
                  $165$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = var$6$hi;
                  i64toi32_i32$2 = $165$hi;
                  i64toi32_i32$3 = $49_1;
                  i64toi32_i32$5 = var$6$hi;
                  i64toi32_i32$0 = var$6;
                  i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                  i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
                  return i64toi32_i32$3 | 0;
                }
                i64toi32_i32$3 = var$0$hi;
                __wasm_intrinsics_temp_i64 = var$0;
                __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                var$0 = 0;
                var$0$hi = i64toi32_i32$3;
              }
              i64toi32_i32$3 = var$0$hi;
              i64toi32_i32$5 = var$0;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
              return i64toi32_i32$5 | 0;
            }

            function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
              var$0 = var$0 | 0;
              var$0$hi = var$0$hi | 0;
              var$1 = var$1 | 0;
              var$1$hi = var$1$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = var$0$hi;
              i64toi32_i32$0 = var$1$hi;
              i64toi32_i32$0 = var$0$hi;
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$1 =
                _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(
                  var$0 | 0,
                  i64toi32_i32$0 | 0,
                  var$1 | 0,
                  i64toi32_i32$1 | 0
                ) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
              return i64toi32_i32$1 | 0;
            }

            function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
              var$0 = var$0 | 0;
              var$0$hi = var$0$hi | 0;
              var$1 = var$1 | 0;
              var$1$hi = var$1$hi | 0;
              var i64toi32_i32$0 = 0,
                i64toi32_i32$1 = 0;
              i64toi32_i32$0 = var$0$hi;
              i64toi32_i32$0 = var$1$hi;
              i64toi32_i32$0 = var$0$hi;
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$1 =
                _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(
                  var$0 | 0,
                  i64toi32_i32$0 | 0,
                  var$1 | 0,
                  i64toi32_i32$1 | 0
                ) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
              return i64toi32_i32$1 | 0;
            }

            function __wasm_rotl_i32(var$0, var$1) {
              var$0 = var$0 | 0;
              var$1 = var$1 | 0;
              var var$2 = 0;
              var$2 = (var$1 & 31) | 0;
              var$1 = (((0 - var$1) | 0) & 31) | 0;
              return (
                (((((-1 >>> var$2) | 0) & var$0) | 0) << var$2) |
                0 |
                ((((((-1 << var$1) | 0) & var$0) | 0) >>> var$1) | 0) |
                0 |
                0
              );
            }

            function __wasm_ctz_i32(var$0) {
              var$0 = var$0 | 0;
              if (var$0) {
                return (31 - Math_clz32((((var$0 + -1) | 0) ^ var$0) | 0)) | 0 | 0;
              }
              return 32 | 0;
            }

            // EMSCRIPTEN_END_FUNCS
            bufferView = HEAPU8;
            initActiveSegments(env);
            var FUNCTION_TABLE = Table([
              null,
              fimport$0,
              $7,
              $1,
              $9,
              $14,
              $16,
              $19,
              $27,
              $29,
              $31,
              $33,
              $35,
              $127,
              $132,
              $138,
              $143,
              $44,
              $148,
              $47,
              $48,
              $51,
              $52,
              $250,
              $338,
              $361,
              $362,
              $365,
              $398,
              $399,
              $1664,
              $1699,
              $746,
              $1038,
              $1046,
              $1143,
              $1146,
              $1150,
              $1153,
              $1156,
              $1159,
              $1161,
              $1163,
              $1165,
              $1167,
              $1169,
              $1171,
              $1173,
              $1175,
              $1021,
              $1026,
              $1042,
              $1065,
              $1066,
              $1067,
              $1068,
              $1069,
              $1070,
              $1071,
              $1072,
              $1073,
              $1074,
              $906,
              $1086,
              $1087,
              $1090,
              $1093,
              $1094,
              $1097,
              $1098,
              $1100,
              $1123,
              $1124,
              $1127,
              $1129,
              $1131,
              $1133,
              $1137,
              $1125,
              $1126,
              $1128,
              $1130,
              $1132,
              $1134,
              $1138,
              $414,
              $1041,
              $1048,
              $1049,
              $1051,
              $1052,
              $1053,
              $1054,
              $1056,
              $1057,
              $1059,
              $1060,
              $1061,
              $1062,
              $1063,
              $1075,
              $1076,
              $1077,
              $1078,
              $1079,
              $1080,
              $1081,
              $1084,
              $1101,
              $1102,
              $1104,
              $1106,
              $1107,
              $1108,
              $1109,
              $1111,
              $1112,
              $1113,
              $1115,
              $1117,
              $1118,
              $1119,
              $1120,
              $1122,
              $413,
              $415,
              $416,
              $417,
              $420,
              $421,
              $422,
              $423,
              $424,
              $428,
              $1182,
              $429,
              $448,
              $460,
              $463,
              $466,
              $469,
              $472,
              $475,
              $480,
              $483,
              $486,
              $1183,
              $502,
              $517,
              $522,
              $524,
              $526,
              $528,
              $530,
              $532,
              $536,
              $538,
              $540,
              $1184,
              $556,
              $568,
              $575,
              $576,
              $577,
              $578,
              $590,
              $591,
              $1185,
              $592,
              $607,
              $615,
              $616,
              $617,
              $618,
              $626,
              $627,
              $1186,
              $1188,
              $633,
              $634,
              $635,
              $636,
              $638,
              $640,
              $643,
              $1141,
              $1148,
              $1154,
              $1168,
              $1172,
              $1160,
              $1164,
              $1189,
              $1191,
              $659,
              $660,
              $661,
              $668,
              $670,
              $672,
              $675,
              $1144,
              $1151,
              $1157,
              $1170,
              $1174,
              $1162,
              $1166,
              $1193,
              $1192,
              $688,
              $1195,
              $1194,
              $696,
              $1196,
              $705,
              $706,
              $707,
              $708,
              $709,
              $710,
              $711,
              $712,
              $713,
              $1197,
              $714,
              $715,
              $716,
              $717,
              $718,
              $719,
              $720,
              $721,
              $722,
              $1198,
              $723,
              $726,
              $727,
              $728,
              $731,
              $732,
              $733,
              $734,
              $735,
              $1199,
              $736,
              $737,
              $738,
              $739,
              $740,
              $741,
              $742,
              $743,
              $744,
              $1200,
              $745,
              $766,
              $1201,
              $811,
              $828,
              $1202,
              $868,
              $879,
              $1203,
              $880,
              $891,
              $1204,
              $900,
              $901,
              $902,
              $1205,
              $903,
              $904,
              $905,
              $1440,
              $1441,
              $1443,
              $1444,
              $1445,
              $1447,
              $1448,
              $1449,
              $1450,
              $1456,
              $1457,
              $1458,
              $1459,
              $1460,
              $1461,
              $1462,
              $1464,
              $1465,
              $1466,
              $1467,
              $1468,
              $1469,
              $1470,
              $1474,
              $1475,
              $1476,
              $1477,
              $1478,
              $1480,
              $1482,
              $1481,
              $1483,
              $1494,
              $1496,
              $1495,
              $1497,
              $1508,
              $1510,
              $1509,
              $1511,
              $1517,
              $1519,
              $1518,
              $1520,
              $1435,
              $1521,
              $1434,
              $1437,
              $1438,
              $1439,
              $1528,
              $1530,
              $1531,
              $1575,
              $1576,
              $1577,
              $1608,
              $1609,
              $1610,
              $1612,
              $1614,
              $1615,
              $1622,
              $1623,
              $1625,
              $1627,
              $1628,
              $1631,
              $1632,
              $1633,
              $1635,
              $1636,
              $1638,
              $1639,
              $1640,
              $1642,
              $1643,
              $1666,
              $1669,
              $1667,
              $1668,
              $1674,
              $1670,
              $1676,
              $1696,
              $1693,
              $1679,
              $1671,
              $1695,
              $1692,
              $1680,
              $1672,
              $1694,
              $1689,
              $1682,
              $1673,
              $1684
            ]);
            function __wasm_memory_size() {
              return (buffer.byteLength / 65536) | 0;
            }

            return {
              __wasm_call_ctors: $0,
              __indirect_function_table: FUNCTION_TABLE,
              __getTypeName: $158,
              __embind_register_native_and_builtin_types: $160,
              __errno_location: $305,
              fflush: $1580,
              malloc: $1698,
              stackSave: $1716,
              stackRestore: $1717,
              stackAlloc: $1718,
              emscripten_stack_init: $371,
              emscripten_stack_get_free: $372,
              emscripten_stack_get_end: $373,
              free: $1699,
              dynCall_iiiiij: $1724,
              dynCall_iiiiijj: $1725,
              dynCall_iiiiiijj: $1726,
              dynCall_viijii: $1727,
              dynCall_jiji: $1728
            };
          }

          return asmFunc(asmLibraryArg);
        })(asmLibraryArg);
      },

      instantiate: /** @suppress{checkTypes} */ function (binary, info) {
        return {
          then: function (ok) {
            var module = new WebAssembly.Module(binary);
            ok({
              instance: new WebAssembly.Instance(module)
            });
            // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
            return { catch: function () {} };
          }
        };
      },

      RuntimeError: Error
    };

    // We don't need to actually download a wasm binary, mark it as present but empty.
    wasmBinary = [];

    // end include: wasm2js.js
    if (typeof WebAssembly !== 'object') {
      abort('no native wasm support detected');
    }

    // include: runtime_safe_heap.js

    // In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
    // In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

    /** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
    function setValue(ptr, value, type, noSafe) {
      type = type || 'i8';
      if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
      switch (type) {
        case 'i1':
          HEAP8[ptr >> 0] = value;
          break;
        case 'i8':
          HEAP8[ptr >> 0] = value;
          break;
        case 'i16':
          HEAP16[ptr >> 1] = value;
          break;
        case 'i32':
          HEAP32[ptr >> 2] = value;
          break;
        case 'i64':
          (tempI64 = [
            value >>> 0,
            ((tempDouble = value),
            +Math.abs(tempDouble) >= 1.0
              ? tempDouble > 0.0
                ? (Math.min(+Math.floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0
                : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0
              : 0)
          ]),
            (HEAP32[ptr >> 2] = tempI64[0]),
            (HEAP32[(ptr + 4) >> 2] = tempI64[1]);
          break;
        case 'float':
          HEAPF32[ptr >> 2] = value;
          break;
        case 'double':
          HEAPF64[ptr >> 3] = value;
          break;
        default:
          abort('invalid type for setValue: ' + type);
      }
    }

    /** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
    function getValue(ptr, type, noSafe) {
      type = type || 'i8';
      if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
      switch (type) {
        case 'i1':
          return HEAP8[ptr >> 0];
        case 'i8':
          return HEAP8[ptr >> 0];
        case 'i16':
          return HEAP16[ptr >> 1];
        case 'i32':
          return HEAP32[ptr >> 2];
        case 'i64':
          return HEAP32[ptr >> 2];
        case 'float':
          return HEAPF32[ptr >> 2];
        case 'double':
          return HEAPF64[ptr >> 3];
        default:
          abort('invalid type for getValue: ' + type);
      }
      return null;
    }

    // end include: runtime_safe_heap.js
    // Wasm globals

    var wasmMemory;

    //========================================
    // Runtime essentials
    //========================================

    // whether we are quitting the application. no code should run after this.
    // set in exit() and abort()
    var ABORT = false;

    // set by exit() and abort().  Passed to 'onExit' handler.
    // NOTE: This is also used as the process return code code in shell environments
    // but only when noExitRuntime is false.
    var EXITSTATUS;

    /** @type {function(*, string=)} */
    function assert(condition, text) {
      if (!condition) {
        abort('Assertion failed: ' + text);
      }
    }

    // Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
    function getCFunc(ident) {
      var func = Module['_' + ident]; // closure exported function
      assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
      return func;
    }

    // C calling interface.
    /** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
    function ccall(ident, returnType, argTypes, args, opts) {
      // For fast lookup of conversion functions
      var toC = {
        string: function (str) {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) {
            // null string
            // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
            var len = (str.length << 2) + 1;
            ret = stackAlloc(len);
            stringToUTF8(str, ret, len);
          }
          return ret;
        },
        array: function (arr) {
          var ret = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }
      };

      function convertReturnValue(ret) {
        if (returnType === 'string') return UTF8ToString(ret);
        if (returnType === 'boolean') return Boolean(ret);
        return ret;
      }

      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      assert(returnType !== 'array', 'Return type should not be "array".');
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func.apply(null, cArgs);

      ret = convertReturnValue(ret);
      if (stack !== 0) stackRestore(stack);
      return ret;
    }

    /** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
    function cwrap(ident, returnType, argTypes, opts) {
      return function () {
        return ccall(ident, returnType, argTypes, arguments, opts);
      };
    }

    // We used to include malloc/free by default in the past. Show a helpful error in
    // builds with assertions.

    var ALLOC_NORMAL = 0; // Tries to use _malloc()
    var ALLOC_STACK = 1; // Lives for the duration of the current function call

    // allocate(): This is for internal use. You can use it yourself as well, but the interface
    //             is a little tricky (see docs right below). The reason is that it is optimized
    //             for multiple syntaxes to save space in generated code. So you should
    //             normally not use allocate(), and instead allocate memory using _malloc(),
    //             initialize it with setValue(), and so forth.
    // @slab: An array of data.
    // @allocator: How to allocate memory, see ALLOC_*
    /** @type {function((Uint8Array|Array<number>), number)} */
    function allocate(slab, allocator) {
      var ret;
      assert(typeof allocator === 'number', 'allocate no longer takes a type argument');
      assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0');

      if (allocator == ALLOC_STACK) {
        ret = stackAlloc(slab.length);
      } else {
        ret = _malloc(slab.length);
      }

      if (slab.subarray || slab.slice) {
        HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
      } else {
        HEAPU8.set(new Uint8Array(slab), ret);
      }
      return ret;
    }

    // include: runtime_strings.js

    // runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

    // Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
    // a copy of that string as a Javascript String object.

    var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

    /**
     * @param {number} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
    function UTF8ArrayToString(heap, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
      // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
      while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

      if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(heap.subarray(idx, endPtr));
      } else {
        var str = '';
        // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
        while (idx < endPtr) {
          // For UTF8 byte structure, see:
          // http://en.wikipedia.org/wiki/UTF-8#Description
          // https://www.ietf.org/rfc/rfc2279.txt
          // https://tools.ietf.org/html/rfc3629
          var u0 = heap[idx++];
          if (!(u0 & 0x80)) {
            str += String.fromCharCode(u0);
            continue;
          }
          var u1 = heap[idx++] & 63;
          if ((u0 & 0xe0) == 0xc0) {
            str += String.fromCharCode(((u0 & 31) << 6) | u1);
            continue;
          }
          var u2 = heap[idx++] & 63;
          if ((u0 & 0xf0) == 0xe0) {
            u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
          } else {
            if ((u0 & 0xf8) != 0xf0)
              warnOnce(
                'Invalid UTF-8 leading byte 0x' +
                  u0.toString(16) +
                  ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!'
              );
            u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
          }

          if (u0 < 0x10000) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 0x10000;
            str += String.fromCharCode(0xd800 | (ch >> 10), 0xdc00 | (ch & 0x3ff));
          }
        }
      }
      return str;
    }

    // Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
    // copy of that string as a Javascript String object.
    // maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
    //                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
    //                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
    //                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
    //                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
    //                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
    //                 throw JS JIT optimizations off, so it is worth to consider consistently using one
    //                 style or the other.
    /**
     * @param {number} ptr
     * @param {number=} maxBytesToRead
     * @return {string}
     */
    function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    }

    // Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
    // encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
    // Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Parameters:
    //   str: the Javascript string to copy.
    //   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
    //   outIdx: The starting offset in the array to begin the copying.
    //   maxBytesToWrite: The maximum number of bytes this function can write to the array.
    //                    This count should include the null terminator,
    //                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
    //                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
    // Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0))
        // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
        return 0;

      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xd800 && u <= 0xdfff) {
          var u1 = str.charCodeAt(++i);
          u = (0x10000 + ((u & 0x3ff) << 10)) | (u1 & 0x3ff);
        }
        if (u <= 0x7f) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7ff) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xc0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xffff) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xe0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u >= 0x200000)
            warnOnce(
              'Invalid Unicode code point 0x' +
                u.toString(16) +
                ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).'
            );
          heap[outIdx++] = 0xf0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    }

    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
    // Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      assert(
        typeof maxBytesToWrite == 'number',
        'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'
      );
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    }

    // Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
    function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xd800 && u <= 0xdfff) u = (0x10000 + ((u & 0x3ff) << 10)) | (str.charCodeAt(++i) & 0x3ff);
        if (u <= 0x7f) ++len;
        else if (u <= 0x7ff) len += 2;
        else if (u <= 0xffff) len += 3;
        else len += 4;
      }
      return len;
    }

    // end include: runtime_strings.js
    // include: runtime_strings_extra.js

    // runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

    // Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
    // a copy of that string as a Javascript String object.

    function AsciiToString(ptr) {
      var str = '';
      while (1) {
        var ch = HEAPU8[ptr++ >> 0];
        if (!ch) return str;
        str += String.fromCharCode(ch);
      }
    }

    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

    function stringToAscii(str, outPtr) {
      return writeAsciiToMemory(str, outPtr, false);
    }

    // Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
    // a copy of that string as a Javascript String object.

    var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

    function UTF16ToString(ptr, maxBytesToRead) {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
      // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;

      if (endPtr - ptr > 32 && UTF16Decoder) {
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
      } else {
        var str = '';

        // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
        // will always evaluate to true. The loop is then terminated on the first null char.
        for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
          var codeUnit = HEAP16[(ptr + i * 2) >> 1];
          if (codeUnit == 0) break;
          // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
          str += String.fromCharCode(codeUnit);
        }

        return str;
      }
    }

    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
    // Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Parameters:
    //   str: the Javascript string to copy.
    //   outPtr: Byte address in Emscripten HEAP where to write the string to.
    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
    //                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
    //                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
    // Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF16(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(
        typeof maxBytesToWrite == 'number',
        'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'
      );
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7fffffff;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[outPtr >> 1] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[outPtr >> 1] = 0;
      return outPtr - startPtr;
    }

    // Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

    function lengthBytesUTF16(str) {
      return str.length * 2;
    }

    function UTF32ToString(ptr, maxBytesToRead) {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;

      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(ptr + i * 4) >> 2];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xd800 | (ch >> 10), 0xdc00 | (ch & 0x3ff));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }

    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
    // Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Parameters:
    //   str: the Javascript string to copy.
    //   outPtr: Byte address in Emscripten HEAP where to write the string to.
    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
    //                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
    //                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
    // Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF32(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(
        typeof maxBytesToWrite == 'number',
        'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'
      );
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7fffffff;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xd800 && codeUnit <= 0xdfff) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = (0x10000 + ((codeUnit & 0x3ff) << 10)) | (trailSurrogate & 0x3ff);
        }
        HEAP32[outPtr >> 2] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[outPtr >> 2] = 0;
      return outPtr - startPtr;
    }

    // Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

    function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xd800 && codeUnit <= 0xdfff) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }

      return len;
    }

    // Allocate heap space for a JS string, and write it there.
    // It is the responsibility of the caller to free() that memory.
    function allocateUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }

    // Allocate stack space for a JS string, and write it there.
    function allocateUTF8OnStack(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }

    // Deprecated: This function should not be called because it is unsafe and does not provide
    // a maximum length limit of how many bytes it is allowed to write. Prefer calling the
    // function stringToUTF8Array() instead, which takes in a maximum length that can be used
    // to be secure from out of bounds writes.
    /** @deprecated
    @param {boolean=} dontAddNull */
    function writeStringToMemory(string, buffer, dontAddNull) {
      warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

      var /** @type {number} */ lastChar, /** @type {number} */ end;
      if (dontAddNull) {
        // stringToUTF8Array always appends null. If we don't want to do that, remember the
        // character that existed at the location where the null will be placed, and restore
        // that after the write (below).
        end = buffer + lengthBytesUTF8(string);
        lastChar = HEAP8[end];
      }
      stringToUTF8(string, buffer, Infinity);
      if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
    }

    function writeArrayToMemory(array, buffer) {
      assert(
        array.length >= 0,
        'writeArrayToMemory array must have a length (should be an array or typed array)'
      );
      HEAP8.set(array, buffer);
    }

    /** @param {boolean=} dontAddNull */
    function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        assert((str.charCodeAt(i) === str.charCodeAt(i)) & 0xff);
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
      }
      // Null-terminate the pointer to the HEAP.
      if (!dontAddNull) HEAP8[buffer >> 0] = 0;
    }

    // end include: runtime_strings_extra.js
    // Memory management

    function alignUp(x, multiple) {
      if (x % multiple > 0) {
        x += multiple - (x % multiple);
      }
      return x;
    }

    var HEAP,
      /** @type {ArrayBuffer} */
      buffer,
      /** @type {Int8Array} */
      HEAP8,
      /** @type {Uint8Array} */
      HEAPU8,
      /** @type {Int16Array} */
      HEAP16,
      /** @type {Uint16Array} */
      HEAPU16,
      /** @type {Int32Array} */
      HEAP32,
      /** @type {Uint32Array} */
      HEAPU32,
      /** @type {Float32Array} */
      HEAPF32,
      /** @type {Float64Array} */
      HEAPF64;

    function updateGlobalBufferAndViews(buf) {
      buffer = buf;
      Module['HEAP8'] = HEAP8 = new Int8Array(buf);
      Module['HEAP16'] = HEAP16 = new Int16Array(buf);
      Module['HEAP32'] = HEAP32 = new Int32Array(buf);
      Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
      Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
      Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
      Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
      Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
    }

    var TOTAL_STACK = 5242880;
    if (Module['TOTAL_STACK'])
      assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime');

    var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
    if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
      Object.defineProperty(Module, 'INITIAL_MEMORY', {
        configurable: true,
        get: function () {
          abort(
            'Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)'
          );
        }
      });
    }

    assert(
      INITIAL_MEMORY >= TOTAL_STACK,
      'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' +
        INITIAL_MEMORY +
        '! (TOTAL_STACK=' +
        TOTAL_STACK +
        ')'
    );

    // check for full engine support (use string 'subarray' to avoid closure compiler confusion)
    assert(
      typeof Int32Array !== 'undefined' &&
        typeof Float64Array !== 'undefined' &&
        Int32Array.prototype.subarray !== undefined &&
        Int32Array.prototype.set !== undefined,
      'JS engine does not provide full typed array support'
    );

    // In non-standalone/normal mode, we create the memory here.
    // include: runtime_init_memory.js

    // Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

    if (Module['wasmMemory']) {
      wasmMemory = Module['wasmMemory'];
    } else {
      wasmMemory = new WebAssembly.Memory({
        initial: INITIAL_MEMORY / 65536,
        maximum: INITIAL_MEMORY / 65536
      });
    }

    if (wasmMemory) {
      buffer = wasmMemory.buffer;
    }

    // If the user provides an incorrect length, just use that length instead rather than providing the user to
    // specifically provide the memory length with Module['INITIAL_MEMORY'].
    INITIAL_MEMORY = buffer.byteLength;
    assert(INITIAL_MEMORY % 65536 === 0);
    updateGlobalBufferAndViews(buffer);

    // end include: runtime_init_memory.js

    // include: runtime_init_table.js
    // In regular non-RELOCATABLE mode the table is exported
    // from the wasm module and this will be assigned once
    // the exports are available.
    var wasmTable;

    // end include: runtime_init_table.js
    // include: runtime_stack_check.js

    // Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
    function writeStackCookie() {
      var max = _emscripten_stack_get_end();
      assert((max & 3) == 0);
      // The stack grows downwards
      HEAPU32[(max >> 2) + 1] = 0x2135467;
      HEAPU32[(max >> 2) + 2] = 0x89bacdfe;
      // Also test the global address 0 for integrity.
      HEAP32[0] = 0x63736d65; /* 'emsc' */
    }

    function checkStackCookie() {
      if (ABORT) return;
      var max = _emscripten_stack_get_end();
      var cookie1 = HEAPU32[(max >> 2) + 1];
      var cookie2 = HEAPU32[(max >> 2) + 2];
      if (cookie1 != 0x2135467 || cookie2 != 0x89bacdfe) {
        abort(
          'Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' +
            cookie2.toString(16) +
            ' ' +
            cookie1.toString(16)
        );
      }
      // Also test the global address 0 for integrity.
      if (HEAP32[0] !== 0x63736d65 /* 'emsc' */)
        abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
    }

    // end include: runtime_stack_check.js
    // include: runtime_assertions.js

    // Endianness check
    (function () {
      var h16 = new Int16Array(1);
      var h8 = new Int8Array(h16.buffer);
      h16[0] = 0x6373;
      if (h8[0] !== 0x73 || h8[1] !== 0x63)
        throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
    })();

    function abortFnPtrError(ptr, sig) {
      abort(
        'Invalid function pointer ' +
          ptr +
          " called with signature '" +
          sig +
          "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info."
      );
    }

    // end include: runtime_assertions.js
    var __ATPRERUN__ = []; // functions called before the runtime is initialized
    var __ATINIT__ = []; // functions called during startup
    var __ATMAIN__ = []; // functions called when main() is to be run
    var __ATEXIT__ = []; // functions called during shutdown
    var __ATPOSTRUN__ = []; // functions called after the main() is called

    var runtimeInitialized = false;
    var runtimeExited = false;

    function preRun() {
      if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
          addOnPreRun(Module['preRun'].shift());
        }
      }

      callRuntimeCallbacks(__ATPRERUN__);
    }

    function initRuntime() {
      checkStackCookie();
      assert(!runtimeInitialized);
      runtimeInitialized = true;

      if (!Module['noFSInit'] && !FS.init.initialized) FS.init();
      TTY.init();
      callRuntimeCallbacks(__ATINIT__);
    }

    function preMain() {
      checkStackCookie();
      FS.ignorePermissions = false;
      callRuntimeCallbacks(__ATMAIN__);
    }

    function exitRuntime() {
      checkStackCookie();
      runtimeExited = true;
    }

    function postRun() {
      checkStackCookie();

      if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
          addOnPostRun(Module['postRun'].shift());
        }
      }

      callRuntimeCallbacks(__ATPOSTRUN__);
    }

    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }

    function addOnInit(cb) {
      __ATINIT__.unshift(cb);
    }

    function addOnPreMain(cb) {
      __ATMAIN__.unshift(cb);
    }

    function addOnExit(cb) {}

    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }

    // include: runtime_math.js

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

    assert(
      Math.imul,
      'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
    );
    assert(
      Math.fround,
      'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
    );
    assert(
      Math.clz32,
      'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
    );
    assert(
      Math.trunc,
      'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
    );

    // end include: runtime_math.js
    // A counter of dependencies for calling run(). If we need to
    // do asynchronous work before running, increment this and
    // decrement it. Incrementing must happen in a place like
    // Module.preRun (used by emcc to add file preloading).
    // Note that you can add dependencies in preRun, even though
    // it happens right before run - run will be postponed until
    // the dependencies are met.
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
    var runDependencyTracking = {};

    function getUniqueRunDependency(id) {
      var orig = id;
      while (1) {
        if (!runDependencyTracking[id]) return id;
        id = orig + Math.random();
      }
    }

    function addRunDependency(id) {
      runDependencies++;

      if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
      }

      if (id) {
        assert(!runDependencyTracking[id]);
        runDependencyTracking[id] = 1;
        if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
          // Check for missing dependencies every few seconds
          runDependencyWatcher = setInterval(function () {
            if (ABORT) {
              clearInterval(runDependencyWatcher);
              runDependencyWatcher = null;
              return;
            }
            var shown = false;
            for (var dep in runDependencyTracking) {
              if (!shown) {
                shown = true;
                err('still waiting on run dependencies:');
              }
              err('dependency: ' + dep);
            }
            if (shown) {
              err('(end of list)');
            }
          }, 10000);
        }
      } else {
        err('warning: run dependency added without ID');
      }
    }

    function removeRunDependency(id) {
      runDependencies--;

      if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
      }

      if (id) {
        assert(runDependencyTracking[id]);
        delete runDependencyTracking[id];
      } else {
        err('warning: run dependency removed without ID');
      }
      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback(); // can add another dependenciesFulfilled
        }
      }
    }

    Module['preloadedImages'] = {}; // maps url to image data
    Module['preloadedAudios'] = {}; // maps url to audio data

    /** @param {string|number=} what */
    function abort(what) {
      if (Module['onAbort']) {
        Module['onAbort'](what);
      }

      what += '';
      err(what);

      ABORT = true;
      EXITSTATUS = 1;

      var output = 'abort(' + what + ') at ' + stackTrace();
      what = output;

      // Use a wasm runtime error, because a JS error might be seen as a foreign
      // exception, which means we'd run destructors on it. We need the error to
      // simply make the program stop.
      var e = new WebAssembly.RuntimeError(what);

      readyPromiseReject(e);
      // Throw the error whether or not MODULARIZE is set because abort is used
      // in code paths apart from instantiation where an exception is expected
      // to be thrown when abort is called.
      throw e;
    }

    // {{MEM_INITIALIZER}}

    // include: memoryprofiler.js

    // end include: memoryprofiler.js
    // include: URIUtils.js

    function hasPrefix(str, prefix) {
      return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
    }

    // Prefix of data URIs emitted by SINGLE_FILE and related options.
    var dataURIPrefix = 'data:application/octet-stream;base64,';

    // Indicates whether filename is a base64 data URI.
    function isDataURI(filename) {
      return hasPrefix(filename, dataURIPrefix);
    }

    var fileURIPrefix = 'file://';

    // Indicates whether filename is delivered via file protocol (as opposed to http/https)
    function isFileURI(filename) {
      return hasPrefix(filename, fileURIPrefix);
    }

    // end include: URIUtils.js
    function createExportWrapper(name, fixedasm) {
      return function () {
        var displayName = name;
        var asm = fixedasm;
        if (!fixedasm) {
          asm = Module['asm'];
        }
        assert(
          runtimeInitialized,
          'native function `' + displayName + '` called before runtime initialization'
        );
        assert(
          !runtimeExited,
          'native function `' +
            displayName +
            '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
        );
        if (!asm[name]) {
          assert(asm[name], 'exported native function `' + displayName + '` not found');
        }
        return asm[name].apply(null, arguments);
      };
    }

    var wasmBinaryFile = 'val.wasm';
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = locateFile(wasmBinaryFile);
    }

    function getBinary(file) {
      try {
        if (file == wasmBinaryFile && wasmBinary) {
          return new Uint8Array(wasmBinary);
        }
        var binary = tryParseAsDataURI(file);
        if (binary) {
          return binary;
        }
        if (readBinary) {
          return readBinary(file);
        } else {
          throw 'both async and sync fetching of the wasm failed';
        }
      } catch (err) {
        abort(err);
      }
    }

    function getBinaryPromise() {
      // If we don't have the binary yet, try to to load it asynchronously.
      // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
      // See https://github.com/github/fetch/pull/92#issuecomment-140665932
      // Cordova or Electron apps are typically loaded from a file:// url.
      // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
        if (typeof fetch === 'function' && !isFileURI(wasmBinaryFile)) {
          return fetch(wasmBinaryFile, { credentials: 'same-origin' })
            .then(function (response) {
              if (!response['ok']) {
                throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
              }
              return response['arrayBuffer']();
            })
            .catch(function () {
              return getBinary(wasmBinaryFile);
            });
        } else {
          if (readAsync) {
            // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
            return new Promise(function (resolve, reject) {
              readAsync(
                wasmBinaryFile,
                function (response) {
                  resolve(new Uint8Array(/** @type{!ArrayBuffer} */ (response)));
                },
                reject
              );
            });
          }
        }
      }

      // Otherwise, getBinary should be able to get it synchronously
      return Promise.resolve().then(function () {
        return getBinary(wasmBinaryFile);
      });
    }

    // Create the wasm instance.
    // Receives the wasm imports, returns the exports.
    function createWasm() {
      // prepare imports
      var info = {
        env: asmLibraryArg,
        wasi_snapshot_preview1: asmLibraryArg
      };
      // Load the wasm module and create an instance of using native support in the JS engine.
      // handle a generated wasm instance, receiving its exports and
      // performing other necessary setup
      /** @param {WebAssembly.Module=} module*/
      function receiveInstance(instance, module) {
        var exports = instance.exports;

        Module['asm'] = exports;

        wasmTable = Module['asm']['__indirect_function_table'];
        assert(wasmTable, 'table not found in wasm exports');

        addOnInit(Module['asm']['__wasm_call_ctors']);

        removeRunDependency('wasm-instantiate');
      }
      // we can't run yet (except in a pthread, where we have a custom sync instantiator)
      addRunDependency('wasm-instantiate');

      // Async compilation can be confusing when an error on the page overwrites Module
      // (for example, if the order of elements is wrong, and the one defining Module is
      // later), so we save Module and check it later.
      var trueModule = Module;
      function receiveInstantiatedSource(output) {
        // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
        // receiveInstance() will swap in the exports (to Module.asm) so they can be called
        assert(
          Module === trueModule,
          'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?'
        );
        trueModule = null;
        // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
        // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
        receiveInstance(output['instance']);
      }

      function instantiateArrayBuffer(receiver) {
        return getBinaryPromise()
          .then(function (binary) {
            var result = WebAssembly.instantiate(binary, info);
            return result;
          })
          .then(receiver, function (reason) {
            err('failed to asynchronously prepare wasm: ' + reason);

            // Warn on some common problems.
            if (isFileURI(wasmBinaryFile)) {
              err(
                'warning: Loading from a file URI (' +
                  wasmBinaryFile +
                  ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing'
              );
            }
            abort(reason);
          });
      }

      // Prefer streaming instantiation if available.
      function instantiateAsync() {
        if (
          !wasmBinary &&
          typeof WebAssembly.instantiateStreaming === 'function' &&
          !isDataURI(wasmBinaryFile) &&
          // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
          !isFileURI(wasmBinaryFile) &&
          typeof fetch === 'function'
        ) {
          return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
            var result = WebAssembly.instantiateStreaming(response, info);
            return result.then(receiveInstantiatedSource, function (reason) {
              // We expect the most common failure cause to be a bad MIME type for the binary,
              // in which case falling back to ArrayBuffer instantiation should work.
              err('wasm streaming compile failed: ' + reason);
              err('falling back to ArrayBuffer instantiation');
              return instantiateArrayBuffer(receiveInstantiatedSource);
            });
          });
        } else {
          return instantiateArrayBuffer(receiveInstantiatedSource);
        }
      }

      // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
      // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
      // to any other async startup actions they are performing.
      if (Module['instantiateWasm']) {
        try {
          var exports = Module['instantiateWasm'](info, receiveInstance);
          return exports;
        } catch (e) {
          err('Module.instantiateWasm callback failed with error: ' + e);
          return false;
        }
      }

      // If instantiation fails, reject the module ready promise.
      instantiateAsync().catch(readyPromiseReject);
      return {}; // no exports yet; we'll fill them in later
    }

    // Globals used by JS i64 conversions (see makeSetValue)
    var tempDouble;
    var tempI64;

    // === Body ===

    var ASM_CONSTS = {};

    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

    function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

    function demangleAll(text) {
      var regex = /\b_Z[\w\d_]+/g;
      return text.replace(regex, function (x) {
        var y = demangle(x);
        return x === y ? x : y + ' [' + x + ']';
      });
    }

    function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch (e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

    var runtimeKeepaliveCounter = 0;
    function keepRuntimeAlive() {
      return noExitRuntime || runtimeKeepaliveCounter > 0;
    }

    function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

    function _atexit(func, arg) {}
    function ___cxa_atexit(a0, a1) {
      return _atexit(a0, a1);
    }

    var structRegistrations = {};

    function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }

    function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }

    var awaitingDependencies = {};

    var registeredTypes = {};

    var typeDependencies = {};

    var char_0 = 48;

    var char_9 = 57;
    function makeLegalFunctionName(name) {
      if (undefined === name) {
        return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return '_' + name;
      } else {
        return name;
      }
    }
    function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
        'body',
        'return function ' +
          name +
          '() {\n' +
          '    "use strict";' +
          '    return body.apply(this, arguments);\n' +
          '};\n'
      )(body);
    }
    function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function (message) {
        this.name = errorName;
        this.message = message;

        var stack = new Error(message).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' + stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function () {
        if (this.message === undefined) {
          return this.name;
        } else {
          return this.name + ': ' + this.message;
        }
      };

      return errorClass;
    }
    var InternalError = undefined;
    function throwInternalError(message) {
      throw new InternalError(message);
    }
    function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function (type) {
        typeDependencies[type] = dependentTypes;
      });

      function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }

      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function (dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(function () {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
    function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];

      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords
        .map(function (field) {
          return field.getterReturnType;
        })
        .concat(
          fieldRecords.map(function (field) {
            return field.setterArgumentType;
          })
        );
      whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function (field, i) {
          var fieldName = field.fieldName;
          var getterReturnType = fieldTypes[i];
          var getter = field.getter;
          var getterContext = field.getterContext;
          var setterArgumentType = fieldTypes[i + fieldRecords.length];
          var setter = field.setter;
          var setterContext = field.setterContext;
          fields[fieldName] = {
            read: function (ptr) {
              return getterReturnType['fromWireType'](getter(getterContext, ptr));
            },
            write: function (ptr, o) {
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
              runDestructors(destructors);
            }
          };
        });

        return [
          {
            name: reg.name,
            fromWireType: function (ptr) {
              var rv = {};
              for (var i in fields) {
                rv[i] = fields[i].read(ptr);
              }
              rawDestructor(ptr);
              return rv;
            },
            toWireType: function (destructors, o) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
              // assume all fields are present without checking.
              for (var fieldName in fields) {
                if (!(fieldName in o)) {
                  throw new TypeError('Missing field:  "' + fieldName + '"');
                }
              }
              var ptr = rawConstructor();
              for (fieldName in fields) {
                fields[fieldName].write(ptr, o[fieldName]);
              }
              if (destructors !== null) {
                destructors.push(rawDestructor, ptr);
              }
              return ptr;
            },
            argPackAdvance: 8,
            readValueFromPointer: simpleReadValueFromPointer,
            destructorFunction: rawDestructor
          }
        ];
      });
    }

    function getShiftFromSize(size) {
      switch (size) {
        case 1:
          return 0;
        case 2:
          return 1;
        case 4:
          return 2;
        case 8:
          return 3;
        default:
          throw new TypeError('Unknown type size: ' + size);
      }
    }

    function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
    var embind_charCodes = undefined;
    function readLatin1String(ptr) {
      var ret = '';
      var c = ptr;
      while (HEAPU8[c]) {
        ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }

    var BindingError = undefined;
    function throwBindingError(message) {
      throw new BindingError(message);
    }
    /** @param {Object=} options */
    function registerType(rawType, registeredInstance, options) {
      options = options || {};

      if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }

      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError("Cannot register type '" + name + "' twice");
        }
      }

      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];

      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function (cb) {
          cb();
        });
      }
    }
    function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);

      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (wt) {
          // ambiguous emscripten ABI: sometimes return values are
          // true or false, and sometimes integers (0 or 1)
          return !!wt;
        },
        toWireType: function (destructors, o) {
          return o ? trueValue : falseValue;
        },
        argPackAdvance: 8,
        readValueFromPointer: function (pointer) {
          // TODO: if heap is fixed (like in asm.js) this could be executed outside
          var heap;
          if (size === 1) {
            heap = HEAP8;
          } else if (size === 2) {
            heap = HEAP16;
          } else if (size === 4) {
            heap = HEAP32;
          } else {
            throw new TypeError('Unknown boolean type size: ' + name);
          }
          return this['fromWireType'](heap[pointer >> shift]);
        },
        destructorFunction: null // This type does not need a destructor
      });
    }

    function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }

      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;

      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }

      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }

      return leftClass === rightClass && left === right;
    }

    function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType
      };
    }

    function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }

    var finalizationGroup = false;

    function detachFinalizer(handle) {}

    function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
    function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    }
    function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
        attachFinalizer = function (handle) {
          return handle;
        };
        return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
        for (var result = iter.next(); !result.done; result = iter.next()) {
          var $$ = result.value;
          if (!$$.ptr) {
            console.warn('object already deleted: ' + $$.ptr);
          } else {
            releaseClassHandle($$);
          }
        }
      });
      attachFinalizer = function (handle) {
        finalizationGroup.register(handle, handle.$$, handle.$$);
        return handle;
      };
      detachFinalizer = function (handle) {
        finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
    function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }

      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(
          Object.create(Object.getPrototypeOf(this), {
            $$: {
              value: shallowCopyInternalPointer(this.$$)
            }
          })
        );

        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }

    function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }

      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }

      detachFinalizer(this);
      releaseClassHandle(this.$$);

      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    }

    function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }

    var delayFunction = undefined;

    var deletionQueue = [];

    function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    }
    function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
    function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
    function ClassHandle() {}

    var registeredPointers = {};

    function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function () {
          // TODO This check can be removed in -O3 level "unsafe" optimizations.
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
            throwBindingError(
              "Function '" +
                humanName +
                "' called with an invalid number of arguments (" +
                arguments.length +
                ') - expects one of (' +
                proto[methodName].overloadTable +
                ')!'
            );
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
    /** @param {number=} numArguments */
    function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (
          undefined === numArguments ||
          (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])
        ) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }

        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
          throwBindingError(
            'Cannot register multiple overloads of a function with the same number of arguments (' +
              numArguments +
              ')!'
          );
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        if (undefined !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }

    /** @constructor */
    function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }

    function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError(
            'Expected null or instance of ' + desiredClass.name + ', got an instance of ' + ptrClass.name
          );
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
    function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
      }

      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }

    function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }

      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError(
          'Cannot convert argument of type ' +
            (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) +
            ' to parameter type ' +
            this.name
        );
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

      if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }

        switch (this.sharingPolicy) {
          case 0: // NONE
            // no upcasting
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError(
                'Cannot convert argument of type ' +
                  (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) +
                  ' to parameter type ' +
                  this.name
              );
            }
            break;

          case 1: // INTRUSIVE
            ptr = handle.$$.smartPtr;
            break;

          case 2: // BY_EMVAL
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                __emval_register(function () {
                  clonedHandle['delete']();
                })
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;

          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr;
    }

    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
      }

      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
        throwBindingError(
          'Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name
        );
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }

    function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }

    function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }

    function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle['delete']();
      }
    }

    function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (undefined === desiredClass.baseClass) {
        return null; // no conversion
      }

      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    }

    function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }

    function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv;
    }

    function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
    function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
    var registeredInstances = {};

    function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
        throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
      }
      return ptr;
    }
    function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }

    function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(
        Object.create(prototype, {
          $$: {
            value: record
          }
        })
      );
    }
    function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)

      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }

      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']();
        } else {
          // else, just increment reference count on existing object
          // it already has a reference to the smart pointer
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv;
        }
      }

      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr: ptr
          });
        }
      }

      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }

      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp
        });
      }
    }
    function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
    /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
    function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,

      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;

      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;

      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
      }
    }

    /** @param {number=} numArguments */
    function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }

    function dynCallLegacy(sig, ptr, args) {
      assert('dynCall_' + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module['dynCall_' + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
    function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args);
    }
    function getDynCaller(sig, ptr) {
      assert(sig.indexOf('j') >= 0, 'getDynCaller should only be called with i64 sigs');
      var argCache = [];
      return function () {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
    function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);

      function makeDynCaller() {
        if (signature.indexOf('j') != -1) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }

      var fp = makeDynCaller();
      if (typeof fp !== 'function') {
        throwBindingError('unknown function pointer with signature ' + signature + ': ' + rawFunction);
      }
      return fp;
    }

    var UnboundTypeError = undefined;

    function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
    function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);

      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
    function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);

      exposePublicSymbol(legalFunctionName, function () {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });

      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function (base) {
          base = base[0];

          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }

          var constructor = createNamedFunction(legalFunctionName, function () {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name);
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + ' has no accessible constructor');
            }
            var body = registeredClass.constructor_body[arguments.length];
            if (undefined === body) {
              throw new BindingError(
                'Tried to invoke ctor of ' +
                  name +
                  ' with invalid number of parameters (' +
                  arguments.length +
                  ') - expected (' +
                  Object.keys(registeredClass.constructor_body).toString() +
                  ') parameters instead!'
              );
            }
            return body.apply(this, arguments);
          });

          var instancePrototype = Object.create(basePrototype, {
            constructor: { value: constructor }
          });

          constructor.prototype = instancePrototype;

          var registeredClass = new RegisteredClass(
            name,
            constructor,
            instancePrototype,
            rawDestructor,
            baseClass,
            getActualType,
            upcast,
            downcast
          );

          var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);

          var pointerConverter = new RegisteredPointer(name + '*', registeredClass, false, false, false);

          var constPointerConverter = new RegisteredPointer(
            name + ' const*',
            registeredClass,
            false,
            true,
            false
          );

          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };

          replacePublicSymbol(legalFunctionName, constructor);

          return [referenceConverter, pointerConverter, constPointerConverter];
        }
      );
    }

    function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
    function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];

      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError(
            'Cannot register multiple constructors with identical number of parameters (' +
              (argCount - 1) +
              ") for class '" +
              classType.name +
              "'! Overload resolution is currently only performed using the parameter count, not actual type info!"
          );
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
          throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
            if (arguments.length !== argCount - 1) {
              throwBindingError(
                humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount - 1)
              );
            }
            destructors.length = 0;
            args.length = argCount;
            for (var i = 1; i < argCount; ++i) {
              args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
            }

            var ptr = invoker.apply(null, args);
            runDestructors(destructors);

            return argTypes[0]['fromWireType'](ptr);
          };
          return [];
        });
        return [];
      });
    }

    function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError(
          'new_ called with constructor type ' + typeof constructor + ' which is not a function'
        );
      }

      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function () {});
      dummy.prototype = constructor.prototype;
      var obj = new dummy();

      var r = constructor.apply(obj, argumentList);
      return r instanceof Object ? r : obj;
    }
    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;

      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }

      var isClassMethodFunc = argTypes[1] !== null && classType !== null;

      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
      // TODO: This omits argument count check - enable only at -O3 or similar.
      //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
      //       return FUNCTION_TABLE[fn];
      //    }

      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;

      for (var i = 1; i < argTypes.length; ++i) {
        // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
          // The type does not define a destructor function - must use dynamic stack
          needsDestructorStack = true;
          break;
        }
      }

      var returns = argTypes[0].name !== 'void';

      var argsList = '';
      var argsListWired = '';
      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i !== 0 ? ', ' : '') + 'arg' + i;
        argsListWired += (i !== 0 ? ', ' : '') + 'arg' + i + 'Wired';
      }

      var invokerFnBody =
        'return function ' +
        makeLegalFunctionName(humanName) +
        '(' +
        argsList +
        ') {\n' +
        'if (arguments.length !== ' +
        (argCount - 2) +
        ') {\n' +
        "throwBindingError('function " +
        humanName +
        " called with ' + arguments.length + ' arguments, expected " +
        (argCount - 2) +
        " args!');\n" +
        '}\n';

      if (needsDestructorStack) {
        invokerFnBody += 'var destructors = [];\n';
      }

      var dtorStack = needsDestructorStack ? 'destructors' : 'null';
      var args1 = ['throwBindingError', 'invoker', 'fn', 'runDestructors', 'retType', 'classParam'];
      var args2 = [
        throwBindingError,
        cppInvokerFunc,
        cppTargetFunc,
        runDestructors,
        argTypes[0],
        argTypes[1]
      ];

      if (isClassMethodFunc) {
        invokerFnBody += 'var thisWired = classParam.toWireType(' + dtorStack + ', this);\n';
      }

      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody +=
          'var arg' +
          i +
          'Wired = argType' +
          i +
          '.toWireType(' +
          dtorStack +
          ', arg' +
          i +
          '); // ' +
          argTypes[i + 2].name +
          '\n';
        args1.push('argType' + i);
        args2.push(argTypes[i + 2]);
      }

      if (isClassMethodFunc) {
        argsListWired = 'thisWired' + (argsListWired.length > 0 ? ', ' : '') + argsListWired;
      }

      invokerFnBody +=
        (returns ? 'var rv = ' : '') +
        'invoker(fn' +
        (argsListWired.length > 0 ? ', ' : '') +
        argsListWired +
        ');\n';

      if (needsDestructorStack) {
        invokerFnBody += 'runDestructors(destructors);\n';
      } else {
        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
          // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
          var paramName = i === 1 ? 'thisWired' : 'arg' + (i - 2) + 'Wired';
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName + '_dtor(' + paramName + '); // ' + argTypes[i].name + '\n';
            args1.push(paramName + '_dtor');
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }

      if (returns) {
        invokerFnBody += 'var ret = retType.fromWireType(rv);\n' + 'return ret;\n';
      } else {
      }
      invokerFnBody += '}\n';

      args1.push(invokerFnBody);

      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
    function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);

      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }

        function unboundTypesHandler() {
          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (
          undefined === method ||
          (undefined === method.overloadTable &&
            method.className !== classType.name &&
            method.argCount === argCount - 2)
        ) {
          // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

          // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
          // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
          if (undefined === proto[methodName].overloadTable) {
            // Set argCount in case an overload is registered later
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }

          return [];
        });
        return [];
      });
    }

    var emval_free_list = [];

    var emval_handle_array = [{}, { value: undefined }, { value: null }, { value: true }, { value: false }];
    function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = undefined;
        emval_free_list.push(handle);
      }
    }

    function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          ++count;
        }
      }
      return count;
    }

    function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          return emval_handle_array[i];
        }
      }
      return null;
    }
    function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
    function __emval_register(value) {
      switch (value) {
        case undefined: {
          return 1;
        }
        case null: {
          return 2;
        }
        case true: {
          return 3;
        }
        case false: {
          return 4;
        }
        default: {
          var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;

          emval_handle_array[handle] = { refcount: 1, value: value };
          return handle;
        }
      }
    }
    function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (handle) {
          var rv = emval_handle_array[handle].value;
          __emval_decref(handle);
          return rv;
        },
        toWireType: function (destructors, value) {
          return __emval_register(value);
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: null // This type does not need a destructor

        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
      });
    }

    function _embind_repr(v) {
      if (v === null) {
        return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
      } else {
        return '' + v;
      }
    }

    function floatReadValueFromPointer(name, shift) {
      switch (shift) {
        case 2:
          return function (pointer) {
            return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
        case 3:
          return function (pointer) {
            return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
        default:
          throw new TypeError('Unknown float type: ' + name);
      }
    }
    function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (value) {
          return value;
        },
        toWireType: function (destructors, value) {
          // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
          // avoid the following if() and assume value is of proper type.
          if (typeof value !== 'number' && typeof value !== 'boolean') {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
          }
          return value;
        },
        argPackAdvance: 8,
        readValueFromPointer: floatReadValueFromPointer(name, shift),
        destructorFunction: null // This type does not need a destructor
      });
    }

    function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);

      rawInvoker = embind__requireFunction(signature, rawInvoker);

      exposePublicSymbol(
        name,
        function () {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
        },
        argCount - 1
      );

      whenDependentTypesAreResolved([], argTypes, function (argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(
          argTypes.slice(1) /* actual params */
        );
        replacePublicSymbol(
          name,
          craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn),
          argCount - 1
        );
        return [];
      });
    }

    function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
        case 0:
          return signed
            ? function readS8FromPointer(pointer) {
                return HEAP8[pointer];
              }
            : function readU8FromPointer(pointer) {
                return HEAPU8[pointer];
              };
        case 1:
          return signed
            ? function readS16FromPointer(pointer) {
                return HEAP16[pointer >> 1];
              }
            : function readU16FromPointer(pointer) {
                return HEAPU16[pointer >> 1];
              };
        case 2:
          return signed
            ? function readS32FromPointer(pointer) {
                return HEAP32[pointer >> 2];
              }
            : function readU32FromPointer(pointer) {
                return HEAPU32[pointer >> 2];
              };
        default:
          throw new TypeError('Unknown integer type: ' + name);
      }
    }
    function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) {
        // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
      }

      var shift = getShiftFromSize(size);

      var fromWireType = function (value) {
        return value;
      };

      if (minRange === 0) {
        var bitshift = 32 - 8 * size;
        fromWireType = function (value) {
          return (value << bitshift) >>> bitshift;
        };
      }

      var isUnsignedType = name.indexOf('unsigned') != -1;

      registerType(primitiveType, {
        name: name,
        fromWireType: fromWireType,
        toWireType: function (destructors, value) {
          // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
          // avoid the following two if()s and assume value is of proper type.
          if (typeof value !== 'number' && typeof value !== 'boolean') {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
          }
          if (value < minRange || value > maxRange) {
            throw new TypeError(
              'Passing a number "' +
                _embind_repr(value) +
                '" from JS side to C/C++ side to an argument of type "' +
                name +
                '", which is outside the valid range [' +
                minRange +
                ', ' +
                maxRange +
                ']!'
            );
          }
          return isUnsignedType ? value >>> 0 : value | 0;
        },
        argPackAdvance: 8,
        readValueFromPointer: integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null // This type does not need a destructor
      });
    }

    function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array
      ];

      var TA = typeMapping[dataTypeIndex];

      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle]; // in elements
        var data = heap[handle + 1]; // byte offset into emscripten heap
        return new TA(buffer, data, size);
      }

      name = readLatin1String(name);
      registerType(
        rawType,
        {
          name: name,
          fromWireType: decodeMemoryView,
          argPackAdvance: 8,
          readValueFromPointer: decodeMemoryView
        },
        {
          ignoreDuplicateRegistrations: true
        }
      );
    }

    function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8 =
        //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
        name === 'std::string';

      registerType(rawType, {
        name: name,
        fromWireType: function (value) {
          var length = HEAPU32[value >> 2];

          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = value + 4;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = value + 4 + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            str = a.join('');
          }

          _free(value);

          return str;
        },
        toWireType: function (destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }

          var getLength;
          var valueIsOfTypeString = typeof value === 'string';

          if (
            !(
              valueIsOfTypeString ||
              value instanceof Uint8Array ||
              value instanceof Uint8ClampedArray ||
              value instanceof Int8Array
            )
          ) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            getLength = function () {
              return lengthBytesUTF8(value);
            };
          } else {
            getLength = function () {
              return value.length;
            };
          }

          // assumes 4-byte alignment
          var length = getLength();
          var ptr = _malloc(4 + length + 1);
          HEAPU32[ptr >> 2] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr + 4, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + 4 + i] = value[i];
              }
            }
          }

          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: function (ptr) {
          _free(ptr);
        }
      });
    }

    function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        getHeap = function () {
          return HEAPU16;
        };
        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        getHeap = function () {
          return HEAPU32;
        };
        shift = 2;
      }
      registerType(rawType, {
        name: name,
        fromWireType: function (value) {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[value >> 2];
          var HEAP = getHeap();
          var str;

          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || HEAP[currentBytePtr >> shift] == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }

          _free(value);

          return str;
        },
        toWireType: function (destructors, value) {
          if (!(typeof value === 'string')) {
            throwBindingError('Cannot pass non-string to C++ string type ' + name);
          }

          // assumes 4-byte alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[ptr >> 2] = length >> shift;

          encodeString(value, ptr + 4, length + charSize);

          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: function (ptr) {
          _free(ptr);
        }
      });
    }

    function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
        fields: []
      };
    }

    function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: embind__requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: embind__requireFunction(setterSignature, setter),
        setterContext: setterContext
      });
    }

    function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true, // void return values can be optimized out sometimes
        name: name,
        argPackAdvance: 0,
        fromWireType: function () {
          return undefined;
        },
        toWireType: function (destructors, o) {
          // TODO: assert if anything else is given?
          return undefined;
        }
      });
    }

    function requireHandle(handle) {
      if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }

    function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
        throwBindingError(humanName + ' has unknown type ' + getTypeName(rawType));
      }
      return impl;
    }
    function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

    function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], 'parameter ' + i);
      }
      return a;
    }
    function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);

      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        var type = types[i];
        args[i] = type['readValueFromPointer'](argv);
        argv += type['argPackAdvance'];
      }

      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }

    var emval_symbols = {};
    function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
        return readLatin1String(address);
      } else {
        return symbol;
      }
    }
    function __emval_get_module_property(name) {
      name = getStringOrSymbol(name);
      return __emval_register(Module[name]);
    }

    function __emval_incref(handle) {
      if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
      }
    }

    function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

    function _abort() {
      abort();
    }

    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

    function abortOnCannotGrowMemory(requestedSize) {
      abort(
        'Cannot enlarge memory arrays to size ' +
          requestedSize +
          ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' +
          HEAP8.length +
          ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 '
      );
    }
    function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      abortOnCannotGrowMemory(requestedSize);
    }

    var ENV = {};

    function getExecutableName() {
      return thisProgram || './this.program';
    }
    function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang =
          ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace(
            '-',
            '_'
          ) + '.UTF-8';
        var env = {
          USER: 'web_user',
          LOGNAME: 'web_user',
          PATH: '/',
          PWD: '/',
          HOME: '/home/web_user',
          LANG: lang,
          _: getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }

    var PATH = {
      splitPath: function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
      normalizeArray: function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
      normalize: function (path) {
        var isAbsolute = path.charAt(0) === '/',
          trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(
          path.split('/').filter(function (p) {
            return !!p;
          }),
          !isAbsolute
        ).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
      dirname: function (path) {
        var result = PATH.splitPath(path),
          root = result[0],
          dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },
      basename: function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, '');
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1);
      },
      extname: function (path) {
        return PATH.splitPath(path)[3];
      },
      join: function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },
      join2: function (l, r) {
        return PATH.normalize(l + '/' + r);
      }
    };

    function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function () {
          crypto.getRandomValues(randomBuffer);
          return randomBuffer[0];
        };
      } else if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function () {
            return crypto_module['randomBytes'](1)[0];
          };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function () {
        abort(
          'no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };'
        );
      };
    }

    var PATH_FS = {
      resolve: function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(
          resolvedPath.split('/').filter(function (p) {
            return !!p;
          }),
          !resolvedAbsolute
        ).join('/');
        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
      },
      relative: function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }
    };

    var TTY = {
      ttys: [],
      init: function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },
      shutdown: function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },
      register: function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
      stream_ops: {
        open: function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
        close: function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },
        flush: function (stream) {
          stream.tty.ops.flush(stream.tty);
        },
        read: function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset + i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },
        write: function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }
      },
      default_tty_ops: {
        get_char: function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;

              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch (e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }

              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else if (typeof window != 'undefined' && typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: '); // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },
        put_char: function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
        flush: function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }
      },
      default_tty1_ops: {
        put_char: function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
        flush: function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }
      }
    };

    function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
    var MEMFS = {
      ops_table: null,
      mount: function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },
      createNode: function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },
      getFileDataAsTypedArray: function (node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
      expandFileStorage: function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(
          newCapacity,
          (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0
        );
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
      resizeFileStorage: function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
      node_ops: {
        getattr: function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
        setattr: function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
        lookup: function (parent, name) {
          throw FS.genericErrors[44];
        },
        mknod: function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
        rename: function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {}
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now();
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },
        unlink: function (parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
        rmdir: function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
        readdir: function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },
        symlink: function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },
        readlink: function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }
      },
      stream_ops: {
        read: function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) {
            // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
        write: function (stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));

          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();

          if (buffer.subarray && (!node.contents || node.contents.subarray)) {
            // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) {
              // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) {
              // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }

          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position + length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
              node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
        llseek: function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
        allocate: function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
        mmap: function (stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },
        msync: function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }

          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }
      }
    };

    var ERRNO_MESSAGES = {
      0: 'Success',
      1: 'Arg list too long',
      2: 'Permission denied',
      3: 'Address already in use',
      4: 'Address not available',
      5: 'Address family not supported by protocol family',
      6: 'No more processes',
      7: 'Socket already connected',
      8: 'Bad file number',
      9: 'Trying to read unreadable message',
      10: 'Mount device busy',
      11: 'Operation canceled',
      12: 'No children',
      13: 'Connection aborted',
      14: 'Connection refused',
      15: 'Connection reset by peer',
      16: 'File locking deadlock error',
      17: 'Destination address required',
      18: 'Math arg out of domain of func',
      19: 'Quota exceeded',
      20: 'File exists',
      21: 'Bad address',
      22: 'File too large',
      23: 'Host is unreachable',
      24: 'Identifier removed',
      25: 'Illegal byte sequence',
      26: 'Connection already in progress',
      27: 'Interrupted system call',
      28: 'Invalid argument',
      29: 'I/O error',
      30: 'Socket is already connected',
      31: 'Is a directory',
      32: 'Too many symbolic links',
      33: 'Too many open files',
      34: 'Too many links',
      35: 'Message too long',
      36: 'Multihop attempted',
      37: 'File or path name too long',
      38: 'Network interface is not configured',
      39: 'Connection reset by network',
      40: 'Network is unreachable',
      41: 'Too many open files in system',
      42: 'No buffer space available',
      43: 'No such device',
      44: 'No such file or directory',
      45: 'Exec format error',
      46: 'No record locks available',
      47: 'The link has been severed',
      48: 'Not enough core',
      49: 'No message of desired type',
      50: 'Protocol not available',
      51: 'No space left on device',
      52: 'Function not implemented',
      53: 'Socket is not connected',
      54: 'Not a directory',
      55: 'Directory not empty',
      56: 'State not recoverable',
      57: 'Socket operation on non-socket',
      59: 'Not a typewriter',
      60: 'No such device or address',
      61: 'Value too large for defined data type',
      62: 'Previous owner died',
      63: 'Not super-user',
      64: 'Broken pipe',
      65: 'Protocol error',
      66: 'Unknown protocol',
      67: 'Protocol wrong type for socket',
      68: 'Math result not representable',
      69: 'Read only file system',
      70: 'Illegal seek',
      71: 'No such process',
      72: 'Stale file handle',
      73: 'Connection timed out',
      74: 'Text file busy',
      75: 'Cross-device link',
      100: 'Device not a stream',
      101: 'Bad font file fmt',
      102: 'Invalid slot',
      103: 'Invalid request code',
      104: 'No anode',
      105: 'Block device required',
      106: 'Channel number out of range',
      107: 'Level 3 halted',
      108: 'Level 3 reset',
      109: 'Link number out of range',
      110: 'Protocol driver not attached',
      111: 'No CSI structure available',
      112: 'Level 2 halted',
      113: 'Invalid exchange',
      114: 'Invalid request descriptor',
      115: 'Exchange full',
      116: 'No data (for no delay io)',
      117: 'Timer expired',
      118: 'Out of streams resources',
      119: 'Machine is not on the network',
      120: 'Package not installed',
      121: 'The object is remote',
      122: 'Advertise error',
      123: 'Srmount error',
      124: 'Communication error on send',
      125: 'Cross mount point (not really error)',
      126: 'Given log. name not unique',
      127: 'f.d. invalid for this operation',
      128: 'Remote address changed',
      129: 'Can   access a needed shared lib',
      130: 'Accessing a corrupted shared lib',
      131: '.lib section in a.out corrupted',
      132: 'Attempting to link in too many libs',
      133: 'Attempting to exec a shared library',
      135: 'Streams pipe error',
      136: 'Too many users',
      137: 'Socket type not supported',
      138: 'Not supported',
      139: 'Protocol family not supported',
      140: "Can't send after socket shutdown",
      141: 'Too many references',
      142: 'Host is down',
      148: 'No medium (in tape drive)',
      156: 'Level 2 not synchronized'
    };

    var ERRNO_CODES = {
      EPERM: 63,
      ENOENT: 44,
      ESRCH: 71,
      EINTR: 27,
      EIO: 29,
      ENXIO: 60,
      E2BIG: 1,
      ENOEXEC: 45,
      EBADF: 8,
      ECHILD: 12,
      EAGAIN: 6,
      EWOULDBLOCK: 6,
      ENOMEM: 48,
      EACCES: 2,
      EFAULT: 21,
      ENOTBLK: 105,
      EBUSY: 10,
      EEXIST: 20,
      EXDEV: 75,
      ENODEV: 43,
      ENOTDIR: 54,
      EISDIR: 31,
      EINVAL: 28,
      ENFILE: 41,
      EMFILE: 33,
      ENOTTY: 59,
      ETXTBSY: 74,
      EFBIG: 22,
      ENOSPC: 51,
      ESPIPE: 70,
      EROFS: 69,
      EMLINK: 34,
      EPIPE: 64,
      EDOM: 18,
      ERANGE: 68,
      ENOMSG: 49,
      EIDRM: 24,
      ECHRNG: 106,
      EL2NSYNC: 156,
      EL3HLT: 107,
      EL3RST: 108,
      ELNRNG: 109,
      EUNATCH: 110,
      ENOCSI: 111,
      EL2HLT: 112,
      EDEADLK: 16,
      ENOLCK: 46,
      EBADE: 113,
      EBADR: 114,
      EXFULL: 115,
      ENOANO: 104,
      EBADRQC: 103,
      EBADSLT: 102,
      EDEADLOCK: 16,
      EBFONT: 101,
      ENOSTR: 100,
      ENODATA: 116,
      ETIME: 117,
      ENOSR: 118,
      ENONET: 119,
      ENOPKG: 120,
      EREMOTE: 121,
      ENOLINK: 47,
      EADV: 122,
      ESRMNT: 123,
      ECOMM: 124,
      EPROTO: 65,
      EMULTIHOP: 36,
      EDOTDOT: 125,
      EBADMSG: 9,
      ENOTUNIQ: 126,
      EBADFD: 127,
      EREMCHG: 128,
      ELIBACC: 129,
      ELIBBAD: 130,
      ELIBSCN: 131,
      ELIBMAX: 132,
      ELIBEXEC: 133,
      ENOSYS: 52,
      ENOTEMPTY: 55,
      ENAMETOOLONG: 37,
      ELOOP: 32,
      EOPNOTSUPP: 138,
      EPFNOSUPPORT: 139,
      ECONNRESET: 15,
      ENOBUFS: 42,
      EAFNOSUPPORT: 5,
      EPROTOTYPE: 67,
      ENOTSOCK: 57,
      ENOPROTOOPT: 50,
      ESHUTDOWN: 140,
      ECONNREFUSED: 14,
      EADDRINUSE: 3,
      ECONNABORTED: 13,
      ENETUNREACH: 40,
      ENETDOWN: 38,
      ETIMEDOUT: 73,
      EHOSTDOWN: 142,
      EHOSTUNREACH: 23,
      EINPROGRESS: 26,
      EALREADY: 7,
      EDESTADDRREQ: 17,
      EMSGSIZE: 35,
      EPROTONOSUPPORT: 66,
      ESOCKTNOSUPPORT: 137,
      EADDRNOTAVAIL: 4,
      ENETRESET: 39,
      EISCONN: 30,
      ENOTCONN: 53,
      ETOOMANYREFS: 141,
      EUSERS: 136,
      EDQUOT: 19,
      ESTALE: 72,
      ENOTSUP: 138,
      ENOMEDIUM: 148,
      EILSEQ: 25,
      EOVERFLOW: 61,
      ECANCELED: 11,
      ENOTRECOVERABLE: 56,
      EOWNERDEAD: 62,
      ESTRPIPE: 135
    };
    var FS = {
      root: null,
      mounts: [],
      devices: {},
      streams: [],
      nextInode: 1,
      nameTable: null,
      currentPath: '/',
      initialized: false,
      ignorePermissions: true,
      trackingDelegate: {},
      tracking: { openFlags: { READ: 1, WRITE: 2 } },
      ErrnoError: null,
      genericErrors: {},
      filesystems: null,
      syncFSRequests: 0,
      lookupPath: function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }

        if (opts.recurse_count > 8) {
          // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }

        // split the path
        var parts = PATH.normalizeArray(
          path.split('/').filter(function (p) {
            return !!p;
          }),
          false
        );

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
          var islast = i === parts.length - 1;
          if (islast && opts.parent) {
            // stop resolving
            break;
          }

          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);

          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }

          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);

              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;

              if (count++ > 40) {
                // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }

        return { path: current_path, node: current };
      },
      getPath: function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length - 1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },
      hashName: function (parentid, name) {
        var hash = 0;

        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
      hashAddNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
      hashRemoveNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
      lookupNode: function (parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
      createNode: function (parent, name, mode, rdev) {
        assert(typeof parent === 'object');
        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
      },
      destroyNode: function (node) {
        FS.hashRemoveNode(node);
      },
      isRoot: function (node) {
        return node === node.parent;
      },
      isMountpoint: function (node) {
        return !!node.mounted;
      },
      isFile: function (mode) {
        return (mode & 61440) === 32768;
      },
      isDir: function (mode) {
        return (mode & 61440) === 16384;
      },
      isLink: function (mode) {
        return (mode & 61440) === 40960;
      },
      isChrdev: function (mode) {
        return (mode & 61440) === 8192;
      },
      isBlkdev: function (mode) {
        return (mode & 61440) === 24576;
      },
      isFIFO: function (mode) {
        return (mode & 61440) === 4096;
      },
      isSocket: function (mode) {
        return (mode & 49152) === 49152;
      },
      flagModes: { r: 0, 'r+': 2, w: 577, 'w+': 578, a: 1089, 'a+': 1090 },
      modeStringToFlags: function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },
      flagsToPermissionString: function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if (flag & 512) {
          perms += 'w';
        }
        return perms;
      },
      nodePermissions: function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
      mayLookup: function (dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
      mayCreate: function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {}
        return FS.nodePermissions(dir, 'wx');
      },
      mayDelete: function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
      mayOpen: function (node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (
            FS.flagsToPermissionString(flags) !== 'r' || // opening for write
            flags & 512
          ) {
            // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
      MAX_OPEN_FDS: 4096,
      nextfd: function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
      getStream: function (fd) {
        return FS.streams[fd];
      },
      createStream: function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function () {};
          FS.FSStream.prototype = {
            object: {
              get: function () {
                return this.node;
              },
              set: function (val) {
                this.node = val;
              }
            },
            isRead: {
              get: function () {
                return (this.flags & 2097155) !== 1;
              }
            },
            isWrite: {
              get: function () {
                return (this.flags & 2097155) !== 0;
              }
            },
            isAppend: {
              get: function () {
                return this.flags & 1024;
              }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
      closeStream: function (fd) {
        FS.streams[fd] = null;
      },
      chrdev_stream_ops: {
        open: function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },
        llseek: function () {
          throw new FS.ErrnoError(70);
        }
      },
      major: function (dev) {
        return dev >> 8;
      },
      minor: function (dev) {
        return dev & 0xff;
      },
      makedev: function (ma, mi) {
        return (ma << 8) | mi;
      },
      registerDevice: function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
      getDevice: function (dev) {
        return FS.devices[dev];
      },
      getMounts: function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
          var m = check.pop();

          mounts.push(m);

          check.push.apply(check, m.mounts);
        }

        return mounts;
      },
      syncfs: function (populate, callback) {
        if (typeof populate === 'function') {
          callback = populate;
          populate = false;
        }

        FS.syncFSRequests++;

        if (FS.syncFSRequests > 1) {
          err(
            'warning: ' +
              FS.syncFSRequests +
              ' FS.syncfs operations in flight at once, probably just doing extra work'
          );
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }

        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        }

        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
      mount: function (type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

          mountpoint = lookup.path; // use the absolute path
          node = lookup.node;

          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }

          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }

        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;

          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }

        return mountRoot;
      },
      unmount: function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];

          while (current) {
            var next = current.name_next;

            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }

            current = next;
          }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
      lookup: function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
      mknod: function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
      create: function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
      mkdir: function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
      mkdirTree: function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch (e) {
            if (e.errno != 20) throw e;
          }
        }
      },
      mkdev: function (path, mode, dev) {
        if (typeof dev === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
      symlink: function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
      rename: function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;

        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;

        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch (e) {
          err(
            "FS.trackingDelegate['willMovePath']('" +
              old_path +
              "', '" +
              new_path +
              "') threw an exception: " +
              e.message
          );
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch (e) {
          err(
            "FS.trackingDelegate['onMovePath']('" +
              old_path +
              "', '" +
              new_path +
              "') threw an exception: " +
              e.message
          );
        }
      },
      rmdir: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch (e) {
          err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
          err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
      },
      readdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },
      unlink: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch (e) {
          err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
          err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
      },
      readlink: function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },
      stat: function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },
      lstat: function (path) {
        return FS.stat(path, true);
      },
      chmod: function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },
      lchmod: function (path, mode) {
        FS.chmod(path, mode, true);
      },
      fchmod: function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },
      chown: function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },
      lchown: function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
      fchown: function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },
      truncate: function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },
      ftruncate: function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },
      utime: function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },
      open: function (path, flags, mode, fd_start, fd_end) {
        if (path === '') {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if (flags & 64) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if (flags & 64) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if (flags & 128) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if (flags & 65536 && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if (flags & 512) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);

        // register the stream with the filesystem
        var stream = FS.createStream(
          {
            node: node,
            path: FS.getPath(node), // we want the absolute path to the node
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            ungotten: [],
            error: false
          },
          fd_start,
          fd_end
        );
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err('FS.trackingDelegate error on read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch (e) {
          err("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
        }
        return stream;
      },
      close: function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
      isClosed: function (stream) {
        return stream.fd === null;
      },
      llseek: function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
      read: function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
      write: function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile'])
            FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch (e) {
          err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
        }
        return bytesWritten;
      },
      allocate: function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
      mmap: function (stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },
      msync: function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
      munmap: function (stream) {
        return 0;
      },
      ioctl: function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
      readFile: function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
      writeFile: function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
      cwd: function () {
        return FS.currentPath;
      },
      chdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
      createDefaultDirectories: function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
      createDefaultDevices: function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function () {
            return 0;
          },
          write: function (stream, buffer, offset, length, pos) {
            return length;
          }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
      createSpecialDirectories: function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount(
          {
            mount: function () {
              var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
              node.node_ops = {
                lookup: function (parent, name) {
                  var fd = +name;
                  var stream = FS.getStream(fd);
                  if (!stream) throw new FS.ErrnoError(8);
                  var ret = {
                    parent: null,
                    mount: { mountpoint: 'fake' },
                    node_ops: {
                      readlink: function () {
                        return stream.path;
                      }
                    }
                  };
                  ret.parent = ret; // make it look like a simple root node
                  return ret;
                }
              };
              return node;
            }
          },
          {},
          '/proc/self/fd'
        );
      },
      createStandardStreams: function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },
      ensureErrnoError: function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function (errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];

          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, 'stack', { value: new Error().stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function (code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },
      staticInit: function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
          MEMFS: MEMFS
        };
      },
      init: function (input, output, error) {
        assert(
          !FS.init.initialized,
          'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)'
        );
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
      },
      quit: function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },
      getMode: function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },
      findObject: function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },
      analyzePath: function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {}
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        }
        return ret;
      },
      createPath: function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },
      createFile: function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
      createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },
      createDevice: function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function (stream) {
            stream.seekable = false;
          },
          close: function (stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function (stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset + i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function (stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset + i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
      forceLoadFile: function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error(
            'Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.'
          );
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },
      createLazyFile: function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length - 1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize) | 0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
            throw new Error("Couldn't load " + url + '. Status: ' + xhr.status);
          var datalength = Number(xhr.getResponseHeader('Content-length'));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader('Accept-Ranges')) && header === 'bytes';
          var usesGzip = (header = xhr.getResponseHeader('Content-Encoding')) && header === 'gzip';

          var chunkSize = 1024 * 1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = function (from, to) {
            if (from > to) throw new Error('invalid range (' + from + ', ' + to + ') or no bytes requested!');
            if (to > datalength - 1)
              throw new Error('only ' + datalength + ' bytes available! programmer error!');

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }

            xhr.send(null);
            if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
              throw new Error("Couldn't load " + url + '. Status: ' + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */ (xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          };
          var lazyArray = this;
          lazyArray.setDataGetter(function (chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum + 1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength - 1); // if datalength-1 is selected, this is the last block
            if (typeof lazyArray.chunks[chunkNum] === 'undefined') {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof lazyArray.chunks[chunkNum] === 'undefined') throw new Error('doXHR failed!');
            return lazyArray.chunks[chunkNum];
          });

          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out('LazyFiles on gzip forces download of the whole file when length is accessed');
          }

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER)
            throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function () {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function () {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });

          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function () {
              return this.contents.length;
            }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function (key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length) return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) {
            // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) {
              // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },
      createPreloadedFile: function (
        parent,
        name,
        url,
        canRead,
        canWrite,
        onload,
        onerror,
        dontCreateFile,
        canOwn,
        preFinish
      ) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function (plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function () {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(
            url,
            function (byteArray) {
              processData(byteArray);
            },
            onerror
          );
        } else {
          processData(url);
        }
      },
      indexedDB: function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },
      DB_NAME: function () {
        return 'EM_FS_' + window.location.pathname;
      },
      DB_VERSION: 20,
      DB_STORE_NAME: 'FILE_DATA',
      saveFilesToDB: function (paths, onload, onerror) {
        onload = onload || function () {};
        onerror = onerror || function () {};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0,
            fail = 0,
            total = paths.length;
          function finish() {
            if (fail == 0) onload();
            else onerror();
          }
          paths.forEach(function (path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() {
              ok++;
              if (ok + fail == total) finish();
            };
            putRequest.onerror = function putRequest_onerror() {
              fail++;
              if (ok + fail == total) finish();
            };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },
      loadFilesFromDB: function (paths, onload, onerror) {
        onload = onload || function () {};
        onerror = onerror || function () {};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch (e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0,
            fail = 0,
            total = paths.length;
          function finish() {
            if (fail == 0) onload();
            else onerror();
          }
          paths.forEach(function (path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() {
              fail++;
              if (ok + fail == total) finish();
            };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },
      absolutePath: function () {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },
      createFolder: function () {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },
      createLink: function () {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },
      joinPath: function () {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },
      mmapAlloc: function () {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },
      standardizePath: function () {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }
    };
    var SYSCALLS = {
      mappings: {},
      DEFAULT_POLLMASK: 5,
      umask: 511,
      calculateAt: function (dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },
      doStat: function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[buf >> 2] = stat.dev;
        HEAP32[(buf + 4) >> 2] = 0;
        HEAP32[(buf + 8) >> 2] = stat.ino;
        HEAP32[(buf + 12) >> 2] = stat.mode;
        HEAP32[(buf + 16) >> 2] = stat.nlink;
        HEAP32[(buf + 20) >> 2] = stat.uid;
        HEAP32[(buf + 24) >> 2] = stat.gid;
        HEAP32[(buf + 28) >> 2] = stat.rdev;
        HEAP32[(buf + 32) >> 2] = 0;
        (tempI64 = [
          stat.size >>> 0,
          ((tempDouble = stat.size),
          +Math.abs(tempDouble) >= 1.0
            ? tempDouble > 0.0
              ? (Math.min(+Math.floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0
              : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0
            : 0)
        ]),
          (HEAP32[(buf + 40) >> 2] = tempI64[0]),
          (HEAP32[(buf + 44) >> 2] = tempI64[1]);
        HEAP32[(buf + 48) >> 2] = 4096;
        HEAP32[(buf + 52) >> 2] = stat.blocks;
        HEAP32[(buf + 56) >> 2] = (stat.atime.getTime() / 1000) | 0;
        HEAP32[(buf + 60) >> 2] = 0;
        HEAP32[(buf + 64) >> 2] = (stat.mtime.getTime() / 1000) | 0;
        HEAP32[(buf + 68) >> 2] = 0;
        HEAP32[(buf + 72) >> 2] = (stat.ctime.getTime() / 1000) | 0;
        HEAP32[(buf + 76) >> 2] = 0;
        (tempI64 = [
          stat.ino >>> 0,
          ((tempDouble = stat.ino),
          +Math.abs(tempDouble) >= 1.0
            ? tempDouble > 0.0
              ? (Math.min(+Math.floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0
              : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0
            : 0)
        ]),
          (HEAP32[(buf + 80) >> 2] = tempI64[0]),
          (HEAP32[(buf + 84) >> 2] = tempI64[1]);
        return 0;
      },
      doMsync: function (addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
      doMkdir: function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length - 1] === '/') path = path.substr(0, path.length - 1);
        FS.mkdir(path, mode, 0);
        return 0;
      },
      doMknod: function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default:
            return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },
      doReadlink: function (path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);

        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf + len];
        stringToUTF8(ret, buf, bufsize + 1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf + len] = endChar;

        return len;
      },
      doAccess: function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },
      doDup: function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },
      doReadv: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(iov + i * 8) >> 2];
          var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
          var curr = FS.read(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },
      doWritev: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(iov + i * 8) >> 2];
          var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
          var curr = FS.write(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },
      varargs: undefined,
      get: function () {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];
        return ret;
      },
      getStr: function (ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
      getStreamFromFD: function (fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },
      get64: function (low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }
    };
    function _environ_get(__environ, environ_buf) {
      try {
        var bufSize = 0;
        getEnvStrings().forEach(function (string, i) {
          var ptr = environ_buf + bufSize;
          HEAP32[(__environ + i * 4) >> 2] = ptr;
          writeAsciiToMemory(string, ptr);
          bufSize += string.length + 1;
        });
        return 0;
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return e.errno;
      }
    }

    function _environ_sizes_get(penviron_count, penviron_buf_size) {
      try {
        var strings = getEnvStrings();
        HEAP32[penviron_count >> 2] = strings.length;
        var bufSize = 0;
        strings.forEach(function (string) {
          bufSize += string.length + 1;
        });
        HEAP32[penviron_buf_size >> 2] = bufSize;
        return 0;
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return e.errno;
      }
    }

    function _fd_close(fd) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.close(stream);
        return 0;
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return e.errno;
      }
    }

    function _fd_read(fd, iov, iovcnt, pnum) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = SYSCALLS.doReadv(stream, iov, iovcnt);
        HEAP32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return e.errno;
      }
    }

    function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        var HIGH_OFFSET = 0x100000000; // 2^32
        // use an unsigned operator on low and shift high by 32-bits
        var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);

        var DOUBLE_LIMIT = 0x20000000000000; // 2^53
        // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
        if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
          return -61;
        }

        FS.llseek(stream, offset, whence);
        (tempI64 = [
          stream.position >>> 0,
          ((tempDouble = stream.position),
          +Math.abs(tempDouble) >= 1.0
            ? tempDouble > 0.0
              ? (Math.min(+Math.floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0
              : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0
            : 0)
        ]),
          (HEAP32[newOffset >> 2] = tempI64[0]),
          (HEAP32[(newOffset + 4) >> 2] = tempI64[1]);
        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
        return 0;
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return e.errno;
      }
    }

    function _fd_write(fd, iov, iovcnt, pnum) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = SYSCALLS.doWritev(stream, iov, iovcnt);
        HEAP32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return e.errno;
      }
    }

    function _setTempRet0($i) {
      setTempRet0($i | 0);
    }

    function __isLeapYear(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }

    function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }

    var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];

        if (days > daysInCurrentMonth - newDate.getDate()) {
          // we spill over to next month
          days -= daysInCurrentMonth - newDate.getDate() + 1;
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth + 1);
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear() + 1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate() + days);
          return newDate;
        }
      }

      return newDate;
    }
    function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html

      var tm_zone = HEAP32[(tm + 40) >> 2];

      var date = {
        tm_sec: HEAP32[tm >> 2],
        tm_min: HEAP32[(tm + 4) >> 2],
        tm_hour: HEAP32[(tm + 8) >> 2],
        tm_mday: HEAP32[(tm + 12) >> 2],
        tm_mon: HEAP32[(tm + 16) >> 2],
        tm_year: HEAP32[(tm + 20) >> 2],
        tm_wday: HEAP32[(tm + 24) >> 2],
        tm_yday: HEAP32[(tm + 28) >> 2],
        tm_isdst: HEAP32[(tm + 32) >> 2],
        tm_gmtoff: HEAP32[(tm + 36) >> 2],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };

      var pattern = UTF8ToString(format);

      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y', // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y', // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d', // Equivalent to %Y - %m - %d
        '%h': '%b', // Equivalent to %b
        '%r': '%I:%M:%S %p', // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M', // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S', // Replaced by the time
        '%x': '%m/%d/%y', // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S', // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c', // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C', // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y', // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S', // Replaced by the locale's alternative time representation.
        '%Ey': '%y', // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y', // Replaced by the full alternative year representation.
        '%Od': '%d', // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e', // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H', // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I', // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m', // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M', // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S', // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u', // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U', // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V', // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w', // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W', // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y' // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }

      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
      ];

      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : value || '';
        while (str.length < digits) {
          str = character[0] + str;
        }
        return str;
      }

      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }

      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : value > 0 ? 1 : 0;
        }

        var compare;
        if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
            compare = sgn(date1.getDate() - date2.getDate());
          }
        }
        return compare;
      }

      function getFirstWeekStartDate(janFourth) {
        switch (janFourth.getDay()) {
          case 0: // Sunday
            return new Date(janFourth.getFullYear() - 1, 11, 29);
          case 1: // Monday
            return janFourth;
          case 2: // Tuesday
            return new Date(janFourth.getFullYear(), 0, 3);
          case 3: // Wednesday
            return new Date(janFourth.getFullYear(), 0, 2);
          case 4: // Thursday
            return new Date(janFourth.getFullYear(), 0, 1);
          case 5: // Friday
            return new Date(janFourth.getFullYear() - 1, 11, 31);
          case 6: // Saturday
            return new Date(janFourth.getFullYear() - 1, 11, 30);
        }
      }

      function getWeekBasedYear(date) {
        var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);

        var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
        var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);

        var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
        var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

        if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
          // this date is after the start of the first week of this year
          if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
            return thisDate.getFullYear() + 1;
          } else {
            return thisDate.getFullYear();
          }
        } else {
          return thisDate.getFullYear() - 1;
        }
      }

      var EXPANSION_RULES_2 = {
        '%a': function (date) {
          return WEEKDAYS[date.tm_wday].substring(0, 3);
        },
        '%A': function (date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function (date) {
          return MONTHS[date.tm_mon].substring(0, 3);
        },
        '%B': function (date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function (date) {
          var year = date.tm_year + 1900;
          return leadingNulls((year / 100) | 0, 2);
        },
        '%d': function (date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function (date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function (date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.

          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function (date) {
          return getWeekBasedYear(date);
        },
        '%H': function (date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function (date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function (date) {
          // Day of the year (001-366)
          return leadingNulls(
            date.tm_mday +
              __arraySum(
                __isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR,
                date.tm_mon - 1
              ),
            3
          );
        },
        '%m': function (date) {
          return leadingNulls(date.tm_mon + 1, 2);
        },
        '%M': function (date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function () {
          return '\n';
        },
        '%p': function (date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function (date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function () {
          return '\t';
        },
        '%u': function (date) {
          return date.tm_wday || 7;
        },
        '%U': function (date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year + 1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
          var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);

          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth =
              __arraySum(
                __isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR,
                endDate.getMonth() - 1
              ) - 31;
            var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
            var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
            return leadingNulls(Math.ceil(days / 7), 2);
          }

          return compareByDay(firstSunday, janFirst) === 0 ? '01' : '00';
        },
        '%V': function (date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);

          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

          var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);

          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }

          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }

          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference / 7), 2);
        },
        '%w': function (date) {
          return date.tm_wday;
        },
        '%W': function (date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday =
            janFirst.getDay() === 1
              ? janFirst
              : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
          var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);

          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth =
              __arraySum(
                __isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR,
                endDate.getMonth() - 1
              ) - 31;
            var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
            var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
            return leadingNulls(Math.ceil(days / 7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01' : '00';
        },
        '%y': function (date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year + 1900).toString().substring(2);
        },
        '%Y': function (date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year + 1900;
        },
        '%z': function (date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60) * 100 + (off % 60);
          return (ahead ? '+' : '-') + String('0000' + off).slice(-4);
        },
        '%Z': function (date) {
          return date.tm_zone;
        },
        '%%': function () {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }

      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }

      writeArrayToMemory(bytes, s);
      return bytes.length - 1;
    }
    function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
    InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
    embind_init_charCodes();
    BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
    init_ClassHandle();
    init_RegisteredPointer();
    init_embind();
    UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
    init_emval();
    var FSNode = /** @constructor */ function (parent, name, mode, rdev) {
      if (!parent) {
        parent = this; // root node sets parent to itself
      }
      this.parent = parent;
      this.mount = parent.mount;
      this.mounted = null;
      this.id = FS.nextInode++;
      this.name = name;
      this.mode = mode;
      this.node_ops = {};
      this.stream_ops = {};
      this.rdev = rdev;
    };
    var readMode = 292 /*292*/ | 73; /*73*/
    var writeMode = 146; /*146*/
    Object.defineProperties(FSNode.prototype, {
      read: {
        get: /** @this{FSNode} */ function () {
          return (this.mode & readMode) === readMode;
        },
        set: /** @this{FSNode} */ function (val) {
          val ? (this.mode |= readMode) : (this.mode &= ~readMode);
        }
      },
      write: {
        get: /** @this{FSNode} */ function () {
          return (this.mode & writeMode) === writeMode;
        },
        set: /** @this{FSNode} */ function (val) {
          val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
        }
      },
      isFolder: {
        get: /** @this{FSNode} */ function () {
          return FS.isDir(this.mode);
        }
      },
      isDevice: {
        get: /** @this{FSNode} */ function () {
          return FS.isChrdev(this.mode);
        }
      }
    });
    FS.FSNode = FSNode;
    FS.staticInit();
    var ASSERTIONS = true;

    /** @type {function(string, boolean=, number=)} */
    function intArrayFromString(stringy, dontAddNull, length) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    }

    function intArrayToString(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 0xff) {
          if (ASSERTIONS) {
            assert(
              false,
              'Character code ' +
                chr +
                ' (' +
                String.fromCharCode(chr) +
                ')  at offset ' +
                i +
                ' not in 0x00-0xFF.'
            );
          }
          chr &= 0xff;
        }
        ret.push(String.fromCharCode(chr));
      }
      return ret.join('');
    }

    // Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

    // This code was written by Tyler Akins and has been placed in the
    // public domain.  It would be nice if you left this header intact.
    // Base64 code from Tyler Akins -- http://rumkin.com

    /**
     * Decodes a base64 string.
     * @param {string} input The string to decode.
     */
    var decodeBase64 =
      typeof atob === 'function'
        ? atob
        : function (input) {
            var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

            var output = '';
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
            do {
              enc1 = keyStr.indexOf(input.charAt(i++));
              enc2 = keyStr.indexOf(input.charAt(i++));
              enc3 = keyStr.indexOf(input.charAt(i++));
              enc4 = keyStr.indexOf(input.charAt(i++));

              chr1 = (enc1 << 2) | (enc2 >> 4);
              chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
              chr3 = ((enc3 & 3) << 6) | enc4;

              output = output + String.fromCharCode(chr1);

              if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
              }
              if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
              }
            } while (i < input.length);
            return output;
          };

    // Converts a string of base64 into a byte array.
    // Throws error on invalid input.
    function intArrayFromBase64(s) {
      if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
        var buf;
        try {
          // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
          /**@suppress{checkTypes}*/
          buf = Buffer.from(s, 'base64');
        } catch (_) {
          buf = new Buffer(s, 'base64');
        }
        return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
      }

      try {
        var decoded = decodeBase64(s);
        var bytes = new Uint8Array(decoded.length);
        for (var i = 0; i < decoded.length; ++i) {
          bytes[i] = decoded.charCodeAt(i);
        }
        return bytes;
      } catch (_) {
        throw new Error('Converting base64 string to bytes failed.');
      }
    }

    // If filename is a base64 data URI, parses and returns data (Buffer on node,
    // Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
    function tryParseAsDataURI(filename) {
      if (!isDataURI(filename)) {
        return;
      }

      return intArrayFromBase64(filename.slice(dataURIPrefix.length));
    }

    var asmLibraryArg = {
      __cxa_atexit: ___cxa_atexit,
      _embind_finalize_value_object: __embind_finalize_value_object,
      _embind_register_bool: __embind_register_bool,
      _embind_register_class: __embind_register_class,
      _embind_register_class_constructor: __embind_register_class_constructor,
      _embind_register_class_function: __embind_register_class_function,
      _embind_register_emval: __embind_register_emval,
      _embind_register_float: __embind_register_float,
      _embind_register_function: __embind_register_function,
      _embind_register_integer: __embind_register_integer,
      _embind_register_memory_view: __embind_register_memory_view,
      _embind_register_std_string: __embind_register_std_string,
      _embind_register_std_wstring: __embind_register_std_wstring,
      _embind_register_value_object: __embind_register_value_object,
      _embind_register_value_object_field: __embind_register_value_object_field,
      _embind_register_void: __embind_register_void,
      _emval_as: __emval_as,
      _emval_call: __emval_call,
      _emval_decref: __emval_decref,
      _emval_get_module_property: __emval_get_module_property,
      _emval_incref: __emval_incref,
      _emval_run_destructors: __emval_run_destructors,
      abort: _abort,
      emscripten_memcpy_big: _emscripten_memcpy_big,
      emscripten_resize_heap: _emscripten_resize_heap,
      environ_get: _environ_get,
      environ_sizes_get: _environ_sizes_get,
      fd_close: _fd_close,
      fd_read: _fd_read,
      fd_seek: _fd_seek,
      fd_write: _fd_write,
      getTempRet0: getTempRet0,
      memory: wasmMemory,
      setTempRet0: setTempRet0,
      strftime_l: _strftime_l
    };
    var asm = createWasm();
    /** @type {function(...*):?} */
    var ___wasm_call_ctors = (Module['___wasm_call_ctors'] = createExportWrapper('__wasm_call_ctors'));

    /** @type {function(...*):?} */
    var ___getTypeName = (Module['___getTypeName'] = createExportWrapper('__getTypeName'));

    /** @type {function(...*):?} */
    var ___embind_register_native_and_builtin_types = (Module[
      '___embind_register_native_and_builtin_types'
    ] = createExportWrapper('__embind_register_native_and_builtin_types'));

    /** @type {function(...*):?} */
    var ___errno_location = (Module['___errno_location'] = createExportWrapper('__errno_location'));

    /** @type {function(...*):?} */
    var _fflush = (Module['_fflush'] = createExportWrapper('fflush'));

    /** @type {function(...*):?} */
    var _malloc = (Module['_malloc'] = createExportWrapper('malloc'));

    /** @type {function(...*):?} */
    var stackSave = (Module['stackSave'] = createExportWrapper('stackSave'));

    /** @type {function(...*):?} */
    var stackRestore = (Module['stackRestore'] = createExportWrapper('stackRestore'));

    /** @type {function(...*):?} */
    var stackAlloc = (Module['stackAlloc'] = createExportWrapper('stackAlloc'));

    /** @type {function(...*):?} */
    var _emscripten_stack_init = (Module['_emscripten_stack_init'] = function () {
      return (_emscripten_stack_init = Module['_emscripten_stack_init'] =
        Module['asm']['emscripten_stack_init']).apply(null, arguments);
    });

    /** @type {function(...*):?} */
    var _emscripten_stack_get_free = (Module['_emscripten_stack_get_free'] = function () {
      return (_emscripten_stack_get_free = Module['_emscripten_stack_get_free'] =
        Module['asm']['emscripten_stack_get_free']).apply(null, arguments);
    });

    /** @type {function(...*):?} */
    var _emscripten_stack_get_end = (Module['_emscripten_stack_get_end'] = function () {
      return (_emscripten_stack_get_end = Module['_emscripten_stack_get_end'] =
        Module['asm']['emscripten_stack_get_end']).apply(null, arguments);
    });

    /** @type {function(...*):?} */
    var _free = (Module['_free'] = createExportWrapper('free'));

    /** @type {function(...*):?} */
    var dynCall_iiiiij = (Module['dynCall_iiiiij'] = createExportWrapper('dynCall_iiiiij'));

    /** @type {function(...*):?} */
    var dynCall_iiiiijj = (Module['dynCall_iiiiijj'] = createExportWrapper('dynCall_iiiiijj'));

    /** @type {function(...*):?} */
    var dynCall_iiiiiijj = (Module['dynCall_iiiiiijj'] = createExportWrapper('dynCall_iiiiiijj'));

    /** @type {function(...*):?} */
    var dynCall_viijii = (Module['dynCall_viijii'] = createExportWrapper('dynCall_viijii'));

    /** @type {function(...*):?} */
    var dynCall_jiji = (Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji'));

    // === Auto-generated postamble setup entry stuff ===

    if (!Object.getOwnPropertyDescriptor(Module, 'intArrayFromString'))
      Module['intArrayFromString'] = function () {
        abort(
          "'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'intArrayToString'))
      Module['intArrayToString'] = function () {
        abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ccall'))
      Module['ccall'] = function () {
        abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'cwrap'))
      Module['cwrap'] = function () {
        abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setValue'))
      Module['setValue'] = function () {
        abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getValue'))
      Module['getValue'] = function () {
        abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'allocate'))
      Module['allocate'] = function () {
        abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'UTF8ArrayToString'))
      Module['UTF8ArrayToString'] = function () {
        abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'UTF8ToString'))
      Module['UTF8ToString'] = function () {
        abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF8Array'))
      Module['stringToUTF8Array'] = function () {
        abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF8'))
      Module['stringToUTF8'] = function () {
        abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'lengthBytesUTF8'))
      Module['lengthBytesUTF8'] = function () {
        abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stackTrace'))
      Module['stackTrace'] = function () {
        abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'addOnPreRun'))
      Module['addOnPreRun'] = function () {
        abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'addOnInit'))
      Module['addOnInit'] = function () {
        abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'addOnPreMain'))
      Module['addOnPreMain'] = function () {
        abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'addOnExit'))
      Module['addOnExit'] = function () {
        abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'addOnPostRun'))
      Module['addOnPostRun'] = function () {
        abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeStringToMemory'))
      Module['writeStringToMemory'] = function () {
        abort(
          "'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeArrayToMemory'))
      Module['writeArrayToMemory'] = function () {
        abort(
          "'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeAsciiToMemory'))
      Module['writeAsciiToMemory'] = function () {
        abort(
          "'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'addRunDependency'))
      Module['addRunDependency'] = function () {
        abort(
          "'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'removeRunDependency'))
      Module['removeRunDependency'] = function () {
        abort(
          "'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createFolder'))
      Module['FS_createFolder'] = function () {
        abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createPath'))
      Module['FS_createPath'] = function () {
        abort(
          "'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createDataFile'))
      Module['FS_createDataFile'] = function () {
        abort(
          "'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createPreloadedFile'))
      Module['FS_createPreloadedFile'] = function () {
        abort(
          "'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createLazyFile'))
      Module['FS_createLazyFile'] = function () {
        abort(
          "'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createLink'))
      Module['FS_createLink'] = function () {
        abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_createDevice'))
      Module['FS_createDevice'] = function () {
        abort(
          "'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS_unlink'))
      Module['FS_unlink'] = function () {
        abort(
          "'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getLEB'))
      Module['getLEB'] = function () {
        abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getFunctionTables'))
      Module['getFunctionTables'] = function () {
        abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'alignFunctionTables'))
      Module['alignFunctionTables'] = function () {
        abort(
          "'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerFunctions'))
      Module['registerFunctions'] = function () {
        abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    Module['addFunction'] = addFunction;
    if (!Object.getOwnPropertyDescriptor(Module, 'removeFunction'))
      Module['removeFunction'] = function () {
        abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getFuncWrapper'))
      Module['getFuncWrapper'] = function () {
        abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'prettyPrint'))
      Module['prettyPrint'] = function () {
        abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'makeBigInt'))
      Module['makeBigInt'] = function () {
        abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'dynCall'))
      Module['dynCall'] = function () {
        abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getCompilerSetting'))
      Module['getCompilerSetting'] = function () {
        abort(
          "'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'print'))
      Module['print'] = function () {
        abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'printErr'))
      Module['printErr'] = function () {
        abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getTempRet0'))
      Module['getTempRet0'] = function () {
        abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setTempRet0'))
      Module['setTempRet0'] = function () {
        abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'callMain'))
      Module['callMain'] = function () {
        abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'abort'))
      Module['abort'] = function () {
        abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stringToNewUTF8'))
      Module['stringToNewUTF8'] = function () {
        abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setFileTime'))
      Module['setFileTime'] = function () {
        abort("'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'abortOnCannotGrowMemory'))
      Module['abortOnCannotGrowMemory'] = function () {
        abort(
          "'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emscripten_realloc_buffer'))
      Module['emscripten_realloc_buffer'] = function () {
        abort(
          "'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ENV'))
      Module['ENV'] = function () {
        abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ERRNO_CODES'))
      Module['ERRNO_CODES'] = function () {
        abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ERRNO_MESSAGES'))
      Module['ERRNO_MESSAGES'] = function () {
        abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setErrNo'))
      Module['setErrNo'] = function () {
        abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'inetPton4'))
      Module['inetPton4'] = function () {
        abort("'inetPton4' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'inetNtop4'))
      Module['inetNtop4'] = function () {
        abort("'inetNtop4' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'inetPton6'))
      Module['inetPton6'] = function () {
        abort("'inetPton6' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'inetNtop6'))
      Module['inetNtop6'] = function () {
        abort("'inetNtop6' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'readSockaddr'))
      Module['readSockaddr'] = function () {
        abort("'readSockaddr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeSockaddr'))
      Module['writeSockaddr'] = function () {
        abort("'writeSockaddr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'DNS'))
      Module['DNS'] = function () {
        abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getHostByName'))
      Module['getHostByName'] = function () {
        abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'GAI_ERRNO_MESSAGES'))
      Module['GAI_ERRNO_MESSAGES'] = function () {
        abort(
          "'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'Protocols'))
      Module['Protocols'] = function () {
        abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'Sockets'))
      Module['Sockets'] = function () {
        abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getRandomDevice'))
      Module['getRandomDevice'] = function () {
        abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'traverseStack'))
      Module['traverseStack'] = function () {
        abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'UNWIND_CACHE'))
      Module['UNWIND_CACHE'] = function () {
        abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'withBuiltinMalloc'))
      Module['withBuiltinMalloc'] = function () {
        abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'readAsmConstArgsArray'))
      Module['readAsmConstArgsArray'] = function () {
        abort(
          "'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'readAsmConstArgs'))
      Module['readAsmConstArgs'] = function () {
        abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'mainThreadEM_ASM'))
      Module['mainThreadEM_ASM'] = function () {
        abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'jstoi_q'))
      Module['jstoi_q'] = function () {
        abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'jstoi_s'))
      Module['jstoi_s'] = function () {
        abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getExecutableName'))
      Module['getExecutableName'] = function () {
        abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'listenOnce'))
      Module['listenOnce'] = function () {
        abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'autoResumeAudioContext'))
      Module['autoResumeAudioContext'] = function () {
        abort(
          "'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'dynCallLegacy'))
      Module['dynCallLegacy'] = function () {
        abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getDynCaller'))
      Module['getDynCaller'] = function () {
        abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'dynCall'))
      Module['dynCall'] = function () {
        abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'callRuntimeCallbacks'))
      Module['callRuntimeCallbacks'] = function () {
        abort(
          "'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'runtimeKeepaliveCounter'))
      Module['runtimeKeepaliveCounter'] = function () {
        abort(
          "'runtimeKeepaliveCounter' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'keepRuntimeAlive'))
      Module['keepRuntimeAlive'] = function () {
        abort("'keepRuntimeAlive' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'runtimeKeepalivePush'))
      Module['runtimeKeepalivePush'] = function () {
        abort(
          "'runtimeKeepalivePush' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'runtimeKeepalivePop'))
      Module['runtimeKeepalivePop'] = function () {
        abort(
          "'runtimeKeepalivePop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'callUserCallback'))
      Module['callUserCallback'] = function () {
        abort("'callUserCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'maybeExit'))
      Module['maybeExit'] = function () {
        abort("'maybeExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'reallyNegative'))
      Module['reallyNegative'] = function () {
        abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'unSign'))
      Module['unSign'] = function () {
        abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'reSign'))
      Module['reSign'] = function () {
        abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'formatString'))
      Module['formatString'] = function () {
        abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'PATH'))
      Module['PATH'] = function () {
        abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'PATH_FS'))
      Module['PATH_FS'] = function () {
        abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SYSCALLS'))
      Module['SYSCALLS'] = function () {
        abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'syscallMmap2'))
      Module['syscallMmap2'] = function () {
        abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'syscallMunmap'))
      Module['syscallMunmap'] = function () {
        abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getSocketFromFD'))
      Module['getSocketFromFD'] = function () {
        abort("'getSocketFromFD' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getSocketAddress'))
      Module['getSocketAddress'] = function () {
        abort("'getSocketAddress' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'JSEvents'))
      Module['JSEvents'] = function () {
        abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerKeyEventCallback'))
      Module['registerKeyEventCallback'] = function () {
        abort(
          "'registerKeyEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'specialHTMLTargets'))
      Module['specialHTMLTargets'] = function () {
        abort(
          "'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'maybeCStringToJsString'))
      Module['maybeCStringToJsString'] = function () {
        abort(
          "'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'findEventTarget'))
      Module['findEventTarget'] = function () {
        abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'findCanvasEventTarget'))
      Module['findCanvasEventTarget'] = function () {
        abort(
          "'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getBoundingClientRect'))
      Module['getBoundingClientRect'] = function () {
        abort(
          "'getBoundingClientRect' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillMouseEventData'))
      Module['fillMouseEventData'] = function () {
        abort(
          "'fillMouseEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerMouseEventCallback'))
      Module['registerMouseEventCallback'] = function () {
        abort(
          "'registerMouseEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerWheelEventCallback'))
      Module['registerWheelEventCallback'] = function () {
        abort(
          "'registerWheelEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerUiEventCallback'))
      Module['registerUiEventCallback'] = function () {
        abort(
          "'registerUiEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerFocusEventCallback'))
      Module['registerFocusEventCallback'] = function () {
        abort(
          "'registerFocusEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillDeviceOrientationEventData'))
      Module['fillDeviceOrientationEventData'] = function () {
        abort(
          "'fillDeviceOrientationEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerDeviceOrientationEventCallback'))
      Module['registerDeviceOrientationEventCallback'] = function () {
        abort(
          "'registerDeviceOrientationEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillDeviceMotionEventData'))
      Module['fillDeviceMotionEventData'] = function () {
        abort(
          "'fillDeviceMotionEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerDeviceMotionEventCallback'))
      Module['registerDeviceMotionEventCallback'] = function () {
        abort(
          "'registerDeviceMotionEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'screenOrientation'))
      Module['screenOrientation'] = function () {
        abort("'screenOrientation' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillOrientationChangeEventData'))
      Module['fillOrientationChangeEventData'] = function () {
        abort(
          "'fillOrientationChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerOrientationChangeEventCallback'))
      Module['registerOrientationChangeEventCallback'] = function () {
        abort(
          "'registerOrientationChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillFullscreenChangeEventData'))
      Module['fillFullscreenChangeEventData'] = function () {
        abort(
          "'fillFullscreenChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerFullscreenChangeEventCallback'))
      Module['registerFullscreenChangeEventCallback'] = function () {
        abort(
          "'registerFullscreenChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerRestoreOldStyle'))
      Module['registerRestoreOldStyle'] = function () {
        abort(
          "'registerRestoreOldStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'hideEverythingExceptGivenElement'))
      Module['hideEverythingExceptGivenElement'] = function () {
        abort(
          "'hideEverythingExceptGivenElement' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'restoreHiddenElements'))
      Module['restoreHiddenElements'] = function () {
        abort(
          "'restoreHiddenElements' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setLetterbox'))
      Module['setLetterbox'] = function () {
        abort("'setLetterbox' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'currentFullscreenStrategy'))
      Module['currentFullscreenStrategy'] = function () {
        abort(
          "'currentFullscreenStrategy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'restoreOldWindowedStyle'))
      Module['restoreOldWindowedStyle'] = function () {
        abort(
          "'restoreOldWindowedStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'softFullscreenResizeWebGLRenderTarget'))
      Module['softFullscreenResizeWebGLRenderTarget'] = function () {
        abort(
          "'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'doRequestFullscreen'))
      Module['doRequestFullscreen'] = function () {
        abort(
          "'doRequestFullscreen' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillPointerlockChangeEventData'))
      Module['fillPointerlockChangeEventData'] = function () {
        abort(
          "'fillPointerlockChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerPointerlockChangeEventCallback'))
      Module['registerPointerlockChangeEventCallback'] = function () {
        abort(
          "'registerPointerlockChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerPointerlockErrorEventCallback'))
      Module['registerPointerlockErrorEventCallback'] = function () {
        abort(
          "'registerPointerlockErrorEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'requestPointerLock'))
      Module['requestPointerLock'] = function () {
        abort(
          "'requestPointerLock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillVisibilityChangeEventData'))
      Module['fillVisibilityChangeEventData'] = function () {
        abort(
          "'fillVisibilityChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerVisibilityChangeEventCallback'))
      Module['registerVisibilityChangeEventCallback'] = function () {
        abort(
          "'registerVisibilityChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerTouchEventCallback'))
      Module['registerTouchEventCallback'] = function () {
        abort(
          "'registerTouchEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillGamepadEventData'))
      Module['fillGamepadEventData'] = function () {
        abort(
          "'fillGamepadEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerGamepadEventCallback'))
      Module['registerGamepadEventCallback'] = function () {
        abort(
          "'registerGamepadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerBeforeUnloadEventCallback'))
      Module['registerBeforeUnloadEventCallback'] = function () {
        abort(
          "'registerBeforeUnloadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'fillBatteryEventData'))
      Module['fillBatteryEventData'] = function () {
        abort(
          "'fillBatteryEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'battery'))
      Module['battery'] = function () {
        abort("'battery' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerBatteryEventCallback'))
      Module['registerBatteryEventCallback'] = function () {
        abort(
          "'registerBatteryEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setCanvasElementSize'))
      Module['setCanvasElementSize'] = function () {
        abort(
          "'setCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getCanvasElementSize'))
      Module['getCanvasElementSize'] = function () {
        abort(
          "'getCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'polyfillSetImmediate'))
      Module['polyfillSetImmediate'] = function () {
        abort(
          "'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'demangle'))
      Module['demangle'] = function () {
        abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'demangleAll'))
      Module['demangleAll'] = function () {
        abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'jsStackTrace'))
      Module['jsStackTrace'] = function () {
        abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stackTrace'))
      Module['stackTrace'] = function () {
        abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getEnvStrings'))
      Module['getEnvStrings'] = function () {
        abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'checkWasiClock'))
      Module['checkWasiClock'] = function () {
        abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeI53ToI64'))
      Module['writeI53ToI64'] = function () {
        abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeI53ToI64Clamped'))
      Module['writeI53ToI64Clamped'] = function () {
        abort(
          "'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeI53ToI64Signaling'))
      Module['writeI53ToI64Signaling'] = function () {
        abort(
          "'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeI53ToU64Clamped'))
      Module['writeI53ToU64Clamped'] = function () {
        abort(
          "'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeI53ToU64Signaling'))
      Module['writeI53ToU64Signaling'] = function () {
        abort(
          "'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'readI53FromI64'))
      Module['readI53FromI64'] = function () {
        abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'readI53FromU64'))
      Module['readI53FromU64'] = function () {
        abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'convertI32PairToI53'))
      Module['convertI32PairToI53'] = function () {
        abort(
          "'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'convertU32PairToI53'))
      Module['convertU32PairToI53'] = function () {
        abort(
          "'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'uncaughtExceptionCount'))
      Module['uncaughtExceptionCount'] = function () {
        abort(
          "'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'exceptionLast'))
      Module['exceptionLast'] = function () {
        abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'exceptionCaught'))
      Module['exceptionCaught'] = function () {
        abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ExceptionInfoAttrs'))
      Module['ExceptionInfoAttrs'] = function () {
        abort(
          "'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ExceptionInfo'))
      Module['ExceptionInfo'] = function () {
        abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'CatchInfo'))
      Module['CatchInfo'] = function () {
        abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'exception_addRef'))
      Module['exception_addRef'] = function () {
        abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'exception_decRef'))
      Module['exception_decRef'] = function () {
        abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'Browser'))
      Module['Browser'] = function () {
        abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'funcWrappers'))
      Module['funcWrappers'] = function () {
        abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getFuncWrapper'))
      Module['getFuncWrapper'] = function () {
        abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setMainLoop'))
      Module['setMainLoop'] = function () {
        abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'FS'))
      Module['FS'] = function () {
        abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'mmapAlloc'))
      Module['mmapAlloc'] = function () {
        abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'MEMFS'))
      Module['MEMFS'] = function () {
        abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'TTY'))
      Module['TTY'] = function () {
        abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'PIPEFS'))
      Module['PIPEFS'] = function () {
        abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SOCKFS'))
      Module['SOCKFS'] = function () {
        abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, '_setNetworkCallback'))
      Module['_setNetworkCallback'] = function () {
        abort(
          "'_setNetworkCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'tempFixedLengthArray'))
      Module['tempFixedLengthArray'] = function () {
        abort(
          "'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'miniTempWebGLFloatBuffers'))
      Module['miniTempWebGLFloatBuffers'] = function () {
        abort(
          "'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'heapObjectForWebGLType'))
      Module['heapObjectForWebGLType'] = function () {
        abort(
          "'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'heapAccessShiftForWebGLHeap'))
      Module['heapAccessShiftForWebGLHeap'] = function () {
        abort(
          "'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'GL'))
      Module['GL'] = function () {
        abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emscriptenWebGLGet'))
      Module['emscriptenWebGLGet'] = function () {
        abort(
          "'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'computeUnpackAlignedImageSize'))
      Module['computeUnpackAlignedImageSize'] = function () {
        abort(
          "'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emscriptenWebGLGetTexPixelData'))
      Module['emscriptenWebGLGetTexPixelData'] = function () {
        abort(
          "'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emscriptenWebGLGetUniform'))
      Module['emscriptenWebGLGetUniform'] = function () {
        abort(
          "'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emscriptenWebGLGetVertexAttrib'))
      Module['emscriptenWebGLGetVertexAttrib'] = function () {
        abort(
          "'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'writeGLArray'))
      Module['writeGLArray'] = function () {
        abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'AL'))
      Module['AL'] = function () {
        abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SDL_unicode'))
      Module['SDL_unicode'] = function () {
        abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SDL_ttfContext'))
      Module['SDL_ttfContext'] = function () {
        abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SDL_audio'))
      Module['SDL_audio'] = function () {
        abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SDL'))
      Module['SDL'] = function () {
        abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'SDL_gfx'))
      Module['SDL_gfx'] = function () {
        abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'GLUT'))
      Module['GLUT'] = function () {
        abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'EGL'))
      Module['EGL'] = function () {
        abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'GLFW_Window'))
      Module['GLFW_Window'] = function () {
        abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'GLFW'))
      Module['GLFW'] = function () {
        abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'GLEW'))
      Module['GLEW'] = function () {
        abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'IDBStore'))
      Module['IDBStore'] = function () {
        abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'runAndAbortIfError'))
      Module['runAndAbortIfError'] = function () {
        abort(
          "'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emval_handle_array'))
      Module['emval_handle_array'] = function () {
        abort(
          "'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emval_free_list'))
      Module['emval_free_list'] = function () {
        abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emval_symbols'))
      Module['emval_symbols'] = function () {
        abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'init_emval'))
      Module['init_emval'] = function () {
        abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'count_emval_handles'))
      Module['count_emval_handles'] = function () {
        abort(
          "'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'get_first_emval'))
      Module['get_first_emval'] = function () {
        abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getStringOrSymbol'))
      Module['getStringOrSymbol'] = function () {
        abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'requireHandle'))
      Module['requireHandle'] = function () {
        abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emval_newers'))
      Module['emval_newers'] = function () {
        abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'craftEmvalAllocator'))
      Module['craftEmvalAllocator'] = function () {
        abort(
          "'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emval_get_global'))
      Module['emval_get_global'] = function () {
        abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'emval_methodCallers'))
      Module['emval_methodCallers'] = function () {
        abort(
          "'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'InternalError'))
      Module['InternalError'] = function () {
        abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'BindingError'))
      Module['BindingError'] = function () {
        abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'UnboundTypeError'))
      Module['UnboundTypeError'] = function () {
        abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'PureVirtualError'))
      Module['PureVirtualError'] = function () {
        abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'init_embind'))
      Module['init_embind'] = function () {
        abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'throwInternalError'))
      Module['throwInternalError'] = function () {
        abort(
          "'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'throwBindingError'))
      Module['throwBindingError'] = function () {
        abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'throwUnboundTypeError'))
      Module['throwUnboundTypeError'] = function () {
        abort(
          "'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ensureOverloadTable'))
      Module['ensureOverloadTable'] = function () {
        abort(
          "'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'exposePublicSymbol'))
      Module['exposePublicSymbol'] = function () {
        abort(
          "'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'replacePublicSymbol'))
      Module['replacePublicSymbol'] = function () {
        abort(
          "'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'extendError'))
      Module['extendError'] = function () {
        abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'createNamedFunction'))
      Module['createNamedFunction'] = function () {
        abort(
          "'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registeredInstances'))
      Module['registeredInstances'] = function () {
        abort(
          "'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getBasestPointer'))
      Module['getBasestPointer'] = function () {
        abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerInheritedInstance'))
      Module['registerInheritedInstance'] = function () {
        abort(
          "'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'unregisterInheritedInstance'))
      Module['unregisterInheritedInstance'] = function () {
        abort(
          "'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getInheritedInstance'))
      Module['getInheritedInstance'] = function () {
        abort(
          "'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getInheritedInstanceCount'))
      Module['getInheritedInstanceCount'] = function () {
        abort(
          "'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getLiveInheritedInstances'))
      Module['getLiveInheritedInstances'] = function () {
        abort(
          "'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registeredTypes'))
      Module['registeredTypes'] = function () {
        abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'awaitingDependencies'))
      Module['awaitingDependencies'] = function () {
        abort(
          "'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'typeDependencies'))
      Module['typeDependencies'] = function () {
        abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registeredPointers'))
      Module['registeredPointers'] = function () {
        abort(
          "'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'registerType'))
      Module['registerType'] = function () {
        abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'whenDependentTypesAreResolved'))
      Module['whenDependentTypesAreResolved'] = function () {
        abort(
          "'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'embind_charCodes'))
      Module['embind_charCodes'] = function () {
        abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'embind_init_charCodes'))
      Module['embind_init_charCodes'] = function () {
        abort(
          "'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'readLatin1String'))
      Module['readLatin1String'] = function () {
        abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getTypeName'))
      Module['getTypeName'] = function () {
        abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'heap32VectorToArray'))
      Module['heap32VectorToArray'] = function () {
        abort(
          "'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'requireRegisteredType'))
      Module['requireRegisteredType'] = function () {
        abort(
          "'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'getShiftFromSize'))
      Module['getShiftFromSize'] = function () {
        abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'integerReadValueFromPointer'))
      Module['integerReadValueFromPointer'] = function () {
        abort(
          "'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'enumReadValueFromPointer'))
      Module['enumReadValueFromPointer'] = function () {
        abort(
          "'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'floatReadValueFromPointer'))
      Module['floatReadValueFromPointer'] = function () {
        abort(
          "'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'simpleReadValueFromPointer'))
      Module['simpleReadValueFromPointer'] = function () {
        abort(
          "'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'runDestructors'))
      Module['runDestructors'] = function () {
        abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'new_'))
      Module['new_'] = function () {
        abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'craftInvokerFunction'))
      Module['craftInvokerFunction'] = function () {
        abort(
          "'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'embind__requireFunction'))
      Module['embind__requireFunction'] = function () {
        abort(
          "'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'tupleRegistrations'))
      Module['tupleRegistrations'] = function () {
        abort(
          "'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'structRegistrations'))
      Module['structRegistrations'] = function () {
        abort(
          "'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'genericPointerToWireType'))
      Module['genericPointerToWireType'] = function () {
        abort(
          "'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'constNoSmartPtrRawPointerToWireType'))
      Module['constNoSmartPtrRawPointerToWireType'] = function () {
        abort(
          "'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'nonConstNoSmartPtrRawPointerToWireType'))
      Module['nonConstNoSmartPtrRawPointerToWireType'] = function () {
        abort(
          "'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'init_RegisteredPointer'))
      Module['init_RegisteredPointer'] = function () {
        abort(
          "'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'RegisteredPointer'))
      Module['RegisteredPointer'] = function () {
        abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'RegisteredPointer_getPointee'))
      Module['RegisteredPointer_getPointee'] = function () {
        abort(
          "'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'RegisteredPointer_destructor'))
      Module['RegisteredPointer_destructor'] = function () {
        abort(
          "'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'RegisteredPointer_deleteObject'))
      Module['RegisteredPointer_deleteObject'] = function () {
        abort(
          "'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'RegisteredPointer_fromWireType'))
      Module['RegisteredPointer_fromWireType'] = function () {
        abort(
          "'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'runDestructor'))
      Module['runDestructor'] = function () {
        abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'releaseClassHandle'))
      Module['releaseClassHandle'] = function () {
        abort(
          "'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'finalizationGroup'))
      Module['finalizationGroup'] = function () {
        abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'detachFinalizer_deps'))
      Module['detachFinalizer_deps'] = function () {
        abort(
          "'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'detachFinalizer'))
      Module['detachFinalizer'] = function () {
        abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'attachFinalizer'))
      Module['attachFinalizer'] = function () {
        abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'makeClassHandle'))
      Module['makeClassHandle'] = function () {
        abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'init_ClassHandle'))
      Module['init_ClassHandle'] = function () {
        abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ClassHandle'))
      Module['ClassHandle'] = function () {
        abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ClassHandle_isAliasOf'))
      Module['ClassHandle_isAliasOf'] = function () {
        abort(
          "'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'throwInstanceAlreadyDeleted'))
      Module['throwInstanceAlreadyDeleted'] = function () {
        abort(
          "'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ClassHandle_clone'))
      Module['ClassHandle_clone'] = function () {
        abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ClassHandle_delete'))
      Module['ClassHandle_delete'] = function () {
        abort(
          "'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'deletionQueue'))
      Module['deletionQueue'] = function () {
        abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ClassHandle_isDeleted'))
      Module['ClassHandle_isDeleted'] = function () {
        abort(
          "'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ClassHandle_deleteLater'))
      Module['ClassHandle_deleteLater'] = function () {
        abort(
          "'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'flushPendingDeletes'))
      Module['flushPendingDeletes'] = function () {
        abort(
          "'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'delayFunction'))
      Module['delayFunction'] = function () {
        abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'setDelayFunction'))
      Module['setDelayFunction'] = function () {
        abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'RegisteredClass'))
      Module['RegisteredClass'] = function () {
        abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'shallowCopyInternalPointer'))
      Module['shallowCopyInternalPointer'] = function () {
        abort(
          "'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'downcastPointer'))
      Module['downcastPointer'] = function () {
        abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'upcastPointer'))
      Module['upcastPointer'] = function () {
        abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'validateThis'))
      Module['validateThis'] = function () {
        abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'char_0'))
      Module['char_0'] = function () {
        abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'char_9'))
      Module['char_9'] = function () {
        abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'makeLegalFunctionName'))
      Module['makeLegalFunctionName'] = function () {
        abort(
          "'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'warnOnce'))
      Module['warnOnce'] = function () {
        abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stackSave'))
      Module['stackSave'] = function () {
        abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stackRestore'))
      Module['stackRestore'] = function () {
        abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stackAlloc'))
      Module['stackAlloc'] = function () {
        abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'AsciiToString'))
      Module['AsciiToString'] = function () {
        abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stringToAscii'))
      Module['stringToAscii'] = function () {
        abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'UTF16ToString'))
      Module['UTF16ToString'] = function () {
        abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF16'))
      Module['stringToUTF16'] = function () {
        abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'lengthBytesUTF16'))
      Module['lengthBytesUTF16'] = function () {
        abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'UTF32ToString'))
      Module['UTF32ToString'] = function () {
        abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF32'))
      Module['stringToUTF32'] = function () {
        abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'lengthBytesUTF32'))
      Module['lengthBytesUTF32'] = function () {
        abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'allocateUTF8'))
      Module['allocateUTF8'] = function () {
        abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'allocateUTF8OnStack'))
      Module['allocateUTF8OnStack'] = function () {
        abort(
          "'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    Module['writeStackCookie'] = writeStackCookie;
    Module['checkStackCookie'] = checkStackCookie;
    if (!Object.getOwnPropertyDescriptor(Module, 'intArrayFromBase64'))
      Module['intArrayFromBase64'] = function () {
        abort(
          "'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
        );
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'tryParseAsDataURI'))
      Module['tryParseAsDataURI'] = function () {
        abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
      };
    if (!Object.getOwnPropertyDescriptor(Module, 'ALLOC_NORMAL'))
      Object.defineProperty(Module, 'ALLOC_NORMAL', {
        configurable: true,
        get: function () {
          abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
        }
      });
    if (!Object.getOwnPropertyDescriptor(Module, 'ALLOC_STACK'))
      Object.defineProperty(Module, 'ALLOC_STACK', {
        configurable: true,
        get: function () {
          abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
        }
      });

    var calledRun;

    /**
     * @constructor
     * @this {ExitStatus}
     */
    function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

    var calledMain = false;

    dependenciesFulfilled = function runCaller() {
      // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
      if (!calledRun) run();
      if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
    };

    function stackCheckInit() {
      // This is normally called automatically during __wasm_call_ctors but need to
      // get these values before even running any of the ctors so we call it redundantly
      // here.
      // TODO(sbc): Move writeStackCookie to native to to avoid this.
      _emscripten_stack_init();
      writeStackCookie();
    }

    /** @type {function(Array=)} */
    function run(args) {
      args = args || arguments_;

      if (runDependencies > 0) {
        return;
      }

      stackCheckInit();

      preRun();

      // a preRun added a dependency, run will be called later
      if (runDependencies > 0) {
        return;
      }

      function doRun() {
        // run may have just been called through dependencies being fulfilled just in this very frame,
        // or while the async setStatus time below was happening
        if (calledRun) return;
        calledRun = true;
        Module['calledRun'] = true;

        if (ABORT) return;

        initRuntime();

        preMain();

        readyPromiseResolve(Module);
        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

        assert(
          !Module['_main'],
          'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]'
        );

        postRun();
      }

      if (Module['setStatus']) {
        Module['setStatus']('Running...');
        setTimeout(function () {
          setTimeout(function () {
            Module['setStatus']('');
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
      checkStackCookie();
    }
    Module['run'] = run;

    function checkUnflushedContent() {
      // Compiler settings do not allow exiting the runtime, so flushing
      // the streams is not possible. but in ASSERTIONS mode we check
      // if there was something to flush, and if so tell the user they
      // should request that the runtime be exitable.
      // Normally we would not even include flush() at all, but in ASSERTIONS
      // builds we do so just for this check, and here we see if there is any
      // content to flush, that is, we check if there would have been
      // something a non-ASSERTIONS build would have not seen.
      // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
      // mode (which has its own special function for this; otherwise, all
      // the code is inside libc)
      var oldOut = out;
      var oldErr = err;
      var has = false;
      out = err = function (x) {
        has = true;
      };
      try {
        // it doesn't matter if it fails
        var flush = Module['_fflush'];
        if (flush) flush(0);
        // also flush in the JS FS layer
        ['stdout', 'stderr'].forEach(function (name) {
          var info = FS.analyzePath('/dev/' + name);
          if (!info) return;
          var stream = info.object;
          var rdev = stream.rdev;
          var tty = TTY.ttys[rdev];
          if (tty && tty.output && tty.output.length) {
            has = true;
          }
        });
      } catch (e) {}
      out = oldOut;
      err = oldErr;
      if (has) {
        warnOnce(
          'stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.'
        );
      }
    }

    /** @param {boolean|number=} implicit */
    function exit(status, implicit) {
      EXITSTATUS = status;

      checkUnflushedContent();

      // if this is just main exit-ing implicitly, and the status is 0, then we
      // don't need to do anything here and can just leave. if the status is
      // non-zero, though, then we need to report it.
      // (we may have warned about this earlier, if a situation justifies doing so)
      if (implicit && keepRuntimeAlive() && status === 0) {
        return;
      }

      if (keepRuntimeAlive()) {
        // if exit() was called, we may warn the user if the runtime isn't actually being shut down
        if (!implicit) {
          var msg =
            'program exited (with status: ' +
            status +
            '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
          readyPromiseReject(msg);
          err(msg);
        }
      } else {
        exitRuntime();

        if (Module['onExit']) Module['onExit'](status);

        ABORT = true;
      }

      quit_(status, new ExitStatus(status));
    }

    if (Module['preInit']) {
      if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
      while (Module['preInit'].length > 0) {
        Module['preInit'].pop()();
      }
    }

    run();

    return Module.ready;
  };
})();
if (typeof exports === 'object' && typeof module === 'object') module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function () {
    return Module;
  });
else if (typeof exports === 'object') exports['Module'] = Module;
